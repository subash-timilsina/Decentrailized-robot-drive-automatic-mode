
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00001ede  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  0080020c  0080020c  00001f7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000363e  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017a3  00000000  00000000  000058de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019d6  00000000  00000000  00007081  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  00008a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001478  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015f7  00000000  00000000  0000a748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000bd3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	08 c2       	rjmp	.+1040   	; 0x416 <__vector_1>
       6:	00 00       	nop
       8:	4a c2       	rjmp	.+1172   	; 0x49e <__vector_2>
       a:	00 00       	nop
       c:	7f c2       	rjmp	.+1278   	; 0x50c <__vector_3>
       e:	00 00       	nop
      10:	b4 c2       	rjmp	.+1384   	; 0x57a <__vector_4>
      12:	00 00       	nop
      14:	20 c3       	rjmp	.+1600   	; 0x656 <__vector_5>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_9>
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c6       	rjmp	.+3352   	; 0xd7e <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	86 c6       	rjmp	.+3340   	; 0xd9e <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0d c3       	rjmp	.+1562   	; 0x6c4 <__vector_42>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	78 c6       	rjmp	.+3312   	; 0xdbe <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	82 c6       	rjmp	.+3332   	; 0xdde <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	b1 03       	fmuls	r19, r17

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ee ed       	ldi	r30, 0xDE	; 222
      fe:	fe e1       	ldi	r31, 0x1E	; 30
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ac 30       	cpi	r26, 0x0C	; 12
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	ac e0       	ldi	r26, 0x0C	; 12
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 3f       	cpi	r26, 0xFB	; 251
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	e8 d3       	rcall	.+2000   	; 0x912 <main>
     142:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z10drive_initv>:
 
 
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
	 pidflag = false; 
     154:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <pidflag>
	 for(id=0;id<4;id++)
     158:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <id+0x1>
     15c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <id>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 velocity_motor[id] = 0;
     164:	9c 01       	movw	r18, r24
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	f9 01       	movw	r30, r18
     16c:	e2 55       	subi	r30, 0x52	; 82
     16e:	fd 4f       	sbci	r31, 0xFD	; 253
     170:	11 82       	std	Z+1, r1	; 0x01
     172:	10 82       	st	Z, r1
		 velocity_robot[id] = 0;
     174:	f9 01       	movw	r30, r18
     176:	ea 55       	subi	r30, 0x5A	; 90
     178:	fd 4f       	sbci	r31, 0xFD	; 253
     17a:	11 82       	std	Z+1, r1	; 0x01
     17c:	10 82       	st	Z, r1
		 m[id].Initialise(id+1);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	68 0f       	add	r22, r24
     182:	86 56       	subi	r24, 0x66	; 102
     184:	9d 4f       	sbci	r25, 0xFD	; 253
     186:	31 d5       	rcall	.+2658   	; 0xbea <_ZN5Motor10InitialiseEh>
		 e[id].Initialise(id+1);
     188:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     18c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	68 0f       	add	r22, r24
     194:	9c 01       	movw	r18, r24
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	8a 58       	subi	r24, 0x8A	; 138
     1a8:	9d 4f       	sbci	r25, 0xFD	; 253
     1aa:	63 d3       	rcall	.+1734   	; 0x872 <_ZN7Encoder10InitialiseEh>
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
     1ac:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     1b0:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     1b4:	9c 01       	movw	r18, r24
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f5 e8       	ldi	r31, 0x85	; 133
     1ce:	cf 2e       	mov	r12, r31
     1d0:	fb ee       	ldi	r31, 0xEB	; 235
     1d2:	df 2e       	mov	r13, r31
     1d4:	f1 e5       	ldi	r31, 0x51	; 81
     1d6:	ef 2e       	mov	r14, r31
     1d8:	ff e3       	ldi	r31, 0x3F	; 63
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	98 01       	movw	r18, r16
     1e4:	4c e5       	ldi	r20, 0x5C	; 92
     1e6:	5f e8       	ldi	r21, 0x8F	; 143
     1e8:	6a e1       	ldi	r22, 0x1A	; 26
     1ea:	70 e4       	ldi	r23, 0x40	; 64
     1ec:	84 5f       	subi	r24, 0xF4	; 244
     1ee:	9d 4f       	sbci	r25, 0xFD	; 253
     1f0:	0a d5       	rcall	.+2580   	; 0xc06 <_ZN3PID7Set_PidEfff>
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
	 pidflag = false; 
	 for(id=0;id<4;id++)
     1f2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     1f6:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     200:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     204:	84 30       	cpi	r24, 0x04	; 4
     206:	91 05       	cpc	r25, r1
     208:	0c f4       	brge	.+2      	; 0x20c <_Z10drive_initv+0xc4>
     20a:	ac cf       	rjmp	.-168    	; 0x164 <_Z10drive_initv+0x1c>
		 velocity_robot[id] = 0;
		 m[id].Initialise(id+1);
		 e[id].Initialise(id+1);
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
	 }
	 ex.Initialise(1);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	81 e7       	ldi	r24, 0x71	; 113
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	6e d3       	rcall	.+1756   	; 0x8f0 <_ZN12FreeWheelEnc10InitialiseEh>
	 ey.Initialise(2);
     214:	62 e0       	ldi	r22, 0x02	; 2
     216:	8c e6       	ldi	r24, 0x6C	; 108
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	6a d3       	rcall	.+1748   	; 0x8f0 <_ZN12FreeWheelEnc10InitialiseEh>
     21c:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter_motor+0x1>
	 counter_motor = 0;
     220:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <counter_motor>
     224:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <count_the_motor>
	 count_the_motor = false;
     228:	1f 91       	pop	r17
 }
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	08 95       	ret

00000236 <_Z24calculate_wheel_velocityv>:
     236:	8f 92       	push	r8
 
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ce ea       	ldi	r28, 0xAE	; 174
     24e:	d2 e0       	ldi	r29, 0x02	; 2
     250:	0f 2e       	mov	r0, r31
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	cf 2e       	mov	r12, r31
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	df 2e       	mov	r13, r31
     25a:	f0 2d       	mov	r31, r0
     25c:	0f 2e       	mov	r0, r31
     25e:	f6 eb       	ldi	r31, 0xB6	; 182
     260:	8f 2e       	mov	r8, r31
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	9f 2e       	mov	r9, r31
     266:	f0 2d       	mov	r31, r0
	  for(id=0;id<4;id++)
     268:	7e 01       	movw	r14, r28
     26a:	6c ea       	ldi	r22, 0xAC	; 172
     26c:	72 e0       	ldi	r23, 0x02	; 2
     26e:	57 01       	movw	r10, r14
     270:	e6 ea       	ldi	r30, 0xA6	; 166
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	d6 01       	movw	r26, r12
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
		  {
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
     27a:	41 91       	ld	r20, Z+
     27c:	51 91       	ld	r21, Z+
     27e:	1d 91       	ld	r17, X+
     280:	14 03       	mulsu	r17, r20
     282:	90 01       	movw	r18, r0
     284:	15 9f       	mul	r17, r21
     286:	30 0d       	add	r19, r0
     288:	11 24       	eor	r1, r1
     28a:	82 0f       	add	r24, r18
     28c:	93 1f       	adc	r25, r19
  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
     28e:	e6 17       	cp	r30, r22
     290:	f7 07       	cpc	r31, r23
     292:	99 f7       	brne	.-26     	; 0x27a <_Z24calculate_wheel_velocityv+0x44>
     294:	f5 01       	movw	r30, r10
     296:	91 83       	std	Z+1, r25	; 0x01
     298:	80 83       	st	Z, r24
     29a:	f2 e0       	ldi	r31, 0x02	; 2
     29c:	ef 0e       	add	r14, r31
     29e:	f1 1c       	adc	r15, r1
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	c8 0e       	add	r12, r24
     2a4:	d1 1c       	adc	r13, r1
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
     2a6:	e8 14       	cp	r14, r8
     2a8:	f9 04       	cpc	r15, r9
     2aa:	09 f7       	brne	.-62     	; 0x26e <_Z24calculate_wheel_velocityv+0x38>
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <jd+0x1>
     2b4:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <jd>
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fe e9       	ldi	r31, 0x9E	; 158
     2bc:	cf 2e       	mov	r12, r31
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	df 2e       	mov	r13, r31
     2c2:	f0 2d       	mov	r31, r0
     2c4:	0f 2e       	mov	r0, r31
     2c6:	fc e0       	ldi	r31, 0x0C	; 12
     2c8:	ef 2e       	mov	r14, r31
     2ca:	f2 e0       	ldi	r31, 0x02	; 2
     2cc:	ff 2e       	mov	r15, r31
     2ce:	f0 2d       	mov	r31, r0
		  
	  }
	  
	  for(id=0;id<4;id++)
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
     2d0:	69 91       	ld	r22, Y+
     2d2:	79 91       	ld	r23, Y+
     2d4:	07 2e       	mov	r0, r23
     2d6:	00 0c       	add	r0, r0
     2d8:	88 0b       	sbc	r24, r24
     2da:	99 0b       	sbc	r25, r25
     2dc:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__floatsisf>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	4b ee       	ldi	r20, 0xEB	; 235
     2e6:	53 e4       	ldi	r21, 0x43	; 67
     2e8:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <__divsf3>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4a ea       	ldi	r20, 0xAA	; 170
     2f2:	52 e4       	ldi	r21, 0x42	; 66
     2f4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     2f8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     2fc:	f6 01       	movw	r30, r12
     2fe:	61 93       	st	Z+, r22
     300:	71 93       	st	Z+, r23
     302:	6f 01       	movw	r12, r30
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     304:	f7 01       	movw	r30, r14
     306:	75 87       	std	Z+13, r23	; 0x0d
     308:	64 87       	std	Z+12, r22	; 0x0c
     30a:	f8 e1       	ldi	r31, 0x18	; 24
     30c:	ef 0e       	add	r14, r31
     30e:	f1 1c       	adc	r15, r1
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
		  }
		  
	  }
	  
	  for(id=0;id<4;id++)
     310:	c8 15       	cp	r28, r8
     312:	d9 05       	cpc	r29, r9
     314:	e9 f6       	brne	.-70     	; 0x2d0 <_Z24calculate_wheel_velocityv+0x9a>
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     31e:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
		  p[id].Set_SP(ocr_motor[id]);
	  }
	  
  }
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	9f 90       	pop	r9
     336:	8f 90       	pop	r8
     338:	08 95       	ret

0000033a <_Z21update_wheel_velocityv>:
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
     33a:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <pidflag>
     33e:	88 23       	and	r24, r24
     340:	c9 f1       	breq	.+114    	; 0x3b4 <_Z21update_wheel_velocityv+0x7a>
		{
			for(id = 0; id<4 ; id++)
     342:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <id+0x1>
     346:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <id>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
	public:
	Encoder():speed(0),pprcount(0){};
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
     34e:	fc 01       	movw	r30, r24
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	e8 0f       	add	r30, r24
     35e:	f9 1f       	adc	r31, r25
     360:	ea 58       	subi	r30, 0x8A	; 138
     362:	fd 4f       	sbci	r31, 0xFD	; 253
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
     364:	61 81       	ldd	r22, Z+1	; 0x01
     366:	72 81       	ldd	r23, Z+2	; 0x02
     368:	9c 01       	movw	r18, r24
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	84 5f       	subi	r24, 0xF4	; 244
     380:	9d 4f       	sbci	r25, 0xFD	; 253
     382:	5b d4       	rcall	.+2230   	; 0xc3a <_ZN3PID7ComputeEi>
     384:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fixsfsi>
     388:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <id>
     38c:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <id+0x1>
     390:	c9 01       	movw	r24, r18
     392:	86 56       	subi	r24, 0x66	; 102
     394:	9d 4f       	sbci	r25, 0xFD	; 253
     396:	ee d3       	rcall	.+2012   	; 0xb74 <_ZN5Motor11SetOcrValueEi>
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
		{
			for(id = 0; id<4 ; id++)
     398:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     39c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     3a6:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	91 05       	cpc	r25, r1
     3ae:	7c f2       	brlt	.-98     	; 0x34e <_Z21update_wheel_velocityv+0x14>
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
			}
			pidflag = false;
     3b0:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <pidflag>
     3b4:	08 95       	ret

000003b6 <_Z20reset_robot_velocityv>:

void reset_robot_velocity()
{
	for(id = 0; id<4 ; id++)
	{
		 velocity_robot[id] = 0;	//reset the robot velocities
     3b6:	e6 ea       	ldi	r30, 0xA6	; 166
     3b8:	f2 e0       	ldi	r31, 0x02	; 2
     3ba:	11 82       	std	Z+1, r1	; 0x01
     3bc:	10 82       	st	Z, r1
     3be:	13 82       	std	Z+3, r1	; 0x03
     3c0:	12 82       	std	Z+2, r1	; 0x02
     3c2:	15 82       	std	Z+5, r1	; 0x05
     3c4:	14 82       	std	Z+4, r1	; 0x04
     3c6:	17 82       	std	Z+7, r1	; 0x07
     3c8:	16 82       	std	Z+6, r1	; 0x06
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     3d2:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     3d6:	08 95       	ret

000003d8 <_Z12reset_motorsv>:
	}
}

void reset_motors()
{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	ae ea       	ldi	r26, 0xAE	; 174
     3de:	b2 e0       	ldi	r27, 0x02	; 2
     3e0:	c6 ea       	ldi	r28, 0xA6	; 166
     3e2:	d2 e0       	ldi	r29, 0x02	; 2
     3e4:	ec e0       	ldi	r30, 0x0C	; 12
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	86 eb       	ldi	r24, 0xB6	; 182
     3ea:	92 e0       	ldi	r25, 0x02	; 2
	for(id = 0; id<4 ; id++)
	{
		velocity_motor[id] = 0;
     3ec:	1d 92       	st	X+, r1
     3ee:	1d 92       	st	X+, r1
		velocity_robot[id] = 0;
     3f0:	19 92       	st	Y+, r1
     3f2:	19 92       	st	Y+, r1
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
		inline void  reset_output(){cv = 0;};
     3f4:	14 8a       	std	Z+20, r1	; 0x14
     3f6:	15 8a       	std	Z+21, r1	; 0x15
     3f8:	16 8a       	std	Z+22, r1	; 0x16
     3fa:	17 8a       	std	Z+23, r1	; 0x17
     3fc:	78 96       	adiw	r30, 0x18	; 24
	}
}

void reset_motors()
{
	for(id = 0; id<4 ; id++)
     3fe:	a8 17       	cp	r26, r24
     400:	b9 07       	cpc	r27, r25
     402:	a1 f7       	brne	.-24     	; 0x3ec <_Z12reset_motorsv+0x14>
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     40c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
	{
		velocity_motor[id] = 0;
		velocity_robot[id] = 0;
		p[id].reset_output();
	}
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <__vector_1>:
/*********************************************************************Motors encoders interrupts*****************************************************************/

// motor orientation is alternate so channel a and channel b in two sides are different.

ISR(INT_VECT1)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	0b b6       	in	r0, 0x3b	; 59
     422:	0f 92       	push	r0
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	if(bit_is_clear(ENCODER1_CHAPORTPIN,ENCODER1_CHBPIN))		
     430:	00 99       	sbic	0x00, 0	; 0
     432:	0e c0       	rjmp	.+28     	; 0x450 <__vector_1+0x3a>
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     434:	e6 e7       	ldi	r30, 0x76	; 118
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	85 81       	ldd	r24, Z+5	; 0x05
     43a:	96 81       	ldd	r25, Z+6	; 0x06
     43c:	a7 81       	ldd	r26, Z+7	; 0x07
     43e:	b0 85       	ldd	r27, Z+8	; 0x08
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	a1 1d       	adc	r26, r1
     444:	b1 1d       	adc	r27, r1
     446:	85 83       	std	Z+5, r24	; 0x05
     448:	96 83       	std	Z+6, r25	; 0x06
     44a:	a7 83       	std	Z+7, r26	; 0x07
     44c:	b0 87       	std	Z+8, r27	; 0x08
     44e:	0d c0       	rjmp	.+26     	; 0x46a <__vector_1+0x54>
	inline void dcrCount(){pprcount--;};
     450:	e6 e7       	ldi	r30, 0x76	; 118
     452:	f2 e0       	ldi	r31, 0x02	; 2
     454:	85 81       	ldd	r24, Z+5	; 0x05
     456:	96 81       	ldd	r25, Z+6	; 0x06
     458:	a7 81       	ldd	r26, Z+7	; 0x07
     45a:	b0 85       	ldd	r27, Z+8	; 0x08
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	a1 09       	sbc	r26, r1
     460:	b1 09       	sbc	r27, r1
     462:	85 83       	std	Z+5, r24	; 0x05
     464:	96 83       	std	Z+6, r25	; 0x06
     466:	a7 83       	std	Z+7, r26	; 0x07
     468:	b0 87       	std	Z+8, r27	; 0x08
	{
		e[0].incCount();
	}
	else
		e[0].dcrCount();
	if(count_the_motor)
     46a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <count_the_motor>
     46e:	88 23       	and	r24, r24
     470:	49 f0       	breq	.+18     	; 0x484 <__vector_1+0x6e>
		counter_motor++;
     472:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <counter_motor>
     476:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <counter_motor+0x1>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <counter_motor+0x1>
     480:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <counter_motor>
}
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	0f 90       	pop	r0
     492:	0b be       	out	0x3b, r0	; 59
     494:	0f 90       	pop	r0
     496:	0f be       	out	0x3f, r0	; 63
     498:	0f 90       	pop	r0
     49a:	1f 90       	pop	r1
     49c:	18 95       	reti

0000049e <__vector_2>:



ISR(INT_VECT2)
{
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	0b b6       	in	r0, 0x3b	; 59
     4aa:	0f 92       	push	r0
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
	if(bit_is_clear(ENCODER2_CHAPORTPIN,ENCODER2_CHBPIN))		
     4b8:	02 99       	sbic	0x00, 2	; 0
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__vector_2+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     4bc:	e6 e7       	ldi	r30, 0x76	; 118
     4be:	f2 e0       	ldi	r31, 0x02	; 2
     4c0:	86 85       	ldd	r24, Z+14	; 0x0e
     4c2:	97 85       	ldd	r25, Z+15	; 0x0f
     4c4:	a0 89       	ldd	r26, Z+16	; 0x10
     4c6:	b1 89       	ldd	r27, Z+17	; 0x11
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a1 1d       	adc	r26, r1
     4cc:	b1 1d       	adc	r27, r1
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	97 87       	std	Z+15, r25	; 0x0f
     4d2:	a0 8b       	std	Z+16, r26	; 0x10
     4d4:	b1 8b       	std	Z+17, r27	; 0x11
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__vector_2+0x54>
	inline void dcrCount(){pprcount--;};
     4d8:	e6 e7       	ldi	r30, 0x76	; 118
     4da:	f2 e0       	ldi	r31, 0x02	; 2
     4dc:	86 85       	ldd	r24, Z+14	; 0x0e
     4de:	97 85       	ldd	r25, Z+15	; 0x0f
     4e0:	a0 89       	ldd	r26, Z+16	; 0x10
     4e2:	b1 89       	ldd	r27, Z+17	; 0x11
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	a1 09       	sbc	r26, r1
     4e8:	b1 09       	sbc	r27, r1
     4ea:	86 87       	std	Z+14, r24	; 0x0e
     4ec:	97 87       	std	Z+15, r25	; 0x0f
     4ee:	a0 8b       	std	Z+16, r26	; 0x10
     4f0:	b1 8b       	std	Z+17, r27	; 0x11
		e[1].incCount();
	}
	else
		e[1].dcrCount();
	
}
     4f2:	ff 91       	pop	r31
     4f4:	ef 91       	pop	r30
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_3>:
ISR(INT_VECT3)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	af 93       	push	r26
     520:	bf 93       	push	r27
     522:	ef 93       	push	r30
     524:	ff 93       	push	r31
	if(bit_is_set(ENCODER3_CHAPORTPIN,ENCODER3_CHBPIN))		
     526:	04 9b       	sbis	0x00, 4	; 0
     528:	0e c0       	rjmp	.+28     	; 0x546 <__vector_3+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     52a:	e6 e7       	ldi	r30, 0x76	; 118
     52c:	f2 e0       	ldi	r31, 0x02	; 2
     52e:	87 89       	ldd	r24, Z+23	; 0x17
     530:	90 8d       	ldd	r25, Z+24	; 0x18
     532:	a1 8d       	ldd	r26, Z+25	; 0x19
     534:	b2 8d       	ldd	r27, Z+26	; 0x1a
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	a1 1d       	adc	r26, r1
     53a:	b1 1d       	adc	r27, r1
     53c:	87 8b       	std	Z+23, r24	; 0x17
     53e:	90 8f       	std	Z+24, r25	; 0x18
     540:	a1 8f       	std	Z+25, r26	; 0x19
     542:	b2 8f       	std	Z+26, r27	; 0x1a
     544:	0d c0       	rjmp	.+26     	; 0x560 <__vector_3+0x54>
	inline void dcrCount(){pprcount--;};
     546:	e6 e7       	ldi	r30, 0x76	; 118
     548:	f2 e0       	ldi	r31, 0x02	; 2
     54a:	87 89       	ldd	r24, Z+23	; 0x17
     54c:	90 8d       	ldd	r25, Z+24	; 0x18
     54e:	a1 8d       	ldd	r26, Z+25	; 0x19
     550:	b2 8d       	ldd	r27, Z+26	; 0x1a
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	a1 09       	sbc	r26, r1
     556:	b1 09       	sbc	r27, r1
     558:	87 8b       	std	Z+23, r24	; 0x17
     55a:	90 8f       	std	Z+24, r25	; 0x18
     55c:	a1 8f       	std	Z+25, r26	; 0x19
     55e:	b2 8f       	std	Z+26, r27	; 0x1a
	{
		e[2].incCount();
	}
	else
		e[2].dcrCount();
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <__vector_4>:

ISR(INT_VECT4)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	0b b6       	in	r0, 0x3b	; 59
     586:	0f 92       	push	r0
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
	if(bit_is_set(ENCODER4_CHAPORTPIN,ENCODER4_CHBPIN))		
     594:	06 9b       	sbis	0x00, 6	; 0
     596:	0e c0       	rjmp	.+28     	; 0x5b4 <__vector_4+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     598:	e6 e7       	ldi	r30, 0x76	; 118
     59a:	f2 e0       	ldi	r31, 0x02	; 2
     59c:	80 a1       	ldd	r24, Z+32	; 0x20
     59e:	91 a1       	ldd	r25, Z+33	; 0x21
     5a0:	a2 a1       	ldd	r26, Z+34	; 0x22
     5a2:	b3 a1       	ldd	r27, Z+35	; 0x23
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	a1 1d       	adc	r26, r1
     5a8:	b1 1d       	adc	r27, r1
     5aa:	80 a3       	std	Z+32, r24	; 0x20
     5ac:	91 a3       	std	Z+33, r25	; 0x21
     5ae:	a2 a3       	std	Z+34, r26	; 0x22
     5b0:	b3 a3       	std	Z+35, r27	; 0x23
     5b2:	0d c0       	rjmp	.+26     	; 0x5ce <__vector_4+0x54>
	inline void dcrCount(){pprcount--;};
     5b4:	e6 e7       	ldi	r30, 0x76	; 118
     5b6:	f2 e0       	ldi	r31, 0x02	; 2
     5b8:	80 a1       	ldd	r24, Z+32	; 0x20
     5ba:	91 a1       	ldd	r25, Z+33	; 0x21
     5bc:	a2 a1       	ldd	r26, Z+34	; 0x22
     5be:	b3 a1       	ldd	r27, Z+35	; 0x23
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	a1 09       	sbc	r26, r1
     5c4:	b1 09       	sbc	r27, r1
     5c6:	80 a3       	std	Z+32, r24	; 0x20
     5c8:	91 a3       	std	Z+33, r25	; 0x21
     5ca:	a2 a3       	std	Z+34, r26	; 0x22
     5cc:	b3 a3       	std	Z+35, r27	; 0x23
	{
		e[3].incCount();
	}
	else
		e[3].dcrCount();
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_6>:

/*******************************************************************************Free Wheel Encoders Interrupts****************************************************/

ISR(INT_VECTX)
{
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	0b b6       	in	r0, 0x3b	; 59
     5f4:	0f 92       	push	r0
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	if(bit_is_clear(ENCODERX_CHAPORTPIN,ENCODERX_CHBPIN))
     602:	37 99       	sbic	0x06, 7	; 6
     604:	0e c0       	rjmp	.+28     	; 0x622 <__vector_6+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     606:	e1 e7       	ldi	r30, 0x71	; 113
     608:	f2 e0       	ldi	r31, 0x02	; 2
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	92 81       	ldd	r25, Z+2	; 0x02
     60e:	a3 81       	ldd	r26, Z+3	; 0x03
     610:	b4 81       	ldd	r27, Z+4	; 0x04
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	a1 1d       	adc	r26, r1
     616:	b1 1d       	adc	r27, r1
     618:	81 83       	std	Z+1, r24	; 0x01
     61a:	92 83       	std	Z+2, r25	; 0x02
     61c:	a3 83       	std	Z+3, r26	; 0x03
     61e:	b4 83       	std	Z+4, r27	; 0x04
     620:	0d c0       	rjmp	.+26     	; 0x63c <__vector_6+0x54>
		inline void dcrCount(){encdistance--;};
     622:	e1 e7       	ldi	r30, 0x71	; 113
     624:	f2 e0       	ldi	r31, 0x02	; 2
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	92 81       	ldd	r25, Z+2	; 0x02
     62a:	a3 81       	ldd	r26, Z+3	; 0x03
     62c:	b4 81       	ldd	r27, Z+4	; 0x04
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	a1 09       	sbc	r26, r1
     632:	b1 09       	sbc	r27, r1
     634:	81 83       	std	Z+1, r24	; 0x01
     636:	92 83       	std	Z+2, r25	; 0x02
     638:	a3 83       	std	Z+3, r26	; 0x03
     63a:	b4 83       	std	Z+4, r27	; 0x04
	{
		ex.incCount();
	}
	else
		ex.dcrCount();
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	0f 90       	pop	r0
     64a:	0b be       	out	0x3b, r0	; 59
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <__vector_5>:


ISR(INT_VECTY)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
	if(bit_is_clear(ENCODERY_CHAPORTPIN,ENCODERY_CHBPIN))
     670:	35 99       	sbic	0x06, 5	; 6
     672:	0e c0       	rjmp	.+28     	; 0x690 <__vector_5+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     674:	ec e6       	ldi	r30, 0x6C	; 108
     676:	f2 e0       	ldi	r31, 0x02	; 2
     678:	81 81       	ldd	r24, Z+1	; 0x01
     67a:	92 81       	ldd	r25, Z+2	; 0x02
     67c:	a3 81       	ldd	r26, Z+3	; 0x03
     67e:	b4 81       	ldd	r27, Z+4	; 0x04
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	81 83       	std	Z+1, r24	; 0x01
     688:	92 83       	std	Z+2, r25	; 0x02
     68a:	a3 83       	std	Z+3, r26	; 0x03
     68c:	b4 83       	std	Z+4, r27	; 0x04
     68e:	0d c0       	rjmp	.+26     	; 0x6aa <__vector_5+0x54>
		inline void dcrCount(){encdistance--;};
     690:	ec e6       	ldi	r30, 0x6C	; 108
     692:	f2 e0       	ldi	r31, 0x02	; 2
     694:	81 81       	ldd	r24, Z+1	; 0x01
     696:	92 81       	ldd	r25, Z+2	; 0x02
     698:	a3 81       	ldd	r26, Z+3	; 0x03
     69a:	b4 81       	ldd	r27, Z+4	; 0x04
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	a1 09       	sbc	r26, r1
     6a0:	b1 09       	sbc	r27, r1
     6a2:	81 83       	std	Z+1, r24	; 0x01
     6a4:	92 83       	std	Z+2, r25	; 0x02
     6a6:	a3 83       	std	Z+3, r26	; 0x03
     6a8:	b4 83       	std	Z+4, r27	; 0x04
	{
		ey.incCount();
	}
	else
		ey.dcrCount();
}
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	bf 91       	pop	r27
     6b0:	af 91       	pop	r26
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_42>:

 /*********************************************************PID computation timer*****************************************************/

 ISR(TIMER4_COMPA_vect)
 {
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	0b b6       	in	r0, 0x3b	; 59
     6d0:	0f 92       	push	r0
     6d2:	8f 93       	push	r24
     6d4:	9f 93       	push	r25
     6d6:	af 93       	push	r26
     6d8:	bf 93       	push	r27
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;};	//keep in timer compare match
     6de:	e6 e7       	ldi	r30, 0x76	; 118
     6e0:	f2 e0       	ldi	r31, 0x02	; 2
     6e2:	85 81       	ldd	r24, Z+5	; 0x05
     6e4:	96 81       	ldd	r25, Z+6	; 0x06
     6e6:	a7 81       	ldd	r26, Z+7	; 0x07
     6e8:	b0 85       	ldd	r27, Z+8	; 0x08
     6ea:	81 83       	std	Z+1, r24	; 0x01
     6ec:	92 83       	std	Z+2, r25	; 0x02
     6ee:	a3 83       	std	Z+3, r26	; 0x03
     6f0:	b4 83       	std	Z+4, r27	; 0x04
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	16 82       	std	Z+6, r1	; 0x06
     6f6:	17 82       	std	Z+7, r1	; 0x07
     6f8:	10 86       	std	Z+8, r1	; 0x08
     6fa:	86 85       	ldd	r24, Z+14	; 0x0e
     6fc:	97 85       	ldd	r25, Z+15	; 0x0f
     6fe:	a0 89       	ldd	r26, Z+16	; 0x10
     700:	b1 89       	ldd	r27, Z+17	; 0x11
     702:	82 87       	std	Z+10, r24	; 0x0a
     704:	93 87       	std	Z+11, r25	; 0x0b
     706:	a4 87       	std	Z+12, r26	; 0x0c
     708:	b5 87       	std	Z+13, r27	; 0x0d
     70a:	16 86       	std	Z+14, r1	; 0x0e
     70c:	17 86       	std	Z+15, r1	; 0x0f
     70e:	10 8a       	std	Z+16, r1	; 0x10
     710:	11 8a       	std	Z+17, r1	; 0x11
     712:	87 89       	ldd	r24, Z+23	; 0x17
     714:	90 8d       	ldd	r25, Z+24	; 0x18
     716:	a1 8d       	ldd	r26, Z+25	; 0x19
     718:	b2 8d       	ldd	r27, Z+26	; 0x1a
     71a:	83 8b       	std	Z+19, r24	; 0x13
     71c:	94 8b       	std	Z+20, r25	; 0x14
     71e:	a5 8b       	std	Z+21, r26	; 0x15
     720:	b6 8b       	std	Z+22, r27	; 0x16
     722:	17 8a       	std	Z+23, r1	; 0x17
     724:	10 8e       	std	Z+24, r1	; 0x18
     726:	11 8e       	std	Z+25, r1	; 0x19
     728:	12 8e       	std	Z+26, r1	; 0x1a
     72a:	80 a1       	ldd	r24, Z+32	; 0x20
     72c:	91 a1       	ldd	r25, Z+33	; 0x21
     72e:	a2 a1       	ldd	r26, Z+34	; 0x22
     730:	b3 a1       	ldd	r27, Z+35	; 0x23
     732:	84 8f       	std	Z+28, r24	; 0x1c
     734:	95 8f       	std	Z+29, r25	; 0x1d
     736:	a6 8f       	std	Z+30, r26	; 0x1e
     738:	b7 8f       	std	Z+31, r27	; 0x1f
     73a:	10 a2       	std	Z+32, r1	; 0x20
     73c:	11 a2       	std	Z+33, r1	; 0x21
     73e:	12 a2       	std	Z+34, r1	; 0x22
     740:	13 a2       	std	Z+35, r1	; 0x23
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <pidflag>
 }
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	bf 91       	pop	r27
     74e:	af 91       	pop	r26
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	0f 90       	pop	r0
     756:	0b be       	out	0x3b, r0	; 59
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <_GLOBAL__sub_I_coupling_matrix>:
     762:	e6 e7       	ldi	r30, 0x76	; 118
     764:	f2 e0       	ldi	r31, 0x02	; 2
     766:	8a e9       	ldi	r24, 0x9A	; 154
     768:	92 e0       	ldi	r25, 0x02	; 2
	private:
		uint8_t no;
		long int speed;
		long int pprcount;
	public:
	Encoder():speed(0),pprcount(0){};
     76a:	11 82       	std	Z+1, r1	; 0x01
     76c:	12 82       	std	Z+2, r1	; 0x02
     76e:	13 82       	std	Z+3, r1	; 0x03
     770:	14 82       	std	Z+4, r1	; 0x04
     772:	15 82       	std	Z+5, r1	; 0x05
     774:	16 82       	std	Z+6, r1	; 0x06
     776:	17 82       	std	Z+7, r1	; 0x07
     778:	10 86       	std	Z+8, r1	; 0x08
     77a:	39 96       	adiw	r30, 0x09	; 9
 int id,jd;					//global loop counter 
 int velocity_motor[4];		//individual motor velocity
 int velocity_robot[4];		//robot velocity
 int ocr_motor[4];			//motor ocr 
 Motor m[4];				//base motors
 Encoder e[4];				// base motors encoders
     77c:	e8 17       	cp	r30, r24
     77e:	f9 07       	cpc	r31, r25
     780:	a1 f7       	brne	.-24     	; 0x76a <_GLOBAL__sub_I_coupling_matrix+0x8>
	
		private:
		uint8_t no;
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
     782:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     786:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     78a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     78e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
     792:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
     796:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
     79a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
     79e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
     7a2:	ec e0       	ldi	r30, 0x0C	; 12
     7a4:	f2 e0       	ldi	r31, 0x02	; 2
     7a6:	8c e6       	ldi	r24, 0x6C	; 108
     7a8:	92 e0       	ldi	r25, 0x02	; 2
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     7aa:	10 82       	st	Z, r1
     7ac:	11 82       	std	Z+1, r1	; 0x01
     7ae:	12 82       	std	Z+2, r1	; 0x02
     7b0:	13 82       	std	Z+3, r1	; 0x03
     7b2:	14 82       	std	Z+4, r1	; 0x04
     7b4:	15 82       	std	Z+5, r1	; 0x05
     7b6:	16 82       	std	Z+6, r1	; 0x06
     7b8:	17 82       	std	Z+7, r1	; 0x07
     7ba:	10 86       	std	Z+8, r1	; 0x08
     7bc:	11 86       	std	Z+9, r1	; 0x09
     7be:	12 86       	std	Z+10, r1	; 0x0a
     7c0:	13 86       	std	Z+11, r1	; 0x0b
     7c2:	15 86       	std	Z+13, r1	; 0x0d
     7c4:	14 86       	std	Z+12, r1	; 0x0c
     7c6:	17 86       	std	Z+15, r1	; 0x0f
     7c8:	16 86       	std	Z+14, r1	; 0x0e
     7ca:	11 8a       	std	Z+17, r1	; 0x11
     7cc:	10 8a       	std	Z+16, r1	; 0x10
     7ce:	13 8a       	std	Z+19, r1	; 0x13
     7d0:	12 8a       	std	Z+18, r1	; 0x12
     7d2:	78 96       	adiw	r30, 0x18	; 24
 FreeWheelEnc ex,ey;		//Free wheel encoders
 PID p[4];					//pid for the base motors
     7d4:	e8 17       	cp	r30, r24
     7d6:	f9 07       	cpc	r31, r25
     7d8:	41 f7       	brne	.-48     	; 0x7aa <_GLOBAL__sub_I_coupling_matrix+0x48>
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
 }
     7da:	08 95       	ret

000007dc <_ZN7Encoder15Init_InterruptsEv>:
	Init_Timers();
}

void Encoder::Init_Interrupts()
{
	sei();
     7dc:	78 94       	sei
	if(no==1)
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	49 f4       	brne	.+18     	; 0x7f8 <_ZN7Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODER1_INT);
     7e6:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INT1_ISC1);	//falling edge
     7e8:	e9 e6       	ldi	r30, 0x69	; 105
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	82 60       	ori	r24, 0x02	; 2
     7f0:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER1_INT);		//setting INT pin
     7f2:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INT1_INTF);	    //clear int flag
     7f4:	e0 9a       	sbi	0x1c, 0	; 28
     7f6:	08 95       	ret
	}
	else if (no==2)
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	49 f4       	brne	.+18     	; 0x80e <_ZN7Encoder15Init_InterruptsEv+0x32>
	{
		EIMSK &= ~(1<<ENCODER2_INT);
     7fc:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INT2_ISC1);	//falling edge
     7fe:	e9 e6       	ldi	r30, 0x69	; 105
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	88 60       	ori	r24, 0x08	; 8
     806:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER2_INT);		//setting INT pin
     808:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INT2_INTF);	    //clear int flag
     80a:	e1 9a       	sbi	0x1c, 1	; 28
     80c:	08 95       	ret
	}
	else if (no==3)
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	49 f4       	brne	.+18     	; 0x824 <_ZN7Encoder15Init_InterruptsEv+0x48>
	{
		EIMSK &= ~(1<<ENCODER3_INT);
     812:	ea 98       	cbi	0x1d, 2	; 29
		EICRA |= (1<<INT3_ISC1);	//falling edge
     814:	e9 e6       	ldi	r30, 0x69	; 105
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER3_INT);		//setting INT pin
     81e:	ea 9a       	sbi	0x1d, 2	; 29
		EIFR |= (1<<INT3_INTF);	    //clear int flag
     820:	e2 9a       	sbi	0x1c, 2	; 28
     822:	08 95       	ret
	}
	else if (no==4)
     824:	84 30       	cpi	r24, 0x04	; 4
     826:	41 f4       	brne	.+16     	; 0x838 <_ZN7Encoder15Init_InterruptsEv+0x5c>
	{
		EIMSK &= ~(1<<ENCODER4_INT);
     828:	eb 98       	cbi	0x1d, 3	; 29
		EICRA |= (1<<INT4_ISC1);	//falling edge
     82a:	e9 e6       	ldi	r30, 0x69	; 105
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	80 68       	ori	r24, 0x80	; 128
     832:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER4_INT);		//setting INT pin
     834:	eb 9a       	sbi	0x1d, 3	; 29
		EIFR |= (1<<INT4_INTF);	    //clear int flag
     836:	e3 9a       	sbi	0x1c, 3	; 28
     838:	08 95       	ret

0000083a <_ZN7Encoder11Init_TimersEv>:
}

void Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     83a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     83e:	81 11       	cpse	r24, r1
     840:	17 c0       	rjmp	.+46     	; 0x870 <_ZN7Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     842:	e1 ea       	ldi	r30, 0xA1	; 161
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	8b 60       	ori	r24, 0x0B	; 11
     84a:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     84c:	e2 e7       	ldi	r30, 0x72	; 114
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     856:	8c e4       	ldi	r24, 0x4C	; 76
     858:	9d e1       	ldi	r25, 0x1D	; 29
     85a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     85e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     862:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     866:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     870:	08 95       	ret

00000872 <_ZN7Encoder10InitialiseEh>:


#include "Encoder.h"

void Encoder::Initialise(uint8_t x)
{	
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
	no = x;
     878:	68 83       	st	Y, r22
	if(no==1)
     87a:	61 30       	cpi	r22, 0x01	; 1
     87c:	29 f4       	brne	.+10     	; 0x888 <_ZN7Encoder10InitialiseEh+0x16>
	{
		INPUT(ENCODER1_CHANNELA);
     87e:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODER1_CHANNELB);
     880:	08 98       	cbi	0x01, 0	; 1
		SET(ENCODER1_CHANNELA);
     882:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODER1_CHANNELB);
     884:	10 9a       	sbi	0x02, 0	; 2
     886:	14 c0       	rjmp	.+40     	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==2)
     888:	62 30       	cpi	r22, 0x02	; 2
     88a:	29 f4       	brne	.+10     	; 0x896 <_ZN7Encoder10InitialiseEh+0x24>
	{
		INPUT(ENCODER2_CHANNELA);
     88c:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODER2_CHANNELB);
     88e:	0a 98       	cbi	0x01, 2	; 1
		SET(ENCODER2_CHANNELA);
     890:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODER2_CHANNELB);
     892:	12 9a       	sbi	0x02, 2	; 2
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if (no==3)
     896:	63 30       	cpi	r22, 0x03	; 3
     898:	29 f4       	brne	.+10     	; 0x8a4 <_ZN7Encoder10InitialiseEh+0x32>
	{
		INPUT(ENCODER3_CHANNELA);
     89a:	52 98       	cbi	0x0a, 2	; 10
		INPUT(ENCODER3_CHANNELB);
     89c:	0c 98       	cbi	0x01, 4	; 1
		SET(ENCODER3_CHANNELA);
     89e:	5a 9a       	sbi	0x0b, 2	; 11
		SET(ENCODER3_CHANNELB);
     8a0:	14 9a       	sbi	0x02, 4	; 2
     8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==4)
     8a4:	64 30       	cpi	r22, 0x04	; 4
     8a6:	21 f4       	brne	.+8      	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	{
		INPUT(ENCODER4_CHANNELA);
     8a8:	53 98       	cbi	0x0a, 3	; 10
		INPUT(ENCODER4_CHANNELB);
     8aa:	0e 98       	cbi	0x01, 6	; 1
		SET(ENCODER4_CHANNELA);
     8ac:	5b 9a       	sbi	0x0b, 3	; 11
		SET(ENCODER4_CHANNELB);
     8ae:	16 9a       	sbi	0x02, 6	; 2
	}
	Init_Interrupts();
     8b0:	ce 01       	movw	r24, r28
     8b2:	94 df       	rcall	.-216    	; 0x7dc <_ZN7Encoder15Init_InterruptsEv>
	Init_Timers();
     8b4:	ce 01       	movw	r24, r28
     8b6:	c1 df       	rcall	.-126    	; 0x83a <_ZN7Encoder11Init_TimersEv>
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <_ZN12FreeWheelEnc15Init_InterruptsEv>:
	Init_Interrupts();
}

void FreeWheelEnc::Init_Interrupts()
{
	if(no==1)
     8be:	fc 01       	movw	r30, r24
     8c0:	80 81       	ld	r24, Z
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	49 f4       	brne	.+18     	; 0x8d8 <_ZN12FreeWheelEnc15Init_InterruptsEv+0x1a>
	{
		EIMSK &= ~(1<<ENCODERX_INT);
     8c6:	ed 98       	cbi	0x1d, 5	; 29
		EICRB |= (1<<INTX_ISC1);	//falling edge
     8c8:	ea e6       	ldi	r30, 0x6A	; 106
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	88 60       	ori	r24, 0x08	; 8
     8d0:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERX_INT);		//setting INT pin
     8d2:	ed 9a       	sbi	0x1d, 5	; 29
		EIFR  |= (1<<INTX_INTF);	    //clear int flag
     8d4:	e5 9a       	sbi	0x1c, 5	; 28
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	}
	
	else if (no==2)
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	41 f4       	brne	.+16     	; 0x8ec <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	{
		EIMSK &= ~(1<<ENCODERY_INT);
     8dc:	ec 98       	cbi	0x1d, 4	; 29
		EICRB |= (1<<INTY_ISC1);	//falling edge
     8de:	ea e6       	ldi	r30, 0x6A	; 106
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	82 60       	ori	r24, 0x02	; 2
     8e6:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERY_INT);		//setting INT pin
     8e8:	ec 9a       	sbi	0x1d, 4	; 29
		EIFR |= (1<<INTY_INTF);	    //clear int flag
     8ea:	e4 9a       	sbi	0x1c, 4	; 28
	}
	sei();
     8ec:	78 94       	sei
     8ee:	08 95       	ret

000008f0 <_ZN12FreeWheelEnc10InitialiseEh>:

#include "FreeWheelEnc.h"

void FreeWheelEnc::Initialise(uint8_t x)
{
	no = x;
     8f0:	fc 01       	movw	r30, r24
     8f2:	60 83       	st	Z, r22
	if(no==1)
     8f4:	61 30       	cpi	r22, 0x01	; 1
     8f6:	29 f4       	brne	.+10     	; 0x902 <_ZN12FreeWheelEnc10InitialiseEh+0x12>
	{
		INPUT(ENCODERX_CHANNELA);
     8f8:	6d 98       	cbi	0x0d, 5	; 13
		INPUT(ENCODERX_CHANNELB);
     8fa:	3f 98       	cbi	0x07, 7	; 7
		SET(ENCODERX_CHANNELA);
     8fc:	75 9a       	sbi	0x0e, 5	; 14
		SET(ENCODERX_CHANNELB);
     8fe:	47 9a       	sbi	0x08, 7	; 8
     900:	06 c0       	rjmp	.+12     	; 0x90e <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	}
	else if(no==2)
     902:	62 30       	cpi	r22, 0x02	; 2
     904:	21 f4       	brne	.+8      	; 0x90e <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	{
		INPUT(ENCODERY_CHANNELA);
     906:	6c 98       	cbi	0x0d, 4	; 13
		INPUT(ENCODERY_CHANNELB);
     908:	3d 98       	cbi	0x07, 5	; 7
		SET(ENCODERY_CHANNELA);
     90a:	74 9a       	sbi	0x0e, 4	; 14
		SET(ENCODERY_CHANNELB);
     90c:	45 9a       	sbi	0x08, 5	; 8
	}
	Init_Interrupts();
     90e:	d7 cf       	rjmp	.-82     	; 0x8be <_ZN12FreeWheelEnc15Init_InterruptsEv>
     910:	08 95       	ret

00000912 <main>:
#include "ZoneNavigate.h"


int main(void)
{
	initUART0();
     912:	09 d2       	rcall	.+1042   	; 0xd26 <_Z9initUART0v>
	initUART2();
     914:	14 d2       	rcall	.+1064   	; 0xd3e <_Z9initUART2v>
	initUART3();
     916:	1f d2       	rcall	.+1086   	; 0xd56 <_Z9initUART3v>
	drive_init();
     918:	17 dc       	rcall	.-2002   	; 0x148 <_Z10drive_initv>
     91a:	75 d4       	rcall	.+2282   	; 0x1206 <_Z10init_slavev>
	init_slave();
     91c:	78 94       	sei
     91e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <auto_mode>
	sei();
    while (1) 
    {	
		if(auto_mode)
     922:	88 23       	and	r24, r24
			operate_slave_auto();
     924:	11 f0       	breq	.+4      	; 0x92a <main+0x18>
     926:	c0 d4       	rcall	.+2432   	; 0x12a8 <_Z18operate_slave_autov>
     928:	01 c0       	rjmp	.+2      	; 0x92c <main+0x1a>
		else
			operate_slave_manual();
     92a:	1c d3       	rcall	.+1592   	; 0xf64 <_Z20operate_slave_manualv>
     92c:	84 dc       	rcall	.-1784   	; 0x236 <_Z24calculate_wheel_velocityv>
			
		calculate_wheel_velocity();
     92e:	05 dd       	rcall	.-1526   	; 0x33a <_Z21update_wheel_velocityv>
     930:	f6 cf       	rjmp	.-20     	; 0x91e <main+0xc>

00000932 <_ZN5Motor7InitPWMEv>:
		update_wheel_velocity();
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
	initUART2();
	initUART3();
	drive_init();
	init_slave();
	sei();
    while (1) 
     936:	81 30       	cpi	r24, 0x01	; 1

}

void Motor::InitPWM()
{
	if (num==1)
     938:	f1 f4       	brne	.+60     	; 0x976 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     93a:	e7 e0       	ldi	r30, 0x07	; 7
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	80 81       	ld	r24, Z
     940:	82 60       	ori	r24, 0x02	; 2
     942:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     94a:	ea e0       	ldi	r30, 0x0A	; 10
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	80 81       	ld	r24, Z
     950:	88 60       	ori	r24, 0x08	; 8
     952:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     954:	e0 e2       	ldi	r30, 0x20	; 32
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	80 81       	ld	r24, Z
     95a:	82 68       	ori	r24, 0x82	; 130
     95c:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     95e:	e1 e2       	ldi	r30, 0x21	; 33
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	80 81       	ld	r24, Z
     964:	8a 61       	ori	r24, 0x1A	; 26
     966:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     968:	89 ef       	ldi	r24, 0xF9	; 249
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     970:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     974:	08 95       	ret
	}
	else if(num==2)
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	f1 f4       	brne	.+60     	; 0x9b6 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     97a:	e7 e0       	ldi	r30, 0x07	; 7
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	80 81       	ld	r24, Z
     980:	88 60       	ori	r24, 0x08	; 8
     982:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     984:	80 81       	ld	r24, Z
     986:	84 60       	ori	r24, 0x04	; 4
     988:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     98a:	ea e0       	ldi	r30, 0x0A	; 10
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	80 81       	ld	r24, Z
     990:	80 61       	ori	r24, 0x10	; 16
     992:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     994:	e0 e2       	ldi	r30, 0x20	; 32
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 81       	ld	r24, Z
     99a:	82 62       	ori	r24, 0x22	; 34
     99c:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     99e:	e1 e2       	ldi	r30, 0x21	; 33
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	80 81       	ld	r24, Z
     9a4:	8a 61       	ori	r24, 0x1A	; 26
     9a6:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     9a8:	89 ef       	ldi	r24, 0xF9	; 249
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     9b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     9b4:	08 95       	ret
	}
	else if(num==3)
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	f1 f4       	brne	.+60     	; 0x9f6 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     9ba:	e7 e0       	ldi	r30, 0x07	; 7
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	80 81       	ld	r24, Z
     9c0:	80 61       	ori	r24, 0x10	; 16
     9c2:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     9c4:	80 81       	ld	r24, Z
     9c6:	80 62       	ori	r24, 0x20	; 32
     9c8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     9ca:	ea e0       	ldi	r30, 0x0A	; 10
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	80 81       	ld	r24, Z
     9d0:	80 62       	ori	r24, 0x20	; 32
     9d2:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     9d4:	e0 e2       	ldi	r30, 0x20	; 32
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	80 81       	ld	r24, Z
     9da:	8a 60       	ori	r24, 0x0A	; 10
     9dc:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     9de:	e1 e2       	ldi	r30, 0x21	; 33
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
     9e2:	80 81       	ld	r24, Z
     9e4:	8a 61       	ori	r24, 0x1A	; 26
     9e6:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     9f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     9f4:	08 95       	ret
	} 
	else if(num==4)
     9f6:	84 30       	cpi	r24, 0x04	; 4
     9f8:	c9 f4       	brne	.+50     	; 0xa2c <_ZN5Motor7InitPWMEv+0xfa>
	{
		OUTPUT(DD_F4);
     9fa:	e7 e0       	ldi	r30, 0x07	; 7
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	80 81       	ld	r24, Z
     a00:	80 64       	ori	r24, 0x40	; 64
     a02:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     a04:	80 81       	ld	r24, Z
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     a0a:	6b 9a       	sbi	0x0d, 3	; 13

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     a0c:	e0 e9       	ldi	r30, 0x90	; 144
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	82 68       	ori	r24, 0x82	; 130
     a14:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     a16:	e1 e9       	ldi	r30, 0x91	; 145
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	8a 61       	ori	r24, 0x1A	; 26
     a1e:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     a20:	89 ef       	ldi	r24, 0xF9	; 249
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     a28:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     a2c:	08 95       	ret

00000a2e <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	91 f0       	breq	.+36     	; 0xa5a <_ZN5Motor19SetForwardDirectionEv+0x2c>
     a36:	18 f4       	brcc	.+6      	; 0xa3e <_ZN5Motor19SetForwardDirectionEv+0x10>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	31 f0       	breq	.+12     	; 0xa48 <_ZN5Motor19SetForwardDirectionEv+0x1a>
     a3c:	08 95       	ret
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	a9 f0       	breq	.+42     	; 0xa6c <_ZN5Motor19SetForwardDirectionEv+0x3e>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	e1 f0       	breq	.+56     	; 0xa7e <_ZN5Motor19SetForwardDirectionEv+0x50>
     a46:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     a48:	e8 e0       	ldi	r30, 0x08	; 8
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	80 81       	ld	r24, Z
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     a52:	80 81       	ld	r24, Z
     a54:	8e 7f       	andi	r24, 0xFE	; 254
     a56:	80 83       	st	Z, r24
			break;
     a58:	08 95       	ret
		case 2:
			SET		(DD_F2);
     a5a:	e8 e0       	ldi	r30, 0x08	; 8
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	80 81       	ld	r24, Z
     a60:	88 60       	ori	r24, 0x08	; 8
     a62:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     a64:	80 81       	ld	r24, Z
     a66:	8b 7f       	andi	r24, 0xFB	; 251
     a68:	80 83       	st	Z, r24
			break;
     a6a:	08 95       	ret
		case 3:
			SET		(DD_F3);
     a6c:	e8 e0       	ldi	r30, 0x08	; 8
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	80 81       	ld	r24, Z
     a72:	80 61       	ori	r24, 0x10	; 16
     a74:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     a76:	80 81       	ld	r24, Z
     a78:	8f 7d       	andi	r24, 0xDF	; 223
     a7a:	80 83       	st	Z, r24
			break;
     a7c:	08 95       	ret
		case 4:
			SET		(DD_F4);
     a7e:	e8 e0       	ldi	r30, 0x08	; 8
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	80 81       	ld	r24, Z
     a84:	80 64       	ori	r24, 0x40	; 64
     a86:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     a88:	80 81       	ld	r24, Z
     a8a:	8f 77       	andi	r24, 0x7F	; 127
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	91 f0       	breq	.+36     	; 0xabc <_ZN5Motor19SetReverseDirectionEv+0x2c>
     a98:	18 f4       	brcc	.+6      	; 0xaa0 <_ZN5Motor19SetReverseDirectionEv+0x10>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	31 f0       	breq	.+12     	; 0xaaa <_ZN5Motor19SetReverseDirectionEv+0x1a>
     a9e:	08 95       	ret
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	a9 f0       	breq	.+42     	; 0xace <_ZN5Motor19SetReverseDirectionEv+0x3e>
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	e1 f0       	breq	.+56     	; 0xae0 <_ZN5Motor19SetReverseDirectionEv+0x50>
     aa8:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     aaa:	e8 e0       	ldi	r30, 0x08	; 8
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	80 81       	ld	r24, Z
     ab0:	8d 7f       	andi	r24, 0xFD	; 253
     ab2:	80 83       	st	Z, r24
			SET		(DD_B1);
     ab4:	80 81       	ld	r24, Z
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 83       	st	Z, r24
			break;
     aba:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     abc:	e8 e0       	ldi	r30, 0x08	; 8
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	80 81       	ld	r24, Z
     ac2:	87 7f       	andi	r24, 0xF7	; 247
     ac4:	80 83       	st	Z, r24
			SET		(DD_B2);
     ac6:	80 81       	ld	r24, Z
     ac8:	84 60       	ori	r24, 0x04	; 4
     aca:	80 83       	st	Z, r24
			break;
     acc:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     ace:	e8 e0       	ldi	r30, 0x08	; 8
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	80 81       	ld	r24, Z
     ad4:	8f 7e       	andi	r24, 0xEF	; 239
     ad6:	80 83       	st	Z, r24
			SET		(DD_B3);
     ad8:	80 81       	ld	r24, Z
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	80 83       	st	Z, r24
			break;
     ade:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     ae0:	e8 e0       	ldi	r30, 0x08	; 8
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	80 81       	ld	r24, Z
     ae6:	8f 7b       	andi	r24, 0xBF	; 191
     ae8:	80 83       	st	Z, r24
			SET		(DD_B4);
     aea:	80 81       	ld	r24, Z
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	80 83       	st	Z, r24
     af0:	08 95       	ret

00000af2 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	b1 f0       	breq	.+44     	; 0xb26 <_ZN5Motor9StopMotorEv+0x34>
     afa:	18 f4       	brcc	.+6      	; 0xb02 <_ZN5Motor9StopMotorEv+0x10>
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	31 f0       	breq	.+12     	; 0xb0c <_ZN5Motor9StopMotorEv+0x1a>
     b00:	08 95       	ret
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	e9 f0       	breq	.+58     	; 0xb40 <_ZN5Motor9StopMotorEv+0x4e>
     b06:	84 30       	cpi	r24, 0x04	; 4
     b08:	41 f1       	breq	.+80     	; 0xb5a <_ZN5Motor9StopMotorEv+0x68>
     b0a:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     b0c:	e8 e0       	ldi	r30, 0x08	; 8
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	80 81       	ld	r24, Z
     b12:	8d 7f       	andi	r24, 0xFD	; 253
     b14:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     b16:	80 81       	ld	r24, Z
     b18:	8e 7f       	andi	r24, 0xFE	; 254
     b1a:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     b1c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     b20:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     b24:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     b26:	e8 e0       	ldi	r30, 0x08	; 8
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	80 81       	ld	r24, Z
     b2c:	87 7f       	andi	r24, 0xF7	; 247
     b2e:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     b30:	80 81       	ld	r24, Z
     b32:	8b 7f       	andi	r24, 0xFB	; 251
     b34:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     b36:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     b3a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     b3e:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     b40:	e8 e0       	ldi	r30, 0x08	; 8
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	80 81       	ld	r24, Z
     b46:	8f 7e       	andi	r24, 0xEF	; 239
     b48:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 7d       	andi	r24, 0xDF	; 223
     b4e:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     b50:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     b54:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     b58:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     b5a:	e8 e0       	ldi	r30, 0x08	; 8
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	80 81       	ld	r24, Z
     b60:	8f 7b       	andi	r24, 0xBF	; 191
     b62:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     b6a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b6e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     b72:	08 95       	ret

00000b74 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	8c 01       	movw	r16, r24
     b7e:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     b80:	1c 16       	cp	r1, r28
     b82:	1d 06       	cpc	r1, r29
     b84:	0c f4       	brge	.+2      	; 0xb88 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     b86:	53 df       	rcall	.-346    	; 0xa2e <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr < 0)
     b88:	dd 23       	and	r29, r29
     b8a:	2c f4       	brge	.+10     	; 0xb96 <_ZN5Motor11SetOcrValueEi+0x22>
	{
		 Ocr = -Ocr;
     b8c:	d1 95       	neg	r29
     b8e:	c1 95       	neg	r28
     b90:	d1 09       	sbc	r29, r1
		 SetReverseDirection();
     b92:	c8 01       	movw	r24, r16
     b94:	7d df       	rcall	.-262    	; 0xa90 <_ZN5Motor19SetReverseDirectionEv>
     b96:	ca 3f       	cpi	r28, 0xFA	; 250
     b98:	d1 05       	cpc	r29, r1
     b9a:	14 f0       	brlt	.+4      	; 0xba0 <_ZN5Motor11SetOcrValueEi+0x2c>
     b9c:	c9 ef       	ldi	r28, 0xF9	; 249
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if( Ocr > MAX_VALUE)
		Ocr = MAX_VALUE;

	switch(num)
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 81       	ld	r24, Z
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	71 f0       	breq	.+28     	; 0xbc4 <_ZN5Motor11SetOcrValueEi+0x50>
     ba8:	18 f4       	brcc	.+6      	; 0xbb0 <_ZN5Motor11SetOcrValueEi+0x3c>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	31 f0       	breq	.+12     	; 0xbba <_ZN5Motor11SetOcrValueEi+0x46>
     bae:	18 c0       	rjmp	.+48     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	69 f0       	breq	.+26     	; 0xbce <_ZN5Motor11SetOcrValueEi+0x5a>
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	81 f0       	breq	.+32     	; 0xbd8 <_ZN5Motor11SetOcrValueEi+0x64>
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
	{
		case 1:
			PWM_OCR1	= Ocr;
     bba:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     bbe:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 2:
			PWM_OCR2	= Ocr;
     bc4:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     bc8:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 3:
			PWM_OCR3	= Ocr;
     bce:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     bd2:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 4:
			PWM_OCR4	= Ocr;
     bd8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     bdc:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
	num = no;
     bf0:	68 83       	st	Y, r22
	InitPWM();
     bf2:	9f de       	rcall	.-706    	; 0x932 <_ZN5Motor7InitPWMEv>

	StopMotor();
     bf4:	ce 01       	movw	r24, r28
     bf6:	7d df       	rcall	.-262    	; 0xaf2 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	ce 01       	movw	r24, r28
     bfe:	ba df       	rcall	.-140    	; 0xb74 <_ZN5Motor11SetOcrValueEi>

}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <_ZN3PID7Set_PidEfff>:


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	fc 01       	movw	r30, r24
	kp = kP;
     c14:	40 83       	st	Z, r20
     c16:	51 83       	std	Z+1, r21	; 0x01
     c18:	62 83       	std	Z+2, r22	; 0x02
     c1a:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     c1c:	04 83       	std	Z+4, r16	; 0x04
     c1e:	15 83       	std	Z+5, r17	; 0x05
     c20:	26 83       	std	Z+6, r18	; 0x06
     c22:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     c24:	c0 86       	std	Z+8, r12	; 0x08
     c26:	d1 86       	std	Z+9, r13	; 0x09
     c28:	e2 86       	std	Z+10, r14	; 0x0a
     c2a:	f3 86       	std	Z+11, r15	; 0x0b
}
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	08 95       	ret

00000c3a <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	7b 01       	movw	r14, r22
	error = sp - input;
     c52:	6c 85       	ldd	r22, Y+12	; 0x0c
     c54:	7d 85       	ldd	r23, Y+13	; 0x0d
     c56:	8b 01       	movw	r16, r22
     c58:	0e 19       	sub	r16, r14
     c5a:	1f 09       	sbc	r17, r15
     c5c:	1f 87       	std	Y+15, r17	; 0x0f
     c5e:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     c60:	8a 89       	ldd	r24, Y+18	; 0x12
     c62:	9b 89       	ldd	r25, Y+19	; 0x13
     c64:	80 0f       	add	r24, r16
     c66:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     c68:	8e 37       	cpi	r24, 0x7E	; 126
     c6a:	91 05       	cpc	r25, r1
     c6c:	2c f0       	brlt	.+10     	; 0xc78 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     c6e:	8d e7       	ldi	r24, 0x7D	; 125
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9b 8b       	std	Y+19, r25	; 0x13
     c74:	8a 8b       	std	Y+18, r24	; 0x12
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     c78:	83 38       	cpi	r24, 0x83	; 131
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	92 07       	cpc	r25, r18
     c7e:	1c f0       	brlt	.+6      	; 0xc86 <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     c80:	9b 8b       	std	Y+19, r25	; 0x13
     c82:	8a 8b       	std	Y+18, r24	; 0x12
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     c86:	83 e8       	ldi	r24, 0x83	; 131
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	9b 8b       	std	Y+19, r25	; 0x13
     c8c:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     c8e:	6a 89       	ldd	r22, Y+18	; 0x12
     c90:	7b 89       	ldd	r23, Y+19	; 0x13
     c92:	07 2e       	mov	r0, r23
     c94:	00 0c       	add	r0, r0
     c96:	88 0b       	sbc	r24, r24
     c98:	99 0b       	sbc	r25, r25
     c9a:	e1 d7       	rcall	.+4034   	; 0x1c5e <__floatsisf>
     c9c:	2c 81       	ldd	r18, Y+4	; 0x04
     c9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ca0:	4e 81       	ldd	r20, Y+6	; 0x06
     ca2:	5f 81       	ldd	r21, Y+7	; 0x07
     ca4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     ca8:	4b 01       	movw	r8, r22
     caa:	5c 01       	movw	r10, r24
     cac:	b8 01       	movw	r22, r16
     cae:	11 0f       	add	r17, r17
     cb0:	88 0b       	sbc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	d4 d7       	rcall	.+4008   	; 0x1c5e <__floatsisf>
     cb6:	28 81       	ld	r18, Y
     cb8:	39 81       	ldd	r19, Y+1	; 0x01
     cba:	4a 81       	ldd	r20, Y+2	; 0x02
     cbc:	5b 81       	ldd	r21, Y+3	; 0x03
     cbe:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	c5 01       	movw	r24, r10
     cc8:	b4 01       	movw	r22, r8
     cca:	c6 d6       	rcall	.+3468   	; 0x1a58 <__addsf3>
     ccc:	4b 01       	movw	r8, r22
     cce:	5c 01       	movw	r10, r24
     cd0:	88 89       	ldd	r24, Y+16	; 0x10
     cd2:	99 89       	ldd	r25, Y+17	; 0x11
     cd4:	b7 01       	movw	r22, r14
     cd6:	68 1b       	sub	r22, r24
     cd8:	79 0b       	sbc	r23, r25
     cda:	07 2e       	mov	r0, r23
     cdc:	00 0c       	add	r0, r0
     cde:	88 0b       	sbc	r24, r24
     ce0:	99 0b       	sbc	r25, r25
     ce2:	bd d7       	rcall	.+3962   	; 0x1c5e <__floatsisf>
     ce4:	28 85       	ldd	r18, Y+8	; 0x08
     ce6:	39 85       	ldd	r19, Y+9	; 0x09
     ce8:	4a 85       	ldd	r20, Y+10	; 0x0a
     cea:	5b 85       	ldd	r21, Y+11	; 0x0b
     cec:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	c5 01       	movw	r24, r10
     cf6:	b4 01       	movw	r22, r8
     cf8:	ae d6       	rcall	.+3420   	; 0x1a56 <__subsf3>
     cfa:	2c 89       	ldd	r18, Y+20	; 0x14
     cfc:	3d 89       	ldd	r19, Y+21	; 0x15
     cfe:	4e 89       	ldd	r20, Y+22	; 0x16
     d00:	5f 89       	ldd	r21, Y+23	; 0x17
     d02:	aa d6       	rcall	.+3412   	; 0x1a58 <__addsf3>
     d04:	6c 8b       	std	Y+20, r22	; 0x14
     d06:	7d 8b       	std	Y+21, r23	; 0x15
     d08:	8e 8b       	std	Y+22, r24	; 0x16
     d0a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     d0c:	f9 8a       	std	Y+17, r15	; 0x11
     d0e:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	08 95       	ret

00000d26 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     d26:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     d2a:	87 e6       	ldi	r24, 0x67	; 103
     d2c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     d30:	88 e9       	ldi	r24, 0x98	; 152
     d32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     d3c:	08 95       	ret

00000d3e <_Z9initUART2v>:
     d3e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     d42:	87 e6       	ldi	r24, 0x67	; 103
     d44:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     d48:	88 e9       	ldi	r24, 0x98	; 152
     d4a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     d54:	08 95       	ret

00000d56 <_Z9initUART3v>:
     d56:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     d5a:	89 e1       	ldi	r24, 0x19	; 25
     d5c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     d60:	88 e9       	ldi	r24, 0x98	; 152
     d62:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     d66:	86 e0       	ldi	r24, 0x06	; 6
     d68:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     d6c:	08 95       	ret

00000d6e <_Z13UART3Transmith>:
     d6e:	e0 e3       	ldi	r30, 0x30	; 48
     d70:	f1 e0       	ldi	r31, 0x01	; 1
     d72:	90 81       	ld	r25, Z
     d74:	95 ff       	sbrs	r25, 5
     d76:	fd cf       	rjmp	.-6      	; 0xd72 <_Z13UART3Transmith+0x4>
     d78:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     d7c:	08 95       	ret

00000d7e <__vector_25>:

ISR(USART0_RX_vect)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	8f 93       	push	r24
	buffer=UDR0;
     d8a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     d8e:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <buffer>
}
     d92:	8f 91       	pop	r24
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_36>:

ISR(USART1_RX_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	8f 93       	push	r24
	buffer1=UDR1;
     daa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     dae:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <buffer1>
	
}
     db2:	8f 91       	pop	r24
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_51>:

ISR(USART2_RX_vect)
{
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	8f 93       	push	r24
	buffer2=UDR2;
     dca:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     dce:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <buffer2>
		
}
     dd2:	8f 91       	pop	r24
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <__vector_54>:


ISR(USART3_RX_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	0b b6       	in	r0, 0x3b	; 59
     dea:	0f 92       	push	r0
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
	buffer3=UDR3;
     df4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     df8:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <buffer3>
	if(rcvflag)
     dfc:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <rcvflag>
     e00:	99 23       	and	r25, r25
     e02:	89 f0       	breq	.+34     	; 0xe26 <__vector_54+0x48>
	{
		rcvdata[datacount] = buffer3;
     e04:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <_ZL9datacount>
     e08:	e9 2f       	mov	r30, r25
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ee 53       	subi	r30, 0x3E	; 62
     e0e:	fd 4f       	sbci	r31, 0xFD	; 253
     e10:	80 83       	st	Z, r24
		datacount++;
     e12:	9f 5f       	subi	r25, 0xFF	; 255
		if(datacount>3)
     e14:	94 30       	cpi	r25, 0x04	; 4
     e16:	18 f4       	brcc	.+6      	; 0xe1e <__vector_54+0x40>
{
	buffer3=UDR3;
	if(rcvflag)
	{
		rcvdata[datacount] = buffer3;
		datacount++;
     e18:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <_ZL9datacount>
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <__vector_54+0x48>
		if(datacount>3)
		{
			datacount=0;
     e1e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_ZL9datacount>
			rcvflag = false;
     e22:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <rcvflag>
		}
	}
	if(buffer3==START_BYTE_MANUAL)
     e26:	8d 3f       	cpi	r24, 0xFD	; 253
     e28:	31 f4       	brne	.+12     	; 0xe36 <__vector_54+0x58>
	{
		rcvflag = true;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <rcvflag>
		auto_mode = false;
     e30:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <auto_mode>
     e34:	07 c0       	rjmp	.+14     	; 0xe44 <__vector_54+0x66>
	}
	else if(buffer3 == START_BYTE_AUTO)
     e36:	8e 3f       	cpi	r24, 0xFE	; 254
     e38:	29 f4       	brne	.+10     	; 0xe44 <__vector_54+0x66>
	{
		rcvflag = true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <rcvflag>
		auto_mode = true;
     e40:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <auto_mode>
	}
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	0f 90       	pop	r0
     e4e:	0b be       	out	0x3b, r0	; 59
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <_Z15reset_auto_modev>:
	enable_robot_stop_interrupt();
}

void reset_auto_mode()
{
	current_location = Starting_Zone;
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <current_location>
	next_location = Starting_Zone;
     e60:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
	
	current_distance = SZONE;
     e64:	8a eb       	ldi	r24, 0xBA	; 186
     e66:	99 e0       	ldi	r25, 0x09	; 9
     e68:	a0 e0       	ldi	r26, 0x00	; 0
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <current_distance>
     e70:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <current_distance+0x1>
     e74:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <current_distance+0x2>
     e78:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <current_distance+0x3>
	next_distance = 0;
     e7c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <next_distance>
     e80:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <next_distance+0x1>
     e84:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_distance+0x2>
     e88:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <next_distance+0x3>
	
	DATA1 = 50;
     e8c:	e2 ec       	ldi	r30, 0xC2	; 194
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	82 e3       	ldi	r24, 0x32	; 50
     e92:	80 83       	st	Z, r24
	DATA2 = 50;
     e94:	81 83       	std	Z+1, r24	; 0x01
	DATA3 = 50;
     e96:	82 83       	std	Z+2, r24	; 0x02
		
	searching_rpm = SEARCH_RPM;
     e98:	8c e3       	ldi	r24, 0x3C	; 60
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <searching_rpm+0x1>
     ea0:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <searching_rpm>
	
	speed = 0;
     ea4:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <speed+0x1>
     ea8:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <speed>
	
	distance = 0;
     eac:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <distance>
     eb0:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <distance+0x1>
     eb4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <distance+0x2>
     eb8:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <distance+0x3>
	slopeup = 0;
     ebc:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <slopeup>
     ec0:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <slopeup+0x1>
     ec4:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <slopeup+0x2>
     ec8:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <slopeup+0x3>
	slopedown = 0;
     ecc:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <slopedown>
     ed0:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <slopedown+0x1>
     ed4:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <slopedown+0x2>
     ed8:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <slopedown+0x3>
	ramp_down_off_adj = RAMP_DOWN_OFFSET;
     edc:	89 e1       	ldi	r24, 0x19	; 25
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <ramp_down_off_adj+0x1>
     ee4:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <ramp_down_off_adj>
	ramp_up_dist = 0;
     ee8:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <ramp_up_dist>
     eec:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <ramp_up_dist+0x1>
     ef0:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <ramp_up_dist+0x2>
     ef4:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <ramp_up_dist+0x3>
	ramp_down_dist = 0;
     ef8:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <ramp_down_dist>
     efc:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <ramp_down_dist+0x1>
     f00:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <ramp_down_dist+0x2>
     f04:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <ramp_down_dist+0x3>
	calculated = false;
     f08:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <calculated>

	dir = 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <dir>
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
		inline void Reset_Distance(){encdistance = 0;}
     f12:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     f16:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     f1a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     f1e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
     f22:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
     f26:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
     f2a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
     f2e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
	
	ex.Reset_Distance();
	ey.Reset_Distance();
	
	moving = false;
     f32:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <moving>
	searching = false;
     f36:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <searching>
	pressed = false;
     f3a:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <pressed>
	Golden_Drop = false;
     f3e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <Golden_Drop>
	reset_auto = false;
     f42:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <reset_auto>
	give_shtcock = false;
     f46:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <give_shtcock>
	shift_robot = false;
     f4a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <shift_robot>
	rotate_robot = false;
     f4e:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <rotate_robot>
	go_after_rotate = false;
     f52:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <go_after_rotate>
	final_step = false;
     f56:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <final_step>
	stop_flag = false;
     f5a:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <stop_flag>
	prox_enb = false;
     f5e:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <prox_enb>
     f62:	08 95       	ret

00000f64 <_Z20operate_slave_manualv>:
}


void operate_slave_manual()
{
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
	velocity_robot[0] = (-(DATA1 - 50)/50.0)*MAX_RPM_XY;
     f70:	06 ea       	ldi	r16, 0xA6	; 166
     f72:	12 e0       	ldi	r17, 0x02	; 2
     f74:	0f 2e       	mov	r0, r31
     f76:	f2 ec       	ldi	r31, 0xC2	; 194
     f78:	ef 2e       	mov	r14, r31
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	ff 2e       	mov	r15, r31
     f7e:	f0 2d       	mov	r31, r0
     f80:	f7 01       	movw	r30, r14
     f82:	80 81       	ld	r24, Z
     f84:	c2 e3       	ldi	r28, 0x32	; 50
     f86:	d0 e0       	ldi	r29, 0x00	; 0
     f88:	be 01       	movw	r22, r28
     f8a:	68 1b       	sub	r22, r24
     f8c:	71 09       	sbc	r23, r1
     f8e:	07 2e       	mov	r0, r23
     f90:	00 0c       	add	r0, r0
     f92:	88 0b       	sbc	r24, r24
     f94:	99 0b       	sbc	r25, r25
     f96:	63 d6       	rcall	.+3270   	; 0x1c5e <__floatsisf>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	48 e4       	ldi	r20, 0x48	; 72
     f9e:	52 e4       	ldi	r21, 0x42	; 66
     fa0:	c3 d5       	rcall	.+2950   	; 0x1b28 <__divsf3>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	47 ed       	ldi	r20, 0xD7	; 215
     fa8:	53 e4       	ldi	r21, 0x43	; 67
     faa:	0d d7       	rcall	.+3610   	; 0x1dc6 <__mulsf3>
     fac:	25 d6       	rcall	.+3146   	; 0x1bf8 <__fixsfsi>
     fae:	f8 01       	movw	r30, r16
     fb0:	71 83       	std	Z+1, r23	; 0x01
     fb2:	60 83       	st	Z, r22
	velocity_robot[1] = ((DATA2 - 50)/50.0)*MAX_RPM_XY;
     fb4:	f7 01       	movw	r30, r14
     fb6:	61 81       	ldd	r22, Z+1	; 0x01
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	62 53       	subi	r22, 0x32	; 50
     fbc:	71 09       	sbc	r23, r1
     fbe:	07 2e       	mov	r0, r23
     fc0:	00 0c       	add	r0, r0
     fc2:	88 0b       	sbc	r24, r24
     fc4:	99 0b       	sbc	r25, r25
     fc6:	4b d6       	rcall	.+3222   	; 0x1c5e <__floatsisf>
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	48 e4       	ldi	r20, 0x48	; 72
     fce:	52 e4       	ldi	r21, 0x42	; 66
     fd0:	ab d5       	rcall	.+2902   	; 0x1b28 <__divsf3>
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	47 ed       	ldi	r20, 0xD7	; 215
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	f5 d6       	rcall	.+3562   	; 0x1dc6 <__mulsf3>
     fdc:	0d d6       	rcall	.+3098   	; 0x1bf8 <__fixsfsi>
     fde:	f8 01       	movw	r30, r16
     fe0:	73 83       	std	Z+3, r23	; 0x03
     fe2:	62 83       	std	Z+2, r22	; 0x02
	velocity_robot[2] = (-(DATA3 - 50)/50.0)*MAX_RPM_YAW;
     fe4:	f7 01       	movw	r30, r14
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	c8 1b       	sub	r28, r24
     fea:	d1 09       	sbc	r29, r1
     fec:	be 01       	movw	r22, r28
     fee:	dd 0f       	add	r29, r29
     ff0:	88 0b       	sbc	r24, r24
     ff2:	99 0b       	sbc	r25, r25
     ff4:	34 d6       	rcall	.+3176   	; 0x1c5e <__floatsisf>
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	48 e4       	ldi	r20, 0x48	; 72
     ffc:	52 e4       	ldi	r21, 0x42	; 66
     ffe:	94 d5       	rcall	.+2856   	; 0x1b28 <__divsf3>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	48 ec       	ldi	r20, 0xC8	; 200
    1006:	52 e4       	ldi	r21, 0x42	; 66
    1008:	de d6       	rcall	.+3516   	; 0x1dc6 <__mulsf3>
    100a:	f6 d5       	rcall	.+3052   	; 0x1bf8 <__fixsfsi>
    100c:	f8 01       	movw	r30, r16
    100e:	75 83       	std	Z+5, r23	; 0x05
	if(reset_auto)	//reset auto mode data if sowitched from auto to manual
    1010:	64 83       	std	Z+4, r22	; 0x04
    1012:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <reset_auto>
		reset_auto_mode();
    1016:	81 11       	cpse	r24, r1
    1018:	20 df       	rcall	.-448    	; 0xe5a <_Z15reset_auto_modev>
		
	//UART2TransmitData(counter_motor);
	//UART2TransmitString("\n\r");
	
}
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	08 95       	ret

00001028 <_Z10move_robotv>:

}


void move_robot()
{
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
	dir = CALC_DIR(current_location,next_location);
    1030:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <next_location>
    103a:	82 1b       	sub	r24, r18
    103c:	91 09       	sbc	r25, r1
    103e:	12 f0       	brmi	.+4      	; 0x1044 <_Z10move_robotv+0x1c>
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <_Z10move_robotv+0x1e>
    1044:	2f ef       	ldi	r18, 0xFF	; 255
    1046:	20 93 fa 02 	sts	0x02FA, r18	; 0x8002fa <dir>
    104a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    104e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    1052:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    1056:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
	ex.Reset_Distance();
	
	velocity_robot[0] = Y_COMPONENT_SMALL;
    105a:	e6 ea       	ldi	r30, 0xA6	; 166
    105c:	f2 e0       	ldi	r31, 0x02	; 2
    105e:	8f e0       	ldi	r24, 0x0F	; 15
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
	velocity_robot[2] = 0;
    1066:	15 82       	std	Z+5, r1	; 0x05
    1068:	14 82       	std	Z+4, r1	; 0x04
	
	moving = true;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <moving>
	
	distance = abs(next_distance - current_distance);
    1070:	40 91 d8 02 	lds	r20, 0x02D8	; 0x8002d8 <next_distance>
    1074:	50 91 d9 02 	lds	r21, 0x02D9	; 0x8002d9 <next_distance+0x1>
    1078:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <next_distance+0x2>
    107c:	70 91 db 02 	lds	r23, 0x02DB	; 0x8002db <next_distance+0x3>
    1080:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <current_distance>
    1084:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <current_distance+0x1>
    1088:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <current_distance+0x2>
    108c:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <current_distance+0x3>
    1090:	48 1b       	sub	r20, r24
    1092:	59 0b       	sbc	r21, r25
    1094:	6a 0b       	sbc	r22, r26
    1096:	7b 0b       	sbc	r23, r27
    1098:	db 01       	movw	r26, r22
    109a:	ca 01       	movw	r24, r20
    109c:	3a f4       	brpl	.+14     	; 0x10ac <_Z10move_robotv+0x84>
    109e:	88 27       	eor	r24, r24
    10a0:	99 27       	eor	r25, r25
    10a2:	dc 01       	movw	r26, r24
    10a4:	84 1b       	sub	r24, r20
    10a6:	95 0b       	sbc	r25, r21
    10a8:	a6 0b       	sbc	r26, r22
    10aa:	b7 0b       	sbc	r27, r23
    10ac:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <distance>
    10b0:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <distance+0x1>
    10b4:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <distance+0x2>
    10b8:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <distance+0x3>
	
	if(distance >= 2600)
    10bc:	88 32       	cpi	r24, 0x28	; 40
    10be:	9a 40       	sbci	r25, 0x0A	; 10
    10c0:	a1 05       	cpc	r26, r1
    10c2:	b1 05       	cpc	r27, r1
    10c4:	94 f0       	brlt	.+36     	; 0x10ea <_Z10move_robotv+0xc2>
	{
		speed = dir*MAX_RPM_XY;
    10c6:	4e ea       	ldi	r20, 0xAE	; 174
    10c8:	51 e0       	ldi	r21, 0x01	; 1
    10ca:	24 03       	mulsu	r18, r20
    10cc:	c0 01       	movw	r24, r0
    10ce:	25 9f       	mul	r18, r21
    10d0:	90 0d       	add	r25, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <speed+0x1>
    10d8:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <speed>
		ramp_down_off_adj = RAMP_DOWN_OFFSET + 30;
    10dc:	87 e3       	ldi	r24, 0x37	; 55
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <ramp_down_off_adj+0x1>
    10e4:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <ramp_down_off_adj>
    10e8:	0e c0       	rjmp	.+28     	; 0x1106 <_Z10move_robotv+0xde>
	}
	else 
	{
		speed = dir*MIN_RPM_XY;
    10ea:	3a ef       	ldi	r19, 0xFA	; 250
    10ec:	23 03       	mulsu	r18, r19
    10ee:	c0 01       	movw	r24, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <speed+0x1>
    10f6:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <speed>
		ramp_down_off_adj = RAMP_DOWN_OFFSET;
    10fa:	89 e1       	ldi	r24, 0x19	; 25
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <ramp_down_off_adj+0x1>
    1102:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <ramp_down_off_adj>
	}
		 
	ramp_up_dist = distance/9.59;
    1106:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <distance>
    110a:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <distance+0x1>
    110e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <distance+0x2>
    1112:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <distance+0x3>
    1116:	a3 d5       	rcall	.+2886   	; 0x1c5e <__floatsisf>
    1118:	6b 01       	movw	r12, r22
    111a:	7c 01       	movw	r14, r24
    111c:	24 ea       	ldi	r18, 0xA4	; 164
    111e:	30 e7       	ldi	r19, 0x70	; 112
    1120:	49 e1       	ldi	r20, 0x19	; 25
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	01 d5       	rcall	.+2562   	; 0x1b28 <__divsf3>
    1126:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <ramp_up_dist>
    112a:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <ramp_up_dist+0x1>
    112e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ramp_up_dist+0x2>
    1132:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <ramp_up_dist+0x3>
	ramp_down_dist = distance/3.20;	 
    1136:	2d ec       	ldi	r18, 0xCD	; 205
    1138:	3c ec       	ldi	r19, 0xCC	; 204
    113a:	4c e4       	ldi	r20, 0x4C	; 76
    113c:	50 e4       	ldi	r21, 0x40	; 64
    113e:	c7 01       	movw	r24, r14
    1140:	b6 01       	movw	r22, r12
    1142:	f2 d4       	rcall	.+2532   	; 0x1b28 <__divsf3>
    1144:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <ramp_down_dist>
    1148:	70 93 e5 02 	sts	0x02E5, r23	; 0x8002e5 <ramp_down_dist+0x1>
    114c:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <ramp_down_dist+0x2>
    1150:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <ramp_down_dist+0x3>
	
	current_distance = next_distance;
    1154:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <next_distance>
    1158:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <next_distance+0x1>
    115c:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <next_distance+0x2>
    1160:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <next_distance+0x3>
    1164:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <current_distance>
    1168:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <current_distance+0x1>
    116c:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <current_distance+0x2>
    1170:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <current_distance+0x3>
}
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	08 95       	ret

0000117e <_Z17Golden_Rack_Placev>:
	//UART0TransmitString("\n\r");
}

void Golden_Rack_Place()
{
	if(current_location == Loading_zone2)
    117e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	99 f4       	brne	.+38     	; 0x11ac <_Z17Golden_Rack_Placev+0x2e>
	{
		Golden_Drop =true;
    1186:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <Golden_Drop>
		next_location = Golden_zone;
    118a:	85 e0       	ldi	r24, 0x05	; 5
    118c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
		next_distance = GLDZONE;
    1190:	8e ef       	ldi	r24, 0xFE	; 254
    1192:	9c ef       	ldi	r25, 0xFC	; 252
    1194:	af ef       	ldi	r26, 0xFF	; 255
    1196:	bf ef       	ldi	r27, 0xFF	; 255
    1198:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    119c:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    11a0:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    11a4:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
		move_robot();		
    11a8:	3f cf       	rjmp	.-386    	; 0x1028 <_Z10move_robotv>
    11aa:	08 95       	ret
	}
	else if(Golden_Drop && current_location == Golden_zone)
    11ac:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <Golden_Drop>
    11b0:	99 23       	and	r25, r25
    11b2:	91 f0       	breq	.+36     	; 0x11d8 <_Z17Golden_Rack_Placev+0x5a>
    11b4:	85 30       	cpi	r24, 0x05	; 5
    11b6:	81 f4       	brne	.+32     	; 0x11d8 <_Z17Golden_Rack_Placev+0x5a>
	{
		next_location = Loading_zone1;
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
		next_distance = LZONE1;
    11be:	8b e8       	ldi	r24, 0x8B	; 139
    11c0:	94 e2       	ldi	r25, 0x24	; 36
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    11ca:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    11ce:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    11d2:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
		move_robot();
    11d6:	28 cf       	rjmp	.-432    	; 0x1028 <_Z10move_robotv>
    11d8:	08 95       	ret

000011da <_Z19send_data_to_masterh>:
	
	current_distance = next_distance;
}

void send_data_to_master(uint8_t dat)
{
    11da:	cf 93       	push	r28
    11dc:	c8 2f       	mov	r28, r24
	UART3Transmit(START_BYTE_MASTER);
    11de:	8c ef       	ldi	r24, 0xFC	; 252
    11e0:	c6 dd       	rcall	.-1140   	; 0xd6e <_Z13UART3Transmith>
	UART3Transmit(dat);
    11e2:	8c 2f       	mov	r24, r28
    11e4:	c4 dd       	rcall	.-1144   	; 0xd6e <_Z13UART3Transmith>
}
    11e6:	cf 91       	pop	r28
    11e8:	08 95       	ret

000011ea <_Z27enable_robot_stop_interruptv>:

void enable_robot_stop_interrupt()
{
	cli();
    11ea:	f8 94       	cli
	PCICR |= (1 << PCIE0);
    11ec:	e8 e6       	ldi	r30, 0x68	; 104
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	80 83       	st	Z, r24
	PCIFR |= (1 << PCIF0);
    11f6:	d8 9a       	sbi	0x1b, 0	; 27
	PCMSK0 |= (1 << PCINT4);
    11f8:	eb e6       	ldi	r30, 0x6B	; 107
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	80 61       	ori	r24, 0x10	; 16
    1200:	80 83       	st	Z, r24
	sei();
    1202:	78 94       	sei
    1204:	08 95       	ret

00001206 <_Z10init_slavev>:
	
	

void init_slave()
{	
	auto_mode = false;
    1206:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <auto_mode>
	
	INPUT(STOP_THE_DRIVE);
    120a:	24 98       	cbi	0x04, 4	; 4
	
	reset_auto_mode();
    120c:	26 de       	rcall	.-948    	; 0xe5a <_Z15reset_auto_modev>
	enable_robot_stop_interrupt();
    120e:	ed cf       	rjmp	.-38     	; 0x11ea <_Z27enable_robot_stop_interruptv>
    1210:	08 95       	ret

00001212 <_Z15Brake_the_robotv>:
    1212:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <distance>
	sei();
}

void Brake_the_robot()
{
	distance = 0;
    1216:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <distance+0x1>
    121a:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <distance+0x2>
    121e:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <distance+0x3>
	moving = false;
    1222:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <moving>
	prox_enb = false;
    1226:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <prox_enb>
	calculated = false;
    122a:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <calculated>
		//_delay_ms(500);
		//searching = true;
		//send_data_to_master(Search_automaticrobot);
		//give_shtcock = true;
	//}
	if(current_location == Starting_Zone && next_location == Rack_zone)
    122e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	31 f4       	brne	.+12     	; 0x1242 <_Z15Brake_the_robotv+0x30>
    1236:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	f9 f4       	brne	.+62     	; 0x127c <_Z15Brake_the_robotv+0x6a>
		send_data_to_master(next_location);
    123e:	cd df       	rcall	.-102    	; 0x11da <_Z19send_data_to_masterh>
    1240:	1d c0       	rjmp	.+58     	; 0x127c <_Z15Brake_the_robotv+0x6a>
	else if(current_location == Golden_zone && next_location == Loading_zone1)
    1242:	85 30       	cpi	r24, 0x05	; 5
    1244:	d9 f4       	brne	.+54     	; 0x127c <_Z15Brake_the_robotv+0x6a>
    1246:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	b9 f4       	brne	.+46     	; 0x127c <_Z15Brake_the_robotv+0x6a>
    124e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
    1252:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
    1256:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
    125a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
	{
		ey.Reset_Distance();
		shift_robot = true;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <shift_robot>
		velocity_robot[0] = -130;
    1264:	e6 ea       	ldi	r30, 0xA6	; 166
    1266:	f2 e0       	ldi	r31, 0x02	; 2
    1268:	2e e7       	ldi	r18, 0x7E	; 126
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	31 83       	std	Z+1, r19	; 0x01
    126e:	20 83       	st	Z, r18
		velocity_robot[1] = 0;
    1270:	13 82       	std	Z+3, r1	; 0x03
    1272:	12 82       	std	Z+2, r1	; 0x02
		velocity_robot[2] = 0;
    1274:	15 82       	std	Z+5, r1	; 0x05
    1276:	14 82       	std	Z+4, r1	; 0x04
		final_step = true;
    1278:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <final_step>
	}
	stop_flag = false;
    127c:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <stop_flag>
	
	
	if(Golden_Drop)
    1280:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Golden_Drop>
    1284:	88 23       	and	r24, r24
    1286:	19 f0       	breq	.+6      	; 0x128e <_Z15Brake_the_robotv+0x7c>
		send_data_to_master(next_location);
    1288:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    128c:	a6 df       	rcall	.-180    	; 0x11da <_Z19send_data_to_masterh>
	
	current_location = next_location;	
    128e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    1292:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <current_location>
    1296:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    129a:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    129e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    12a2:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
    12a6:	08 95       	ret

000012a8 <_Z18operate_slave_autov>:
	//UART2TransmitString("\n\r");
	
}

void operate_slave_auto()
{
    12a8:	4f 92       	push	r4
    12aa:	5f 92       	push	r5
    12ac:	6f 92       	push	r6
    12ae:	7f 92       	push	r7
    12b0:	8f 92       	push	r8
    12b2:	9f 92       	push	r9
    12b4:	af 92       	push	r10
    12b6:	bf 92       	push	r11
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <_Z18operate_slave_autov+0x20>
    12c8:	1f 92       	push	r1
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	if (!moving && !searching)
    12ce:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <moving>
    12d2:	81 11       	cpse	r24, r1
    12d4:	6a c3       	rjmp	.+1748   	; 0x19aa <_Z18operate_slave_autov+0x702>
    12d6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <searching>
    12da:	81 11       	cpse	r24, r1
    12dc:	6b c3       	rjmp	.+1750   	; 0x19b4 <_Z18operate_slave_autov+0x70c>
	{
		//for up and down purpose adjustment
		if(DATA1 == up_rob)
    12de:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <rcvdata>
    12e2:	85 30       	cpi	r24, 0x05	; 5
    12e4:	59 f4       	brne	.+22     	; 0x12fc <_Z18operate_slave_autov+0x54>
		{
			velocity_robot[0] = -60;
    12e6:	e6 ea       	ldi	r30, 0xA6	; 166
    12e8:	f2 e0       	ldi	r31, 0x02	; 2
    12ea:	84 ec       	ldi	r24, 0xC4	; 196
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	91 83       	std	Z+1, r25	; 0x01
    12f0:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    12f2:	13 82       	std	Z+3, r1	; 0x03
    12f4:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;					
    12f6:	15 82       	std	Z+5, r1	; 0x05
    12f8:	14 82       	std	Z+4, r1	; 0x04
    12fa:	5b c0       	rjmp	.+182    	; 0x13b2 <_Z18operate_slave_autov+0x10a>
		}
		else if(DATA1 == down_rob)
    12fc:	86 30       	cpi	r24, 0x06	; 6
    12fe:	59 f4       	brne	.+22     	; 0x1316 <_Z18operate_slave_autov+0x6e>
		{
			velocity_robot[0] = 60;
    1300:	e6 ea       	ldi	r30, 0xA6	; 166
    1302:	f2 e0       	ldi	r31, 0x02	; 2
    1304:	8c e3       	ldi	r24, 0x3C	; 60
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    130c:	13 82       	std	Z+3, r1	; 0x03
    130e:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;
    1310:	15 82       	std	Z+5, r1	; 0x05
    1312:	14 82       	std	Z+4, r1	; 0x04
    1314:	4e c0       	rjmp	.+156    	; 0x13b2 <_Z18operate_slave_autov+0x10a>
		} 
		else 
		{
			if(!Golden_Drop)
    1316:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Golden_Drop>
    131a:	81 11       	cpse	r24, r1
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <_Z18operate_slave_autov+0x78>
				reset_robot_velocity();
    131e:	4b d8       	rcall	.-3946   	; 0x3b6 <_Z20reset_robot_velocityv>
		}
			
		/******************************Data for auto mode from master************************************/
		if(DATA1 == Rack_load)
    1320:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <rcvdata>
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	79 f4       	brne	.+30     	; 0x1346 <_Z18operate_slave_autov+0x9e>
		{
			next_location = Rack_zone;
    1328:	84 e0       	ldi	r24, 0x04	; 4
    132a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
			next_distance = RZONE;
    132e:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <next_distance>
    1332:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <next_distance+0x1>
    1336:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_distance+0x2>
    133a:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <next_distance+0x3>
			move_robot();
    133e:	74 de       	rcall	.-792    	; 0x1028 <_Z10move_robotv>
			DATA1 = 0;
    1340:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
    1344:	36 c0       	rjmp	.+108    	; 0x13b2 <_Z18operate_slave_autov+0x10a>
		}
		else if(DATA1 == Load1)
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	91 f4       	brne	.+36     	; 0x136e <_Z18operate_slave_autov+0xc6>
		{
			next_location = Loading_zone1;
    134a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
			next_distance = LZONE1;
    134e:	8b e8       	ldi	r24, 0x8B	; 139
    1350:	94 e2       	ldi	r25, 0x24	; 36
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    135a:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    135e:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    1362:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
			move_robot();
    1366:	60 de       	rcall	.-832    	; 0x1028 <_Z10move_robotv>
			DATA1 = 0;
    1368:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
    136c:	22 c0       	rjmp	.+68     	; 0x13b2 <_Z18operate_slave_autov+0x10a>
		}
		else if (DATA1 == Load2)
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	99 f4       	brne	.+38     	; 0x1398 <_Z18operate_slave_autov+0xf0>
		{
			next_location = Loading_zone2;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
			next_distance = LZONE2;
    1378:	87 e3       	ldi	r24, 0x37	; 55
    137a:	9d e2       	ldi	r25, 0x2D	; 45
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    1384:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    1388:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    138c:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
			move_robot();
    1390:	4b de       	rcall	.-874    	; 0x1028 <_Z10move_robotv>
			DATA1 = 0;
    1392:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <_Z18operate_slave_autov+0x10a>
		}
		else if (DATA1 == Search_automaticrobot)
    1398:	84 30       	cpi	r24, 0x04	; 4
    139a:	31 f4       	brne	.+12     	; 0x13a8 <_Z18operate_slave_autov+0x100>
		{
			searching = true;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <searching>
			DATA1 = 0;
    13a2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
		}
		else if(DATA1 == Golden_Rack)
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <_Z18operate_slave_autov+0x10a>
    13a8:	87 30       	cpi	r24, 0x07	; 7
		{
			Golden_Rack_Place();
    13aa:	19 f4       	brne	.+6      	; 0x13b2 <_Z18operate_slave_autov+0x10a>
    13ac:	e8 de       	rcall	.-560    	; 0x117e <_Z17Golden_Rack_Placev>
			DATA1 = 0;
    13ae:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
		}
	}
	
	if(Golden_Drop)
    13b2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Golden_Drop>
    13b6:	88 23       	and	r24, r24
    13b8:	09 f4       	brne	.+2      	; 0x13bc <_Z18operate_slave_autov+0x114>
    13ba:	86 c0       	rjmp	.+268    	; 0x14c8 <_Z18operate_slave_autov+0x220>
	{
		//move forward to give golden rack
		if(go_after_rotate && (abs(ey.Get_Distance()) >= AUTOROBOT_DIST) )
    13bc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <go_after_rotate>
    13c0:	88 23       	and	r24, r24
    13c2:	79 f1       	breq	.+94     	; 0x1422 <_Z18operate_slave_autov+0x17a>
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
    13c4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ey+0x1>
    13c8:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <ey+0x2>
    13cc:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <ey+0x3>
    13d0:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <ey+0x4>
    13d4:	18 16       	cp	r1, r24
    13d6:	19 06       	cpc	r1, r25
    13d8:	1a 06       	cpc	r1, r26
    13da:	1b 06       	cpc	r1, r27
    13dc:	44 f4       	brge	.+16     	; 0x13ee <_Z18operate_slave_autov+0x146>
    13de:	21 e0       	ldi	r18, 0x01	; 1
    13e0:	84 39       	cpi	r24, 0x94	; 148
    13e2:	97 40       	sbci	r25, 0x07	; 7
    13e4:	a1 05       	cpc	r26, r1
    13e6:	b1 05       	cpc	r27, r1
    13e8:	84 f4       	brge	.+32     	; 0x140a <_Z18operate_slave_autov+0x162>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	0e c0       	rjmp	.+28     	; 0x140a <_Z18operate_slave_autov+0x162>
    13ee:	b0 95       	com	r27
    13f0:	a0 95       	com	r26
    13f2:	90 95       	com	r25
    13f4:	81 95       	neg	r24
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	af 4f       	sbci	r26, 0xFF	; 255
    13fa:	bf 4f       	sbci	r27, 0xFF	; 255
    13fc:	21 e0       	ldi	r18, 0x01	; 1
    13fe:	84 39       	cpi	r24, 0x94	; 148
    1400:	97 40       	sbci	r25, 0x07	; 7
    1402:	a1 05       	cpc	r26, r1
    1404:	b1 05       	cpc	r27, r1
    1406:	0c f4       	brge	.+2      	; 0x140a <_Z18operate_slave_autov+0x162>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	22 23       	and	r18, r18
    140c:	51 f0       	breq	.+20     	; 0x1422 <_Z18operate_slave_autov+0x17a>
		{
			reset_robot_velocity();
    140e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z20reset_robot_velocityv>
			rotate_robot = false;
    1412:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <rotate_robot>
			final_step = false;
    1416:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <final_step>
			send_data_to_master(Give_GoldenRack);
    141a:	89 e0       	ldi	r24, 0x09	; 9
    141c:	de de       	rcall	.-580    	; 0x11da <_Z19send_data_to_masterh>
			Golden_Drop = false;
    141e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <Golden_Drop>
		}
		
		//move forward after rotating
		if(rotate_robot) 
    1422:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <rotate_robot>
    1426:	88 23       	and	r24, r24
    1428:	39 f1       	breq	.+78     	; 0x1478 <_Z18operate_slave_autov+0x1d0>
		{
			if(counter_motor >= ROTATE_COUNT)
    142a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <counter_motor>
    142e:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <counter_motor+0x1>
    1432:	8e 39       	cpi	r24, 0x9E	; 158
    1434:	92 40       	sbci	r25, 0x02	; 2
    1436:	00 f1       	brcs	.+64     	; 0x1478 <_Z18operate_slave_autov+0x1d0>
			{
				rotate_robot = false;
    1438:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <rotate_robot>
				go_after_rotate = true;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <go_after_rotate>
				velocity_robot[0] = -100;
    1442:	e6 ea       	ldi	r30, 0xA6	; 166
    1444:	f2 e0       	ldi	r31, 0x02	; 2
    1446:	8c e9       	ldi	r24, 0x9C	; 156
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
				velocity_robot[1] = 30;
    144e:	8e e1       	ldi	r24, 0x1E	; 30
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	93 83       	std	Z+3, r25	; 0x03
    1454:	82 83       	std	Z+2, r24	; 0x02
				velocity_robot[2] = 0;
    1456:	15 82       	std	Z+5, r1	; 0x05
    1458:	14 82       	std	Z+4, r1	; 0x04
		inline void Reset_Distance(){encdistance = 0;}
    145a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
    145e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
    1462:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
    1466:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
				ey.Reset_Distance();
				counter_motor = 0;
    146a:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter_motor+0x1>
    146e:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <counter_motor>
				count_the_motor = false;
    1472:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <count_the_motor>
    1476:	28 c0       	rjmp	.+80     	; 0x14c8 <_Z18operate_slave_autov+0x220>
			//}

		}		
		
		//after shifting
		if(shift_robot && ey.Get_Distance() >= Y_DISTANCE)
    1478:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <shift_robot>
    147c:	88 23       	and	r24, r24
    147e:	21 f1       	breq	.+72     	; 0x14c8 <_Z18operate_slave_autov+0x220>
    1480:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ey+0x1>
    1484:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <ey+0x2>
    1488:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <ey+0x3>
    148c:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <ey+0x4>
    1490:	8c 3d       	cpi	r24, 0xDC	; 220
    1492:	91 05       	cpc	r25, r1
    1494:	a1 05       	cpc	r26, r1
    1496:	b1 05       	cpc	r27, r1
    1498:	bc f0       	brlt	.+46     	; 0x14c8 <_Z18operate_slave_autov+0x220>
		{
			reset_robot_velocity();
    149a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z20reset_robot_velocityv>
			shift_robot = false;
    149e:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <shift_robot>
			rotate_robot = true;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <rotate_robot>
			count_the_motor = true;
    14a8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <count_the_motor>
			counter_motor = 0;
    14ac:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter_motor+0x1>
    14b0:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <counter_motor>
			velocity_robot[0] = 0;
    14b4:	e6 ea       	ldi	r30, 0xA6	; 166
    14b6:	f2 e0       	ldi	r31, 0x02	; 2
    14b8:	11 82       	std	Z+1, r1	; 0x01
    14ba:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    14bc:	13 82       	std	Z+3, r1	; 0x03
    14be:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = -100;
    14c0:	8c e9       	ldi	r24, 0x9C	; 156
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
    14c4:	95 83       	std	Z+5, r25	; 0x05
    14c6:	84 83       	std	Z+4, r24	; 0x04
	
	}
	
	
	/**********************************If moving to different zone then perform ramping************************************/
	if (moving)
    14c8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <moving>
    14cc:	88 23       	and	r24, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <_Z18operate_slave_autov+0x22a>
    14d0:	ba c1       	rjmp	.+884    	; 0x1846 <_Z18operate_slave_autov+0x59e>
	{
		//to calculate slope only one time at the start
			if(!calculated)
    14d2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <calculated>
    14d6:	81 11       	cpse	r24, r1
    14d8:	4c c0       	rjmp	.+152    	; 0x1572 <_Z18operate_slave_autov+0x2ca>
			{
				slopeup =  (speed-(dir*RAMP_UP_OFFSET))/ramp_up_dist;
    14da:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <dir>
    14de:	e0 90 f8 02 	lds	r14, 0x02F8	; 0x8002f8 <speed>
    14e2:	f0 90 f9 02 	lds	r15, 0x02F9	; 0x8002f9 <speed+0x1>
    14e6:	c8 2e       	mov	r12, r24
    14e8:	08 2e       	mov	r0, r24
    14ea:	00 0c       	add	r0, r0
    14ec:	dd 08       	sbc	r13, r13
    14ee:	b7 01       	movw	r22, r14
    14f0:	30 e5       	ldi	r19, 0x50	; 80
    14f2:	83 02       	muls	r24, r19
    14f4:	60 19       	sub	r22, r0
    14f6:	71 09       	sbc	r23, r1
    14f8:	11 24       	eor	r1, r1
    14fa:	07 2e       	mov	r0, r23
    14fc:	00 0c       	add	r0, r0
    14fe:	88 0b       	sbc	r24, r24
    1500:	99 0b       	sbc	r25, r25
    1502:	ad d3       	rcall	.+1882   	; 0x1c5e <__floatsisf>
    1504:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <ramp_up_dist>
    1508:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <ramp_up_dist+0x1>
    150c:	40 91 ea 02 	lds	r20, 0x02EA	; 0x8002ea <ramp_up_dist+0x2>
    1510:	50 91 eb 02 	lds	r21, 0x02EB	; 0x8002eb <ramp_up_dist+0x3>
    1514:	09 d3       	rcall	.+1554   	; 0x1b28 <__divsf3>
    1516:	60 93 f2 02 	sts	0x02F2, r22	; 0x8002f2 <slopeup>
    151a:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <slopeup+0x1>
    151e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <slopeup+0x2>
    1522:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <slopeup+0x3>
				slopedown = (-((speed-dir*ramp_down_off_adj))/ramp_down_dist);
    1526:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <ramp_down_off_adj>
    152a:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <ramp_down_off_adj+0x1>
    152e:	c8 9e       	mul	r12, r24
    1530:	b0 01       	movw	r22, r0
    1532:	c9 9e       	mul	r12, r25
    1534:	70 0d       	add	r23, r0
    1536:	d8 9e       	mul	r13, r24
    1538:	70 0d       	add	r23, r0
    153a:	11 24       	eor	r1, r1
    153c:	6e 19       	sub	r22, r14
    153e:	7f 09       	sbc	r23, r15
    1540:	07 2e       	mov	r0, r23
    1542:	00 0c       	add	r0, r0
    1544:	88 0b       	sbc	r24, r24
    1546:	99 0b       	sbc	r25, r25
    1548:	8a d3       	rcall	.+1812   	; 0x1c5e <__floatsisf>
    154a:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <ramp_down_dist>
    154e:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <ramp_down_dist+0x1>
    1552:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <ramp_down_dist+0x2>
    1556:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <ramp_down_dist+0x3>
    155a:	e6 d2       	rcall	.+1484   	; 0x1b28 <__divsf3>
    155c:	60 93 ee 02 	sts	0x02EE, r22	; 0x8002ee <slopedown>
    1560:	70 93 ef 02 	sts	0x02EF, r23	; 0x8002ef <slopedown+0x1>
    1564:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <slopedown+0x2>
    1568:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <slopedown+0x3>
				calculated = true;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <calculated>
			}
			
			//if destination is reached interrupt is trigerred by the master
			
			if(stop_flag)
    1572:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <stop_flag>
			{
				Brake_the_robot();
    1576:	81 11       	cpse	r24, r1
    1578:	4c de       	rcall	.-872    	; 0x1212 <_Z15Brake_the_robotv>
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
    157a:	c0 90 72 02 	lds	r12, 0x0272	; 0x800272 <ex+0x1>
    157e:	d0 90 73 02 	lds	r13, 0x0273	; 0x800273 <ex+0x2>
    1582:	e0 90 74 02 	lds	r14, 0x0274	; 0x800274 <ex+0x3>
    1586:	f0 90 75 02 	lds	r15, 0x0275	; 0x800275 <ex+0x4>
			}
			
			//if destination is reached
			if(abs(ex.Get_Distance()) >= distance)
    158a:	80 90 e0 02 	lds	r8, 0x02E0	; 0x8002e0 <distance>
    158e:	90 90 e1 02 	lds	r9, 0x02E1	; 0x8002e1 <distance+0x1>
    1592:	a0 90 e2 02 	lds	r10, 0x02E2	; 0x8002e2 <distance+0x2>
    1596:	b0 90 e3 02 	lds	r11, 0x02E3	; 0x8002e3 <distance+0x3>
    159a:	d7 01       	movw	r26, r14
    159c:	c6 01       	movw	r24, r12
    159e:	ff 20       	and	r15, r15
    15a0:	3c f4       	brge	.+14     	; 0x15b0 <_Z18operate_slave_autov+0x308>
    15a2:	88 27       	eor	r24, r24
    15a4:	99 27       	eor	r25, r25
    15a6:	dc 01       	movw	r26, r24
    15a8:	8c 19       	sub	r24, r12
    15aa:	9d 09       	sbc	r25, r13
    15ac:	ae 09       	sbc	r26, r14
    15ae:	bf 09       	sbc	r27, r15
    15b0:	88 15       	cp	r24, r8
    15b2:	99 05       	cpc	r25, r9
    15b4:	aa 05       	cpc	r26, r10
    15b6:	bb 05       	cpc	r27, r11
    15b8:	f4 f0       	brlt	.+60     	; 0x15f6 <_Z18operate_slave_autov+0x34e>
			{
				//stop the robot
				if((current_location == Starting_Zone && next_location == Rack_zone) || (current_location == Loading_zone2 && next_location == Golden_zone))
    15ba:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	29 f4       	brne	.+10     	; 0x15cc <_Z18operate_slave_autov+0x324>
    15c2:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    15c6:	84 30       	cpi	r24, 0x04	; 4
    15c8:	91 f4       	brne	.+36     	; 0x15ee <_Z18operate_slave_autov+0x346>
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <_Z18operate_slave_autov+0x330>
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	79 f4       	brne	.+30     	; 0x15ee <_Z18operate_slave_autov+0x346>
    15d0:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    15d4:	85 30       	cpi	r24, 0x05	; 5
    15d6:	59 f4       	brne	.+22     	; 0x15ee <_Z18operate_slave_autov+0x346>
				{
					velocity_robot[0] = 0;
    15d8:	e6 ea       	ldi	r30, 0xA6	; 166
    15da:	f2 e0       	ldi	r31, 0x02	; 2
    15dc:	11 82       	std	Z+1, r1	; 0x01
					velocity_robot[1] = -RAMP_DOWN_OFFSET;
    15de:	10 82       	st	Z, r1
    15e0:	87 ee       	ldi	r24, 0xE7	; 231
    15e2:	9f ef       	ldi	r25, 0xFF	; 255
    15e4:	93 83       	std	Z+3, r25	; 0x03
					velocity_robot[2] = 0;
    15e6:	82 83       	std	Z+2, r24	; 0x02
    15e8:	15 82       	std	Z+5, r1	; 0x05
    15ea:	14 82       	std	Z+4, r1	; 0x04
				}
				else
				{
					reset_motors();	
    15ec:	2c c1       	rjmp	.+600    	; 0x1846 <_Z18operate_slave_autov+0x59e>
					Brake_the_robot();
    15ee:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z12reset_motorsv>
    15f2:	0f de       	rcall	.-994    	; 0x1212 <_Z15Brake_the_robotv>
				}
				
				
			}
			else if (abs(ex.Get_Distance()) >= ramp_up_dist && (abs(ex.Get_Distance()) <= (distance-ramp_down_dist)))
    15f4:	28 c1       	rjmp	.+592    	; 0x1846 <_Z18operate_slave_autov+0x59e>
    15f6:	1c 14       	cp	r1, r12
    15f8:	1d 04       	cpc	r1, r13
    15fa:	1e 04       	cpc	r1, r14
    15fc:	1f 04       	cpc	r1, r15
    15fe:	b4 f4       	brge	.+44     	; 0x162c <_Z18operate_slave_autov+0x384>
    1600:	c7 01       	movw	r24, r14
    1602:	b6 01       	movw	r22, r12
    1604:	2c d3       	rcall	.+1624   	; 0x1c5e <__floatsisf>
    1606:	69 83       	std	Y+1, r22	; 0x01
    1608:	7a 83       	std	Y+2, r23	; 0x02
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	9c 83       	std	Y+4, r25	; 0x04
    160e:	40 90 e8 02 	lds	r4, 0x02E8	; 0x8002e8 <ramp_up_dist>
    1612:	50 90 e9 02 	lds	r5, 0x02E9	; 0x8002e9 <ramp_up_dist+0x1>
    1616:	60 90 ea 02 	lds	r6, 0x02EA	; 0x8002ea <ramp_up_dist+0x2>
    161a:	70 90 eb 02 	lds	r7, 0x02EB	; 0x8002eb <ramp_up_dist+0x3>
    161e:	a3 01       	movw	r20, r6
    1620:	92 01       	movw	r18, r4
    1622:	cd d3       	rcall	.+1946   	; 0x1dbe <__gesf2>
    1624:	88 23       	and	r24, r24
    1626:	0c f4       	brge	.+2      	; 0x162a <_Z18operate_slave_autov+0x382>
    1628:	3d c0       	rjmp	.+122    	; 0x16a4 <_Z18operate_slave_autov+0x3fc>
    162a:	19 c0       	rjmp	.+50     	; 0x165e <_Z18operate_slave_autov+0x3b6>
    162c:	66 27       	eor	r22, r22
    162e:	77 27       	eor	r23, r23
    1630:	cb 01       	movw	r24, r22
    1632:	6c 19       	sub	r22, r12
    1634:	7d 09       	sbc	r23, r13
    1636:	8e 09       	sbc	r24, r14
    1638:	9f 09       	sbc	r25, r15
    163a:	11 d3       	rcall	.+1570   	; 0x1c5e <__floatsisf>
    163c:	69 83       	std	Y+1, r22	; 0x01
    163e:	7a 83       	std	Y+2, r23	; 0x02
    1640:	8b 83       	std	Y+3, r24	; 0x03
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	40 90 e8 02 	lds	r4, 0x02E8	; 0x8002e8 <ramp_up_dist>
    1648:	50 90 e9 02 	lds	r5, 0x02E9	; 0x8002e9 <ramp_up_dist+0x1>
    164c:	60 90 ea 02 	lds	r6, 0x02EA	; 0x8002ea <ramp_up_dist+0x2>
    1650:	70 90 eb 02 	lds	r7, 0x02EB	; 0x8002eb <ramp_up_dist+0x3>
    1654:	a3 01       	movw	r20, r6
    1656:	92 01       	movw	r18, r4
    1658:	b2 d3       	rcall	.+1892   	; 0x1dbe <__gesf2>
    165a:	88 23       	and	r24, r24
    165c:	84 f1       	brlt	.+96     	; 0x16be <_Z18operate_slave_autov+0x416>
    165e:	c5 01       	movw	r24, r10
    1660:	b4 01       	movw	r22, r8
    1662:	fd d2       	rcall	.+1530   	; 0x1c5e <__floatsisf>
    1664:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <ramp_down_dist>
    1668:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <ramp_down_dist+0x1>
    166c:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <ramp_down_dist+0x2>
    1670:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <ramp_down_dist+0x3>
    1674:	f0 d1       	rcall	.+992    	; 0x1a56 <__subsf3>
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	69 81       	ldd	r22, Y+1	; 0x01
    167c:	7a 81       	ldd	r23, Y+2	; 0x02
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	4e d2       	rcall	.+1180   	; 0x1b20 <__cmpsf2>
    1684:	18 16       	cp	r1, r24
			{
				//normal
				velocity_robot[1] = speed;
    1686:	4c f0       	brlt	.+18     	; 0x169a <_Z18operate_slave_autov+0x3f2>
    1688:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <speed>
    168c:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <speed+0x1>
    1690:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <velocity_robot+0x3>
    1694:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <velocity_robot+0x2>
			}
			else if (abs(ex.Get_Distance()) <= ramp_up_dist)
    1698:	d6 c0       	rjmp	.+428    	; 0x1846 <_Z18operate_slave_autov+0x59e>
    169a:	1c 14       	cp	r1, r12
    169c:	1d 04       	cpc	r1, r13
    169e:	1e 04       	cpc	r1, r14
    16a0:	1f 04       	cpc	r1, r15
    16a2:	6c f4       	brge	.+26     	; 0x16be <_Z18operate_slave_autov+0x416>
    16a4:	c7 01       	movw	r24, r14
    16a6:	b6 01       	movw	r22, r12
    16a8:	da d2       	rcall	.+1460   	; 0x1c5e <__floatsisf>
    16aa:	69 83       	std	Y+1, r22	; 0x01
    16ac:	7a 83       	std	Y+2, r23	; 0x02
    16ae:	8b 83       	std	Y+3, r24	; 0x03
    16b0:	9c 83       	std	Y+4, r25	; 0x04
    16b2:	a3 01       	movw	r20, r6
    16b4:	92 01       	movw	r18, r4
    16b6:	34 d2       	rcall	.+1128   	; 0x1b20 <__cmpsf2>
    16b8:	18 16       	cp	r1, r24
    16ba:	a4 f4       	brge	.+40     	; 0x16e4 <_Z18operate_slave_autov+0x43c>
    16bc:	39 c0       	rjmp	.+114    	; 0x1730 <_Z18operate_slave_autov+0x488>
    16be:	66 27       	eor	r22, r22
    16c0:	77 27       	eor	r23, r23
    16c2:	cb 01       	movw	r24, r22
    16c4:	6c 19       	sub	r22, r12
    16c6:	7d 09       	sbc	r23, r13
    16c8:	8e 09       	sbc	r24, r14
    16ca:	9f 09       	sbc	r25, r15
    16cc:	c8 d2       	rcall	.+1424   	; 0x1c5e <__floatsisf>
    16ce:	69 83       	std	Y+1, r22	; 0x01
    16d0:	7a 83       	std	Y+2, r23	; 0x02
    16d2:	8b 83       	std	Y+3, r24	; 0x03
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	c3 01       	movw	r24, r6
    16dc:	b2 01       	movw	r22, r4
			{
				//ramp up
				velocity_robot[1] = dir*((slopeup*ex.Get_Distance())+RAMP_UP_OFFSET);
    16de:	6f d3       	rcall	.+1758   	; 0x1dbe <__gesf2>
    16e0:	88 23       	and	r24, r24
    16e2:	34 f1       	brlt	.+76     	; 0x1730 <_Z18operate_slave_autov+0x488>
    16e4:	c7 01       	movw	r24, r14
    16e6:	b6 01       	movw	r22, r12
    16e8:	ba d2       	rcall	.+1396   	; 0x1c5e <__floatsisf>
    16ea:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <slopeup>
    16ee:	30 91 f3 02 	lds	r19, 0x02F3	; 0x8002f3 <slopeup+0x1>
    16f2:	40 91 f4 02 	lds	r20, 0x02F4	; 0x8002f4 <slopeup+0x2>
    16f6:	50 91 f5 02 	lds	r21, 0x02F5	; 0x8002f5 <slopeup+0x3>
    16fa:	65 d3       	rcall	.+1738   	; 0x1dc6 <__mulsf3>
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 ea       	ldi	r20, 0xA0	; 160
    1702:	52 e4       	ldi	r21, 0x42	; 66
    1704:	a9 d1       	rcall	.+850    	; 0x1a58 <__addsf3>
    1706:	6b 01       	movw	r12, r22
    1708:	7c 01       	movw	r14, r24
    170a:	60 91 fa 02 	lds	r22, 0x02FA	; 0x8002fa <dir>
    170e:	06 2e       	mov	r0, r22
    1710:	00 0c       	add	r0, r0
    1712:	77 0b       	sbc	r23, r23
    1714:	88 0b       	sbc	r24, r24
    1716:	99 0b       	sbc	r25, r25
    1718:	a2 d2       	rcall	.+1348   	; 0x1c5e <__floatsisf>
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	51 d3       	rcall	.+1698   	; 0x1dc6 <__mulsf3>
    1724:	69 d2       	rcall	.+1234   	; 0x1bf8 <__fixsfsi>
    1726:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <velocity_robot+0x3>
			}			
			else if ((abs(ex.Get_Distance()) <= distance) && (abs(ex.Get_Distance()) >= (distance-ramp_down_dist)))
    172a:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <velocity_robot+0x2>
    172e:	8b c0       	rjmp	.+278    	; 0x1846 <_Z18operate_slave_autov+0x59e>
    1730:	c5 01       	movw	r24, r10
    1732:	b4 01       	movw	r22, r8
    1734:	94 d2       	rcall	.+1320   	; 0x1c5e <__floatsisf>
    1736:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <ramp_down_dist>
    173a:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <ramp_down_dist+0x1>
    173e:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <ramp_down_dist+0x2>
    1742:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <ramp_down_dist+0x3>
    1746:	87 d1       	rcall	.+782    	; 0x1a56 <__subsf3>
    1748:	9b 01       	movw	r18, r22
    174a:	ac 01       	movw	r20, r24
    174c:	69 81       	ldd	r22, Y+1	; 0x01
    174e:	7a 81       	ldd	r23, Y+2	; 0x02
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	34 d3       	rcall	.+1640   	; 0x1dbe <__gesf2>
    1756:	88 23       	and	r24, r24
    1758:	0c f4       	brge	.+2      	; 0x175c <_Z18operate_slave_autov+0x4b4>
			{
				//ramp down
					if(!prox_enb)
    175a:	75 c0       	rjmp	.+234    	; 0x1846 <_Z18operate_slave_autov+0x59e>
    175c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <prox_enb>
    1760:	81 11       	cpse	r24, r1
					{
						if((current_location == Starting_Zone && next_location == Rack_zone) || (current_location == Loading_zone2 && next_location == Golden_zone))
    1762:	14 c0       	rjmp	.+40     	; 0x178c <_Z18operate_slave_autov+0x4e4>
    1764:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	29 f4       	brne	.+10     	; 0x1776 <_Z18operate_slave_autov+0x4ce>
    176c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	49 f4       	brne	.+18     	; 0x1786 <_Z18operate_slave_autov+0x4de>
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <_Z18operate_slave_autov+0x4da>
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	31 f4       	brne	.+12     	; 0x1786 <_Z18operate_slave_autov+0x4de>
    177a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
							send_data_to_master(enable_prox);
    177e:	85 30       	cpi	r24, 0x05	; 5
    1780:	11 f4       	brne	.+4      	; 0x1786 <_Z18operate_slave_autov+0x4de>
    1782:	8a e0       	ldi	r24, 0x0A	; 10
						prox_enb = true;
    1784:	2a dd       	rcall	.-1452   	; 0x11da <_Z19send_data_to_masterh>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <prox_enb>
					}
					velocity_robot[1] = (dir*(slopedown)*ex.Get_Distance())+(dir*ramp_down_off_adj-(dir*ramp_down_off_adj-speed)*distance/ramp_down_dist);
    178c:	10 91 fa 02 	lds	r17, 0x02FA	; 0x8002fa <dir>
    1790:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <ramp_down_off_adj>
    1794:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <ramp_down_off_adj+0x1>
    1798:	12 03       	mulsu	r17, r18
    179a:	70 01       	movw	r14, r0
    179c:	13 9f       	mul	r17, r19
    179e:	f0 0c       	add	r15, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	b7 01       	movw	r22, r14
    17a4:	0f 2c       	mov	r0, r15
    17a6:	00 0c       	add	r0, r0
    17a8:	88 0b       	sbc	r24, r24
    17aa:	99 0b       	sbc	r25, r25
    17ac:	58 d2       	rcall	.+1200   	; 0x1c5e <__floatsisf>
    17ae:	4b 01       	movw	r8, r22
    17b0:	5c 01       	movw	r10, r24
    17b2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <speed>
    17b6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <speed+0x1>
    17ba:	d7 01       	movw	r26, r14
    17bc:	a8 1b       	sub	r26, r24
    17be:	b9 0b       	sbc	r27, r25
    17c0:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <distance>
    17c4:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <distance+0x1>
    17c8:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <distance+0x2>
    17cc:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <distance+0x3>
    17d0:	5d d3       	rcall	.+1722   	; 0x1e8c <__mulshisi3>
    17d2:	45 d2       	rcall	.+1162   	; 0x1c5e <__floatsisf>
    17d4:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <ramp_down_dist>
    17d8:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <ramp_down_dist+0x1>
    17dc:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <ramp_down_dist+0x2>
    17e0:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <ramp_down_dist+0x3>
    17e4:	a1 d1       	rcall	.+834    	; 0x1b28 <__divsf3>
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	c5 01       	movw	r24, r10
    17ec:	b4 01       	movw	r22, r8
    17ee:	33 d1       	rcall	.+614    	; 0x1a56 <__subsf3>
    17f0:	6b 01       	movw	r12, r22
    17f2:	7c 01       	movw	r14, r24
    17f4:	61 2f       	mov	r22, r17
    17f6:	11 0f       	add	r17, r17
    17f8:	77 0b       	sbc	r23, r23
    17fa:	88 0b       	sbc	r24, r24
    17fc:	99 0b       	sbc	r25, r25
    17fe:	2f d2       	rcall	.+1118   	; 0x1c5e <__floatsisf>
    1800:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <slopedown>
    1804:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <slopedown+0x1>
    1808:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <slopedown+0x2>
    180c:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <slopedown+0x3>
    1810:	da d2       	rcall	.+1460   	; 0x1dc6 <__mulsf3>
    1812:	4b 01       	movw	r8, r22
    1814:	5c 01       	movw	r10, r24
    1816:	60 91 72 02 	lds	r22, 0x0272	; 0x800272 <ex+0x1>
    181a:	70 91 73 02 	lds	r23, 0x0273	; 0x800273 <ex+0x2>
    181e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <ex+0x3>
    1822:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <ex+0x4>
    1826:	1b d2       	rcall	.+1078   	; 0x1c5e <__floatsisf>
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	c5 01       	movw	r24, r10
    182e:	b4 01       	movw	r22, r8
    1830:	ca d2       	rcall	.+1428   	; 0x1dc6 <__mulsf3>
    1832:	9b 01       	movw	r18, r22
    1834:	ac 01       	movw	r20, r24
    1836:	c7 01       	movw	r24, r14
    1838:	b6 01       	movw	r22, r12
    183a:	0e d1       	rcall	.+540    	; 0x1a58 <__addsf3>
    183c:	dd d1       	rcall	.+954    	; 0x1bf8 <__fixsfsi>
    183e:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <velocity_robot+0x3>
    1842:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <velocity_robot+0x2>
			}
			
	}
	
	//Search the automatic robot
	if(searching)
    1846:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <searching>
    184a:	88 23       	and	r24, r24
    184c:	09 f4       	brne	.+2      	; 0x1850 <_Z18operate_slave_autov+0x5a8>
    184e:	a9 c0       	rjmp	.+338    	; 0x19a2 <_Z18operate_slave_autov+0x6fa>
	{
		if(DATA3 == 0)
    1850:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <rcvdata+0x2>
    1854:	81 11       	cpse	r24, r1
    1856:	10 c0       	rjmp	.+32     	; 0x1878 <_Z18operate_slave_autov+0x5d0>
		{
			velocity_robot[0] = -searching_rpm;
    1858:	e6 ea       	ldi	r30, 0xA6	; 166
    185a:	f2 e0       	ldi	r31, 0x02	; 2
    185c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    1860:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    1864:	91 95       	neg	r25
    1866:	81 95       	neg	r24
    1868:	91 09       	sbc	r25, r1
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    186e:	13 82       	std	Z+3, r1	; 0x03
    1870:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;
    1872:	15 82       	std	Z+5, r1	; 0x05
    1874:	14 82       	std	Z+4, r1	; 0x04
    1876:	8b c0       	rjmp	.+278    	; 0x198e <_Z18operate_slave_autov+0x6e6>
		}
		else if(DATA3 == 1)
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	99 f4       	brne	.+38     	; 0x18a2 <_Z18operate_slave_autov+0x5fa>
		{
			velocity_robot[0] = 0;
    187c:	e6 ea       	ldi	r30, 0xA6	; 166
    187e:	f2 e0       	ldi	r31, 0x02	; 2
    1880:	11 82       	std	Z+1, r1	; 0x01
    1882:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    1884:	13 82       	std	Z+3, r1	; 0x03
    1886:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = -searching_rpm;
    1888:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    188c:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    1890:	91 95       	neg	r25
    1892:	81 95       	neg	r24
    1894:	91 09       	sbc	r25, r1
    1896:	95 83       	std	Z+5, r25	; 0x05
    1898:	84 83       	std	Z+4, r24	; 0x04
			pressed = true;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <pressed>
    18a0:	7a c0       	rjmp	.+244    	; 0x1996 <_Z18operate_slave_autov+0x6ee>
		}	
		else if (DATA3 == 2)
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	81 f4       	brne	.+32     	; 0x18c6 <_Z18operate_slave_autov+0x61e>
		{
			velocity_robot[0] = 0;
    18a6:	e6 ea       	ldi	r30, 0xA6	; 166
    18a8:	f2 e0       	ldi	r31, 0x02	; 2
    18aa:	11 82       	std	Z+1, r1	; 0x01
    18ac:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    18ae:	13 82       	std	Z+3, r1	; 0x03
    18b0:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = searching_rpm;
    18b2:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    18b6:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    18ba:	95 83       	std	Z+5, r25	; 0x05
    18bc:	84 83       	std	Z+4, r24	; 0x04
			pressed = true;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <pressed>
    18c4:	68 c0       	rjmp	.+208    	; 0x1996 <_Z18operate_slave_autov+0x6ee>
		}
		else if(DATA3 == 4)
    18c6:	84 30       	cpi	r24, 0x04	; 4
    18c8:	99 f4       	brne	.+38     	; 0x18f0 <_Z18operate_slave_autov+0x648>
		{
			velocity_robot[0] = -searching_rpm;
    18ca:	e6 ea       	ldi	r30, 0xA6	; 166
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    18d2:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    18d6:	91 95       	neg	r25
    18d8:	81 95       	neg	r24
    18da:	91 09       	sbc	r25, r1
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    18e0:	13 82       	std	Z+3, r1	; 0x03
    18e2:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;
    18e4:	15 82       	std	Z+5, r1	; 0x05
    18e6:	14 82       	std	Z+4, r1	; 0x04
			pressed = true;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <pressed>
    18ee:	53 c0       	rjmp	.+166    	; 0x1996 <_Z18operate_slave_autov+0x6ee>
		}
		else if(DATA3 == 3)
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	81 f4       	brne	.+32     	; 0x1914 <_Z18operate_slave_autov+0x66c>
		{
			velocity_robot[0] = 0;
    18f4:	e6 ea       	ldi	r30, 0xA6	; 166
    18f6:	f2 e0       	ldi	r31, 0x02	; 2
    18f8:	11 82       	std	Z+1, r1	; 0x01
    18fa:	10 82       	st	Z, r1
			velocity_robot[1] = searching_rpm;
    18fc:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    1900:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    1904:	93 83       	std	Z+3, r25	; 0x03
    1906:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    1908:	15 82       	std	Z+5, r1	; 0x05
    190a:	14 82       	std	Z+4, r1	; 0x04
			pressed = true;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <pressed>
    1912:	41 c0       	rjmp	.+130    	; 0x1996 <_Z18operate_slave_autov+0x6ee>
		}
		else if(DATA3 == 5)
    1914:	85 30       	cpi	r24, 0x05	; 5
    1916:	99 f4       	brne	.+38     	; 0x193e <_Z18operate_slave_autov+0x696>
		{
			velocity_robot[0] = 0;
    1918:	e6 ea       	ldi	r30, 0xA6	; 166
    191a:	f2 e0       	ldi	r31, 0x02	; 2
    191c:	11 82       	std	Z+1, r1	; 0x01
    191e:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    1920:	13 82       	std	Z+3, r1	; 0x03
    1922:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = -searching_rpm;
    1924:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    1928:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    192c:	91 95       	neg	r25
    192e:	81 95       	neg	r24
    1930:	91 09       	sbc	r25, r1
    1932:	95 83       	std	Z+5, r25	; 0x05
			pressed = true;		
    1934:	84 83       	std	Z+4, r24	; 0x04
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <pressed>
		}
		else if (DATA3 == 6)
    193c:	2c c0       	rjmp	.+88     	; 0x1996 <_Z18operate_slave_autov+0x6ee>
    193e:	86 30       	cpi	r24, 0x06	; 6
		{
			velocity_robot[0] = 0;
    1940:	81 f4       	brne	.+32     	; 0x1962 <_Z18operate_slave_autov+0x6ba>
    1942:	e6 ea       	ldi	r30, 0xA6	; 166
    1944:	f2 e0       	ldi	r31, 0x02	; 2
    1946:	11 82       	std	Z+1, r1	; 0x01
			velocity_robot[1] = 0;
    1948:	10 82       	st	Z, r1
    194a:	13 82       	std	Z+3, r1	; 0x03
			velocity_robot[2] = searching_rpm;
    194c:	12 82       	std	Z+2, r1	; 0x02
    194e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <searching_rpm>
    1952:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <searching_rpm+0x1>
    1956:	95 83       	std	Z+5, r25	; 0x05
			pressed = true;		
    1958:	84 83       	std	Z+4, r24	; 0x04
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <pressed>
		}
		else if (DATA3 == 7)
    1960:	1a c0       	rjmp	.+52     	; 0x1996 <_Z18operate_slave_autov+0x6ee>
    1962:	87 30       	cpi	r24, 0x07	; 7
		{
			reset_robot_velocity();
    1964:	a1 f4       	brne	.+40     	; 0x198e <_Z18operate_slave_autov+0x6e6>
    1966:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z20reset_robot_velocityv>
			pressed = false;
    196a:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <pressed>
			searching_rpm = SEARCH_RPM;
    196e:	8c e3       	ldi	r24, 0x3C	; 60
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <searching_rpm+0x1>
    1976:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <searching_rpm>
			searching = false;
    197a:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <searching>
			if(give_shtcock)
    197e:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <give_shtcock>
    1982:	88 23       	and	r24, r24
			{
				send_data_to_master(Give_shutcock);
    1984:	71 f0       	breq	.+28     	; 0x19a2 <_Z18operate_slave_autov+0x6fa>
    1986:	88 e0       	ldi	r24, 0x08	; 8
    1988:	28 dc       	rcall	.-1968   	; 0x11da <_Z19send_data_to_masterh>
				give_shtcock =	false;
    198a:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <give_shtcock>
			}
		}
		if (pressed)
    198e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <pressed>
    1992:	88 23       	and	r24, r24
    1994:	31 f0       	breq	.+12     	; 0x19a2 <_Z18operate_slave_autov+0x6fa>
			searching_rpm = ADJUST_RPM;
    1996:	84 e1       	ldi	r24, 0x14	; 20
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <searching_rpm+0x1>
    199e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <searching_rpm>
	}
		
	reset_auto = true;	
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <reset_auto>
	//UART0Transmit(' ');
	//UART0TransmitData(velocity_robot[1]);
	//UART0Transmit(' ');
	//UART0TransmitData(ramp_down_off_adj);
	//UART0TransmitString("\n\r");
}
    19a8:	0b c0       	rjmp	.+22     	; 0x19c0 <_Z18operate_slave_autov+0x718>
			Golden_Rack_Place();
			DATA1 = 0;
		}
	}
	
	if(Golden_Drop)
    19aa:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Golden_Drop>
    19ae:	81 11       	cpse	r24, r1
    19b0:	05 cd       	rjmp	.-1526   	; 0x13bc <_Z18operate_slave_autov+0x114>
    19b2:	8f cd       	rjmp	.-1250   	; 0x14d2 <_Z18operate_slave_autov+0x22a>
    19b4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Golden_Drop>
    19b8:	88 23       	and	r24, r24
    19ba:	09 f4       	brne	.+2      	; 0x19be <_Z18operate_slave_autov+0x716>
    19bc:	49 cf       	rjmp	.-366    	; 0x1850 <_Z18operate_slave_autov+0x5a8>
    19be:	fe cc       	rjmp	.-1540   	; 0x13bc <_Z18operate_slave_autov+0x114>
	//UART0Transmit(' ');
	//UART0TransmitData(velocity_robot[1]);
	//UART0Transmit(' ');
	//UART0TransmitData(ramp_down_off_adj);
	//UART0TransmitString("\n\r");
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	bf 90       	pop	r11
    19d8:	af 90       	pop	r10
    19da:	9f 90       	pop	r9
    19dc:	8f 90       	pop	r8
    19de:	7f 90       	pop	r7
    19e0:	6f 90       	pop	r6
    19e2:	5f 90       	pop	r5
    19e4:	4f 90       	pop	r4
    19e6:	08 95       	ret

000019e8 <__vector_9>:
	current_location = next_location;	
	ex.Reset_Distance();
}

ISR(PCINT0_vect)
{
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	0b b6       	in	r0, 0x3b	; 59
    19f4:	0f 92       	push	r0
    19f6:	2f 93       	push	r18
    19f8:	3f 93       	push	r19
    19fa:	4f 93       	push	r20
    19fc:	5f 93       	push	r21
    19fe:	6f 93       	push	r22
    1a00:	7f 93       	push	r23
    1a02:	8f 93       	push	r24
    1a04:	9f 93       	push	r25
    1a06:	af 93       	push	r26
    1a08:	bf 93       	push	r27
    1a0a:	ef 93       	push	r30
    1a0c:	ff 93       	push	r31
	if(moving && !searching && !final_step)
    1a0e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <moving>
    1a12:	88 23       	and	r24, r24
    1a14:	69 f0       	breq	.+26     	; 0x1a30 <__vector_9+0x48>
    1a16:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <searching>
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <__vector_9+0x48>
    1a1e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <final_step>
    1a22:	81 11       	cpse	r24, r1
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <__vector_9+0x48>
	{
		reset_motors();
    1a26:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z12reset_motorsv>
		stop_flag = true;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <stop_flag>
	}
	
}
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0b be       	out	0x3b, r0	; 59
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__subsf3>:
    1a56:	50 58       	subi	r21, 0x80	; 128

00001a58 <__addsf3>:
    1a58:	bb 27       	eor	r27, r27
    1a5a:	aa 27       	eor	r26, r26
    1a5c:	0e d0       	rcall	.+28     	; 0x1a7a <__addsf3x>
    1a5e:	75 c1       	rjmp	.+746    	; 0x1d4a <__fp_round>
    1a60:	66 d1       	rcall	.+716    	; 0x1d2e <__fp_pscA>
    1a62:	30 f0       	brcs	.+12     	; 0x1a70 <__addsf3+0x18>
    1a64:	6b d1       	rcall	.+726    	; 0x1d3c <__fp_pscB>
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <__addsf3+0x18>
    1a68:	31 f4       	brne	.+12     	; 0x1a76 <__addsf3+0x1e>
    1a6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <__addsf3+0x1a>
    1a6e:	1e f4       	brtc	.+6      	; 0x1a76 <__addsf3+0x1e>
    1a70:	5b c1       	rjmp	.+694    	; 0x1d28 <__fp_nan>
    1a72:	0e f4       	brtc	.+2      	; 0x1a76 <__addsf3+0x1e>
    1a74:	e0 95       	com	r30
    1a76:	e7 fb       	bst	r30, 7
    1a78:	51 c1       	rjmp	.+674    	; 0x1d1c <__fp_inf>

00001a7a <__addsf3x>:
    1a7a:	e9 2f       	mov	r30, r25
    1a7c:	77 d1       	rcall	.+750    	; 0x1d6c <__fp_split3>
    1a7e:	80 f3       	brcs	.-32     	; 0x1a60 <__addsf3+0x8>
    1a80:	ba 17       	cp	r27, r26
    1a82:	62 07       	cpc	r22, r18
    1a84:	73 07       	cpc	r23, r19
    1a86:	84 07       	cpc	r24, r20
    1a88:	95 07       	cpc	r25, r21
    1a8a:	18 f0       	brcs	.+6      	; 0x1a92 <__addsf3x+0x18>
    1a8c:	71 f4       	brne	.+28     	; 0x1aaa <__addsf3x+0x30>
    1a8e:	9e f5       	brtc	.+102    	; 0x1af6 <__addsf3x+0x7c>
    1a90:	8f c1       	rjmp	.+798    	; 0x1db0 <__fp_zero>
    1a92:	0e f4       	brtc	.+2      	; 0x1a96 <__addsf3x+0x1c>
    1a94:	e0 95       	com	r30
    1a96:	0b 2e       	mov	r0, r27
    1a98:	ba 2f       	mov	r27, r26
    1a9a:	a0 2d       	mov	r26, r0
    1a9c:	0b 01       	movw	r0, r22
    1a9e:	b9 01       	movw	r22, r18
    1aa0:	90 01       	movw	r18, r0
    1aa2:	0c 01       	movw	r0, r24
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	a0 01       	movw	r20, r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	ff 27       	eor	r31, r31
    1aac:	59 1b       	sub	r21, r25
    1aae:	99 f0       	breq	.+38     	; 0x1ad6 <__addsf3x+0x5c>
    1ab0:	59 3f       	cpi	r21, 0xF9	; 249
    1ab2:	50 f4       	brcc	.+20     	; 0x1ac8 <__addsf3x+0x4e>
    1ab4:	50 3e       	cpi	r21, 0xE0	; 224
    1ab6:	68 f1       	brcs	.+90     	; 0x1b12 <__addsf3x+0x98>
    1ab8:	1a 16       	cp	r1, r26
    1aba:	f0 40       	sbci	r31, 0x00	; 0
    1abc:	a2 2f       	mov	r26, r18
    1abe:	23 2f       	mov	r18, r19
    1ac0:	34 2f       	mov	r19, r20
    1ac2:	44 27       	eor	r20, r20
    1ac4:	58 5f       	subi	r21, 0xF8	; 248
    1ac6:	f3 cf       	rjmp	.-26     	; 0x1aae <__addsf3x+0x34>
    1ac8:	46 95       	lsr	r20
    1aca:	37 95       	ror	r19
    1acc:	27 95       	ror	r18
    1ace:	a7 95       	ror	r26
    1ad0:	f0 40       	sbci	r31, 0x00	; 0
    1ad2:	53 95       	inc	r21
    1ad4:	c9 f7       	brne	.-14     	; 0x1ac8 <__addsf3x+0x4e>
    1ad6:	7e f4       	brtc	.+30     	; 0x1af6 <__addsf3x+0x7c>
    1ad8:	1f 16       	cp	r1, r31
    1ada:	ba 0b       	sbc	r27, r26
    1adc:	62 0b       	sbc	r22, r18
    1ade:	73 0b       	sbc	r23, r19
    1ae0:	84 0b       	sbc	r24, r20
    1ae2:	ba f0       	brmi	.+46     	; 0x1b12 <__addsf3x+0x98>
    1ae4:	91 50       	subi	r25, 0x01	; 1
    1ae6:	a1 f0       	breq	.+40     	; 0x1b10 <__addsf3x+0x96>
    1ae8:	ff 0f       	add	r31, r31
    1aea:	bb 1f       	adc	r27, r27
    1aec:	66 1f       	adc	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	88 1f       	adc	r24, r24
    1af2:	c2 f7       	brpl	.-16     	; 0x1ae4 <__addsf3x+0x6a>
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <__addsf3x+0x98>
    1af6:	ba 0f       	add	r27, r26
    1af8:	62 1f       	adc	r22, r18
    1afa:	73 1f       	adc	r23, r19
    1afc:	84 1f       	adc	r24, r20
    1afe:	48 f4       	brcc	.+18     	; 0x1b12 <__addsf3x+0x98>
    1b00:	87 95       	ror	r24
    1b02:	77 95       	ror	r23
    1b04:	67 95       	ror	r22
    1b06:	b7 95       	ror	r27
    1b08:	f7 95       	ror	r31
    1b0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b0c:	08 f0       	brcs	.+2      	; 0x1b10 <__addsf3x+0x96>
    1b0e:	b3 cf       	rjmp	.-154    	; 0x1a76 <__addsf3+0x1e>
    1b10:	93 95       	inc	r25
    1b12:	88 0f       	add	r24, r24
    1b14:	08 f0       	brcs	.+2      	; 0x1b18 <__addsf3x+0x9e>
    1b16:	99 27       	eor	r25, r25
    1b18:	ee 0f       	add	r30, r30
    1b1a:	97 95       	ror	r25
    1b1c:	87 95       	ror	r24
    1b1e:	08 95       	ret

00001b20 <__cmpsf2>:
    1b20:	d9 d0       	rcall	.+434    	; 0x1cd4 <__fp_cmp>
    1b22:	08 f4       	brcc	.+2      	; 0x1b26 <__cmpsf2+0x6>
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	08 95       	ret

00001b28 <__divsf3>:
    1b28:	0c d0       	rcall	.+24     	; 0x1b42 <__divsf3x>
    1b2a:	0f c1       	rjmp	.+542    	; 0x1d4a <__fp_round>
    1b2c:	07 d1       	rcall	.+526    	; 0x1d3c <__fp_pscB>
    1b2e:	40 f0       	brcs	.+16     	; 0x1b40 <__divsf3+0x18>
    1b30:	fe d0       	rcall	.+508    	; 0x1d2e <__fp_pscA>
    1b32:	30 f0       	brcs	.+12     	; 0x1b40 <__divsf3+0x18>
    1b34:	21 f4       	brne	.+8      	; 0x1b3e <__divsf3+0x16>
    1b36:	5f 3f       	cpi	r21, 0xFF	; 255
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <__divsf3+0x18>
    1b3a:	f0 c0       	rjmp	.+480    	; 0x1d1c <__fp_inf>
    1b3c:	51 11       	cpse	r21, r1
    1b3e:	39 c1       	rjmp	.+626    	; 0x1db2 <__fp_szero>
    1b40:	f3 c0       	rjmp	.+486    	; 0x1d28 <__fp_nan>

00001b42 <__divsf3x>:
    1b42:	14 d1       	rcall	.+552    	; 0x1d6c <__fp_split3>
    1b44:	98 f3       	brcs	.-26     	; 0x1b2c <__divsf3+0x4>

00001b46 <__divsf3_pse>:
    1b46:	99 23       	and	r25, r25
    1b48:	c9 f3       	breq	.-14     	; 0x1b3c <__divsf3+0x14>
    1b4a:	55 23       	and	r21, r21
    1b4c:	b1 f3       	breq	.-20     	; 0x1b3a <__divsf3+0x12>
    1b4e:	95 1b       	sub	r25, r21
    1b50:	55 0b       	sbc	r21, r21
    1b52:	bb 27       	eor	r27, r27
    1b54:	aa 27       	eor	r26, r26
    1b56:	62 17       	cp	r22, r18
    1b58:	73 07       	cpc	r23, r19
    1b5a:	84 07       	cpc	r24, r20
    1b5c:	38 f0       	brcs	.+14     	; 0x1b6c <__divsf3_pse+0x26>
    1b5e:	9f 5f       	subi	r25, 0xFF	; 255
    1b60:	5f 4f       	sbci	r21, 0xFF	; 255
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	44 1f       	adc	r20, r20
    1b68:	aa 1f       	adc	r26, r26
    1b6a:	a9 f3       	breq	.-22     	; 0x1b56 <__divsf3_pse+0x10>
    1b6c:	33 d0       	rcall	.+102    	; 0x1bd4 <__divsf3_pse+0x8e>
    1b6e:	0e 2e       	mov	r0, r30
    1b70:	3a f0       	brmi	.+14     	; 0x1b80 <__divsf3_pse+0x3a>
    1b72:	e0 e8       	ldi	r30, 0x80	; 128
    1b74:	30 d0       	rcall	.+96     	; 0x1bd6 <__divsf3_pse+0x90>
    1b76:	91 50       	subi	r25, 0x01	; 1
    1b78:	50 40       	sbci	r21, 0x00	; 0
    1b7a:	e6 95       	lsr	r30
    1b7c:	00 1c       	adc	r0, r0
    1b7e:	ca f7       	brpl	.-14     	; 0x1b72 <__divsf3_pse+0x2c>
    1b80:	29 d0       	rcall	.+82     	; 0x1bd4 <__divsf3_pse+0x8e>
    1b82:	fe 2f       	mov	r31, r30
    1b84:	27 d0       	rcall	.+78     	; 0x1bd4 <__divsf3_pse+0x8e>
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	bb 1f       	adc	r27, r27
    1b8e:	26 17       	cp	r18, r22
    1b90:	37 07       	cpc	r19, r23
    1b92:	48 07       	cpc	r20, r24
    1b94:	ab 07       	cpc	r26, r27
    1b96:	b0 e8       	ldi	r27, 0x80	; 128
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <__divsf3_pse+0x56>
    1b9a:	bb 0b       	sbc	r27, r27
    1b9c:	80 2d       	mov	r24, r0
    1b9e:	bf 01       	movw	r22, r30
    1ba0:	ff 27       	eor	r31, r31
    1ba2:	93 58       	subi	r25, 0x83	; 131
    1ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba6:	2a f0       	brmi	.+10     	; 0x1bb2 <__divsf3_pse+0x6c>
    1ba8:	9e 3f       	cpi	r25, 0xFE	; 254
    1baa:	51 05       	cpc	r21, r1
    1bac:	68 f0       	brcs	.+26     	; 0x1bc8 <__divsf3_pse+0x82>
    1bae:	b6 c0       	rjmp	.+364    	; 0x1d1c <__fp_inf>
    1bb0:	00 c1       	rjmp	.+512    	; 0x1db2 <__fp_szero>
    1bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb4:	ec f3       	brlt	.-6      	; 0x1bb0 <__divsf3_pse+0x6a>
    1bb6:	98 3e       	cpi	r25, 0xE8	; 232
    1bb8:	dc f3       	brlt	.-10     	; 0x1bb0 <__divsf3_pse+0x6a>
    1bba:	86 95       	lsr	r24
    1bbc:	77 95       	ror	r23
    1bbe:	67 95       	ror	r22
    1bc0:	b7 95       	ror	r27
    1bc2:	f7 95       	ror	r31
    1bc4:	9f 5f       	subi	r25, 0xFF	; 255
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <__divsf3_pse+0x74>
    1bc8:	88 0f       	add	r24, r24
    1bca:	91 1d       	adc	r25, r1
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	97 f9       	bld	r25, 7
    1bd2:	08 95       	ret
    1bd4:	e1 e0       	ldi	r30, 0x01	; 1
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	62 17       	cp	r22, r18
    1be0:	73 07       	cpc	r23, r19
    1be2:	84 07       	cpc	r24, r20
    1be4:	ba 07       	cpc	r27, r26
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__divsf3_pse+0xaa>
    1be8:	62 1b       	sub	r22, r18
    1bea:	73 0b       	sbc	r23, r19
    1bec:	84 0b       	sbc	r24, r20
    1bee:	ba 0b       	sbc	r27, r26
    1bf0:	ee 1f       	adc	r30, r30
    1bf2:	88 f7       	brcc	.-30     	; 0x1bd6 <__divsf3_pse+0x90>
    1bf4:	e0 95       	com	r30
    1bf6:	08 95       	ret

00001bf8 <__fixsfsi>:
    1bf8:	04 d0       	rcall	.+8      	; 0x1c02 <__fixunssfsi>
    1bfa:	68 94       	set
    1bfc:	b1 11       	cpse	r27, r1
    1bfe:	d9 c0       	rjmp	.+434    	; 0x1db2 <__fp_szero>
    1c00:	08 95       	ret

00001c02 <__fixunssfsi>:
    1c02:	bc d0       	rcall	.+376    	; 0x1d7c <__fp_splitA>
    1c04:	88 f0       	brcs	.+34     	; 0x1c28 <__fixunssfsi+0x26>
    1c06:	9f 57       	subi	r25, 0x7F	; 127
    1c08:	90 f0       	brcs	.+36     	; 0x1c2e <__fixunssfsi+0x2c>
    1c0a:	b9 2f       	mov	r27, r25
    1c0c:	99 27       	eor	r25, r25
    1c0e:	b7 51       	subi	r27, 0x17	; 23
    1c10:	a0 f0       	brcs	.+40     	; 0x1c3a <__fixunssfsi+0x38>
    1c12:	d1 f0       	breq	.+52     	; 0x1c48 <__fixunssfsi+0x46>
    1c14:	66 0f       	add	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	88 1f       	adc	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	1a f0       	brmi	.+6      	; 0x1c24 <__fixunssfsi+0x22>
    1c1e:	ba 95       	dec	r27
    1c20:	c9 f7       	brne	.-14     	; 0x1c14 <__fixunssfsi+0x12>
    1c22:	12 c0       	rjmp	.+36     	; 0x1c48 <__fixunssfsi+0x46>
    1c24:	b1 30       	cpi	r27, 0x01	; 1
    1c26:	81 f0       	breq	.+32     	; 0x1c48 <__fixunssfsi+0x46>
    1c28:	c3 d0       	rcall	.+390    	; 0x1db0 <__fp_zero>
    1c2a:	b1 e0       	ldi	r27, 0x01	; 1
    1c2c:	08 95       	ret
    1c2e:	c0 c0       	rjmp	.+384    	; 0x1db0 <__fp_zero>
    1c30:	67 2f       	mov	r22, r23
    1c32:	78 2f       	mov	r23, r24
    1c34:	88 27       	eor	r24, r24
    1c36:	b8 5f       	subi	r27, 0xF8	; 248
    1c38:	39 f0       	breq	.+14     	; 0x1c48 <__fixunssfsi+0x46>
    1c3a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c3c:	cc f3       	brlt	.-14     	; 0x1c30 <__fixunssfsi+0x2e>
    1c3e:	86 95       	lsr	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	b3 95       	inc	r27
    1c46:	d9 f7       	brne	.-10     	; 0x1c3e <__fixunssfsi+0x3c>
    1c48:	3e f4       	brtc	.+14     	; 0x1c58 <__fixunssfsi+0x56>
    1c4a:	90 95       	com	r25
    1c4c:	80 95       	com	r24
    1c4e:	70 95       	com	r23
    1c50:	61 95       	neg	r22
    1c52:	7f 4f       	sbci	r23, 0xFF	; 255
    1c54:	8f 4f       	sbci	r24, 0xFF	; 255
    1c56:	9f 4f       	sbci	r25, 0xFF	; 255
    1c58:	08 95       	ret

00001c5a <__floatunsisf>:
    1c5a:	e8 94       	clt
    1c5c:	09 c0       	rjmp	.+18     	; 0x1c70 <__floatsisf+0x12>

00001c5e <__floatsisf>:
    1c5e:	97 fb       	bst	r25, 7
    1c60:	3e f4       	brtc	.+14     	; 0x1c70 <__floatsisf+0x12>
    1c62:	90 95       	com	r25
    1c64:	80 95       	com	r24
    1c66:	70 95       	com	r23
    1c68:	61 95       	neg	r22
    1c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	99 23       	and	r25, r25
    1c72:	a9 f0       	breq	.+42     	; 0x1c9e <__floatsisf+0x40>
    1c74:	f9 2f       	mov	r31, r25
    1c76:	96 e9       	ldi	r25, 0x96	; 150
    1c78:	bb 27       	eor	r27, r27
    1c7a:	93 95       	inc	r25
    1c7c:	f6 95       	lsr	r31
    1c7e:	87 95       	ror	r24
    1c80:	77 95       	ror	r23
    1c82:	67 95       	ror	r22
    1c84:	b7 95       	ror	r27
    1c86:	f1 11       	cpse	r31, r1
    1c88:	f8 cf       	rjmp	.-16     	; 0x1c7a <__floatsisf+0x1c>
    1c8a:	fa f4       	brpl	.+62     	; 0x1cca <__floatsisf+0x6c>
    1c8c:	bb 0f       	add	r27, r27
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <__floatsisf+0x36>
    1c90:	60 ff       	sbrs	r22, 0
    1c92:	1b c0       	rjmp	.+54     	; 0x1cca <__floatsisf+0x6c>
    1c94:	6f 5f       	subi	r22, 0xFF	; 255
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	16 c0       	rjmp	.+44     	; 0x1cca <__floatsisf+0x6c>
    1c9e:	88 23       	and	r24, r24
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <__floatsisf+0x48>
    1ca2:	96 e9       	ldi	r25, 0x96	; 150
    1ca4:	11 c0       	rjmp	.+34     	; 0x1cc8 <__floatsisf+0x6a>
    1ca6:	77 23       	and	r23, r23
    1ca8:	21 f0       	breq	.+8      	; 0x1cb2 <__floatsisf+0x54>
    1caa:	9e e8       	ldi	r25, 0x8E	; 142
    1cac:	87 2f       	mov	r24, r23
    1cae:	76 2f       	mov	r23, r22
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <__floatsisf+0x5e>
    1cb2:	66 23       	and	r22, r22
    1cb4:	71 f0       	breq	.+28     	; 0x1cd2 <__floatsisf+0x74>
    1cb6:	96 e8       	ldi	r25, 0x86	; 134
    1cb8:	86 2f       	mov	r24, r22
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	2a f0       	brmi	.+10     	; 0x1cca <__floatsisf+0x6c>
    1cc0:	9a 95       	dec	r25
    1cc2:	66 0f       	add	r22, r22
    1cc4:	77 1f       	adc	r23, r23
    1cc6:	88 1f       	adc	r24, r24
    1cc8:	da f7       	brpl	.-10     	; 0x1cc0 <__floatsisf+0x62>
    1cca:	88 0f       	add	r24, r24
    1ccc:	96 95       	lsr	r25
    1cce:	87 95       	ror	r24
    1cd0:	97 f9       	bld	r25, 7
    1cd2:	08 95       	ret

00001cd4 <__fp_cmp>:
    1cd4:	99 0f       	add	r25, r25
    1cd6:	00 08       	sbc	r0, r0
    1cd8:	55 0f       	add	r21, r21
    1cda:	aa 0b       	sbc	r26, r26
    1cdc:	e0 e8       	ldi	r30, 0x80	; 128
    1cde:	fe ef       	ldi	r31, 0xFE	; 254
    1ce0:	16 16       	cp	r1, r22
    1ce2:	17 06       	cpc	r1, r23
    1ce4:	e8 07       	cpc	r30, r24
    1ce6:	f9 07       	cpc	r31, r25
    1ce8:	c0 f0       	brcs	.+48     	; 0x1d1a <__fp_cmp+0x46>
    1cea:	12 16       	cp	r1, r18
    1cec:	13 06       	cpc	r1, r19
    1cee:	e4 07       	cpc	r30, r20
    1cf0:	f5 07       	cpc	r31, r21
    1cf2:	98 f0       	brcs	.+38     	; 0x1d1a <__fp_cmp+0x46>
    1cf4:	62 1b       	sub	r22, r18
    1cf6:	73 0b       	sbc	r23, r19
    1cf8:	84 0b       	sbc	r24, r20
    1cfa:	95 0b       	sbc	r25, r21
    1cfc:	39 f4       	brne	.+14     	; 0x1d0c <__fp_cmp+0x38>
    1cfe:	0a 26       	eor	r0, r26
    1d00:	61 f0       	breq	.+24     	; 0x1d1a <__fp_cmp+0x46>
    1d02:	23 2b       	or	r18, r19
    1d04:	24 2b       	or	r18, r20
    1d06:	25 2b       	or	r18, r21
    1d08:	21 f4       	brne	.+8      	; 0x1d12 <__fp_cmp+0x3e>
    1d0a:	08 95       	ret
    1d0c:	0a 26       	eor	r0, r26
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <__fp_cmp+0x3e>
    1d10:	a1 40       	sbci	r26, 0x01	; 1
    1d12:	a6 95       	lsr	r26
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
    1d16:	81 1d       	adc	r24, r1
    1d18:	81 1d       	adc	r24, r1
    1d1a:	08 95       	ret

00001d1c <__fp_inf>:
    1d1c:	97 f9       	bld	r25, 7
    1d1e:	9f 67       	ori	r25, 0x7F	; 127
    1d20:	80 e8       	ldi	r24, 0x80	; 128
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	08 95       	ret

00001d28 <__fp_nan>:
    1d28:	9f ef       	ldi	r25, 0xFF	; 255
    1d2a:	80 ec       	ldi	r24, 0xC0	; 192
    1d2c:	08 95       	ret

00001d2e <__fp_pscA>:
    1d2e:	00 24       	eor	r0, r0
    1d30:	0a 94       	dec	r0
    1d32:	16 16       	cp	r1, r22
    1d34:	17 06       	cpc	r1, r23
    1d36:	18 06       	cpc	r1, r24
    1d38:	09 06       	cpc	r0, r25
    1d3a:	08 95       	ret

00001d3c <__fp_pscB>:
    1d3c:	00 24       	eor	r0, r0
    1d3e:	0a 94       	dec	r0
    1d40:	12 16       	cp	r1, r18
    1d42:	13 06       	cpc	r1, r19
    1d44:	14 06       	cpc	r1, r20
    1d46:	05 06       	cpc	r0, r21
    1d48:	08 95       	ret

00001d4a <__fp_round>:
    1d4a:	09 2e       	mov	r0, r25
    1d4c:	03 94       	inc	r0
    1d4e:	00 0c       	add	r0, r0
    1d50:	11 f4       	brne	.+4      	; 0x1d56 <__fp_round+0xc>
    1d52:	88 23       	and	r24, r24
    1d54:	52 f0       	brmi	.+20     	; 0x1d6a <__fp_round+0x20>
    1d56:	bb 0f       	add	r27, r27
    1d58:	40 f4       	brcc	.+16     	; 0x1d6a <__fp_round+0x20>
    1d5a:	bf 2b       	or	r27, r31
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <__fp_round+0x18>
    1d5e:	60 ff       	sbrs	r22, 0
    1d60:	04 c0       	rjmp	.+8      	; 0x1d6a <__fp_round+0x20>
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	8f 4f       	sbci	r24, 0xFF	; 255
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	08 95       	ret

00001d6c <__fp_split3>:
    1d6c:	57 fd       	sbrc	r21, 7
    1d6e:	90 58       	subi	r25, 0x80	; 128
    1d70:	44 0f       	add	r20, r20
    1d72:	55 1f       	adc	r21, r21
    1d74:	59 f0       	breq	.+22     	; 0x1d8c <__fp_splitA+0x10>
    1d76:	5f 3f       	cpi	r21, 0xFF	; 255
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <__fp_splitA+0x1a>
    1d7a:	47 95       	ror	r20

00001d7c <__fp_splitA>:
    1d7c:	88 0f       	add	r24, r24
    1d7e:	97 fb       	bst	r25, 7
    1d80:	99 1f       	adc	r25, r25
    1d82:	61 f0       	breq	.+24     	; 0x1d9c <__fp_splitA+0x20>
    1d84:	9f 3f       	cpi	r25, 0xFF	; 255
    1d86:	79 f0       	breq	.+30     	; 0x1da6 <__fp_splitA+0x2a>
    1d88:	87 95       	ror	r24
    1d8a:	08 95       	ret
    1d8c:	12 16       	cp	r1, r18
    1d8e:	13 06       	cpc	r1, r19
    1d90:	14 06       	cpc	r1, r20
    1d92:	55 1f       	adc	r21, r21
    1d94:	f2 cf       	rjmp	.-28     	; 0x1d7a <__fp_split3+0xe>
    1d96:	46 95       	lsr	r20
    1d98:	f1 df       	rcall	.-30     	; 0x1d7c <__fp_splitA>
    1d9a:	08 c0       	rjmp	.+16     	; 0x1dac <__fp_splitA+0x30>
    1d9c:	16 16       	cp	r1, r22
    1d9e:	17 06       	cpc	r1, r23
    1da0:	18 06       	cpc	r1, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	f1 cf       	rjmp	.-30     	; 0x1d88 <__fp_splitA+0xc>
    1da6:	86 95       	lsr	r24
    1da8:	71 05       	cpc	r23, r1
    1daa:	61 05       	cpc	r22, r1
    1dac:	08 94       	sec
    1dae:	08 95       	ret

00001db0 <__fp_zero>:
    1db0:	e8 94       	clt

00001db2 <__fp_szero>:
    1db2:	bb 27       	eor	r27, r27
    1db4:	66 27       	eor	r22, r22
    1db6:	77 27       	eor	r23, r23
    1db8:	cb 01       	movw	r24, r22
    1dba:	97 f9       	bld	r25, 7
    1dbc:	08 95       	ret

00001dbe <__gesf2>:
    1dbe:	8a df       	rcall	.-236    	; 0x1cd4 <__fp_cmp>
    1dc0:	08 f4       	brcc	.+2      	; 0x1dc4 <__gesf2+0x6>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	08 95       	ret

00001dc6 <__mulsf3>:
    1dc6:	0b d0       	rcall	.+22     	; 0x1dde <__mulsf3x>
    1dc8:	c0 cf       	rjmp	.-128    	; 0x1d4a <__fp_round>
    1dca:	b1 df       	rcall	.-158    	; 0x1d2e <__fp_pscA>
    1dcc:	28 f0       	brcs	.+10     	; 0x1dd8 <__mulsf3+0x12>
    1dce:	b6 df       	rcall	.-148    	; 0x1d3c <__fp_pscB>
    1dd0:	18 f0       	brcs	.+6      	; 0x1dd8 <__mulsf3+0x12>
    1dd2:	95 23       	and	r25, r21
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <__mulsf3+0x12>
    1dd6:	a2 cf       	rjmp	.-188    	; 0x1d1c <__fp_inf>
    1dd8:	a7 cf       	rjmp	.-178    	; 0x1d28 <__fp_nan>
    1dda:	11 24       	eor	r1, r1
    1ddc:	ea cf       	rjmp	.-44     	; 0x1db2 <__fp_szero>

00001dde <__mulsf3x>:
    1dde:	c6 df       	rcall	.-116    	; 0x1d6c <__fp_split3>
    1de0:	a0 f3       	brcs	.-24     	; 0x1dca <__mulsf3+0x4>

00001de2 <__mulsf3_pse>:
    1de2:	95 9f       	mul	r25, r21
    1de4:	d1 f3       	breq	.-12     	; 0x1dda <__mulsf3+0x14>
    1de6:	95 0f       	add	r25, r21
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	55 1f       	adc	r21, r21
    1dec:	62 9f       	mul	r22, r18
    1dee:	f0 01       	movw	r30, r0
    1df0:	72 9f       	mul	r23, r18
    1df2:	bb 27       	eor	r27, r27
    1df4:	f0 0d       	add	r31, r0
    1df6:	b1 1d       	adc	r27, r1
    1df8:	63 9f       	mul	r22, r19
    1dfa:	aa 27       	eor	r26, r26
    1dfc:	f0 0d       	add	r31, r0
    1dfe:	b1 1d       	adc	r27, r1
    1e00:	aa 1f       	adc	r26, r26
    1e02:	64 9f       	mul	r22, r20
    1e04:	66 27       	eor	r22, r22
    1e06:	b0 0d       	add	r27, r0
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	66 1f       	adc	r22, r22
    1e0c:	82 9f       	mul	r24, r18
    1e0e:	22 27       	eor	r18, r18
    1e10:	b0 0d       	add	r27, r0
    1e12:	a1 1d       	adc	r26, r1
    1e14:	62 1f       	adc	r22, r18
    1e16:	73 9f       	mul	r23, r19
    1e18:	b0 0d       	add	r27, r0
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	62 1f       	adc	r22, r18
    1e1e:	83 9f       	mul	r24, r19
    1e20:	a0 0d       	add	r26, r0
    1e22:	61 1d       	adc	r22, r1
    1e24:	22 1f       	adc	r18, r18
    1e26:	74 9f       	mul	r23, r20
    1e28:	33 27       	eor	r19, r19
    1e2a:	a0 0d       	add	r26, r0
    1e2c:	61 1d       	adc	r22, r1
    1e2e:	23 1f       	adc	r18, r19
    1e30:	84 9f       	mul	r24, r20
    1e32:	60 0d       	add	r22, r0
    1e34:	21 1d       	adc	r18, r1
    1e36:	82 2f       	mov	r24, r18
    1e38:	76 2f       	mov	r23, r22
    1e3a:	6a 2f       	mov	r22, r26
    1e3c:	11 24       	eor	r1, r1
    1e3e:	9f 57       	subi	r25, 0x7F	; 127
    1e40:	50 40       	sbci	r21, 0x00	; 0
    1e42:	8a f0       	brmi	.+34     	; 0x1e66 <__mulsf3_pse+0x84>
    1e44:	e1 f0       	breq	.+56     	; 0x1e7e <__mulsf3_pse+0x9c>
    1e46:	88 23       	and	r24, r24
    1e48:	4a f0       	brmi	.+18     	; 0x1e5c <__mulsf3_pse+0x7a>
    1e4a:	ee 0f       	add	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	bb 1f       	adc	r27, r27
    1e50:	66 1f       	adc	r22, r22
    1e52:	77 1f       	adc	r23, r23
    1e54:	88 1f       	adc	r24, r24
    1e56:	91 50       	subi	r25, 0x01	; 1
    1e58:	50 40       	sbci	r21, 0x00	; 0
    1e5a:	a9 f7       	brne	.-22     	; 0x1e46 <__mulsf3_pse+0x64>
    1e5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e5e:	51 05       	cpc	r21, r1
    1e60:	70 f0       	brcs	.+28     	; 0x1e7e <__mulsf3_pse+0x9c>
    1e62:	5c cf       	rjmp	.-328    	; 0x1d1c <__fp_inf>
    1e64:	a6 cf       	rjmp	.-180    	; 0x1db2 <__fp_szero>
    1e66:	5f 3f       	cpi	r21, 0xFF	; 255
    1e68:	ec f3       	brlt	.-6      	; 0x1e64 <__mulsf3_pse+0x82>
    1e6a:	98 3e       	cpi	r25, 0xE8	; 232
    1e6c:	dc f3       	brlt	.-10     	; 0x1e64 <__mulsf3_pse+0x82>
    1e6e:	86 95       	lsr	r24
    1e70:	77 95       	ror	r23
    1e72:	67 95       	ror	r22
    1e74:	b7 95       	ror	r27
    1e76:	f7 95       	ror	r31
    1e78:	e7 95       	ror	r30
    1e7a:	9f 5f       	subi	r25, 0xFF	; 255
    1e7c:	c1 f7       	brne	.-16     	; 0x1e6e <__mulsf3_pse+0x8c>
    1e7e:	fe 2b       	or	r31, r30
    1e80:	88 0f       	add	r24, r24
    1e82:	91 1d       	adc	r25, r1
    1e84:	96 95       	lsr	r25
    1e86:	87 95       	ror	r24
    1e88:	97 f9       	bld	r25, 7
    1e8a:	08 95       	ret

00001e8c <__mulshisi3>:
    1e8c:	b7 ff       	sbrs	r27, 7
    1e8e:	0c c0       	rjmp	.+24     	; 0x1ea8 <__muluhisi3>

00001e90 <__mulohisi3>:
    1e90:	0b d0       	rcall	.+22     	; 0x1ea8 <__muluhisi3>
    1e92:	82 1b       	sub	r24, r18
    1e94:	93 0b       	sbc	r25, r19
    1e96:	08 95       	ret

00001e98 <__tablejump2__>:
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	88 1f       	adc	r24, r24
    1e9e:	8b bf       	out	0x3b, r24	; 59
    1ea0:	07 90       	elpm	r0, Z+
    1ea2:	f6 91       	elpm	r31, Z
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	19 94       	eijmp

00001ea8 <__muluhisi3>:
    1ea8:	09 d0       	rcall	.+18     	; 0x1ebc <__umulhisi3>
    1eaa:	a5 9f       	mul	r26, r21
    1eac:	90 0d       	add	r25, r0
    1eae:	b4 9f       	mul	r27, r20
    1eb0:	90 0d       	add	r25, r0
    1eb2:	a4 9f       	mul	r26, r20
    1eb4:	80 0d       	add	r24, r0
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	11 24       	eor	r1, r1
    1eba:	08 95       	ret

00001ebc <__umulhisi3>:
    1ebc:	a2 9f       	mul	r26, r18
    1ebe:	b0 01       	movw	r22, r0
    1ec0:	b3 9f       	mul	r27, r19
    1ec2:	c0 01       	movw	r24, r0
    1ec4:	a3 9f       	mul	r26, r19
    1ec6:	70 0d       	add	r23, r0
    1ec8:	81 1d       	adc	r24, r1
    1eca:	11 24       	eor	r1, r1
    1ecc:	91 1d       	adc	r25, r1
    1ece:	b2 9f       	mul	r27, r18
    1ed0:	70 0d       	add	r23, r0
    1ed2:	81 1d       	adc	r24, r1
    1ed4:	11 24       	eor	r1, r1
    1ed6:	91 1d       	adc	r25, r1
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>

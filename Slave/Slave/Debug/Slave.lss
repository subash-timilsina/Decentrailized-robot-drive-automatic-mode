
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000017ca  0000185e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d6  0080020c  0080020c  0000186a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032da  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016e7  00000000  00000000  00004e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b1  00000000  00000000  00006525  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a8  00000000  00000000  00007ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012c5  00000000  00000000  00008280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001448  00000000  00000000  00009545  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000a98d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	e3 c1       	rjmp	.+966    	; 0x3cc <__vector_1>
       6:	00 00       	nop
       8:	18 c2       	rjmp	.+1072   	; 0x43a <__vector_2>
       a:	00 00       	nop
       c:	4d c2       	rjmp	.+1178   	; 0x4a8 <__vector_3>
       e:	00 00       	nop
      10:	82 c2       	rjmp	.+1284   	; 0x516 <__vector_4>
      12:	00 00       	nop
      14:	ee c2       	rjmp	.+1500   	; 0x5f2 <__vector_5>
      16:	00 00       	nop
      18:	b5 c2       	rjmp	.+1386   	; 0x584 <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c6       	rjmp	.+3204   	; 0xcea <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3c c6       	rjmp	.+3192   	; 0xd0a <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	db c2       	rjmp	.+1462   	; 0x660 <__vector_42>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2e c6       	rjmp	.+3164   	; 0xd2a <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	38 c6       	rjmp	.+3184   	; 0xd4a <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	7f 03       	fmul	r23, r23

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ea ec       	ldi	r30, 0xCA	; 202
      fe:	f7 e1       	ldi	r31, 0x17	; 23
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ac 30       	cpi	r26, 0x0C	; 12
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	ac e0       	ldi	r26, 0x0C	; 12
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a2 3e       	cpi	r26, 0xE2	; 226
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	b6 d3       	rcall	.+1900   	; 0x8ae <main>
     142:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z10drive_initv>:
 
 
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
	 pidflag = false; 
     154:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <pidflag>
	 for(id=0;id<4;id++)
     158:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <id+0x1>
     15c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <id>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 velocity_motor[id] = 0;
     164:	9c 01       	movw	r18, r24
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	f9 01       	movw	r30, r18
     16c:	e2 55       	subi	r30, 0x52	; 82
     16e:	fd 4f       	sbci	r31, 0xFD	; 253
     170:	11 82       	std	Z+1, r1	; 0x01
     172:	10 82       	st	Z, r1
		 velocity_robot[id] = 0;
     174:	f9 01       	movw	r30, r18
     176:	ea 55       	subi	r30, 0x5A	; 90
     178:	fd 4f       	sbci	r31, 0xFD	; 253
     17a:	11 82       	std	Z+1, r1	; 0x01
     17c:	10 82       	st	Z, r1
		 m[id].Initialise(id+1);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	68 0f       	add	r22, r24
     182:	86 56       	subi	r24, 0x66	; 102
     184:	9d 4f       	sbci	r25, 0xFD	; 253
     186:	fe d4       	rcall	.+2556   	; 0xb84 <_ZN5Motor10InitialiseEh>
		 e[id].Initialise(id+1);
     188:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     18c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	68 0f       	add	r22, r24
     194:	9c 01       	movw	r18, r24
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	8a 58       	subi	r24, 0x8A	; 138
     1a8:	9d 4f       	sbci	r25, 0xFD	; 253
     1aa:	31 d3       	rcall	.+1634   	; 0x80e <_ZN7Encoder10InitialiseEh>
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
     1ac:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     1b0:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     1b4:	9c 01       	movw	r18, r24
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f5 e8       	ldi	r31, 0x85	; 133
     1ce:	cf 2e       	mov	r12, r31
     1d0:	fb ee       	ldi	r31, 0xEB	; 235
     1d2:	df 2e       	mov	r13, r31
     1d4:	f1 e5       	ldi	r31, 0x51	; 81
     1d6:	ef 2e       	mov	r14, r31
     1d8:	ff e3       	ldi	r31, 0x3F	; 63
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	98 01       	movw	r18, r16
     1e4:	4c e5       	ldi	r20, 0x5C	; 92
     1e6:	5f e8       	ldi	r21, 0x8F	; 143
     1e8:	6a e1       	ldi	r22, 0x1A	; 26
     1ea:	70 e4       	ldi	r23, 0x40	; 64
     1ec:	84 5f       	subi	r24, 0xF4	; 244
     1ee:	9d 4f       	sbci	r25, 0xFD	; 253
     1f0:	d7 d4       	rcall	.+2478   	; 0xba0 <_ZN3PID7Set_PidEfff>
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
	 pidflag = false; 
	 for(id=0;id<4;id++)
     1f2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     1f6:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     200:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     204:	84 30       	cpi	r24, 0x04	; 4
     206:	91 05       	cpc	r25, r1
     208:	0c f4       	brge	.+2      	; 0x20c <_Z10drive_initv+0xc4>
     20a:	ac cf       	rjmp	.-168    	; 0x164 <_Z10drive_initv+0x1c>
		 velocity_robot[id] = 0;
		 m[id].Initialise(id+1);
		 e[id].Initialise(id+1);
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
	 }
	 ex.Initialise(1);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	81 e7       	ldi	r24, 0x71	; 113
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	3c d3       	rcall	.+1656   	; 0x88c <_ZN12FreeWheelEnc10InitialiseEh>
	 ey.Initialise(2);
     214:	62 e0       	ldi	r22, 0x02	; 2
     216:	8c e6       	ldi	r24, 0x6C	; 108
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	38 d3       	rcall	.+1648   	; 0x88c <_ZN12FreeWheelEnc10InitialiseEh>
     21c:	1f 91       	pop	r17
 }
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	cf 90       	pop	r12
     228:	08 95       	ret

0000022a <_Z24calculate_wheel_velocityv>:
     22a:	8f 92       	push	r8
 
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
     22c:	9f 92       	push	r9
     22e:	af 92       	push	r10
     230:	bf 92       	push	r11
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ce ea       	ldi	r28, 0xAE	; 174
     242:	d2 e0       	ldi	r29, 0x02	; 2
     244:	0f 2e       	mov	r0, r31
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	cf 2e       	mov	r12, r31
     24a:	f2 e0       	ldi	r31, 0x02	; 2
     24c:	df 2e       	mov	r13, r31
     24e:	f0 2d       	mov	r31, r0
     250:	0f 2e       	mov	r0, r31
     252:	f6 eb       	ldi	r31, 0xB6	; 182
     254:	8f 2e       	mov	r8, r31
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	9f 2e       	mov	r9, r31
     25a:	f0 2d       	mov	r31, r0
	  for(id=0;id<4;id++)
     25c:	7e 01       	movw	r14, r28
     25e:	6c ea       	ldi	r22, 0xAC	; 172
     260:	72 e0       	ldi	r23, 0x02	; 2
     262:	57 01       	movw	r10, r14
     264:	e6 ea       	ldi	r30, 0xA6	; 166
     266:	f2 e0       	ldi	r31, 0x02	; 2
     268:	d6 01       	movw	r26, r12
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
		  {
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
     26e:	41 91       	ld	r20, Z+
     270:	51 91       	ld	r21, Z+
     272:	1d 91       	ld	r17, X+
     274:	14 03       	mulsu	r17, r20
     276:	90 01       	movw	r18, r0
     278:	15 9f       	mul	r17, r21
     27a:	30 0d       	add	r19, r0
     27c:	11 24       	eor	r1, r1
     27e:	82 0f       	add	r24, r18
     280:	93 1f       	adc	r25, r19
  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
     282:	e6 17       	cp	r30, r22
     284:	f7 07       	cpc	r31, r23
     286:	99 f7       	brne	.-26     	; 0x26e <_Z24calculate_wheel_velocityv+0x44>
     288:	f5 01       	movw	r30, r10
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	f2 e0       	ldi	r31, 0x02	; 2
     290:	ef 0e       	add	r14, r31
     292:	f1 1c       	adc	r15, r1
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	c8 0e       	add	r12, r24
     298:	d1 1c       	adc	r13, r1
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
     29a:	e8 14       	cp	r14, r8
     29c:	f9 04       	cpc	r15, r9
     29e:	09 f7       	brne	.-62     	; 0x262 <_Z24calculate_wheel_velocityv+0x38>
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <jd+0x1>
     2a8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <jd>
     2ac:	0f 2e       	mov	r0, r31
     2ae:	fe e9       	ldi	r31, 0x9E	; 158
     2b0:	cf 2e       	mov	r12, r31
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	df 2e       	mov	r13, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fc e0       	ldi	r31, 0x0C	; 12
     2bc:	ef 2e       	mov	r14, r31
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	ff 2e       	mov	r15, r31
     2c2:	f0 2d       	mov	r31, r0
		  
	  }
	  
	  for(id=0;id<4;id++)
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
     2c4:	69 91       	ld	r22, Y+
     2c6:	79 91       	ld	r23, Y+
     2c8:	07 2e       	mov	r0, r23
     2ca:	00 0c       	add	r0, r0
     2cc:	88 0b       	sbc	r24, r24
     2ce:	99 0b       	sbc	r25, r25
     2d0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__floatsisf>
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	4b ee       	ldi	r20, 0xEB	; 235
     2da:	53 e4       	ldi	r21, 0x43	; 67
     2dc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divsf3>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	4a ea       	ldi	r20, 0xAA	; 170
     2e6:	52 e4       	ldi	r21, 0x42	; 66
     2e8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__mulsf3>
     2ec:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixsfsi>
     2f0:	f6 01       	movw	r30, r12
     2f2:	61 93       	st	Z+, r22
     2f4:	71 93       	st	Z+, r23
     2f6:	6f 01       	movw	r12, r30
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     2f8:	f7 01       	movw	r30, r14
     2fa:	75 87       	std	Z+13, r23	; 0x0d
     2fc:	64 87       	std	Z+12, r22	; 0x0c
     2fe:	f8 e1       	ldi	r31, 0x18	; 24
     300:	ef 0e       	add	r14, r31
     302:	f1 1c       	adc	r15, r1
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
		  }
		  
	  }
	  
	  for(id=0;id<4;id++)
     304:	c8 15       	cp	r28, r8
     306:	d9 05       	cpc	r29, r9
     308:	e9 f6       	brne	.-70     	; 0x2c4 <_Z24calculate_wheel_velocityv+0x9a>
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     312:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
		  p[id].Set_SP(ocr_motor[id]);
	  }
	  
  }
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	ff 90       	pop	r15
     31e:	ef 90       	pop	r14
     320:	df 90       	pop	r13
     322:	cf 90       	pop	r12
     324:	bf 90       	pop	r11
     326:	af 90       	pop	r10
     328:	9f 90       	pop	r9
     32a:	8f 90       	pop	r8
     32c:	08 95       	ret

0000032e <_Z21update_wheel_velocityv>:
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
     32e:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <pidflag>
     332:	88 23       	and	r24, r24
     334:	c9 f1       	breq	.+114    	; 0x3a8 <_Z21update_wheel_velocityv+0x7a>
		{
			for(id = 0; id<4 ; id++)
     336:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <id+0x1>
     33a:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <id>
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
	public:
	Encoder():speed(0),pprcount(0){};
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
     342:	fc 01       	movw	r30, r24
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	ee 0f       	add	r30, r30
     34e:	ff 1f       	adc	r31, r31
     350:	e8 0f       	add	r30, r24
     352:	f9 1f       	adc	r31, r25
     354:	ea 58       	subi	r30, 0x8A	; 138
     356:	fd 4f       	sbci	r31, 0xFD	; 253
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
     358:	61 81       	ldd	r22, Z+1	; 0x01
     35a:	72 81       	ldd	r23, Z+2	; 0x02
     35c:	9c 01       	movw	r18, r24
     35e:	22 0f       	add	r18, r18
     360:	33 1f       	adc	r19, r19
     362:	82 0f       	add	r24, r18
     364:	93 1f       	adc	r25, r19
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	84 5f       	subi	r24, 0xF4	; 244
     374:	9d 4f       	sbci	r25, 0xFD	; 253
     376:	2e d4       	rcall	.+2140   	; 0xbd4 <_ZN3PID7ComputeEi>
     378:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__fixsfsi>
     37c:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <id>
     380:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <id+0x1>
     384:	c9 01       	movw	r24, r18
     386:	86 56       	subi	r24, 0x66	; 102
     388:	9d 4f       	sbci	r25, 0xFD	; 253
     38a:	c1 d3       	rcall	.+1922   	; 0xb0e <_ZN5Motor11SetOcrValueEi>
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
		{
			for(id = 0; id<4 ; id++)
     38c:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     390:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     39a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     39e:	84 30       	cpi	r24, 0x04	; 4
     3a0:	91 05       	cpc	r25, r1
     3a2:	7c f2       	brlt	.-98     	; 0x342 <_Z21update_wheel_velocityv+0x14>
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
			}
			pidflag = false;
     3a4:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <pidflag>
     3a8:	08 95       	ret

000003aa <_Z20reset_robot_velocityv>:

void reset_robot_velocity()
{
	for(id = 0; id<4 ; id++)
	{
		 velocity_robot[id] = 0;	//reset the robot velocities
     3aa:	e6 ea       	ldi	r30, 0xA6	; 166
     3ac:	f2 e0       	ldi	r31, 0x02	; 2
     3ae:	11 82       	std	Z+1, r1	; 0x01
     3b0:	10 82       	st	Z, r1
     3b2:	13 82       	std	Z+3, r1	; 0x03
     3b4:	12 82       	std	Z+2, r1	; 0x02
     3b6:	15 82       	std	Z+5, r1	; 0x05
     3b8:	14 82       	std	Z+4, r1	; 0x04
     3ba:	17 82       	std	Z+7, r1	; 0x07
     3bc:	16 82       	std	Z+6, r1	; 0x06
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     3c6:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     3ca:	08 95       	ret

000003cc <__vector_1>:
/*********************************************************************Motors encoders interrupts*****************************************************************/

// motor orientation is alternate so channel a and channel b in two sides are different.

ISR(INT_VECT1)
{
     3cc:	1f 92       	push	r1
     3ce:	0f 92       	push	r0
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	0f 92       	push	r0
     3d4:	11 24       	eor	r1, r1
     3d6:	0b b6       	in	r0, 0x3b	; 59
     3d8:	0f 92       	push	r0
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
	if(bit_is_clear(ENCODER1_CHAPORTPIN,ENCODER1_CHBPIN))		
     3e6:	00 99       	sbic	0x00, 0	; 0
     3e8:	0e c0       	rjmp	.+28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     3ea:	e6 e7       	ldi	r30, 0x76	; 118
     3ec:	f2 e0       	ldi	r31, 0x02	; 2
     3ee:	85 81       	ldd	r24, Z+5	; 0x05
     3f0:	96 81       	ldd	r25, Z+6	; 0x06
     3f2:	a7 81       	ldd	r26, Z+7	; 0x07
     3f4:	b0 85       	ldd	r27, Z+8	; 0x08
     3f6:	01 96       	adiw	r24, 0x01	; 1
     3f8:	a1 1d       	adc	r26, r1
     3fa:	b1 1d       	adc	r27, r1
     3fc:	85 83       	std	Z+5, r24	; 0x05
     3fe:	96 83       	std	Z+6, r25	; 0x06
     400:	a7 83       	std	Z+7, r26	; 0x07
     402:	b0 87       	std	Z+8, r27	; 0x08
     404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	inline void dcrCount(){pprcount--;};
     406:	e6 e7       	ldi	r30, 0x76	; 118
     408:	f2 e0       	ldi	r31, 0x02	; 2
     40a:	85 81       	ldd	r24, Z+5	; 0x05
     40c:	96 81       	ldd	r25, Z+6	; 0x06
     40e:	a7 81       	ldd	r26, Z+7	; 0x07
     410:	b0 85       	ldd	r27, Z+8	; 0x08
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	a1 09       	sbc	r26, r1
     416:	b1 09       	sbc	r27, r1
     418:	85 83       	std	Z+5, r24	; 0x05
     41a:	96 83       	std	Z+6, r25	; 0x06
     41c:	a7 83       	std	Z+7, r26	; 0x07
     41e:	b0 87       	std	Z+8, r27	; 0x08
		e[0].incCount();
	}
	else
		e[0].dcrCount();
	
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	0f 90       	pop	r0
     42e:	0b be       	out	0x3b, r0	; 59
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <__vector_2>:



ISR(INT_VECT2)
{
     43a:	1f 92       	push	r1
     43c:	0f 92       	push	r0
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	0f 92       	push	r0
     442:	11 24       	eor	r1, r1
     444:	0b b6       	in	r0, 0x3b	; 59
     446:	0f 92       	push	r0
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
	if(bit_is_clear(ENCODER2_CHAPORTPIN,ENCODER2_CHBPIN))		
     454:	02 99       	sbic	0x00, 2	; 0
     456:	0e c0       	rjmp	.+28     	; 0x474 <__vector_2+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     458:	e6 e7       	ldi	r30, 0x76	; 118
     45a:	f2 e0       	ldi	r31, 0x02	; 2
     45c:	86 85       	ldd	r24, Z+14	; 0x0e
     45e:	97 85       	ldd	r25, Z+15	; 0x0f
     460:	a0 89       	ldd	r26, Z+16	; 0x10
     462:	b1 89       	ldd	r27, Z+17	; 0x11
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	a1 1d       	adc	r26, r1
     468:	b1 1d       	adc	r27, r1
     46a:	86 87       	std	Z+14, r24	; 0x0e
     46c:	97 87       	std	Z+15, r25	; 0x0f
     46e:	a0 8b       	std	Z+16, r26	; 0x10
     470:	b1 8b       	std	Z+17, r27	; 0x11
     472:	0d c0       	rjmp	.+26     	; 0x48e <__vector_2+0x54>
	inline void dcrCount(){pprcount--;};
     474:	e6 e7       	ldi	r30, 0x76	; 118
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	86 85       	ldd	r24, Z+14	; 0x0e
     47a:	97 85       	ldd	r25, Z+15	; 0x0f
     47c:	a0 89       	ldd	r26, Z+16	; 0x10
     47e:	b1 89       	ldd	r27, Z+17	; 0x11
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	a1 09       	sbc	r26, r1
     484:	b1 09       	sbc	r27, r1
     486:	86 87       	std	Z+14, r24	; 0x0e
     488:	97 87       	std	Z+15, r25	; 0x0f
     48a:	a0 8b       	std	Z+16, r26	; 0x10
     48c:	b1 8b       	std	Z+17, r27	; 0x11
		e[1].incCount();
	}
	else
		e[1].dcrCount();
	
}
     48e:	ff 91       	pop	r31
     490:	ef 91       	pop	r30
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	0f 90       	pop	r0
     49c:	0b be       	out	0x3b, r0	; 59
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <__vector_3>:
ISR(INT_VECT3)
{
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	0b b6       	in	r0, 0x3b	; 59
     4b4:	0f 92       	push	r0
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
	if(bit_is_set(ENCODER3_CHAPORTPIN,ENCODER3_CHBPIN))		
     4c2:	04 9b       	sbis	0x00, 4	; 0
     4c4:	0e c0       	rjmp	.+28     	; 0x4e2 <__vector_3+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     4c6:	e6 e7       	ldi	r30, 0x76	; 118
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
     4ca:	87 89       	ldd	r24, Z+23	; 0x17
     4cc:	90 8d       	ldd	r25, Z+24	; 0x18
     4ce:	a1 8d       	ldd	r26, Z+25	; 0x19
     4d0:	b2 8d       	ldd	r27, Z+26	; 0x1a
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	a1 1d       	adc	r26, r1
     4d6:	b1 1d       	adc	r27, r1
     4d8:	87 8b       	std	Z+23, r24	; 0x17
     4da:	90 8f       	std	Z+24, r25	; 0x18
     4dc:	a1 8f       	std	Z+25, r26	; 0x19
     4de:	b2 8f       	std	Z+26, r27	; 0x1a
     4e0:	0d c0       	rjmp	.+26     	; 0x4fc <__vector_3+0x54>
	inline void dcrCount(){pprcount--;};
     4e2:	e6 e7       	ldi	r30, 0x76	; 118
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	87 89       	ldd	r24, Z+23	; 0x17
     4e8:	90 8d       	ldd	r25, Z+24	; 0x18
     4ea:	a1 8d       	ldd	r26, Z+25	; 0x19
     4ec:	b2 8d       	ldd	r27, Z+26	; 0x1a
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	a1 09       	sbc	r26, r1
     4f2:	b1 09       	sbc	r27, r1
     4f4:	87 8b       	std	Z+23, r24	; 0x17
     4f6:	90 8f       	std	Z+24, r25	; 0x18
     4f8:	a1 8f       	std	Z+25, r26	; 0x19
     4fa:	b2 8f       	std	Z+26, r27	; 0x1a
	{
		e[2].incCount();
	}
	else
		e[2].dcrCount();
}
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	0f 90       	pop	r0
     50a:	0b be       	out	0x3b, r0	; 59
     50c:	0f 90       	pop	r0
     50e:	0f be       	out	0x3f, r0	; 63
     510:	0f 90       	pop	r0
     512:	1f 90       	pop	r1
     514:	18 95       	reti

00000516 <__vector_4>:

ISR(INT_VECT4)
{
     516:	1f 92       	push	r1
     518:	0f 92       	push	r0
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	0b b6       	in	r0, 0x3b	; 59
     522:	0f 92       	push	r0
     524:	8f 93       	push	r24
     526:	9f 93       	push	r25
     528:	af 93       	push	r26
     52a:	bf 93       	push	r27
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
	if(bit_is_set(ENCODER4_CHAPORTPIN,ENCODER4_CHBPIN))		
     530:	06 9b       	sbis	0x00, 6	; 0
     532:	0e c0       	rjmp	.+28     	; 0x550 <__vector_4+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     534:	e6 e7       	ldi	r30, 0x76	; 118
     536:	f2 e0       	ldi	r31, 0x02	; 2
     538:	80 a1       	ldd	r24, Z+32	; 0x20
     53a:	91 a1       	ldd	r25, Z+33	; 0x21
     53c:	a2 a1       	ldd	r26, Z+34	; 0x22
     53e:	b3 a1       	ldd	r27, Z+35	; 0x23
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	a1 1d       	adc	r26, r1
     544:	b1 1d       	adc	r27, r1
     546:	80 a3       	std	Z+32, r24	; 0x20
     548:	91 a3       	std	Z+33, r25	; 0x21
     54a:	a2 a3       	std	Z+34, r26	; 0x22
     54c:	b3 a3       	std	Z+35, r27	; 0x23
     54e:	0d c0       	rjmp	.+26     	; 0x56a <__vector_4+0x54>
	inline void dcrCount(){pprcount--;};
     550:	e6 e7       	ldi	r30, 0x76	; 118
     552:	f2 e0       	ldi	r31, 0x02	; 2
     554:	80 a1       	ldd	r24, Z+32	; 0x20
     556:	91 a1       	ldd	r25, Z+33	; 0x21
     558:	a2 a1       	ldd	r26, Z+34	; 0x22
     55a:	b3 a1       	ldd	r27, Z+35	; 0x23
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	a1 09       	sbc	r26, r1
     560:	b1 09       	sbc	r27, r1
     562:	80 a3       	std	Z+32, r24	; 0x20
     564:	91 a3       	std	Z+33, r25	; 0x21
     566:	a2 a3       	std	Z+34, r26	; 0x22
     568:	b3 a3       	std	Z+35, r27	; 0x23
	{
		e[3].incCount();
	}
	else
		e[3].dcrCount();
}
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	bf 91       	pop	r27
     570:	af 91       	pop	r26
     572:	9f 91       	pop	r25
     574:	8f 91       	pop	r24
     576:	0f 90       	pop	r0
     578:	0b be       	out	0x3b, r0	; 59
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_6>:

/*******************************************************************************Free Wheel Encoders Interrupts****************************************************/

ISR(INT_VECTX)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	0b b6       	in	r0, 0x3b	; 59
     590:	0f 92       	push	r0
     592:	8f 93       	push	r24
     594:	9f 93       	push	r25
     596:	af 93       	push	r26
     598:	bf 93       	push	r27
     59a:	ef 93       	push	r30
     59c:	ff 93       	push	r31
	if(bit_is_clear(ENCODERX_CHAPORTPIN,ENCODERX_CHBPIN))
     59e:	37 99       	sbic	0x06, 7	; 6
     5a0:	0e c0       	rjmp	.+28     	; 0x5be <__vector_6+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     5a2:	e1 e7       	ldi	r30, 0x71	; 113
     5a4:	f2 e0       	ldi	r31, 0x02	; 2
     5a6:	81 81       	ldd	r24, Z+1	; 0x01
     5a8:	92 81       	ldd	r25, Z+2	; 0x02
     5aa:	a3 81       	ldd	r26, Z+3	; 0x03
     5ac:	b4 81       	ldd	r27, Z+4	; 0x04
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	a1 1d       	adc	r26, r1
     5b2:	b1 1d       	adc	r27, r1
     5b4:	81 83       	std	Z+1, r24	; 0x01
     5b6:	92 83       	std	Z+2, r25	; 0x02
     5b8:	a3 83       	std	Z+3, r26	; 0x03
     5ba:	b4 83       	std	Z+4, r27	; 0x04
     5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <__vector_6+0x54>
		inline void dcrCount(){encdistance--;};
     5be:	e1 e7       	ldi	r30, 0x71	; 113
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	81 81       	ldd	r24, Z+1	; 0x01
     5c4:	92 81       	ldd	r25, Z+2	; 0x02
     5c6:	a3 81       	ldd	r26, Z+3	; 0x03
     5c8:	b4 81       	ldd	r27, Z+4	; 0x04
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	a1 09       	sbc	r26, r1
     5ce:	b1 09       	sbc	r27, r1
     5d0:	81 83       	std	Z+1, r24	; 0x01
     5d2:	92 83       	std	Z+2, r25	; 0x02
     5d4:	a3 83       	std	Z+3, r26	; 0x03
     5d6:	b4 83       	std	Z+4, r27	; 0x04
	{
		ex.incCount();
	}
	else
		ex.dcrCount();
}
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	0f 90       	pop	r0
     5e6:	0b be       	out	0x3b, r0	; 59
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <__vector_5>:


ISR(INT_VECTY)
{
     5f2:	1f 92       	push	r1
     5f4:	0f 92       	push	r0
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	0f 92       	push	r0
     5fa:	11 24       	eor	r1, r1
     5fc:	0b b6       	in	r0, 0x3b	; 59
     5fe:	0f 92       	push	r0
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
	if(bit_is_clear(ENCODERY_CHAPORTPIN,ENCODERY_CHBPIN))
     60c:	35 99       	sbic	0x06, 5	; 6
     60e:	0e c0       	rjmp	.+28     	; 0x62c <__vector_5+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     610:	ec e6       	ldi	r30, 0x6C	; 108
     612:	f2 e0       	ldi	r31, 0x02	; 2
     614:	81 81       	ldd	r24, Z+1	; 0x01
     616:	92 81       	ldd	r25, Z+2	; 0x02
     618:	a3 81       	ldd	r26, Z+3	; 0x03
     61a:	b4 81       	ldd	r27, Z+4	; 0x04
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	a1 1d       	adc	r26, r1
     620:	b1 1d       	adc	r27, r1
     622:	81 83       	std	Z+1, r24	; 0x01
     624:	92 83       	std	Z+2, r25	; 0x02
     626:	a3 83       	std	Z+3, r26	; 0x03
     628:	b4 83       	std	Z+4, r27	; 0x04
     62a:	0d c0       	rjmp	.+26     	; 0x646 <__vector_5+0x54>
		inline void dcrCount(){encdistance--;};
     62c:	ec e6       	ldi	r30, 0x6C	; 108
     62e:	f2 e0       	ldi	r31, 0x02	; 2
     630:	81 81       	ldd	r24, Z+1	; 0x01
     632:	92 81       	ldd	r25, Z+2	; 0x02
     634:	a3 81       	ldd	r26, Z+3	; 0x03
     636:	b4 81       	ldd	r27, Z+4	; 0x04
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	a1 09       	sbc	r26, r1
     63c:	b1 09       	sbc	r27, r1
     63e:	81 83       	std	Z+1, r24	; 0x01
     640:	92 83       	std	Z+2, r25	; 0x02
     642:	a3 83       	std	Z+3, r26	; 0x03
     644:	b4 83       	std	Z+4, r27	; 0x04
	{
		ey.incCount();
	}
	else
		ey.dcrCount();
}
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	0f 90       	pop	r0
     654:	0b be       	out	0x3b, r0	; 59
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <__vector_42>:

 /*********************************************************PID computation timer*****************************************************/

 ISR(TIMER4_COMPA_vect)
 {
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	0b b6       	in	r0, 0x3b	; 59
     66c:	0f 92       	push	r0
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;};	//keep in timer compare match
     67a:	e6 e7       	ldi	r30, 0x76	; 118
     67c:	f2 e0       	ldi	r31, 0x02	; 2
     67e:	85 81       	ldd	r24, Z+5	; 0x05
     680:	96 81       	ldd	r25, Z+6	; 0x06
     682:	a7 81       	ldd	r26, Z+7	; 0x07
     684:	b0 85       	ldd	r27, Z+8	; 0x08
     686:	81 83       	std	Z+1, r24	; 0x01
     688:	92 83       	std	Z+2, r25	; 0x02
     68a:	a3 83       	std	Z+3, r26	; 0x03
     68c:	b4 83       	std	Z+4, r27	; 0x04
     68e:	15 82       	std	Z+5, r1	; 0x05
     690:	16 82       	std	Z+6, r1	; 0x06
     692:	17 82       	std	Z+7, r1	; 0x07
     694:	10 86       	std	Z+8, r1	; 0x08
     696:	86 85       	ldd	r24, Z+14	; 0x0e
     698:	97 85       	ldd	r25, Z+15	; 0x0f
     69a:	a0 89       	ldd	r26, Z+16	; 0x10
     69c:	b1 89       	ldd	r27, Z+17	; 0x11
     69e:	82 87       	std	Z+10, r24	; 0x0a
     6a0:	93 87       	std	Z+11, r25	; 0x0b
     6a2:	a4 87       	std	Z+12, r26	; 0x0c
     6a4:	b5 87       	std	Z+13, r27	; 0x0d
     6a6:	16 86       	std	Z+14, r1	; 0x0e
     6a8:	17 86       	std	Z+15, r1	; 0x0f
     6aa:	10 8a       	std	Z+16, r1	; 0x10
     6ac:	11 8a       	std	Z+17, r1	; 0x11
     6ae:	87 89       	ldd	r24, Z+23	; 0x17
     6b0:	90 8d       	ldd	r25, Z+24	; 0x18
     6b2:	a1 8d       	ldd	r26, Z+25	; 0x19
     6b4:	b2 8d       	ldd	r27, Z+26	; 0x1a
     6b6:	83 8b       	std	Z+19, r24	; 0x13
     6b8:	94 8b       	std	Z+20, r25	; 0x14
     6ba:	a5 8b       	std	Z+21, r26	; 0x15
     6bc:	b6 8b       	std	Z+22, r27	; 0x16
     6be:	17 8a       	std	Z+23, r1	; 0x17
     6c0:	10 8e       	std	Z+24, r1	; 0x18
     6c2:	11 8e       	std	Z+25, r1	; 0x19
     6c4:	12 8e       	std	Z+26, r1	; 0x1a
     6c6:	80 a1       	ldd	r24, Z+32	; 0x20
     6c8:	91 a1       	ldd	r25, Z+33	; 0x21
     6ca:	a2 a1       	ldd	r26, Z+34	; 0x22
     6cc:	b3 a1       	ldd	r27, Z+35	; 0x23
     6ce:	84 8f       	std	Z+28, r24	; 0x1c
     6d0:	95 8f       	std	Z+29, r25	; 0x1d
     6d2:	a6 8f       	std	Z+30, r26	; 0x1e
     6d4:	b7 8f       	std	Z+31, r27	; 0x1f
     6d6:	10 a2       	std	Z+32, r1	; 0x20
     6d8:	11 a2       	std	Z+33, r1	; 0x21
     6da:	12 a2       	std	Z+34, r1	; 0x22
     6dc:	13 a2       	std	Z+35, r1	; 0x23
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <pidflag>
 }
     6e4:	ff 91       	pop	r31
     6e6:	ef 91       	pop	r30
     6e8:	bf 91       	pop	r27
     6ea:	af 91       	pop	r26
     6ec:	9f 91       	pop	r25
     6ee:	8f 91       	pop	r24
     6f0:	0f 90       	pop	r0
     6f2:	0b be       	out	0x3b, r0	; 59
     6f4:	0f 90       	pop	r0
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	0f 90       	pop	r0
     6fa:	1f 90       	pop	r1
     6fc:	18 95       	reti

000006fe <_GLOBAL__sub_I_coupling_matrix>:
     6fe:	e6 e7       	ldi	r30, 0x76	; 118
     700:	f2 e0       	ldi	r31, 0x02	; 2
     702:	8a e9       	ldi	r24, 0x9A	; 154
     704:	92 e0       	ldi	r25, 0x02	; 2
	private:
		uint8_t no;
		long int speed;
		long int pprcount;
	public:
	Encoder():speed(0),pprcount(0){};
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	12 82       	std	Z+2, r1	; 0x02
     70a:	13 82       	std	Z+3, r1	; 0x03
     70c:	14 82       	std	Z+4, r1	; 0x04
     70e:	15 82       	std	Z+5, r1	; 0x05
     710:	16 82       	std	Z+6, r1	; 0x06
     712:	17 82       	std	Z+7, r1	; 0x07
     714:	10 86       	std	Z+8, r1	; 0x08
     716:	39 96       	adiw	r30, 0x09	; 9
 int id,jd;					//global loop counter 
 int velocity_motor[4];		//individual motor velocity
 int velocity_robot[4];		//robot velocity
 int ocr_motor[4];			//motor ocr 
 Motor m[4];				//base motors
 Encoder e[4];				// base motors encoders
     718:	e8 17       	cp	r30, r24
     71a:	f9 07       	cpc	r31, r25
     71c:	a1 f7       	brne	.-24     	; 0x706 <_GLOBAL__sub_I_coupling_matrix+0x8>
	
		private:
		uint8_t no;
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
     71e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     722:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     726:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     72a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
     72e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
     732:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
     736:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
     73a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
     73e:	ec e0       	ldi	r30, 0x0C	; 12
     740:	f2 e0       	ldi	r31, 0x02	; 2
     742:	8c e6       	ldi	r24, 0x6C	; 108
     744:	92 e0       	ldi	r25, 0x02	; 2
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     746:	10 82       	st	Z, r1
     748:	11 82       	std	Z+1, r1	; 0x01
     74a:	12 82       	std	Z+2, r1	; 0x02
     74c:	13 82       	std	Z+3, r1	; 0x03
     74e:	14 82       	std	Z+4, r1	; 0x04
     750:	15 82       	std	Z+5, r1	; 0x05
     752:	16 82       	std	Z+6, r1	; 0x06
     754:	17 82       	std	Z+7, r1	; 0x07
     756:	10 86       	std	Z+8, r1	; 0x08
     758:	11 86       	std	Z+9, r1	; 0x09
     75a:	12 86       	std	Z+10, r1	; 0x0a
     75c:	13 86       	std	Z+11, r1	; 0x0b
     75e:	15 86       	std	Z+13, r1	; 0x0d
     760:	14 86       	std	Z+12, r1	; 0x0c
     762:	17 86       	std	Z+15, r1	; 0x0f
     764:	16 86       	std	Z+14, r1	; 0x0e
     766:	11 8a       	std	Z+17, r1	; 0x11
     768:	10 8a       	std	Z+16, r1	; 0x10
     76a:	13 8a       	std	Z+19, r1	; 0x13
     76c:	12 8a       	std	Z+18, r1	; 0x12
     76e:	78 96       	adiw	r30, 0x18	; 24
 FreeWheelEnc ex,ey;		//Free wheel encoders
 PID p[4];					//pid for the base motors
     770:	e8 17       	cp	r30, r24
     772:	f9 07       	cpc	r31, r25
     774:	41 f7       	brne	.-48     	; 0x746 <_GLOBAL__sub_I_coupling_matrix+0x48>
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
 }
     776:	08 95       	ret

00000778 <_ZN7Encoder15Init_InterruptsEv>:
	Init_Timers();
}

void Encoder::Init_Interrupts()
{
	sei();
     778:	78 94       	sei
	if(no==1)
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	49 f4       	brne	.+18     	; 0x794 <_ZN7Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODER1_INT);
     782:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INT1_ISC1);	//falling edge
     784:	e9 e6       	ldi	r30, 0x69	; 105
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	82 60       	ori	r24, 0x02	; 2
     78c:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER1_INT);		//setting INT pin
     78e:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INT1_INTF);	    //clear int flag
     790:	e0 9a       	sbi	0x1c, 0	; 28
     792:	08 95       	ret
	}
	else if (no==2)
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	49 f4       	brne	.+18     	; 0x7aa <_ZN7Encoder15Init_InterruptsEv+0x32>
	{
		EIMSK &= ~(1<<ENCODER2_INT);
     798:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INT2_ISC1);	//falling edge
     79a:	e9 e6       	ldi	r30, 0x69	; 105
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER2_INT);		//setting INT pin
     7a4:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INT2_INTF);	    //clear int flag
     7a6:	e1 9a       	sbi	0x1c, 1	; 28
     7a8:	08 95       	ret
	}
	else if (no==3)
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	49 f4       	brne	.+18     	; 0x7c0 <_ZN7Encoder15Init_InterruptsEv+0x48>
	{
		EIMSK &= ~(1<<ENCODER3_INT);
     7ae:	ea 98       	cbi	0x1d, 2	; 29
		EICRA |= (1<<INT3_ISC1);	//falling edge
     7b0:	e9 e6       	ldi	r30, 0x69	; 105
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	80 62       	ori	r24, 0x20	; 32
     7b8:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER3_INT);		//setting INT pin
     7ba:	ea 9a       	sbi	0x1d, 2	; 29
		EIFR |= (1<<INT3_INTF);	    //clear int flag
     7bc:	e2 9a       	sbi	0x1c, 2	; 28
     7be:	08 95       	ret
	}
	else if (no==4)
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	41 f4       	brne	.+16     	; 0x7d4 <_ZN7Encoder15Init_InterruptsEv+0x5c>
	{
		EIMSK &= ~(1<<ENCODER4_INT);
     7c4:	eb 98       	cbi	0x1d, 3	; 29
		EICRA |= (1<<INT4_ISC1);	//falling edge
     7c6:	e9 e6       	ldi	r30, 0x69	; 105
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER4_INT);		//setting INT pin
     7d0:	eb 9a       	sbi	0x1d, 3	; 29
		EIFR |= (1<<INT4_INTF);	    //clear int flag
     7d2:	e3 9a       	sbi	0x1c, 3	; 28
     7d4:	08 95       	ret

000007d6 <_ZN7Encoder11Init_TimersEv>:
}

void Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     7d6:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     7da:	81 11       	cpse	r24, r1
     7dc:	17 c0       	rjmp	.+46     	; 0x80c <_ZN7Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     7de:	e1 ea       	ldi	r30, 0xA1	; 161
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	8b 60       	ori	r24, 0x0B	; 11
     7e6:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     7e8:	e2 e7       	ldi	r30, 0x72	; 114
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	82 60       	ori	r24, 0x02	; 2
     7f0:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     7f2:	8c e4       	ldi	r24, 0x4C	; 76
     7f4:	9d e1       	ldi	r25, 0x1D	; 29
     7f6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     7fa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     7fe:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     802:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     80c:	08 95       	ret

0000080e <_ZN7Encoder10InitialiseEh>:


#include "Encoder.h"

void Encoder::Initialise(uint8_t x)
{	
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
	no = x;
     814:	68 83       	st	Y, r22
	if(no==1)
     816:	61 30       	cpi	r22, 0x01	; 1
     818:	29 f4       	brne	.+10     	; 0x824 <_ZN7Encoder10InitialiseEh+0x16>
	{
		INPUT(ENCODER1_CHANNELA);
     81a:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODER1_CHANNELB);
     81c:	08 98       	cbi	0x01, 0	; 1
		SET(ENCODER1_CHANNELA);
     81e:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODER1_CHANNELB);
     820:	10 9a       	sbi	0x02, 0	; 2
     822:	14 c0       	rjmp	.+40     	; 0x84c <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==2)
     824:	62 30       	cpi	r22, 0x02	; 2
     826:	29 f4       	brne	.+10     	; 0x832 <_ZN7Encoder10InitialiseEh+0x24>
	{
		INPUT(ENCODER2_CHANNELA);
     828:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODER2_CHANNELB);
     82a:	0a 98       	cbi	0x01, 2	; 1
		SET(ENCODER2_CHANNELA);
     82c:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODER2_CHANNELB);
     82e:	12 9a       	sbi	0x02, 2	; 2
     830:	0d c0       	rjmp	.+26     	; 0x84c <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if (no==3)
     832:	63 30       	cpi	r22, 0x03	; 3
     834:	29 f4       	brne	.+10     	; 0x840 <_ZN7Encoder10InitialiseEh+0x32>
	{
		INPUT(ENCODER3_CHANNELA);
     836:	52 98       	cbi	0x0a, 2	; 10
		INPUT(ENCODER3_CHANNELB);
     838:	0c 98       	cbi	0x01, 4	; 1
		SET(ENCODER3_CHANNELA);
     83a:	5a 9a       	sbi	0x0b, 2	; 11
		SET(ENCODER3_CHANNELB);
     83c:	14 9a       	sbi	0x02, 4	; 2
     83e:	06 c0       	rjmp	.+12     	; 0x84c <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==4)
     840:	64 30       	cpi	r22, 0x04	; 4
     842:	21 f4       	brne	.+8      	; 0x84c <_ZN7Encoder10InitialiseEh+0x3e>
	{
		INPUT(ENCODER4_CHANNELA);
     844:	53 98       	cbi	0x0a, 3	; 10
		INPUT(ENCODER4_CHANNELB);
     846:	0e 98       	cbi	0x01, 6	; 1
		SET(ENCODER4_CHANNELA);
     848:	5b 9a       	sbi	0x0b, 3	; 11
		SET(ENCODER4_CHANNELB);
     84a:	16 9a       	sbi	0x02, 6	; 2
	}
	Init_Interrupts();
     84c:	ce 01       	movw	r24, r28
     84e:	94 df       	rcall	.-216    	; 0x778 <_ZN7Encoder15Init_InterruptsEv>
	Init_Timers();
     850:	ce 01       	movw	r24, r28
     852:	c1 df       	rcall	.-126    	; 0x7d6 <_ZN7Encoder11Init_TimersEv>
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <_ZN12FreeWheelEnc15Init_InterruptsEv>:
	Init_Interrupts();
}

void FreeWheelEnc::Init_Interrupts()
{
	if(no==1)
     85a:	fc 01       	movw	r30, r24
     85c:	80 81       	ld	r24, Z
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	49 f4       	brne	.+18     	; 0x874 <_ZN12FreeWheelEnc15Init_InterruptsEv+0x1a>
	{
		EIMSK &= ~(1<<ENCODERX_INT);
     862:	ed 98       	cbi	0x1d, 5	; 29
		EICRB |= (1<<INTX_ISC1);	//falling edge
     864:	ea e6       	ldi	r30, 0x6A	; 106
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	88 60       	ori	r24, 0x08	; 8
     86c:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERX_INT);		//setting INT pin
     86e:	ed 9a       	sbi	0x1d, 5	; 29
		EIFR  |= (1<<INTX_INTF);	    //clear int flag
     870:	e5 9a       	sbi	0x1c, 5	; 28
     872:	0a c0       	rjmp	.+20     	; 0x888 <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	}
	else if (no==2)
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	41 f4       	brne	.+16     	; 0x888 <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	{
		EIMSK &= ~(1<<ENCODERY_INT);
     878:	ec 98       	cbi	0x1d, 4	; 29
		EICRB |= (1<<INTY_ISC1);	//falling edge
     87a:	ea e6       	ldi	r30, 0x6A	; 106
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	82 60       	ori	r24, 0x02	; 2
     882:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERY_INT);		//setting INT pin
     884:	ec 9a       	sbi	0x1d, 4	; 29
		EIFR |= (1<<INTY_INTF);	    //clear int flag
     886:	e4 9a       	sbi	0x1c, 4	; 28
	}
	sei();
     888:	78 94       	sei
     88a:	08 95       	ret

0000088c <_ZN12FreeWheelEnc10InitialiseEh>:

#include "FreeWheelEnc.h"

void FreeWheelEnc::Initialise(uint8_t x)
{
	no = x;
     88c:	fc 01       	movw	r30, r24
     88e:	60 83       	st	Z, r22
	if(no==1)
     890:	61 30       	cpi	r22, 0x01	; 1
     892:	29 f4       	brne	.+10     	; 0x89e <_ZN12FreeWheelEnc10InitialiseEh+0x12>
	{
		INPUT(ENCODERX_CHANNELA);
     894:	6d 98       	cbi	0x0d, 5	; 13
		INPUT(ENCODERX_CHANNELB);
     896:	3f 98       	cbi	0x07, 7	; 7
		SET(ENCODERX_CHANNELA);
     898:	75 9a       	sbi	0x0e, 5	; 14
		SET(ENCODERX_CHANNELB);
     89a:	47 9a       	sbi	0x08, 7	; 8
     89c:	06 c0       	rjmp	.+12     	; 0x8aa <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	}
	else if(no==2)
     89e:	62 30       	cpi	r22, 0x02	; 2
     8a0:	21 f4       	brne	.+8      	; 0x8aa <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	{
		INPUT(ENCODERY_CHANNELA);
     8a2:	6c 98       	cbi	0x0d, 4	; 13
		INPUT(ENCODERY_CHANNELB);
     8a4:	3d 98       	cbi	0x07, 5	; 7
		SET(ENCODERY_CHANNELA);
     8a6:	74 9a       	sbi	0x0e, 4	; 14
		SET(ENCODERY_CHANNELB);
     8a8:	45 9a       	sbi	0x08, 5	; 8
	}
	Init_Interrupts();
     8aa:	d7 cf       	rjmp	.-82     	; 0x85a <_ZN12FreeWheelEnc15Init_InterruptsEv>
     8ac:	08 95       	ret

000008ae <main>:
#include "ZoneNavigate.h"


int main(void)
{
	initUART0();
     8ae:	05 d2       	rcall	.+1034   	; 0xcba <_Z9initUART0v>
	initUART3();
     8b0:	10 d2       	rcall	.+1056   	; 0xcd2 <_Z9initUART3v>
	init_slave();
     8b2:	89 d2       	rcall	.+1298   	; 0xdc6 <_Z10init_slavev>
     8b4:	49 dc       	rcall	.-1902   	; 0x148 <_Z10drive_initv>
	drive_init();
     8b6:	78 94       	sei
     8b8:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <auto_mode>
	sei();
    while (1) 
    {	
		if(auto_mode)
     8bc:	88 23       	and	r24, r24
     8be:	11 f0       	breq	.+4      	; 0x8c4 <main+0x16>
			operate_slave_auto();
     8c0:	3c d3       	rcall	.+1656   	; 0xf3a <_Z18operate_slave_autov>
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <main+0x18>
		else
			operate_slave_manual();
     8c4:	27 d5       	rcall	.+2638   	; 0x1314 <_Z20operate_slave_manualv>
     8c6:	b1 dc       	rcall	.-1694   	; 0x22a <_Z24calculate_wheel_velocityv>
			
		calculate_wheel_velocity();
     8c8:	32 dd       	rcall	.-1436   	; 0x32e <_Z21update_wheel_velocityv>
     8ca:	f6 cf       	rjmp	.-20     	; 0x8b8 <main+0xa>

000008cc <_ZN5Motor7InitPWMEv>:
		update_wheel_velocity();
     8cc:	fc 01       	movw	r30, r24
     8ce:	80 81       	ld	r24, Z
	initUART0();
	initUART3();
	init_slave();
	drive_init();
	sei();
    while (1) 
     8d0:	81 30       	cpi	r24, 0x01	; 1

}

void Motor::InitPWM()
{
	if (num==1)
     8d2:	f1 f4       	brne	.+60     	; 0x910 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     8d4:	e7 e0       	ldi	r30, 0x07	; 7
     8d6:	f1 e0       	ldi	r31, 0x01	; 1
     8d8:	80 81       	ld	r24, Z
     8da:	82 60       	ori	r24, 0x02	; 2
     8dc:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     8de:	80 81       	ld	r24, Z
     8e0:	81 60       	ori	r24, 0x01	; 1
     8e2:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     8e4:	ea e0       	ldi	r30, 0x0A	; 10
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	80 81       	ld	r24, Z
     8ea:	88 60       	ori	r24, 0x08	; 8
     8ec:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     8ee:	e0 e2       	ldi	r30, 0x20	; 32
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	80 81       	ld	r24, Z
     8f4:	82 68       	ori	r24, 0x82	; 130
     8f6:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     8f8:	e1 e2       	ldi	r30, 0x21	; 33
     8fa:	f1 e0       	ldi	r31, 0x01	; 1
     8fc:	80 81       	ld	r24, Z
     8fe:	8a 61       	ori	r24, 0x1A	; 26
     900:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     902:	89 ef       	ldi	r24, 0xF9	; 249
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     90a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     90e:	08 95       	ret
	}
	else if(num==2)
     910:	82 30       	cpi	r24, 0x02	; 2
     912:	f1 f4       	brne	.+60     	; 0x950 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     914:	e7 e0       	ldi	r30, 0x07	; 7
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	80 81       	ld	r24, Z
     91a:	88 60       	ori	r24, 0x08	; 8
     91c:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     91e:	80 81       	ld	r24, Z
     920:	84 60       	ori	r24, 0x04	; 4
     922:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     924:	ea e0       	ldi	r30, 0x0A	; 10
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	80 81       	ld	r24, Z
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     92e:	e0 e2       	ldi	r30, 0x20	; 32
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	80 81       	ld	r24, Z
     934:	82 62       	ori	r24, 0x22	; 34
     936:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     938:	e1 e2       	ldi	r30, 0x21	; 33
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	80 81       	ld	r24, Z
     93e:	8a 61       	ori	r24, 0x1A	; 26
     940:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     942:	89 ef       	ldi	r24, 0xF9	; 249
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     94a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     94e:	08 95       	ret
	}
	else if(num==3)
     950:	83 30       	cpi	r24, 0x03	; 3
     952:	f1 f4       	brne	.+60     	; 0x990 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     954:	e7 e0       	ldi	r30, 0x07	; 7
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	80 81       	ld	r24, Z
     95a:	80 61       	ori	r24, 0x10	; 16
     95c:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     95e:	80 81       	ld	r24, Z
     960:	80 62       	ori	r24, 0x20	; 32
     962:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     964:	ea e0       	ldi	r30, 0x0A	; 10
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	80 81       	ld	r24, Z
     96a:	80 62       	ori	r24, 0x20	; 32
     96c:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     96e:	e0 e2       	ldi	r30, 0x20	; 32
     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	80 81       	ld	r24, Z
     974:	8a 60       	ori	r24, 0x0A	; 10
     976:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     978:	e1 e2       	ldi	r30, 0x21	; 33
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	80 81       	ld	r24, Z
     97e:	8a 61       	ori	r24, 0x1A	; 26
     980:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     982:	89 ef       	ldi	r24, 0xF9	; 249
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     98a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     98e:	08 95       	ret
	} 
	else if(num==4)
     990:	84 30       	cpi	r24, 0x04	; 4
     992:	c9 f4       	brne	.+50     	; 0x9c6 <_ZN5Motor7InitPWMEv+0xfa>
	{
		OUTPUT(DD_F4);
     994:	e7 e0       	ldi	r30, 0x07	; 7
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 81       	ld	r24, Z
     99a:	80 64       	ori	r24, 0x40	; 64
     99c:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     99e:	80 81       	ld	r24, Z
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     9a4:	6b 9a       	sbi	0x0d, 3	; 13

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     9a6:	e0 e9       	ldi	r30, 0x90	; 144
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	82 68       	ori	r24, 0x82	; 130
     9ae:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     9b0:	e1 e9       	ldi	r30, 0x91	; 145
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8a 61       	ori	r24, 0x1A	; 26
     9b8:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     9ba:	89 ef       	ldi	r24, 0xF9	; 249
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     9c2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     9c6:	08 95       	ret

000009c8 <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	91 f0       	breq	.+36     	; 0x9f4 <_ZN5Motor19SetForwardDirectionEv+0x2c>
     9d0:	18 f4       	brcc	.+6      	; 0x9d8 <_ZN5Motor19SetForwardDirectionEv+0x10>
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <_ZN5Motor19SetForwardDirectionEv+0x1a>
     9d6:	08 95       	ret
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	a9 f0       	breq	.+42     	; 0xa06 <_ZN5Motor19SetForwardDirectionEv+0x3e>
     9dc:	84 30       	cpi	r24, 0x04	; 4
     9de:	e1 f0       	breq	.+56     	; 0xa18 <_ZN5Motor19SetForwardDirectionEv+0x50>
     9e0:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     9e2:	e8 e0       	ldi	r30, 0x08	; 8
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	80 81       	ld	r24, Z
     9e8:	82 60       	ori	r24, 0x02	; 2
     9ea:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     9ec:	80 81       	ld	r24, Z
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 83       	st	Z, r24
			break;
     9f2:	08 95       	ret
		case 2:
			SET		(DD_F2);
     9f4:	e8 e0       	ldi	r30, 0x08	; 8
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	80 81       	ld	r24, Z
     9fa:	88 60       	ori	r24, 0x08	; 8
     9fc:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     9fe:	80 81       	ld	r24, Z
     a00:	8b 7f       	andi	r24, 0xFB	; 251
     a02:	80 83       	st	Z, r24
			break;
     a04:	08 95       	ret
		case 3:
			SET		(DD_F3);
     a06:	e8 e0       	ldi	r30, 0x08	; 8
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	80 81       	ld	r24, Z
     a0c:	80 61       	ori	r24, 0x10	; 16
     a0e:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     a10:	80 81       	ld	r24, Z
     a12:	8f 7d       	andi	r24, 0xDF	; 223
     a14:	80 83       	st	Z, r24
			break;
     a16:	08 95       	ret
		case 4:
			SET		(DD_F4);
     a18:	e8 e0       	ldi	r30, 0x08	; 8
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	80 81       	ld	r24, Z
     a1e:	80 64       	ori	r24, 0x40	; 64
     a20:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     a22:	80 81       	ld	r24, Z
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	80 83       	st	Z, r24
     a28:	08 95       	ret

00000a2a <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	91 f0       	breq	.+36     	; 0xa56 <_ZN5Motor19SetReverseDirectionEv+0x2c>
     a32:	18 f4       	brcc	.+6      	; 0xa3a <_ZN5Motor19SetReverseDirectionEv+0x10>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	31 f0       	breq	.+12     	; 0xa44 <_ZN5Motor19SetReverseDirectionEv+0x1a>
     a38:	08 95       	ret
     a3a:	83 30       	cpi	r24, 0x03	; 3
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <_ZN5Motor19SetReverseDirectionEv+0x3e>
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	e1 f0       	breq	.+56     	; 0xa7a <_ZN5Motor19SetReverseDirectionEv+0x50>
     a42:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     a44:	e8 e0       	ldi	r30, 0x08	; 8
     a46:	f1 e0       	ldi	r31, 0x01	; 1
     a48:	80 81       	ld	r24, Z
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	80 83       	st	Z, r24
			SET		(DD_B1);
     a4e:	80 81       	ld	r24, Z
     a50:	81 60       	ori	r24, 0x01	; 1
     a52:	80 83       	st	Z, r24
			break;
     a54:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     a56:	e8 e0       	ldi	r30, 0x08	; 8
     a58:	f1 e0       	ldi	r31, 0x01	; 1
     a5a:	80 81       	ld	r24, Z
     a5c:	87 7f       	andi	r24, 0xF7	; 247
     a5e:	80 83       	st	Z, r24
			SET		(DD_B2);
     a60:	80 81       	ld	r24, Z
     a62:	84 60       	ori	r24, 0x04	; 4
     a64:	80 83       	st	Z, r24
			break;
     a66:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     a68:	e8 e0       	ldi	r30, 0x08	; 8
     a6a:	f1 e0       	ldi	r31, 0x01	; 1
     a6c:	80 81       	ld	r24, Z
     a6e:	8f 7e       	andi	r24, 0xEF	; 239
     a70:	80 83       	st	Z, r24
			SET		(DD_B3);
     a72:	80 81       	ld	r24, Z
     a74:	80 62       	ori	r24, 0x20	; 32
     a76:	80 83       	st	Z, r24
			break;
     a78:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     a7a:	e8 e0       	ldi	r30, 0x08	; 8
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	80 81       	ld	r24, Z
     a80:	8f 7b       	andi	r24, 0xBF	; 191
     a82:	80 83       	st	Z, r24
			SET		(DD_B4);
     a84:	80 81       	ld	r24, Z
     a86:	80 68       	ori	r24, 0x80	; 128
     a88:	80 83       	st	Z, r24
     a8a:	08 95       	ret

00000a8c <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     a8c:	fc 01       	movw	r30, r24
     a8e:	80 81       	ld	r24, Z
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	b1 f0       	breq	.+44     	; 0xac0 <_ZN5Motor9StopMotorEv+0x34>
     a94:	18 f4       	brcc	.+6      	; 0xa9c <_ZN5Motor9StopMotorEv+0x10>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	31 f0       	breq	.+12     	; 0xaa6 <_ZN5Motor9StopMotorEv+0x1a>
     a9a:	08 95       	ret
     a9c:	83 30       	cpi	r24, 0x03	; 3
     a9e:	e9 f0       	breq	.+58     	; 0xada <_ZN5Motor9StopMotorEv+0x4e>
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	41 f1       	breq	.+80     	; 0xaf4 <_ZN5Motor9StopMotorEv+0x68>
     aa4:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     aa6:	e8 e0       	ldi	r30, 0x08	; 8
     aa8:	f1 e0       	ldi	r31, 0x01	; 1
     aaa:	80 81       	ld	r24, Z
     aac:	8d 7f       	andi	r24, 0xFD	; 253
     aae:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     ab0:	80 81       	ld	r24, Z
     ab2:	8e 7f       	andi	r24, 0xFE	; 254
     ab4:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     ab6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     aba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     abe:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     ac0:	e8 e0       	ldi	r30, 0x08	; 8
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	80 81       	ld	r24, Z
     ac6:	87 7f       	andi	r24, 0xF7	; 247
     ac8:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     aca:	80 81       	ld	r24, Z
     acc:	8b 7f       	andi	r24, 0xFB	; 251
     ace:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     ad0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     ad4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     ad8:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     ada:	e8 e0       	ldi	r30, 0x08	; 8
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	80 81       	ld	r24, Z
     ae0:	8f 7e       	andi	r24, 0xEF	; 239
     ae2:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     ae4:	80 81       	ld	r24, Z
     ae6:	8f 7d       	andi	r24, 0xDF	; 223
     ae8:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     aea:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     aee:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     af2:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     af4:	e8 e0       	ldi	r30, 0x08	; 8
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	80 81       	ld	r24, Z
     afa:	8f 7b       	andi	r24, 0xBF	; 191
     afc:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     afe:	80 81       	ld	r24, Z
     b00:	8f 77       	andi	r24, 0x7F	; 127
     b02:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     b04:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b08:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     b0c:	08 95       	ret

00000b0e <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	8c 01       	movw	r16, r24
     b18:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     b1a:	1c 16       	cp	r1, r28
     b1c:	1d 06       	cpc	r1, r29
     b1e:	0c f4       	brge	.+2      	; 0xb22 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     b20:	53 df       	rcall	.-346    	; 0x9c8 <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr < 0)
     b22:	dd 23       	and	r29, r29
     b24:	2c f4       	brge	.+10     	; 0xb30 <_ZN5Motor11SetOcrValueEi+0x22>
	{
		 Ocr = -Ocr;
     b26:	d1 95       	neg	r29
     b28:	c1 95       	neg	r28
     b2a:	d1 09       	sbc	r29, r1
		 SetReverseDirection();
     b2c:	c8 01       	movw	r24, r16
     b2e:	7d df       	rcall	.-262    	; 0xa2a <_ZN5Motor19SetReverseDirectionEv>
     b30:	ca 3f       	cpi	r28, 0xFA	; 250
     b32:	d1 05       	cpc	r29, r1
     b34:	14 f0       	brlt	.+4      	; 0xb3a <_ZN5Motor11SetOcrValueEi+0x2c>
     b36:	c9 ef       	ldi	r28, 0xF9	; 249
     b38:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if( Ocr > MAX_VALUE)
		Ocr = MAX_VALUE;

	switch(num)
     b3a:	f8 01       	movw	r30, r16
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	71 f0       	breq	.+28     	; 0xb5e <_ZN5Motor11SetOcrValueEi+0x50>
     b42:	18 f4       	brcc	.+6      	; 0xb4a <_ZN5Motor11SetOcrValueEi+0x3c>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	31 f0       	breq	.+12     	; 0xb54 <_ZN5Motor11SetOcrValueEi+0x46>
     b48:	18 c0       	rjmp	.+48     	; 0xb7a <_ZN5Motor11SetOcrValueEi+0x6c>
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	69 f0       	breq	.+26     	; 0xb68 <_ZN5Motor11SetOcrValueEi+0x5a>
     b4e:	84 30       	cpi	r24, 0x04	; 4
     b50:	81 f0       	breq	.+32     	; 0xb72 <_ZN5Motor11SetOcrValueEi+0x64>
     b52:	13 c0       	rjmp	.+38     	; 0xb7a <_ZN5Motor11SetOcrValueEi+0x6c>
	{
		case 1:
			PWM_OCR1	= Ocr;
     b54:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     b58:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     b5c:	0e c0       	rjmp	.+28     	; 0xb7a <_ZN5Motor11SetOcrValueEi+0x6c>
		case 2:
			PWM_OCR2	= Ocr;
     b5e:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     b62:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <_ZN5Motor11SetOcrValueEi+0x6c>
		case 3:
			PWM_OCR3	= Ocr;
     b68:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     b6c:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <_ZN5Motor11SetOcrValueEi+0x6c>
		case 4:
			PWM_OCR4	= Ocr;
     b72:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b76:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
	}
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	08 95       	ret

00000b84 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	ec 01       	movw	r28, r24
	num = no;
     b8a:	68 83       	st	Y, r22
	InitPWM();
     b8c:	9f de       	rcall	.-706    	; 0x8cc <_ZN5Motor7InitPWMEv>

	StopMotor();
     b8e:	ce 01       	movw	r24, r28
     b90:	7d df       	rcall	.-262    	; 0xa8c <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	ce 01       	movw	r24, r28
     b98:	ba df       	rcall	.-140    	; 0xb0e <_ZN5Motor11SetOcrValueEi>

}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <_ZN3PID7Set_PidEfff>:


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	fc 01       	movw	r30, r24
	kp = kP;
     bae:	40 83       	st	Z, r20
     bb0:	51 83       	std	Z+1, r21	; 0x01
     bb2:	62 83       	std	Z+2, r22	; 0x02
     bb4:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     bb6:	04 83       	std	Z+4, r16	; 0x04
     bb8:	15 83       	std	Z+5, r17	; 0x05
     bba:	26 83       	std	Z+6, r18	; 0x06
     bbc:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     bbe:	c0 86       	std	Z+8, r12	; 0x08
     bc0:	d1 86       	std	Z+9, r13	; 0x09
     bc2:	e2 86       	std	Z+10, r14	; 0x0a
     bc4:	f3 86       	std	Z+11, r15	; 0x0b
}
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	08 95       	ret

00000bd4 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     bd4:	8f 92       	push	r8
     bd6:	9f 92       	push	r9
     bd8:	af 92       	push	r10
     bda:	bf 92       	push	r11
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	ec 01       	movw	r28, r24
     bea:	7b 01       	movw	r14, r22
	error = sp - input;
     bec:	6c 85       	ldd	r22, Y+12	; 0x0c
     bee:	7d 85       	ldd	r23, Y+13	; 0x0d
     bf0:	8b 01       	movw	r16, r22
     bf2:	0e 19       	sub	r16, r14
     bf4:	1f 09       	sbc	r17, r15
     bf6:	1f 87       	std	Y+15, r17	; 0x0f
     bf8:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     bfa:	8a 89       	ldd	r24, Y+18	; 0x12
     bfc:	9b 89       	ldd	r25, Y+19	; 0x13
     bfe:	80 0f       	add	r24, r16
     c00:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     c02:	8e 37       	cpi	r24, 0x7E	; 126
     c04:	91 05       	cpc	r25, r1
     c06:	2c f0       	brlt	.+10     	; 0xc12 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     c08:	8d e7       	ldi	r24, 0x7D	; 125
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9b 8b       	std	Y+19, r25	; 0x13
     c0e:	8a 8b       	std	Y+18, r24	; 0x12
     c10:	0b c0       	rjmp	.+22     	; 0xc28 <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     c12:	83 38       	cpi	r24, 0x83	; 131
     c14:	2f ef       	ldi	r18, 0xFF	; 255
     c16:	92 07       	cpc	r25, r18
     c18:	1c f0       	brlt	.+6      	; 0xc20 <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     c1a:	9b 8b       	std	Y+19, r25	; 0x13
     c1c:	8a 8b       	std	Y+18, r24	; 0x12
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     c20:	83 e8       	ldi	r24, 0x83	; 131
     c22:	9f ef       	ldi	r25, 0xFF	; 255
     c24:	9b 8b       	std	Y+19, r25	; 0x13
     c26:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     c28:	6a 89       	ldd	r22, Y+18	; 0x12
     c2a:	7b 89       	ldd	r23, Y+19	; 0x13
     c2c:	07 2e       	mov	r0, r23
     c2e:	00 0c       	add	r0, r0
     c30:	88 0b       	sbc	r24, r24
     c32:	99 0b       	sbc	r25, r25
     c34:	d1 d4       	rcall	.+2466   	; 0x15d8 <__floatsisf>
     c36:	2c 81       	ldd	r18, Y+4	; 0x04
     c38:	3d 81       	ldd	r19, Y+5	; 0x05
     c3a:	4e 81       	ldd	r20, Y+6	; 0x06
     c3c:	5f 81       	ldd	r21, Y+7	; 0x07
     c3e:	58 d5       	rcall	.+2736   	; 0x16f0 <__mulsf3>
     c40:	4b 01       	movw	r8, r22
     c42:	5c 01       	movw	r10, r24
     c44:	b8 01       	movw	r22, r16
     c46:	11 0f       	add	r17, r17
     c48:	88 0b       	sbc	r24, r24
     c4a:	99 0b       	sbc	r25, r25
     c4c:	c5 d4       	rcall	.+2442   	; 0x15d8 <__floatsisf>
     c4e:	28 81       	ld	r18, Y
     c50:	39 81       	ldd	r19, Y+1	; 0x01
     c52:	4a 81       	ldd	r20, Y+2	; 0x02
     c54:	5b 81       	ldd	r21, Y+3	; 0x03
     c56:	4c d5       	rcall	.+2712   	; 0x16f0 <__mulsf3>
     c58:	9b 01       	movw	r18, r22
     c5a:	ac 01       	movw	r20, r24
     c5c:	c5 01       	movw	r24, r10
     c5e:	b4 01       	movw	r22, r8
     c60:	bc d3       	rcall	.+1912   	; 0x13da <__addsf3>
     c62:	4b 01       	movw	r8, r22
     c64:	5c 01       	movw	r10, r24
     c66:	88 89       	ldd	r24, Y+16	; 0x10
     c68:	99 89       	ldd	r25, Y+17	; 0x11
     c6a:	b7 01       	movw	r22, r14
     c6c:	68 1b       	sub	r22, r24
     c6e:	79 0b       	sbc	r23, r25
     c70:	07 2e       	mov	r0, r23
     c72:	00 0c       	add	r0, r0
     c74:	88 0b       	sbc	r24, r24
     c76:	99 0b       	sbc	r25, r25
     c78:	af d4       	rcall	.+2398   	; 0x15d8 <__floatsisf>
     c7a:	28 85       	ldd	r18, Y+8	; 0x08
     c7c:	39 85       	ldd	r19, Y+9	; 0x09
     c7e:	4a 85       	ldd	r20, Y+10	; 0x0a
     c80:	5b 85       	ldd	r21, Y+11	; 0x0b
     c82:	36 d5       	rcall	.+2668   	; 0x16f0 <__mulsf3>
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	c5 01       	movw	r24, r10
     c8a:	b4 01       	movw	r22, r8
     c8c:	a5 d3       	rcall	.+1866   	; 0x13d8 <__subsf3>
     c8e:	2c 89       	ldd	r18, Y+20	; 0x14
     c90:	3d 89       	ldd	r19, Y+21	; 0x15
     c92:	4e 89       	ldd	r20, Y+22	; 0x16
     c94:	5f 89       	ldd	r21, Y+23	; 0x17
     c96:	a1 d3       	rcall	.+1858   	; 0x13da <__addsf3>
     c98:	6c 8b       	std	Y+20, r22	; 0x14
     c9a:	7d 8b       	std	Y+21, r23	; 0x15
     c9c:	8e 8b       	std	Y+22, r24	; 0x16
     c9e:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     ca0:	f9 8a       	std	Y+17, r15	; 0x11
     ca2:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	bf 90       	pop	r11
     cb2:	af 90       	pop	r10
     cb4:	9f 90       	pop	r9
     cb6:	8f 90       	pop	r8
     cb8:	08 95       	ret

00000cba <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     cba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     cbe:	87 e6       	ldi	r24, 0x67	; 103
     cc0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     cc4:	88 e9       	ldi	r24, 0x98	; 152
     cc6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     cca:	86 e0       	ldi	r24, 0x06	; 6
     ccc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     cd0:	08 95       	ret

00000cd2 <_Z9initUART3v>:
     cd2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     cd6:	89 e1       	ldi	r24, 0x19	; 25
     cd8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     cdc:	88 e9       	ldi	r24, 0x98	; 152
     cde:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     ce2:	86 e0       	ldi	r24, 0x06	; 6
     ce4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     ce8:	08 95       	ret

00000cea <__vector_25>:

ISR(USART0_RX_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	8f 93       	push	r24
	buffer=UDR0;
     cf6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     cfa:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <buffer>
}
     cfe:	8f 91       	pop	r24
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <__vector_36>:

ISR(USART1_RX_vect)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	8f 93       	push	r24
	buffer1=UDR1;
     d16:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     d1a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <buffer1>
	
}
     d1e:	8f 91       	pop	r24
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <__vector_51>:

ISR(USART2_RX_vect)
{
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	8f 93       	push	r24
	buffer2=UDR2;
     d36:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     d3a:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <buffer2>
		
}
     d3e:	8f 91       	pop	r24
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_54>:


ISR(USART3_RX_vect)
{
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	0b b6       	in	r0, 0x3b	; 59
     d56:	0f 92       	push	r0
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	ef 93       	push	r30
     d5e:	ff 93       	push	r31
	buffer3=UDR3;
     d60:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     d64:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <buffer3>
	if(rcvflag)
     d68:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <rcvflag>
     d6c:	99 23       	and	r25, r25
     d6e:	89 f0       	breq	.+34     	; 0xd92 <__vector_54+0x48>
	{
		rcvdata[datacount] = buffer3;
     d70:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <_ZL9datacount>
     d74:	e9 2f       	mov	r30, r25
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	e1 54       	subi	r30, 0x41	; 65
     d7a:	fd 4f       	sbci	r31, 0xFD	; 253
     d7c:	80 83       	st	Z, r24
		datacount++;
     d7e:	9f 5f       	subi	r25, 0xFF	; 255
		if(datacount>3)
     d80:	94 30       	cpi	r25, 0x04	; 4
     d82:	18 f4       	brcc	.+6      	; 0xd8a <__vector_54+0x40>
{
	buffer3=UDR3;
	if(rcvflag)
	{
		rcvdata[datacount] = buffer3;
		datacount++;
     d84:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <_ZL9datacount>
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <__vector_54+0x48>
		if(datacount>3)
		{
			datacount=0;
     d8a:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <_ZL9datacount>
			rcvflag = false;
     d8e:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <rcvflag>
		}
	}
	if(buffer3==START_BYTE_MANUAL)
     d92:	8d 3f       	cpi	r24, 0xFD	; 253
     d94:	31 f4       	brne	.+12     	; 0xda2 <__vector_54+0x58>
	{
		rcvflag = true;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <rcvflag>
		auto_mode = false;
     d9c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <auto_mode>
     da0:	07 c0       	rjmp	.+14     	; 0xdb0 <__vector_54+0x66>
	}
	else if(buffer3 == START_BYTE_AUTO)
     da2:	8e 3f       	cpi	r24, 0xFE	; 254
     da4:	29 f4       	brne	.+10     	; 0xdb0 <__vector_54+0x66>
	{
		rcvflag = true;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <rcvflag>
		auto_mode = true;
     dac:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <auto_mode>
	}
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <_Z10init_slavev>:
	
	

void init_slave()
{
	DATA1 = 50;
     dc6:	ef eb       	ldi	r30, 0xBF	; 191
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	82 e3       	ldi	r24, 0x32	; 50
     dcc:	80 83       	st	Z, r24
	DATA2 = 50;
     dce:	81 83       	std	Z+1, r24	; 0x01
	DATA3 = 50;
     dd0:	82 83       	std	Z+2, r24	; 0x02
	
	auto_mode = false;
     dd2:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <auto_mode>
	master_work_category = 0;
     dd6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <master_work_category>
	
	speed = 0;
     dda:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <speed+0x1>
     dde:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <speed>
	current_location = Starting_Zone;
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <current_location>
	next_location = Starting_Zone;
     de8:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <next_location>
	
	distance = 0;
     dec:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <distance>
     df0:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <distance+0x1>
     df4:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <distance+0x2>
     df8:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <distance+0x3>
	slope = 0;
     dfc:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <slope>
     e00:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <slope+0x1>
     e04:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <slope+0x2>
     e08:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <slope+0x3>
	calculated = false;
     e0c:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <calculated>
	
	current_distance = SZONE;
     e10:	8c ed       	ldi	r24, 0xDC	; 220
     e12:	9c e0       	ldi	r25, 0x0C	; 12
     e14:	a0 e0       	ldi	r26, 0x00	; 0
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <current_distance>
     e1c:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <current_distance+0x1>
     e20:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <current_distance+0x2>
     e24:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <current_distance+0x3>
	next_distance = SZONE;
     e28:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <next_distance>
     e2c:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <next_distance+0x1>
     e30:	a0 93 d0 02 	sts	0x02D0, r26	; 0x8002d0 <next_distance+0x2>
     e34:	b0 93 d1 02 	sts	0x02D1, r27	; 0x8002d1 <next_distance+0x3>
	dir = 1;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <dir>
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
		inline void Reset_Distance(){encdistance = 0;}
     e3e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     e42:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     e46:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     e4a:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
	
	ex.Reset_Distance();
	
	moving = false;
     e4e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <moving>
	searching = false;
     e52:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <searching>
	started = false;
     e56:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <started>
	Golden_Drop = false;
     e5a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <Golden_Drop>
	reset_auto = false;
     e5e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <reset_auto>
     e62:	08 95       	ret

00000e64 <_Z10move_robotv>:




void move_robot()
{
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
	dir = CALC_DIR(current_location,next_location);
     e6a:	c0 91 c6 02 	lds	r28, 0x02C6	; 0x8002c6 <next_location>
     e6e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <current_location>
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	8c 1b       	sub	r24, r28
     e76:	91 09       	sbc	r25, r1
     e78:	12 f0       	brmi	.+4      	; 0xe7e <_Z10move_robotv+0x1a>
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <_Z10move_robotv+0x1c>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <dir>
     e84:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     e88:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     e8c:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     e90:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
	ex.Reset_Distance();
	velocity_robot[0] = Y_COMPONENT;
     e94:	06 ea       	ldi	r16, 0xA6	; 166
     e96:	12 e0       	ldi	r17, 0x02	; 2
     e98:	8e e1       	ldi	r24, 0x1E	; 30
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	f8 01       	movw	r30, r16
     e9e:	91 83       	std	Z+1, r25	; 0x01
     ea0:	80 83       	st	Z, r24
	speed = dir*HALF_RPM;
     ea2:	06 2e       	mov	r0, r22
     ea4:	00 0c       	add	r0, r0
     ea6:	77 0b       	sbc	r23, r23
     ea8:	88 0b       	sbc	r24, r24
     eaa:	99 0b       	sbc	r25, r25
     eac:	95 d3       	rcall	.+1834   	; 0x15d8 <__floatsisf>
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4b e6       	ldi	r20, 0x6B	; 107
     eb4:	53 e4       	ldi	r21, 0x43	; 67
     eb6:	1c d4       	rcall	.+2104   	; 0x16f0 <__mulsf3>
     eb8:	5c d3       	rcall	.+1720   	; 0x1572 <__fixsfsi>
     eba:	70 93 df 02 	sts	0x02DF, r23	; 0x8002df <speed+0x1>
     ebe:	60 93 de 02 	sts	0x02DE, r22	; 0x8002de <speed>
	velocity_robot[2] = 0;
     ec2:	f8 01       	movw	r30, r16
     ec4:	15 82       	std	Z+5, r1	; 0x05
     ec6:	14 82       	std	Z+4, r1	; 0x04
	moving = true;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <moving>
	current_location = next_location;
     ece:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <current_location>
	distance = abs(next_distance - current_distance); 
     ed2:	40 91 ce 02 	lds	r20, 0x02CE	; 0x8002ce <next_distance>
     ed6:	50 91 cf 02 	lds	r21, 0x02CF	; 0x8002cf <next_distance+0x1>
     eda:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <next_distance+0x2>
     ede:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <next_distance+0x3>
     ee2:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <current_distance>
     ee6:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <current_distance+0x1>
     eea:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <current_distance+0x2>
     eee:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <current_distance+0x3>
     ef2:	8a 01       	movw	r16, r20
     ef4:	9b 01       	movw	r18, r22
     ef6:	08 1b       	sub	r16, r24
     ef8:	19 0b       	sbc	r17, r25
     efa:	2a 0b       	sbc	r18, r26
     efc:	3b 0b       	sbc	r19, r27
     efe:	d9 01       	movw	r26, r18
     f00:	c8 01       	movw	r24, r16
     f02:	3a f4       	brpl	.+14     	; 0xf12 <_Z10move_robotv+0xae>
     f04:	88 27       	eor	r24, r24
     f06:	99 27       	eor	r25, r25
     f08:	dc 01       	movw	r26, r24
     f0a:	80 1b       	sub	r24, r16
     f0c:	91 0b       	sbc	r25, r17
     f0e:	a2 0b       	sbc	r26, r18
     f10:	b3 0b       	sbc	r27, r19
     f12:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <distance>
     f16:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <distance+0x1>
     f1a:	a0 93 d8 02 	sts	0x02D8, r26	; 0x8002d8 <distance+0x2>
     f1e:	b0 93 d9 02 	sts	0x02D9, r27	; 0x8002d9 <distance+0x3>
	current_distance = next_distance;
     f22:	40 93 d2 02 	sts	0x02D2, r20	; 0x8002d2 <current_distance>
     f26:	50 93 d3 02 	sts	0x02D3, r21	; 0x8002d3 <current_distance+0x1>
     f2a:	60 93 d4 02 	sts	0x02D4, r22	; 0x8002d4 <current_distance+0x2>
     f2e:	70 93 d5 02 	sts	0x02D5, r23	; 0x8002d5 <current_distance+0x3>
}
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	08 95       	ret

00000f3a <_Z18operate_slave_autov>:
	if(reset_auto)	//reset auto mode data if switched from auto to manual
		reset_auto_mode();
}

void operate_slave_auto()
{
     f3a:	8f 92       	push	r8
     f3c:	9f 92       	push	r9
     f3e:	af 92       	push	r10
     f40:	bf 92       	push	r11
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
	if (!moving && !searching)
     f4e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moving>
     f52:	81 11       	cpse	r24, r1
     f54:	50 c0       	rjmp	.+160    	; 0xff6 <_Z18operate_slave_autov+0xbc>
     f56:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <searching>
     f5a:	81 11       	cpse	r24, r1
     f5c:	05 c1       	rjmp	.+522    	; 0x1168 <_Z18operate_slave_autov+0x22e>
	{
		/******************************Data for auto mode from master************************************/
		if(DATA1 == Rack_load)
     f5e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <rcvdata>
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	79 f4       	brne	.+30     	; 0xf84 <_Z18operate_slave_autov+0x4a>
		{
			next_location = Rack_zone;
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <next_location>
			next_distance = RZONE;
     f6c:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <next_distance>
     f70:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <next_distance+0x1>
     f74:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <next_distance+0x2>
     f78:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <next_distance+0x3>
			move_robot();
     f7c:	73 df       	rcall	.-282    	; 0xe64 <_Z10move_robotv>
			DATA1 = 0;
     f7e:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rcvdata>
     f82:	34 c0       	rjmp	.+104    	; 0xfec <_Z18operate_slave_autov+0xb2>
		}
		else if(DATA1 == Load1)
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	91 f4       	brne	.+36     	; 0xfac <_Z18operate_slave_autov+0x72>
		{
			next_location = Loading_zone1;
     f88:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <next_location>
			next_distance = LZONE1;
     f8c:	89 e2       	ldi	r24, 0x29	; 41
     f8e:	9f e2       	ldi	r25, 0x2F	; 47
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <next_distance>
     f98:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <next_distance+0x1>
     f9c:	a0 93 d0 02 	sts	0x02D0, r26	; 0x8002d0 <next_distance+0x2>
     fa0:	b0 93 d1 02 	sts	0x02D1, r27	; 0x8002d1 <next_distance+0x3>
			move_robot();
     fa4:	5f df       	rcall	.-322    	; 0xe64 <_Z10move_robotv>
			DATA1 = 0;
     fa6:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rcvdata>
     faa:	20 c0       	rjmp	.+64     	; 0xfec <_Z18operate_slave_autov+0xb2>
		}
		else if (DATA1 == Load2)
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	99 f4       	brne	.+38     	; 0xfd6 <_Z18operate_slave_autov+0x9c>
		{
			next_location = Loading_zone2;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <next_location>
			next_distance = LZONE2;
     fb6:	8e e4       	ldi	r24, 0x4E	; 78
     fb8:	91 e3       	ldi	r25, 0x31	; 49
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <next_distance>
     fc2:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <next_distance+0x1>
     fc6:	a0 93 d0 02 	sts	0x02D0, r26	; 0x8002d0 <next_distance+0x2>
     fca:	b0 93 d1 02 	sts	0x02D1, r27	; 0x8002d1 <next_distance+0x3>
			move_robot();
     fce:	4a df       	rcall	.-364    	; 0xe64 <_Z10move_robotv>
			DATA1 = 0;
     fd0:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rcvdata>
     fd4:	0b c0       	rjmp	.+22     	; 0xfec <_Z18operate_slave_autov+0xb2>
		}
		else if (DATA1 == Search_automaticrobot)
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	09 f0       	breq	.+2      	; 0xfdc <_Z18operate_slave_autov+0xa2>
     fda:	ee c0       	rjmp	.+476    	; 0x11b8 <_Z18operate_slave_autov+0x27e>
		{
			searching = true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <searching>
			started = true;
     fe2:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <started>
			DATA1 = 0;
     fe6:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rcvdata>
     fea:	be c0       	rjmp	.+380    	; 0x1168 <_Z18operate_slave_autov+0x22e>
		}
	}
	
	/**********************************If moving to different zone then perform ramping************************************/
	if (moving)
     fec:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <moving>
     ff0:	88 23       	and	r24, r24
     ff2:	09 f4       	brne	.+2      	; 0xff6 <_Z18operate_slave_autov+0xbc>
     ff4:	b5 c0       	rjmp	.+362    	; 0x1160 <_Z18operate_slave_autov+0x226>
	{
		//to calculate slope only one time at the start
			if(!calculated)
     ff6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <calculated>
     ffa:	81 11       	cpse	r24, r1
     ffc:	30 c0       	rjmp	.+96     	; 0x105e <_Z18operate_slave_autov+0x124>
			{
				slope =  ((8.0*(speed-dir*RAMP_OFFSET))/distance);
     ffe:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <dir>
    1002:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <speed>
    1006:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <speed+0x1>
    100a:	92 e3       	ldi	r25, 0x32	; 50
    100c:	89 02       	muls	r24, r25
    100e:	60 19       	sub	r22, r0
    1010:	71 09       	sbc	r23, r1
    1012:	11 24       	eor	r1, r1
    1014:	07 2e       	mov	r0, r23
    1016:	00 0c       	add	r0, r0
    1018:	88 0b       	sbc	r24, r24
    101a:	99 0b       	sbc	r25, r25
    101c:	dd d2       	rcall	.+1466   	; 0x15d8 <__floatsisf>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	64 d3       	rcall	.+1736   	; 0x16f0 <__mulsf3>
    1028:	6b 01       	movw	r12, r22
    102a:	7c 01       	movw	r14, r24
    102c:	60 91 d6 02 	lds	r22, 0x02D6	; 0x8002d6 <distance>
    1030:	70 91 d7 02 	lds	r23, 0x02D7	; 0x8002d7 <distance+0x1>
    1034:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <distance+0x2>
    1038:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <distance+0x3>
    103c:	cd d2       	rcall	.+1434   	; 0x15d8 <__floatsisf>
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	c7 01       	movw	r24, r14
    1044:	b6 01       	movw	r22, r12
    1046:	2d d2       	rcall	.+1114   	; 0x14a2 <__divsf3>
    1048:	60 93 da 02 	sts	0x02DA, r22	; 0x8002da <slope>
    104c:	70 93 db 02 	sts	0x02DB, r23	; 0x8002db <slope+0x1>
    1050:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <slope+0x2>
    1054:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <slope+0x3>
				calculated = true;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <calculated>
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
    105e:	c0 90 72 02 	lds	r12, 0x0272	; 0x800272 <ex+0x1>
    1062:	d0 90 73 02 	lds	r13, 0x0273	; 0x800273 <ex+0x2>
    1066:	e0 90 74 02 	lds	r14, 0x0274	; 0x800274 <ex+0x3>
    106a:	f0 90 75 02 	lds	r15, 0x0275	; 0x800275 <ex+0x4>
    106e:	d7 01       	movw	r26, r14
    1070:	c6 01       	movw	r24, r12
    1072:	ff 20       	and	r15, r15
    1074:	3c f4       	brge	.+14     	; 0x1084 <_Z18operate_slave_autov+0x14a>
    1076:	88 27       	eor	r24, r24
    1078:	99 27       	eor	r25, r25
    107a:	dc 01       	movw	r26, r24
    107c:	8c 19       	sub	r24, r12
    107e:	9d 09       	sbc	r25, r13
    1080:	ae 09       	sbc	r26, r14
    1082:	bf 09       	sbc	r27, r15
			}
			
			//if destination is reached
			
			if(abs(ex.Get_Distance()) >= distance)
    1084:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <distance>
    1088:	50 91 d7 02 	lds	r21, 0x02D7	; 0x8002d7 <distance+0x1>
    108c:	60 91 d8 02 	lds	r22, 0x02D8	; 0x8002d8 <distance+0x2>
    1090:	70 91 d9 02 	lds	r23, 0x02D9	; 0x8002d9 <distance+0x3>
    1094:	84 17       	cp	r24, r20
    1096:	95 07       	cpc	r25, r21
    1098:	a6 07       	cpc	r26, r22
    109a:	b7 07       	cpc	r27, r23
			{
				//stop the robot
				reset_robot_velocity();
    109c:	74 f0       	brlt	.+28     	; 0x10ba <_Z18operate_slave_autov+0x180>
    109e:	85 d9       	rcall	.-3318   	; 0x3aa <_Z20reset_robot_velocityv>
		inline void Reset_Distance(){encdistance = 0;}
    10a0:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    10a4:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    10a8:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    10ac:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
				ex.Reset_Distance();
				moving = false;
    10b0:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <moving>
				calculated = false;
    10b4:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <calculated>
    10b8:	53 c0       	rjmp	.+166    	; 0x1160 <_Z18operate_slave_autov+0x226>
			}
			else if (abs(ex.Get_Distance()) >= (distance>>3) && (abs(ex.Get_Distance()) <= 7*(distance>>3)))
    10ba:	68 94       	set
    10bc:	12 f8       	bld	r1, 2
    10be:	75 95       	asr	r23
    10c0:	67 95       	ror	r22
    10c2:	57 95       	ror	r21
    10c4:	47 95       	ror	r20
    10c6:	16 94       	lsr	r1
    10c8:	d1 f7       	brne	.-12     	; 0x10be <_Z18operate_slave_autov+0x184>
    10ca:	84 17       	cp	r24, r20
    10cc:	95 07       	cpc	r25, r21
    10ce:	a6 07       	cpc	r26, r22
    10d0:	b7 07       	cpc	r27, r23
    10d2:	0c f1       	brlt	.+66     	; 0x1116 <_Z18operate_slave_autov+0x1dc>
    10d4:	8a 01       	movw	r16, r20
    10d6:	9b 01       	movw	r18, r22
    10d8:	00 0f       	add	r16, r16
    10da:	11 1f       	adc	r17, r17
    10dc:	22 1f       	adc	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	00 0f       	add	r16, r16
    10e2:	11 1f       	adc	r17, r17
    10e4:	22 1f       	adc	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	00 0f       	add	r16, r16
    10ea:	11 1f       	adc	r17, r17
    10ec:	22 1f       	adc	r18, r18
    10ee:	33 1f       	adc	r19, r19
    10f0:	04 1b       	sub	r16, r20
    10f2:	15 0b       	sbc	r17, r21
    10f4:	26 0b       	sbc	r18, r22
    10f6:	37 0b       	sbc	r19, r23
    10f8:	08 17       	cp	r16, r24
    10fa:	19 07       	cpc	r17, r25
    10fc:	2a 07       	cpc	r18, r26
    10fe:	3b 07       	cpc	r19, r27
    1100:	0c f4       	brge	.+2      	; 0x1104 <_Z18operate_slave_autov+0x1ca>
    1102:	b1 c0       	rjmp	.+354    	; 0x1266 <_Z18operate_slave_autov+0x32c>
			{
				//normal
				velocity_robot[1] = speed;
    1104:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <speed>
    1108:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <speed+0x1>
    110c:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <velocity_robot+0x3>
    1110:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <velocity_robot+0x2>
				
			}
			else if (abs(ex.Get_Distance()) <= (distance>>3))
			{
				//ramp up
				velocity_robot[1] = dir*((slope*ex.Get_Distance())+RAMP_OFFSET);
    1114:	25 c0       	rjmp	.+74     	; 0x1160 <_Z18operate_slave_autov+0x226>
    1116:	c7 01       	movw	r24, r14
    1118:	b6 01       	movw	r22, r12
    111a:	5e d2       	rcall	.+1212   	; 0x15d8 <__floatsisf>
    111c:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <slope>
    1120:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <slope+0x1>
    1124:	40 91 dc 02 	lds	r20, 0x02DC	; 0x8002dc <slope+0x2>
    1128:	50 91 dd 02 	lds	r21, 0x02DD	; 0x8002dd <slope+0x3>
    112c:	e1 d2       	rcall	.+1474   	; 0x16f0 <__mulsf3>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	48 e4       	ldi	r20, 0x48	; 72
    1134:	52 e4       	ldi	r21, 0x42	; 66
    1136:	51 d1       	rcall	.+674    	; 0x13da <__addsf3>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24
    113c:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <dir>
    1140:	06 2e       	mov	r0, r22
    1142:	00 0c       	add	r0, r0
    1144:	77 0b       	sbc	r23, r23
    1146:	88 0b       	sbc	r24, r24
    1148:	99 0b       	sbc	r25, r25
    114a:	46 d2       	rcall	.+1164   	; 0x15d8 <__floatsisf>
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	c7 01       	movw	r24, r14
    1152:	b6 01       	movw	r22, r12
    1154:	cd d2       	rcall	.+1434   	; 0x16f0 <__mulsf3>
    1156:	0d d2       	rcall	.+1050   	; 0x1572 <__fixsfsi>
    1158:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <velocity_robot+0x3>
    115c:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <velocity_robot+0x2>
					velocity_robot[1] = (dir*(-slope)*ex.Get_Distance())+(8*speed)-(7*dir*RAMP_OFFSET);
			}	
			
	}
	
	if(searching)
    1160:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <searching>
    1164:	88 23       	and	r24, r24
    1166:	41 f1       	breq	.+80     	; 0x11b8 <_Z18operate_slave_autov+0x27e>
	{
		if (started)
    1168:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <started>
    116c:	88 23       	and	r24, r24
    116e:	51 f0       	breq	.+20     	; 0x1184 <_Z18operate_slave_autov+0x24a>
		{
			velocity_robot[0] = -SEARCH_RPM;
    1170:	e6 ea       	ldi	r30, 0xA6	; 166
    1172:	f2 e0       	ldi	r31, 0x02	; 2
    1174:	88 ed       	ldi	r24, 0xD8	; 216
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    117c:	13 82       	std	Z+3, r1	; 0x03
    117e:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;
    1180:	15 82       	std	Z+5, r1	; 0x05
    1182:	14 82       	std	Z+4, r1	; 0x04
		}
		if(DATA1 == lt12_found)
    1184:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <rcvdata>
    1188:	86 30       	cpi	r24, 0x06	; 6
    118a:	79 f4       	brne	.+30     	; 0x11aa <_Z18operate_slave_autov+0x270>
		{
			velocity_robot[0] = 0;
    118c:	e6 ea       	ldi	r30, 0xA6	; 166
    118e:	f2 e0       	ldi	r31, 0x02	; 2
    1190:	11 82       	std	Z+1, r1	; 0x01
			velocity_robot[1] = SEARCH_RPM;
    1192:	10 82       	st	Z, r1
    1194:	88 e2       	ldi	r24, 0x28	; 40
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	93 83       	std	Z+3, r25	; 0x03
			velocity_robot[2] = 0;	
    119a:	82 83       	std	Z+2, r24	; 0x02
    119c:	15 82       	std	Z+5, r1	; 0x05
			DATA1 = 0;	
    119e:	14 82       	std	Z+4, r1	; 0x04
    11a0:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rcvdata>
			started = false;
    11a4:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <started>
		}
		else if(DATA1 == lt3_found)
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <_Z18operate_slave_autov+0x27e>
    11aa:	87 30       	cpi	r24, 0x07	; 7
		{
			reset_robot_velocity();
    11ac:	29 f4       	brne	.+10     	; 0x11b8 <_Z18operate_slave_autov+0x27e>
    11ae:	fd d8       	rcall	.-3590   	; 0x3aa <_Z20reset_robot_velocityv>
			searching = false;
    11b0:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <searching>
			DATA1 = 0;	
    11b4:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <rcvdata>
		}
		

	}
	
	reset_auto = true;	
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <reset_auto>
}
    11be:	5a c0       	rjmp	.+180    	; 0x1274 <_Z18operate_slave_autov+0x33a>
			}
			
			else if ((abs(ex.Get_Distance()) <= distance) && abs((ex.Get_Distance())) >= 7*(distance>>3))
			{
				//ramp down
					velocity_robot[1] = (dir*(-slope)*ex.Get_Distance())+(8*speed)-(7*dir*RAMP_OFFSET);
    11c0:	10 91 e0 02 	lds	r17, 0x02E0	; 0x8002e0 <dir>
    11c4:	80 90 da 02 	lds	r8, 0x02DA	; 0x8002da <slope>
    11c8:	90 90 db 02 	lds	r9, 0x02DB	; 0x8002db <slope+0x1>
    11cc:	a0 90 dc 02 	lds	r10, 0x02DC	; 0x8002dc <slope+0x2>
    11d0:	b0 90 dd 02 	lds	r11, 0x02DD	; 0x8002dd <slope+0x3>
    11d4:	b7 fa       	bst	r11, 7
    11d6:	b0 94       	com	r11
    11d8:	b7 f8       	bld	r11, 7
    11da:	b0 94       	com	r11
    11dc:	61 2f       	mov	r22, r17
    11de:	01 2e       	mov	r0, r17
    11e0:	00 0c       	add	r0, r0
    11e2:	77 0b       	sbc	r23, r23
    11e4:	88 0b       	sbc	r24, r24
    11e6:	99 0b       	sbc	r25, r25
    11e8:	f7 d1       	rcall	.+1006   	; 0x15d8 <__floatsisf>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	c5 01       	movw	r24, r10
    11f0:	b4 01       	movw	r22, r8
    11f2:	7e d2       	rcall	.+1276   	; 0x16f0 <__mulsf3>
    11f4:	4b 01       	movw	r8, r22
    11f6:	5c 01       	movw	r10, r24
    11f8:	c7 01       	movw	r24, r14
    11fa:	b6 01       	movw	r22, r12
    11fc:	ed d1       	rcall	.+986    	; 0x15d8 <__floatsisf>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	c5 01       	movw	r24, r10
    1204:	b4 01       	movw	r22, r8
    1206:	74 d2       	rcall	.+1256   	; 0x16f0 <__mulsf3>
    1208:	6b 01       	movw	r12, r22
    120a:	7c 01       	movw	r14, r24
    120c:	60 91 de 02 	lds	r22, 0x02DE	; 0x8002de <speed>
    1210:	70 91 df 02 	lds	r23, 0x02DF	; 0x8002df <speed+0x1>
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	66 0f       	add	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	07 2e       	mov	r0, r23
    1222:	00 0c       	add	r0, r0
    1224:	88 0b       	sbc	r24, r24
    1226:	99 0b       	sbc	r25, r25
    1228:	d7 d1       	rcall	.+942    	; 0x15d8 <__floatsisf>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	c7 01       	movw	r24, r14
    1230:	b6 01       	movw	r22, r12
    1232:	d3 d0       	rcall	.+422    	; 0x13da <__addsf3>
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
    1238:	2e e5       	ldi	r18, 0x5E	; 94
    123a:	31 e0       	ldi	r19, 0x01	; 1
    123c:	12 03       	mulsu	r17, r18
    123e:	b0 01       	movw	r22, r0
    1240:	13 9f       	mul	r17, r19
    1242:	70 0d       	add	r23, r0
    1244:	11 24       	eor	r1, r1
    1246:	07 2e       	mov	r0, r23
    1248:	00 0c       	add	r0, r0
    124a:	88 0b       	sbc	r24, r24
    124c:	99 0b       	sbc	r25, r25
    124e:	c4 d1       	rcall	.+904    	; 0x15d8 <__floatsisf>
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	c7 01       	movw	r24, r14
    1256:	b6 01       	movw	r22, r12
    1258:	bf d0       	rcall	.+382    	; 0x13d8 <__subsf3>
    125a:	8b d1       	rcall	.+790    	; 0x1572 <__fixsfsi>
    125c:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <velocity_robot+0x3>
    1260:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <velocity_robot+0x2>
    1264:	7d cf       	rjmp	.-262    	; 0x1160 <_Z18operate_slave_autov+0x226>
			{
				//normal
				velocity_robot[1] = speed;
				
			}
			else if (abs(ex.Get_Distance()) <= (distance>>3))
    1266:	48 17       	cp	r20, r24
    1268:	59 07       	cpc	r21, r25
    126a:	6a 07       	cpc	r22, r26
    126c:	7b 07       	cpc	r23, r27
    126e:	0c f4       	brge	.+2      	; 0x1272 <_Z18operate_slave_autov+0x338>
    1270:	a7 cf       	rjmp	.-178    	; 0x11c0 <_Z18operate_slave_autov+0x286>
    1272:	51 cf       	rjmp	.-350    	; 0x1116 <_Z18operate_slave_autov+0x1dc>
		

	}
	
	reset_auto = true;	
}
    1274:	1f 91       	pop	r17
    1276:	0f 91       	pop	r16
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	08 95       	ret

0000128a <_Z15reset_auto_modev>:
	current_distance = next_distance;
}

void reset_auto_mode()
{
	speed = 0;
    128a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <speed+0x1>
    128e:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <speed>
	current_location = Starting_Zone;
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <current_location>
	next_location = Starting_Zone;
    1298:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <next_location>
	
	distance = 0;
    129c:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <distance>
    12a0:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <distance+0x1>
    12a4:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <distance+0x2>
    12a8:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <distance+0x3>
	slope = 0;
    12ac:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <slope>
    12b0:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <slope+0x1>
    12b4:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <slope+0x2>
    12b8:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <slope+0x3>
	calculated = false;
    12bc:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <calculated>
	
	current_distance = SZONE;
    12c0:	8c ed       	ldi	r24, 0xDC	; 220
    12c2:	9c e0       	ldi	r25, 0x0C	; 12
    12c4:	a0 e0       	ldi	r26, 0x00	; 0
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <current_distance>
    12cc:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <current_distance+0x1>
    12d0:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <current_distance+0x2>
    12d4:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <current_distance+0x3>
	next_distance = 0;
    12d8:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <next_distance>
    12dc:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <next_distance+0x1>
    12e0:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <next_distance+0x2>
    12e4:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <next_distance+0x3>
	dir = 1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <dir>
    12ee:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    12f2:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    12f6:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    12fa:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
	
	ex.Reset_Distance();
	
	moving = false;
    12fe:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <moving>
	searching = false;
    1302:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <searching>
	started = false;
    1306:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <started>
	Golden_Drop = false;
    130a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <Golden_Drop>
	reset_auto = false;
    130e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <reset_auto>
    1312:	08 95       	ret

00001314 <_Z20operate_slave_manualv>:
	Golden_Drop = false;
	reset_auto = false;
}

void operate_slave_manual()
{
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
	velocity_robot[0] = (-(DATA1 - 50)/50.0)*MAX_RPM_XY;
    1320:	06 ea       	ldi	r16, 0xA6	; 166
    1322:	12 e0       	ldi	r17, 0x02	; 2
    1324:	0f 2e       	mov	r0, r31
    1326:	ff eb       	ldi	r31, 0xBF	; 191
    1328:	ef 2e       	mov	r14, r31
    132a:	f2 e0       	ldi	r31, 0x02	; 2
    132c:	ff 2e       	mov	r15, r31
    132e:	f0 2d       	mov	r31, r0
    1330:	f7 01       	movw	r30, r14
    1332:	80 81       	ld	r24, Z
    1334:	c2 e3       	ldi	r28, 0x32	; 50
    1336:	d0 e0       	ldi	r29, 0x00	; 0
    1338:	be 01       	movw	r22, r28
    133a:	68 1b       	sub	r22, r24
    133c:	71 09       	sbc	r23, r1
    133e:	07 2e       	mov	r0, r23
    1340:	00 0c       	add	r0, r0
    1342:	88 0b       	sbc	r24, r24
    1344:	99 0b       	sbc	r25, r25
    1346:	48 d1       	rcall	.+656    	; 0x15d8 <__floatsisf>
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	48 e4       	ldi	r20, 0x48	; 72
    134e:	52 e4       	ldi	r21, 0x42	; 66
    1350:	a8 d0       	rcall	.+336    	; 0x14a2 <__divsf3>
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	48 ec       	ldi	r20, 0xC8	; 200
    1358:	53 e4       	ldi	r21, 0x43	; 67
    135a:	ca d1       	rcall	.+916    	; 0x16f0 <__mulsf3>
    135c:	0a d1       	rcall	.+532    	; 0x1572 <__fixsfsi>
    135e:	f8 01       	movw	r30, r16
    1360:	71 83       	std	Z+1, r23	; 0x01
    1362:	60 83       	st	Z, r22
	velocity_robot[1] = ((DATA2 - 50)/50.0)*MAX_RPM_XY;
    1364:	f7 01       	movw	r30, r14
    1366:	61 81       	ldd	r22, Z+1	; 0x01
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	62 53       	subi	r22, 0x32	; 50
    136c:	71 09       	sbc	r23, r1
    136e:	07 2e       	mov	r0, r23
    1370:	00 0c       	add	r0, r0
    1372:	88 0b       	sbc	r24, r24
    1374:	99 0b       	sbc	r25, r25
    1376:	30 d1       	rcall	.+608    	; 0x15d8 <__floatsisf>
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	48 e4       	ldi	r20, 0x48	; 72
    137e:	52 e4       	ldi	r21, 0x42	; 66
    1380:	90 d0       	rcall	.+288    	; 0x14a2 <__divsf3>
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	48 ec       	ldi	r20, 0xC8	; 200
    1388:	53 e4       	ldi	r21, 0x43	; 67
    138a:	b2 d1       	rcall	.+868    	; 0x16f0 <__mulsf3>
    138c:	f2 d0       	rcall	.+484    	; 0x1572 <__fixsfsi>
    138e:	f8 01       	movw	r30, r16
    1390:	73 83       	std	Z+3, r23	; 0x03
    1392:	62 83       	std	Z+2, r22	; 0x02
	velocity_robot[2] = (-(DATA3 - 50)/50.0)*MAX_RPM_YAW;
    1394:	f7 01       	movw	r30, r14
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	c8 1b       	sub	r28, r24
    139a:	d1 09       	sbc	r29, r1
    139c:	be 01       	movw	r22, r28
    139e:	dd 0f       	add	r29, r29
    13a0:	88 0b       	sbc	r24, r24
    13a2:	99 0b       	sbc	r25, r25
    13a4:	19 d1       	rcall	.+562    	; 0x15d8 <__floatsisf>
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	48 e4       	ldi	r20, 0x48	; 72
    13ac:	52 e4       	ldi	r21, 0x42	; 66
    13ae:	79 d0       	rcall	.+242    	; 0x14a2 <__divsf3>
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	48 ec       	ldi	r20, 0xC8	; 200
    13b6:	52 e4       	ldi	r21, 0x42	; 66
    13b8:	9b d1       	rcall	.+822    	; 0x16f0 <__mulsf3>
    13ba:	db d0       	rcall	.+438    	; 0x1572 <__fixsfsi>
    13bc:	f8 01       	movw	r30, r16
    13be:	75 83       	std	Z+5, r23	; 0x05
	if(reset_auto)	//reset auto mode data if switched from auto to manual
    13c0:	64 83       	std	Z+4, r22	; 0x04
    13c2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <reset_auto>
		reset_auto_mode();
    13c6:	81 11       	cpse	r24, r1
    13c8:	60 df       	rcall	.-320    	; 0x128a <_Z15reset_auto_modev>
}
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	08 95       	ret

000013d8 <__subsf3>:
    13d8:	50 58       	subi	r21, 0x80	; 128

000013da <__addsf3>:
    13da:	bb 27       	eor	r27, r27
    13dc:	aa 27       	eor	r26, r26
    13de:	0e d0       	rcall	.+28     	; 0x13fc <__addsf3x>
    13e0:	4d c1       	rjmp	.+666    	; 0x167c <__fp_round>
    13e2:	3e d1       	rcall	.+636    	; 0x1660 <__fp_pscA>
    13e4:	30 f0       	brcs	.+12     	; 0x13f2 <__addsf3+0x18>
    13e6:	43 d1       	rcall	.+646    	; 0x166e <__fp_pscB>
    13e8:	20 f0       	brcs	.+8      	; 0x13f2 <__addsf3+0x18>
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <__addsf3+0x1e>
    13ec:	9f 3f       	cpi	r25, 0xFF	; 255
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <__addsf3+0x1a>
    13f0:	1e f4       	brtc	.+6      	; 0x13f8 <__addsf3+0x1e>
    13f2:	33 c1       	rjmp	.+614    	; 0x165a <__fp_nan>
    13f4:	0e f4       	brtc	.+2      	; 0x13f8 <__addsf3+0x1e>
    13f6:	e0 95       	com	r30
    13f8:	e7 fb       	bst	r30, 7
    13fa:	29 c1       	rjmp	.+594    	; 0x164e <__fp_inf>

000013fc <__addsf3x>:
    13fc:	e9 2f       	mov	r30, r25
    13fe:	4f d1       	rcall	.+670    	; 0x169e <__fp_split3>
    1400:	80 f3       	brcs	.-32     	; 0x13e2 <__addsf3+0x8>
    1402:	ba 17       	cp	r27, r26
    1404:	62 07       	cpc	r22, r18
    1406:	73 07       	cpc	r23, r19
    1408:	84 07       	cpc	r24, r20
    140a:	95 07       	cpc	r25, r21
    140c:	18 f0       	brcs	.+6      	; 0x1414 <__addsf3x+0x18>
    140e:	71 f4       	brne	.+28     	; 0x142c <__addsf3x+0x30>
    1410:	9e f5       	brtc	.+102    	; 0x1478 <__addsf3x+0x7c>
    1412:	67 c1       	rjmp	.+718    	; 0x16e2 <__fp_zero>
    1414:	0e f4       	brtc	.+2      	; 0x1418 <__addsf3x+0x1c>
    1416:	e0 95       	com	r30
    1418:	0b 2e       	mov	r0, r27
    141a:	ba 2f       	mov	r27, r26
    141c:	a0 2d       	mov	r26, r0
    141e:	0b 01       	movw	r0, r22
    1420:	b9 01       	movw	r22, r18
    1422:	90 01       	movw	r18, r0
    1424:	0c 01       	movw	r0, r24
    1426:	ca 01       	movw	r24, r20
    1428:	a0 01       	movw	r20, r0
    142a:	11 24       	eor	r1, r1
    142c:	ff 27       	eor	r31, r31
    142e:	59 1b       	sub	r21, r25
    1430:	99 f0       	breq	.+38     	; 0x1458 <__addsf3x+0x5c>
    1432:	59 3f       	cpi	r21, 0xF9	; 249
    1434:	50 f4       	brcc	.+20     	; 0x144a <__addsf3x+0x4e>
    1436:	50 3e       	cpi	r21, 0xE0	; 224
    1438:	68 f1       	brcs	.+90     	; 0x1494 <__addsf3x+0x98>
    143a:	1a 16       	cp	r1, r26
    143c:	f0 40       	sbci	r31, 0x00	; 0
    143e:	a2 2f       	mov	r26, r18
    1440:	23 2f       	mov	r18, r19
    1442:	34 2f       	mov	r19, r20
    1444:	44 27       	eor	r20, r20
    1446:	58 5f       	subi	r21, 0xF8	; 248
    1448:	f3 cf       	rjmp	.-26     	; 0x1430 <__addsf3x+0x34>
    144a:	46 95       	lsr	r20
    144c:	37 95       	ror	r19
    144e:	27 95       	ror	r18
    1450:	a7 95       	ror	r26
    1452:	f0 40       	sbci	r31, 0x00	; 0
    1454:	53 95       	inc	r21
    1456:	c9 f7       	brne	.-14     	; 0x144a <__addsf3x+0x4e>
    1458:	7e f4       	brtc	.+30     	; 0x1478 <__addsf3x+0x7c>
    145a:	1f 16       	cp	r1, r31
    145c:	ba 0b       	sbc	r27, r26
    145e:	62 0b       	sbc	r22, r18
    1460:	73 0b       	sbc	r23, r19
    1462:	84 0b       	sbc	r24, r20
    1464:	ba f0       	brmi	.+46     	; 0x1494 <__addsf3x+0x98>
    1466:	91 50       	subi	r25, 0x01	; 1
    1468:	a1 f0       	breq	.+40     	; 0x1492 <__addsf3x+0x96>
    146a:	ff 0f       	add	r31, r31
    146c:	bb 1f       	adc	r27, r27
    146e:	66 1f       	adc	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	88 1f       	adc	r24, r24
    1474:	c2 f7       	brpl	.-16     	; 0x1466 <__addsf3x+0x6a>
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <__addsf3x+0x98>
    1478:	ba 0f       	add	r27, r26
    147a:	62 1f       	adc	r22, r18
    147c:	73 1f       	adc	r23, r19
    147e:	84 1f       	adc	r24, r20
    1480:	48 f4       	brcc	.+18     	; 0x1494 <__addsf3x+0x98>
    1482:	87 95       	ror	r24
    1484:	77 95       	ror	r23
    1486:	67 95       	ror	r22
    1488:	b7 95       	ror	r27
    148a:	f7 95       	ror	r31
    148c:	9e 3f       	cpi	r25, 0xFE	; 254
    148e:	08 f0       	brcs	.+2      	; 0x1492 <__addsf3x+0x96>
    1490:	b3 cf       	rjmp	.-154    	; 0x13f8 <__addsf3+0x1e>
    1492:	93 95       	inc	r25
    1494:	88 0f       	add	r24, r24
    1496:	08 f0       	brcs	.+2      	; 0x149a <__addsf3x+0x9e>
    1498:	99 27       	eor	r25, r25
    149a:	ee 0f       	add	r30, r30
    149c:	97 95       	ror	r25
    149e:	87 95       	ror	r24
    14a0:	08 95       	ret

000014a2 <__divsf3>:
    14a2:	0c d0       	rcall	.+24     	; 0x14bc <__divsf3x>
    14a4:	eb c0       	rjmp	.+470    	; 0x167c <__fp_round>
    14a6:	e3 d0       	rcall	.+454    	; 0x166e <__fp_pscB>
    14a8:	40 f0       	brcs	.+16     	; 0x14ba <__divsf3+0x18>
    14aa:	da d0       	rcall	.+436    	; 0x1660 <__fp_pscA>
    14ac:	30 f0       	brcs	.+12     	; 0x14ba <__divsf3+0x18>
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <__divsf3+0x16>
    14b0:	5f 3f       	cpi	r21, 0xFF	; 255
    14b2:	19 f0       	breq	.+6      	; 0x14ba <__divsf3+0x18>
    14b4:	cc c0       	rjmp	.+408    	; 0x164e <__fp_inf>
    14b6:	51 11       	cpse	r21, r1
    14b8:	15 c1       	rjmp	.+554    	; 0x16e4 <__fp_szero>
    14ba:	cf c0       	rjmp	.+414    	; 0x165a <__fp_nan>

000014bc <__divsf3x>:
    14bc:	f0 d0       	rcall	.+480    	; 0x169e <__fp_split3>
    14be:	98 f3       	brcs	.-26     	; 0x14a6 <__divsf3+0x4>

000014c0 <__divsf3_pse>:
    14c0:	99 23       	and	r25, r25
    14c2:	c9 f3       	breq	.-14     	; 0x14b6 <__divsf3+0x14>
    14c4:	55 23       	and	r21, r21
    14c6:	b1 f3       	breq	.-20     	; 0x14b4 <__divsf3+0x12>
    14c8:	95 1b       	sub	r25, r21
    14ca:	55 0b       	sbc	r21, r21
    14cc:	bb 27       	eor	r27, r27
    14ce:	aa 27       	eor	r26, r26
    14d0:	62 17       	cp	r22, r18
    14d2:	73 07       	cpc	r23, r19
    14d4:	84 07       	cpc	r24, r20
    14d6:	38 f0       	brcs	.+14     	; 0x14e6 <__divsf3_pse+0x26>
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	44 1f       	adc	r20, r20
    14e2:	aa 1f       	adc	r26, r26
    14e4:	a9 f3       	breq	.-22     	; 0x14d0 <__divsf3_pse+0x10>
    14e6:	33 d0       	rcall	.+102    	; 0x154e <__divsf3_pse+0x8e>
    14e8:	0e 2e       	mov	r0, r30
    14ea:	3a f0       	brmi	.+14     	; 0x14fa <__divsf3_pse+0x3a>
    14ec:	e0 e8       	ldi	r30, 0x80	; 128
    14ee:	30 d0       	rcall	.+96     	; 0x1550 <__divsf3_pse+0x90>
    14f0:	91 50       	subi	r25, 0x01	; 1
    14f2:	50 40       	sbci	r21, 0x00	; 0
    14f4:	e6 95       	lsr	r30
    14f6:	00 1c       	adc	r0, r0
    14f8:	ca f7       	brpl	.-14     	; 0x14ec <__divsf3_pse+0x2c>
    14fa:	29 d0       	rcall	.+82     	; 0x154e <__divsf3_pse+0x8e>
    14fc:	fe 2f       	mov	r31, r30
    14fe:	27 d0       	rcall	.+78     	; 0x154e <__divsf3_pse+0x8e>
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	88 1f       	adc	r24, r24
    1506:	bb 1f       	adc	r27, r27
    1508:	26 17       	cp	r18, r22
    150a:	37 07       	cpc	r19, r23
    150c:	48 07       	cpc	r20, r24
    150e:	ab 07       	cpc	r26, r27
    1510:	b0 e8       	ldi	r27, 0x80	; 128
    1512:	09 f0       	breq	.+2      	; 0x1516 <__divsf3_pse+0x56>
    1514:	bb 0b       	sbc	r27, r27
    1516:	80 2d       	mov	r24, r0
    1518:	bf 01       	movw	r22, r30
    151a:	ff 27       	eor	r31, r31
    151c:	93 58       	subi	r25, 0x83	; 131
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	2a f0       	brmi	.+10     	; 0x152c <__divsf3_pse+0x6c>
    1522:	9e 3f       	cpi	r25, 0xFE	; 254
    1524:	51 05       	cpc	r21, r1
    1526:	68 f0       	brcs	.+26     	; 0x1542 <__divsf3_pse+0x82>
    1528:	92 c0       	rjmp	.+292    	; 0x164e <__fp_inf>
    152a:	dc c0       	rjmp	.+440    	; 0x16e4 <__fp_szero>
    152c:	5f 3f       	cpi	r21, 0xFF	; 255
    152e:	ec f3       	brlt	.-6      	; 0x152a <__divsf3_pse+0x6a>
    1530:	98 3e       	cpi	r25, 0xE8	; 232
    1532:	dc f3       	brlt	.-10     	; 0x152a <__divsf3_pse+0x6a>
    1534:	86 95       	lsr	r24
    1536:	77 95       	ror	r23
    1538:	67 95       	ror	r22
    153a:	b7 95       	ror	r27
    153c:	f7 95       	ror	r31
    153e:	9f 5f       	subi	r25, 0xFF	; 255
    1540:	c9 f7       	brne	.-14     	; 0x1534 <__divsf3_pse+0x74>
    1542:	88 0f       	add	r24, r24
    1544:	91 1d       	adc	r25, r1
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	97 f9       	bld	r25, 7
    154c:	08 95       	ret
    154e:	e1 e0       	ldi	r30, 0x01	; 1
    1550:	66 0f       	add	r22, r22
    1552:	77 1f       	adc	r23, r23
    1554:	88 1f       	adc	r24, r24
    1556:	bb 1f       	adc	r27, r27
    1558:	62 17       	cp	r22, r18
    155a:	73 07       	cpc	r23, r19
    155c:	84 07       	cpc	r24, r20
    155e:	ba 07       	cpc	r27, r26
    1560:	20 f0       	brcs	.+8      	; 0x156a <__divsf3_pse+0xaa>
    1562:	62 1b       	sub	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	ba 0b       	sbc	r27, r26
    156a:	ee 1f       	adc	r30, r30
    156c:	88 f7       	brcc	.-30     	; 0x1550 <__divsf3_pse+0x90>
    156e:	e0 95       	com	r30
    1570:	08 95       	ret

00001572 <__fixsfsi>:
    1572:	04 d0       	rcall	.+8      	; 0x157c <__fixunssfsi>
    1574:	68 94       	set
    1576:	b1 11       	cpse	r27, r1
    1578:	b5 c0       	rjmp	.+362    	; 0x16e4 <__fp_szero>
    157a:	08 95       	ret

0000157c <__fixunssfsi>:
    157c:	98 d0       	rcall	.+304    	; 0x16ae <__fp_splitA>
    157e:	88 f0       	brcs	.+34     	; 0x15a2 <__fixunssfsi+0x26>
    1580:	9f 57       	subi	r25, 0x7F	; 127
    1582:	90 f0       	brcs	.+36     	; 0x15a8 <__fixunssfsi+0x2c>
    1584:	b9 2f       	mov	r27, r25
    1586:	99 27       	eor	r25, r25
    1588:	b7 51       	subi	r27, 0x17	; 23
    158a:	a0 f0       	brcs	.+40     	; 0x15b4 <__fixunssfsi+0x38>
    158c:	d1 f0       	breq	.+52     	; 0x15c2 <__fixunssfsi+0x46>
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	88 1f       	adc	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	1a f0       	brmi	.+6      	; 0x159e <__fixunssfsi+0x22>
    1598:	ba 95       	dec	r27
    159a:	c9 f7       	brne	.-14     	; 0x158e <__fixunssfsi+0x12>
    159c:	12 c0       	rjmp	.+36     	; 0x15c2 <__fixunssfsi+0x46>
    159e:	b1 30       	cpi	r27, 0x01	; 1
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <__fixunssfsi+0x46>
    15a2:	9f d0       	rcall	.+318    	; 0x16e2 <__fp_zero>
    15a4:	b1 e0       	ldi	r27, 0x01	; 1
    15a6:	08 95       	ret
    15a8:	9c c0       	rjmp	.+312    	; 0x16e2 <__fp_zero>
    15aa:	67 2f       	mov	r22, r23
    15ac:	78 2f       	mov	r23, r24
    15ae:	88 27       	eor	r24, r24
    15b0:	b8 5f       	subi	r27, 0xF8	; 248
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__fixunssfsi+0x46>
    15b4:	b9 3f       	cpi	r27, 0xF9	; 249
    15b6:	cc f3       	brlt	.-14     	; 0x15aa <__fixunssfsi+0x2e>
    15b8:	86 95       	lsr	r24
    15ba:	77 95       	ror	r23
    15bc:	67 95       	ror	r22
    15be:	b3 95       	inc	r27
    15c0:	d9 f7       	brne	.-10     	; 0x15b8 <__fixunssfsi+0x3c>
    15c2:	3e f4       	brtc	.+14     	; 0x15d2 <__fixunssfsi+0x56>
    15c4:	90 95       	com	r25
    15c6:	80 95       	com	r24
    15c8:	70 95       	com	r23
    15ca:	61 95       	neg	r22
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 4f       	sbci	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	08 95       	ret

000015d4 <__floatunsisf>:
    15d4:	e8 94       	clt
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <__floatsisf+0x12>

000015d8 <__floatsisf>:
    15d8:	97 fb       	bst	r25, 7
    15da:	3e f4       	brtc	.+14     	; 0x15ea <__floatsisf+0x12>
    15dc:	90 95       	com	r25
    15de:	80 95       	com	r24
    15e0:	70 95       	com	r23
    15e2:	61 95       	neg	r22
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	99 23       	and	r25, r25
    15ec:	a9 f0       	breq	.+42     	; 0x1618 <__floatsisf+0x40>
    15ee:	f9 2f       	mov	r31, r25
    15f0:	96 e9       	ldi	r25, 0x96	; 150
    15f2:	bb 27       	eor	r27, r27
    15f4:	93 95       	inc	r25
    15f6:	f6 95       	lsr	r31
    15f8:	87 95       	ror	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	b7 95       	ror	r27
    1600:	f1 11       	cpse	r31, r1
    1602:	f8 cf       	rjmp	.-16     	; 0x15f4 <__floatsisf+0x1c>
    1604:	fa f4       	brpl	.+62     	; 0x1644 <__floatsisf+0x6c>
    1606:	bb 0f       	add	r27, r27
    1608:	11 f4       	brne	.+4      	; 0x160e <__floatsisf+0x36>
    160a:	60 ff       	sbrs	r22, 0
    160c:	1b c0       	rjmp	.+54     	; 0x1644 <__floatsisf+0x6c>
    160e:	6f 5f       	subi	r22, 0xFF	; 255
    1610:	7f 4f       	sbci	r23, 0xFF	; 255
    1612:	8f 4f       	sbci	r24, 0xFF	; 255
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	16 c0       	rjmp	.+44     	; 0x1644 <__floatsisf+0x6c>
    1618:	88 23       	and	r24, r24
    161a:	11 f0       	breq	.+4      	; 0x1620 <__floatsisf+0x48>
    161c:	96 e9       	ldi	r25, 0x96	; 150
    161e:	11 c0       	rjmp	.+34     	; 0x1642 <__floatsisf+0x6a>
    1620:	77 23       	and	r23, r23
    1622:	21 f0       	breq	.+8      	; 0x162c <__floatsisf+0x54>
    1624:	9e e8       	ldi	r25, 0x8E	; 142
    1626:	87 2f       	mov	r24, r23
    1628:	76 2f       	mov	r23, r22
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <__floatsisf+0x5e>
    162c:	66 23       	and	r22, r22
    162e:	71 f0       	breq	.+28     	; 0x164c <__floatsisf+0x74>
    1630:	96 e8       	ldi	r25, 0x86	; 134
    1632:	86 2f       	mov	r24, r22
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	2a f0       	brmi	.+10     	; 0x1644 <__floatsisf+0x6c>
    163a:	9a 95       	dec	r25
    163c:	66 0f       	add	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	da f7       	brpl	.-10     	; 0x163a <__floatsisf+0x62>
    1644:	88 0f       	add	r24, r24
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	97 f9       	bld	r25, 7
    164c:	08 95       	ret

0000164e <__fp_inf>:
    164e:	97 f9       	bld	r25, 7
    1650:	9f 67       	ori	r25, 0x7F	; 127
    1652:	80 e8       	ldi	r24, 0x80	; 128
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	08 95       	ret

0000165a <__fp_nan>:
    165a:	9f ef       	ldi	r25, 0xFF	; 255
    165c:	80 ec       	ldi	r24, 0xC0	; 192
    165e:	08 95       	ret

00001660 <__fp_pscA>:
    1660:	00 24       	eor	r0, r0
    1662:	0a 94       	dec	r0
    1664:	16 16       	cp	r1, r22
    1666:	17 06       	cpc	r1, r23
    1668:	18 06       	cpc	r1, r24
    166a:	09 06       	cpc	r0, r25
    166c:	08 95       	ret

0000166e <__fp_pscB>:
    166e:	00 24       	eor	r0, r0
    1670:	0a 94       	dec	r0
    1672:	12 16       	cp	r1, r18
    1674:	13 06       	cpc	r1, r19
    1676:	14 06       	cpc	r1, r20
    1678:	05 06       	cpc	r0, r21
    167a:	08 95       	ret

0000167c <__fp_round>:
    167c:	09 2e       	mov	r0, r25
    167e:	03 94       	inc	r0
    1680:	00 0c       	add	r0, r0
    1682:	11 f4       	brne	.+4      	; 0x1688 <__fp_round+0xc>
    1684:	88 23       	and	r24, r24
    1686:	52 f0       	brmi	.+20     	; 0x169c <__fp_round+0x20>
    1688:	bb 0f       	add	r27, r27
    168a:	40 f4       	brcc	.+16     	; 0x169c <__fp_round+0x20>
    168c:	bf 2b       	or	r27, r31
    168e:	11 f4       	brne	.+4      	; 0x1694 <__fp_round+0x18>
    1690:	60 ff       	sbrs	r22, 0
    1692:	04 c0       	rjmp	.+8      	; 0x169c <__fp_round+0x20>
    1694:	6f 5f       	subi	r22, 0xFF	; 255
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	8f 4f       	sbci	r24, 0xFF	; 255
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	08 95       	ret

0000169e <__fp_split3>:
    169e:	57 fd       	sbrc	r21, 7
    16a0:	90 58       	subi	r25, 0x80	; 128
    16a2:	44 0f       	add	r20, r20
    16a4:	55 1f       	adc	r21, r21
    16a6:	59 f0       	breq	.+22     	; 0x16be <__fp_splitA+0x10>
    16a8:	5f 3f       	cpi	r21, 0xFF	; 255
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <__fp_splitA+0x1a>
    16ac:	47 95       	ror	r20

000016ae <__fp_splitA>:
    16ae:	88 0f       	add	r24, r24
    16b0:	97 fb       	bst	r25, 7
    16b2:	99 1f       	adc	r25, r25
    16b4:	61 f0       	breq	.+24     	; 0x16ce <__fp_splitA+0x20>
    16b6:	9f 3f       	cpi	r25, 0xFF	; 255
    16b8:	79 f0       	breq	.+30     	; 0x16d8 <__fp_splitA+0x2a>
    16ba:	87 95       	ror	r24
    16bc:	08 95       	ret
    16be:	12 16       	cp	r1, r18
    16c0:	13 06       	cpc	r1, r19
    16c2:	14 06       	cpc	r1, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	f2 cf       	rjmp	.-28     	; 0x16ac <__fp_split3+0xe>
    16c8:	46 95       	lsr	r20
    16ca:	f1 df       	rcall	.-30     	; 0x16ae <__fp_splitA>
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <__fp_splitA+0x30>
    16ce:	16 16       	cp	r1, r22
    16d0:	17 06       	cpc	r1, r23
    16d2:	18 06       	cpc	r1, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	f1 cf       	rjmp	.-30     	; 0x16ba <__fp_splitA+0xc>
    16d8:	86 95       	lsr	r24
    16da:	71 05       	cpc	r23, r1
    16dc:	61 05       	cpc	r22, r1
    16de:	08 94       	sec
    16e0:	08 95       	ret

000016e2 <__fp_zero>:
    16e2:	e8 94       	clt

000016e4 <__fp_szero>:
    16e4:	bb 27       	eor	r27, r27
    16e6:	66 27       	eor	r22, r22
    16e8:	77 27       	eor	r23, r23
    16ea:	cb 01       	movw	r24, r22
    16ec:	97 f9       	bld	r25, 7
    16ee:	08 95       	ret

000016f0 <__mulsf3>:
    16f0:	0b d0       	rcall	.+22     	; 0x1708 <__mulsf3x>
    16f2:	c4 cf       	rjmp	.-120    	; 0x167c <__fp_round>
    16f4:	b5 df       	rcall	.-150    	; 0x1660 <__fp_pscA>
    16f6:	28 f0       	brcs	.+10     	; 0x1702 <__mulsf3+0x12>
    16f8:	ba df       	rcall	.-140    	; 0x166e <__fp_pscB>
    16fa:	18 f0       	brcs	.+6      	; 0x1702 <__mulsf3+0x12>
    16fc:	95 23       	and	r25, r21
    16fe:	09 f0       	breq	.+2      	; 0x1702 <__mulsf3+0x12>
    1700:	a6 cf       	rjmp	.-180    	; 0x164e <__fp_inf>
    1702:	ab cf       	rjmp	.-170    	; 0x165a <__fp_nan>
    1704:	11 24       	eor	r1, r1
    1706:	ee cf       	rjmp	.-36     	; 0x16e4 <__fp_szero>

00001708 <__mulsf3x>:
    1708:	ca df       	rcall	.-108    	; 0x169e <__fp_split3>
    170a:	a0 f3       	brcs	.-24     	; 0x16f4 <__mulsf3+0x4>

0000170c <__mulsf3_pse>:
    170c:	95 9f       	mul	r25, r21
    170e:	d1 f3       	breq	.-12     	; 0x1704 <__mulsf3+0x14>
    1710:	95 0f       	add	r25, r21
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	55 1f       	adc	r21, r21
    1716:	62 9f       	mul	r22, r18
    1718:	f0 01       	movw	r30, r0
    171a:	72 9f       	mul	r23, r18
    171c:	bb 27       	eor	r27, r27
    171e:	f0 0d       	add	r31, r0
    1720:	b1 1d       	adc	r27, r1
    1722:	63 9f       	mul	r22, r19
    1724:	aa 27       	eor	r26, r26
    1726:	f0 0d       	add	r31, r0
    1728:	b1 1d       	adc	r27, r1
    172a:	aa 1f       	adc	r26, r26
    172c:	64 9f       	mul	r22, r20
    172e:	66 27       	eor	r22, r22
    1730:	b0 0d       	add	r27, r0
    1732:	a1 1d       	adc	r26, r1
    1734:	66 1f       	adc	r22, r22
    1736:	82 9f       	mul	r24, r18
    1738:	22 27       	eor	r18, r18
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	62 1f       	adc	r22, r18
    1740:	73 9f       	mul	r23, r19
    1742:	b0 0d       	add	r27, r0
    1744:	a1 1d       	adc	r26, r1
    1746:	62 1f       	adc	r22, r18
    1748:	83 9f       	mul	r24, r19
    174a:	a0 0d       	add	r26, r0
    174c:	61 1d       	adc	r22, r1
    174e:	22 1f       	adc	r18, r18
    1750:	74 9f       	mul	r23, r20
    1752:	33 27       	eor	r19, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	23 1f       	adc	r18, r19
    175a:	84 9f       	mul	r24, r20
    175c:	60 0d       	add	r22, r0
    175e:	21 1d       	adc	r18, r1
    1760:	82 2f       	mov	r24, r18
    1762:	76 2f       	mov	r23, r22
    1764:	6a 2f       	mov	r22, r26
    1766:	11 24       	eor	r1, r1
    1768:	9f 57       	subi	r25, 0x7F	; 127
    176a:	50 40       	sbci	r21, 0x00	; 0
    176c:	8a f0       	brmi	.+34     	; 0x1790 <__mulsf3_pse+0x84>
    176e:	e1 f0       	breq	.+56     	; 0x17a8 <__mulsf3_pse+0x9c>
    1770:	88 23       	and	r24, r24
    1772:	4a f0       	brmi	.+18     	; 0x1786 <__mulsf3_pse+0x7a>
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	bb 1f       	adc	r27, r27
    177a:	66 1f       	adc	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	91 50       	subi	r25, 0x01	; 1
    1782:	50 40       	sbci	r21, 0x00	; 0
    1784:	a9 f7       	brne	.-22     	; 0x1770 <__mulsf3_pse+0x64>
    1786:	9e 3f       	cpi	r25, 0xFE	; 254
    1788:	51 05       	cpc	r21, r1
    178a:	70 f0       	brcs	.+28     	; 0x17a8 <__mulsf3_pse+0x9c>
    178c:	60 cf       	rjmp	.-320    	; 0x164e <__fp_inf>
    178e:	aa cf       	rjmp	.-172    	; 0x16e4 <__fp_szero>
    1790:	5f 3f       	cpi	r21, 0xFF	; 255
    1792:	ec f3       	brlt	.-6      	; 0x178e <__mulsf3_pse+0x82>
    1794:	98 3e       	cpi	r25, 0xE8	; 232
    1796:	dc f3       	brlt	.-10     	; 0x178e <__mulsf3_pse+0x82>
    1798:	86 95       	lsr	r24
    179a:	77 95       	ror	r23
    179c:	67 95       	ror	r22
    179e:	b7 95       	ror	r27
    17a0:	f7 95       	ror	r31
    17a2:	e7 95       	ror	r30
    17a4:	9f 5f       	subi	r25, 0xFF	; 255
    17a6:	c1 f7       	brne	.-16     	; 0x1798 <__mulsf3_pse+0x8c>
    17a8:	fe 2b       	or	r31, r30
    17aa:	88 0f       	add	r24, r24
    17ac:	91 1d       	adc	r25, r1
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	97 f9       	bld	r25, 7
    17b4:	08 95       	ret

000017b6 <__tablejump2__>:
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	88 1f       	adc	r24, r24
    17bc:	8b bf       	out	0x3b, r24	; 59
    17be:	07 90       	elpm	r0, Z+
    17c0:	f6 91       	elpm	r31, Z
    17c2:	e0 2d       	mov	r30, r0
    17c4:	19 94       	eijmp

000017c6 <_exit>:
    17c6:	f8 94       	cli

000017c8 <__stop_program>:
    17c8:	ff cf       	rjmp	.-2      	; 0x17c8 <__stop_program>

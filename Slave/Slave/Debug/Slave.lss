
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00001ecc  00001f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ecc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  0080020c  0080020c  00001f6c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003640  00000000  00000000  0000228c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001788  00000000  00000000  000058cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000198e  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000868  00000000  00000000  000089e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001454  00000000  00000000  0000924c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015ba  00000000  00000000  0000a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000bc5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	08 c2       	rjmp	.+1040   	; 0x416 <__vector_1>
       6:	00 00       	nop
       8:	4a c2       	rjmp	.+1172   	; 0x49e <__vector_2>
       a:	00 00       	nop
       c:	7f c2       	rjmp	.+1278   	; 0x50c <__vector_3>
       e:	00 00       	nop
      10:	b4 c2       	rjmp	.+1384   	; 0x57a <__vector_4>
      12:	00 00       	nop
      14:	20 c3       	rjmp	.+1600   	; 0x656 <__vector_5>
      16:	00 00       	nop
      18:	e7 c2       	rjmp	.+1486   	; 0x5e8 <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__vector_9>
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	8c c6       	rjmp	.+3352   	; 0xd7e <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	86 c6       	rjmp	.+3340   	; 0xd9e <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0d c3       	rjmp	.+1562   	; 0x6c4 <__vector_42>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	78 c6       	rjmp	.+3312   	; 0xdbe <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	82 c6       	rjmp	.+3332   	; 0xdde <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	b1 03       	fmuls	r19, r17

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	ec ec       	ldi	r30, 0xCC	; 204
      fe:	fe e1       	ldi	r31, 0x1E	; 30
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ac 30       	cpi	r26, 0x0C	; 12
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	ac e0       	ldi	r26, 0x0C	; 12
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a3 3f       	cpi	r26, 0xF3	; 243
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	e8 d3       	rcall	.+2000   	; 0x912 <main>
     142:	0c 94 64 0f 	jmp	0x1ec8	; 0x1ec8 <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z10drive_initv>:
 
 
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
	 pidflag = false; 
     154:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <pidflag>
	 for(id=0;id<4;id++)
     158:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <id+0x1>
     15c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <id>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 velocity_motor[id] = 0;
     164:	9c 01       	movw	r18, r24
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	f9 01       	movw	r30, r18
     16c:	e2 55       	subi	r30, 0x52	; 82
     16e:	fd 4f       	sbci	r31, 0xFD	; 253
     170:	11 82       	std	Z+1, r1	; 0x01
     172:	10 82       	st	Z, r1
		 velocity_robot[id] = 0;
     174:	f9 01       	movw	r30, r18
     176:	ea 55       	subi	r30, 0x5A	; 90
     178:	fd 4f       	sbci	r31, 0xFD	; 253
     17a:	11 82       	std	Z+1, r1	; 0x01
     17c:	10 82       	st	Z, r1
		 m[id].Initialise(id+1);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	68 0f       	add	r22, r24
     182:	86 56       	subi	r24, 0x66	; 102
     184:	9d 4f       	sbci	r25, 0xFD	; 253
     186:	31 d5       	rcall	.+2658   	; 0xbea <_ZN5Motor10InitialiseEh>
		 e[id].Initialise(id+1);
     188:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     18c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	68 0f       	add	r22, r24
     194:	9c 01       	movw	r18, r24
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	8a 58       	subi	r24, 0x8A	; 138
     1a8:	9d 4f       	sbci	r25, 0xFD	; 253
     1aa:	63 d3       	rcall	.+1734   	; 0x872 <_ZN7Encoder10InitialiseEh>
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
     1ac:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     1b0:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     1b4:	9c 01       	movw	r18, r24
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f5 e8       	ldi	r31, 0x85	; 133
     1ce:	cf 2e       	mov	r12, r31
     1d0:	fb ee       	ldi	r31, 0xEB	; 235
     1d2:	df 2e       	mov	r13, r31
     1d4:	f1 e5       	ldi	r31, 0x51	; 81
     1d6:	ef 2e       	mov	r14, r31
     1d8:	ff e3       	ldi	r31, 0x3F	; 63
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	98 01       	movw	r18, r16
     1e4:	4c e5       	ldi	r20, 0x5C	; 92
     1e6:	5f e8       	ldi	r21, 0x8F	; 143
     1e8:	6a e1       	ldi	r22, 0x1A	; 26
     1ea:	70 e4       	ldi	r23, 0x40	; 64
     1ec:	84 5f       	subi	r24, 0xF4	; 244
     1ee:	9d 4f       	sbci	r25, 0xFD	; 253
     1f0:	0a d5       	rcall	.+2580   	; 0xc06 <_ZN3PID7Set_PidEfff>
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
	 pidflag = false; 
	 for(id=0;id<4;id++)
     1f2:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     1f6:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     200:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     204:	84 30       	cpi	r24, 0x04	; 4
     206:	91 05       	cpc	r25, r1
     208:	0c f4       	brge	.+2      	; 0x20c <_Z10drive_initv+0xc4>
     20a:	ac cf       	rjmp	.-168    	; 0x164 <_Z10drive_initv+0x1c>
		 velocity_robot[id] = 0;
		 m[id].Initialise(id+1);
		 e[id].Initialise(id+1);
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
	 }
	 ex.Initialise(1);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	81 e7       	ldi	r24, 0x71	; 113
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	6e d3       	rcall	.+1756   	; 0x8f0 <_ZN12FreeWheelEnc10InitialiseEh>
	 ey.Initialise(2);
     214:	62 e0       	ldi	r22, 0x02	; 2
     216:	8c e6       	ldi	r24, 0x6C	; 108
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	6a d3       	rcall	.+1748   	; 0x8f0 <_ZN12FreeWheelEnc10InitialiseEh>
     21c:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter_motor+0x1>
	 counter_motor = 0;
     220:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <counter_motor>
     224:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <count_the_motor>
	 count_the_motor = false;
     228:	1f 91       	pop	r17
 }
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	08 95       	ret

00000236 <_Z24calculate_wheel_velocityv>:
     236:	8f 92       	push	r8
 
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	1f 93       	push	r17
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	ce ea       	ldi	r28, 0xAE	; 174
     24e:	d2 e0       	ldi	r29, 0x02	; 2
     250:	0f 2e       	mov	r0, r31
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	cf 2e       	mov	r12, r31
     256:	f2 e0       	ldi	r31, 0x02	; 2
     258:	df 2e       	mov	r13, r31
     25a:	f0 2d       	mov	r31, r0
     25c:	0f 2e       	mov	r0, r31
     25e:	f6 eb       	ldi	r31, 0xB6	; 182
     260:	8f 2e       	mov	r8, r31
     262:	f2 e0       	ldi	r31, 0x02	; 2
     264:	9f 2e       	mov	r9, r31
     266:	f0 2d       	mov	r31, r0
	  for(id=0;id<4;id++)
     268:	7e 01       	movw	r14, r28
     26a:	6c ea       	ldi	r22, 0xAC	; 172
     26c:	72 e0       	ldi	r23, 0x02	; 2
     26e:	57 01       	movw	r10, r14
     270:	e6 ea       	ldi	r30, 0xA6	; 166
     272:	f2 e0       	ldi	r31, 0x02	; 2
     274:	d6 01       	movw	r26, r12
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e0       	ldi	r25, 0x00	; 0
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
		  {
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
     27a:	41 91       	ld	r20, Z+
     27c:	51 91       	ld	r21, Z+
     27e:	1d 91       	ld	r17, X+
     280:	14 03       	mulsu	r17, r20
     282:	90 01       	movw	r18, r0
     284:	15 9f       	mul	r17, r21
     286:	30 0d       	add	r19, r0
     288:	11 24       	eor	r1, r1
     28a:	82 0f       	add	r24, r18
     28c:	93 1f       	adc	r25, r19
  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
     28e:	e6 17       	cp	r30, r22
     290:	f7 07       	cpc	r31, r23
     292:	99 f7       	brne	.-26     	; 0x27a <_Z24calculate_wheel_velocityv+0x44>
     294:	f5 01       	movw	r30, r10
     296:	91 83       	std	Z+1, r25	; 0x01
     298:	80 83       	st	Z, r24
     29a:	f2 e0       	ldi	r31, 0x02	; 2
     29c:	ef 0e       	add	r14, r31
     29e:	f1 1c       	adc	r15, r1
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	c8 0e       	add	r12, r24
     2a4:	d1 1c       	adc	r13, r1
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
     2a6:	e8 14       	cp	r14, r8
     2a8:	f9 04       	cpc	r15, r9
     2aa:	09 f7       	brne	.-62     	; 0x26e <_Z24calculate_wheel_velocityv+0x38>
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <jd+0x1>
     2b4:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <jd>
     2b8:	0f 2e       	mov	r0, r31
     2ba:	fe e9       	ldi	r31, 0x9E	; 158
     2bc:	cf 2e       	mov	r12, r31
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	df 2e       	mov	r13, r31
     2c2:	f0 2d       	mov	r31, r0
     2c4:	0f 2e       	mov	r0, r31
     2c6:	fc e0       	ldi	r31, 0x0C	; 12
     2c8:	ef 2e       	mov	r14, r31
     2ca:	f2 e0       	ldi	r31, 0x02	; 2
     2cc:	ff 2e       	mov	r15, r31
     2ce:	f0 2d       	mov	r31, r0
		  
	  }
	  
	  for(id=0;id<4;id++)
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
     2d0:	69 91       	ld	r22, Y+
     2d2:	79 91       	ld	r23, Y+
     2d4:	07 2e       	mov	r0, r23
     2d6:	00 0c       	add	r0, r0
     2d8:	88 0b       	sbc	r24, r24
     2da:	99 0b       	sbc	r25, r25
     2dc:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__floatsisf>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	4b ee       	ldi	r20, 0xEB	; 235
     2e6:	53 e4       	ldi	r21, 0x43	; 67
     2e8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__divsf3>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	4a ea       	ldi	r20, 0xAA	; 170
     2f2:	52 e4       	ldi	r21, 0x42	; 66
     2f4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__mulsf3>
     2f8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__fixsfsi>
     2fc:	f6 01       	movw	r30, r12
     2fe:	61 93       	st	Z+, r22
     300:	71 93       	st	Z+, r23
     302:	6f 01       	movw	r12, r30
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     304:	f7 01       	movw	r30, r14
     306:	75 87       	std	Z+13, r23	; 0x0d
     308:	64 87       	std	Z+12, r22	; 0x0c
     30a:	f8 e1       	ldi	r31, 0x18	; 24
     30c:	ef 0e       	add	r14, r31
     30e:	f1 1c       	adc	r15, r1
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
		  }
		  
	  }
	  
	  for(id=0;id<4;id++)
     310:	c8 15       	cp	r28, r8
     312:	d9 05       	cpc	r29, r9
     314:	e9 f6       	brne	.-70     	; 0x2d0 <_Z24calculate_wheel_velocityv+0x9a>
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     31e:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
		  p[id].Set_SP(ocr_motor[id]);
	  }
	  
  }
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	9f 90       	pop	r9
     336:	8f 90       	pop	r8
     338:	08 95       	ret

0000033a <_Z21update_wheel_velocityv>:
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
     33a:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <pidflag>
     33e:	88 23       	and	r24, r24
     340:	c9 f1       	breq	.+114    	; 0x3b4 <_Z21update_wheel_velocityv+0x7a>
		{
			for(id = 0; id<4 ; id++)
     342:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <id+0x1>
     346:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <id>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
	public:
	Encoder():speed(0),pprcount(0){};
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
     34e:	fc 01       	movw	r30, r24
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	ee 0f       	add	r30, r30
     35a:	ff 1f       	adc	r31, r31
     35c:	e8 0f       	add	r30, r24
     35e:	f9 1f       	adc	r31, r25
     360:	ea 58       	subi	r30, 0x8A	; 138
     362:	fd 4f       	sbci	r31, 0xFD	; 253
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
     364:	61 81       	ldd	r22, Z+1	; 0x01
     366:	72 81       	ldd	r23, Z+2	; 0x02
     368:	9c 01       	movw	r18, r24
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	82 0f       	add	r24, r18
     370:	93 1f       	adc	r25, r19
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	84 5f       	subi	r24, 0xF4	; 244
     380:	9d 4f       	sbci	r25, 0xFD	; 253
     382:	5b d4       	rcall	.+2230   	; 0xc3a <_ZN3PID7ComputeEi>
     384:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__fixsfsi>
     388:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <id>
     38c:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <id+0x1>
     390:	c9 01       	movw	r24, r18
     392:	86 56       	subi	r24, 0x66	; 102
     394:	9d 4f       	sbci	r25, 0xFD	; 253
     396:	ee d3       	rcall	.+2012   	; 0xb74 <_ZN5Motor11SetOcrValueEi>
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
		{
			for(id = 0; id<4 ; id++)
     398:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <id>
     39c:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <id+0x1>
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     3a6:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	91 05       	cpc	r25, r1
     3ae:	7c f2       	brlt	.-98     	; 0x34e <_Z21update_wheel_velocityv+0x14>
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
			}
			pidflag = false;
     3b0:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <pidflag>
     3b4:	08 95       	ret

000003b6 <_Z20reset_robot_velocityv>:

void reset_robot_velocity()
{
	for(id = 0; id<4 ; id++)
	{
		 velocity_robot[id] = 0;	//reset the robot velocities
     3b6:	e6 ea       	ldi	r30, 0xA6	; 166
     3b8:	f2 e0       	ldi	r31, 0x02	; 2
     3ba:	11 82       	std	Z+1, r1	; 0x01
     3bc:	10 82       	st	Z, r1
     3be:	13 82       	std	Z+3, r1	; 0x03
     3c0:	12 82       	std	Z+2, r1	; 0x02
     3c2:	15 82       	std	Z+5, r1	; 0x05
     3c4:	14 82       	std	Z+4, r1	; 0x04
     3c6:	17 82       	std	Z+7, r1	; 0x07
     3c8:	16 82       	std	Z+6, r1	; 0x06
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     3d2:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
     3d6:	08 95       	ret

000003d8 <_Z12reset_motorsv>:
	}
}

void reset_motors()
{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	ae ea       	ldi	r26, 0xAE	; 174
     3de:	b2 e0       	ldi	r27, 0x02	; 2
     3e0:	c6 ea       	ldi	r28, 0xA6	; 166
     3e2:	d2 e0       	ldi	r29, 0x02	; 2
     3e4:	ec e0       	ldi	r30, 0x0C	; 12
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	86 eb       	ldi	r24, 0xB6	; 182
     3ea:	92 e0       	ldi	r25, 0x02	; 2
	for(id = 0; id<4 ; id++)
	{
		velocity_motor[id] = 0;
     3ec:	1d 92       	st	X+, r1
     3ee:	1d 92       	st	X+, r1
		velocity_robot[id] = 0;
     3f0:	19 92       	st	Y+, r1
     3f2:	19 92       	st	Y+, r1
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
		inline void  reset_output(){cv = 0;};
     3f4:	14 8a       	std	Z+20, r1	; 0x14
     3f6:	15 8a       	std	Z+21, r1	; 0x15
     3f8:	16 8a       	std	Z+22, r1	; 0x16
     3fa:	17 8a       	std	Z+23, r1	; 0x17
     3fc:	78 96       	adiw	r30, 0x18	; 24
	}
}

void reset_motors()
{
	for(id = 0; id<4 ; id++)
     3fe:	a8 17       	cp	r26, r24
     400:	b9 07       	cpc	r27, r25
     402:	a1 f7       	brne	.-24     	; 0x3ec <_Z12reset_motorsv+0x14>
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <id+0x1>
     40c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <id>
	{
		velocity_motor[id] = 0;
		velocity_robot[id] = 0;
		p[id].reset_output();
	}
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <__vector_1>:
/*********************************************************************Motors encoders interrupts*****************************************************************/

// motor orientation is alternate so channel a and channel b in two sides are different.

ISR(INT_VECT1)
{
     416:	1f 92       	push	r1
     418:	0f 92       	push	r0
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	0f 92       	push	r0
     41e:	11 24       	eor	r1, r1
     420:	0b b6       	in	r0, 0x3b	; 59
     422:	0f 92       	push	r0
     424:	8f 93       	push	r24
     426:	9f 93       	push	r25
     428:	af 93       	push	r26
     42a:	bf 93       	push	r27
     42c:	ef 93       	push	r30
     42e:	ff 93       	push	r31
	if(bit_is_clear(ENCODER1_CHAPORTPIN,ENCODER1_CHBPIN))		
     430:	00 99       	sbic	0x00, 0	; 0
     432:	0e c0       	rjmp	.+28     	; 0x450 <__vector_1+0x3a>
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     434:	e6 e7       	ldi	r30, 0x76	; 118
     436:	f2 e0       	ldi	r31, 0x02	; 2
     438:	85 81       	ldd	r24, Z+5	; 0x05
     43a:	96 81       	ldd	r25, Z+6	; 0x06
     43c:	a7 81       	ldd	r26, Z+7	; 0x07
     43e:	b0 85       	ldd	r27, Z+8	; 0x08
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	a1 1d       	adc	r26, r1
     444:	b1 1d       	adc	r27, r1
     446:	85 83       	std	Z+5, r24	; 0x05
     448:	96 83       	std	Z+6, r25	; 0x06
     44a:	a7 83       	std	Z+7, r26	; 0x07
     44c:	b0 87       	std	Z+8, r27	; 0x08
     44e:	0d c0       	rjmp	.+26     	; 0x46a <__vector_1+0x54>
	inline void dcrCount(){pprcount--;};
     450:	e6 e7       	ldi	r30, 0x76	; 118
     452:	f2 e0       	ldi	r31, 0x02	; 2
     454:	85 81       	ldd	r24, Z+5	; 0x05
     456:	96 81       	ldd	r25, Z+6	; 0x06
     458:	a7 81       	ldd	r26, Z+7	; 0x07
     45a:	b0 85       	ldd	r27, Z+8	; 0x08
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	a1 09       	sbc	r26, r1
     460:	b1 09       	sbc	r27, r1
     462:	85 83       	std	Z+5, r24	; 0x05
     464:	96 83       	std	Z+6, r25	; 0x06
     466:	a7 83       	std	Z+7, r26	; 0x07
     468:	b0 87       	std	Z+8, r27	; 0x08
	{
		e[0].incCount();
	}
	else
		e[0].dcrCount();
	if(count_the_motor)
     46a:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <count_the_motor>
     46e:	88 23       	and	r24, r24
     470:	49 f0       	breq	.+18     	; 0x484 <__vector_1+0x6e>
		counter_motor++;
     472:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <counter_motor>
     476:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <counter_motor+0x1>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <counter_motor+0x1>
     480:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <counter_motor>
}
     484:	ff 91       	pop	r31
     486:	ef 91       	pop	r30
     488:	bf 91       	pop	r27
     48a:	af 91       	pop	r26
     48c:	9f 91       	pop	r25
     48e:	8f 91       	pop	r24
     490:	0f 90       	pop	r0
     492:	0b be       	out	0x3b, r0	; 59
     494:	0f 90       	pop	r0
     496:	0f be       	out	0x3f, r0	; 63
     498:	0f 90       	pop	r0
     49a:	1f 90       	pop	r1
     49c:	18 95       	reti

0000049e <__vector_2>:



ISR(INT_VECT2)
{
     49e:	1f 92       	push	r1
     4a0:	0f 92       	push	r0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	0f 92       	push	r0
     4a6:	11 24       	eor	r1, r1
     4a8:	0b b6       	in	r0, 0x3b	; 59
     4aa:	0f 92       	push	r0
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
	if(bit_is_clear(ENCODER2_CHAPORTPIN,ENCODER2_CHBPIN))		
     4b8:	02 99       	sbic	0x00, 2	; 0
     4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__vector_2+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     4bc:	e6 e7       	ldi	r30, 0x76	; 118
     4be:	f2 e0       	ldi	r31, 0x02	; 2
     4c0:	86 85       	ldd	r24, Z+14	; 0x0e
     4c2:	97 85       	ldd	r25, Z+15	; 0x0f
     4c4:	a0 89       	ldd	r26, Z+16	; 0x10
     4c6:	b1 89       	ldd	r27, Z+17	; 0x11
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	a1 1d       	adc	r26, r1
     4cc:	b1 1d       	adc	r27, r1
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	97 87       	std	Z+15, r25	; 0x0f
     4d2:	a0 8b       	std	Z+16, r26	; 0x10
     4d4:	b1 8b       	std	Z+17, r27	; 0x11
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__vector_2+0x54>
	inline void dcrCount(){pprcount--;};
     4d8:	e6 e7       	ldi	r30, 0x76	; 118
     4da:	f2 e0       	ldi	r31, 0x02	; 2
     4dc:	86 85       	ldd	r24, Z+14	; 0x0e
     4de:	97 85       	ldd	r25, Z+15	; 0x0f
     4e0:	a0 89       	ldd	r26, Z+16	; 0x10
     4e2:	b1 89       	ldd	r27, Z+17	; 0x11
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	a1 09       	sbc	r26, r1
     4e8:	b1 09       	sbc	r27, r1
     4ea:	86 87       	std	Z+14, r24	; 0x0e
     4ec:	97 87       	std	Z+15, r25	; 0x0f
     4ee:	a0 8b       	std	Z+16, r26	; 0x10
     4f0:	b1 8b       	std	Z+17, r27	; 0x11
		e[1].incCount();
	}
	else
		e[1].dcrCount();
	
}
     4f2:	ff 91       	pop	r31
     4f4:	ef 91       	pop	r30
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_3>:
ISR(INT_VECT3)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	0b b6       	in	r0, 0x3b	; 59
     518:	0f 92       	push	r0
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	af 93       	push	r26
     520:	bf 93       	push	r27
     522:	ef 93       	push	r30
     524:	ff 93       	push	r31
	if(bit_is_set(ENCODER3_CHAPORTPIN,ENCODER3_CHBPIN))		
     526:	04 9b       	sbis	0x00, 4	; 0
     528:	0e c0       	rjmp	.+28     	; 0x546 <__vector_3+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     52a:	e6 e7       	ldi	r30, 0x76	; 118
     52c:	f2 e0       	ldi	r31, 0x02	; 2
     52e:	87 89       	ldd	r24, Z+23	; 0x17
     530:	90 8d       	ldd	r25, Z+24	; 0x18
     532:	a1 8d       	ldd	r26, Z+25	; 0x19
     534:	b2 8d       	ldd	r27, Z+26	; 0x1a
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	a1 1d       	adc	r26, r1
     53a:	b1 1d       	adc	r27, r1
     53c:	87 8b       	std	Z+23, r24	; 0x17
     53e:	90 8f       	std	Z+24, r25	; 0x18
     540:	a1 8f       	std	Z+25, r26	; 0x19
     542:	b2 8f       	std	Z+26, r27	; 0x1a
     544:	0d c0       	rjmp	.+26     	; 0x560 <__vector_3+0x54>
	inline void dcrCount(){pprcount--;};
     546:	e6 e7       	ldi	r30, 0x76	; 118
     548:	f2 e0       	ldi	r31, 0x02	; 2
     54a:	87 89       	ldd	r24, Z+23	; 0x17
     54c:	90 8d       	ldd	r25, Z+24	; 0x18
     54e:	a1 8d       	ldd	r26, Z+25	; 0x19
     550:	b2 8d       	ldd	r27, Z+26	; 0x1a
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	a1 09       	sbc	r26, r1
     556:	b1 09       	sbc	r27, r1
     558:	87 8b       	std	Z+23, r24	; 0x17
     55a:	90 8f       	std	Z+24, r25	; 0x18
     55c:	a1 8f       	std	Z+25, r26	; 0x19
     55e:	b2 8f       	std	Z+26, r27	; 0x1a
	{
		e[2].incCount();
	}
	else
		e[2].dcrCount();
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	0f 90       	pop	r0
     56e:	0b be       	out	0x3b, r0	; 59
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <__vector_4>:

ISR(INT_VECT4)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	0b b6       	in	r0, 0x3b	; 59
     586:	0f 92       	push	r0
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
	if(bit_is_set(ENCODER4_CHAPORTPIN,ENCODER4_CHBPIN))		
     594:	06 9b       	sbis	0x00, 6	; 0
     596:	0e c0       	rjmp	.+28     	; 0x5b4 <__vector_4+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     598:	e6 e7       	ldi	r30, 0x76	; 118
     59a:	f2 e0       	ldi	r31, 0x02	; 2
     59c:	80 a1       	ldd	r24, Z+32	; 0x20
     59e:	91 a1       	ldd	r25, Z+33	; 0x21
     5a0:	a2 a1       	ldd	r26, Z+34	; 0x22
     5a2:	b3 a1       	ldd	r27, Z+35	; 0x23
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	a1 1d       	adc	r26, r1
     5a8:	b1 1d       	adc	r27, r1
     5aa:	80 a3       	std	Z+32, r24	; 0x20
     5ac:	91 a3       	std	Z+33, r25	; 0x21
     5ae:	a2 a3       	std	Z+34, r26	; 0x22
     5b0:	b3 a3       	std	Z+35, r27	; 0x23
     5b2:	0d c0       	rjmp	.+26     	; 0x5ce <__vector_4+0x54>
	inline void dcrCount(){pprcount--;};
     5b4:	e6 e7       	ldi	r30, 0x76	; 118
     5b6:	f2 e0       	ldi	r31, 0x02	; 2
     5b8:	80 a1       	ldd	r24, Z+32	; 0x20
     5ba:	91 a1       	ldd	r25, Z+33	; 0x21
     5bc:	a2 a1       	ldd	r26, Z+34	; 0x22
     5be:	b3 a1       	ldd	r27, Z+35	; 0x23
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	a1 09       	sbc	r26, r1
     5c4:	b1 09       	sbc	r27, r1
     5c6:	80 a3       	std	Z+32, r24	; 0x20
     5c8:	91 a3       	std	Z+33, r25	; 0x21
     5ca:	a2 a3       	std	Z+34, r26	; 0x22
     5cc:	b3 a3       	std	Z+35, r27	; 0x23
	{
		e[3].incCount();
	}
	else
		e[3].dcrCount();
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	0f 90       	pop	r0
     5dc:	0b be       	out	0x3b, r0	; 59
     5de:	0f 90       	pop	r0
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	0f 90       	pop	r0
     5e4:	1f 90       	pop	r1
     5e6:	18 95       	reti

000005e8 <__vector_6>:

/*******************************************************************************Free Wheel Encoders Interrupts****************************************************/

ISR(INT_VECTX)
{
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     5f2:	0b b6       	in	r0, 0x3b	; 59
     5f4:	0f 92       	push	r0
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	if(bit_is_clear(ENCODERX_CHAPORTPIN,ENCODERX_CHBPIN))
     602:	37 99       	sbic	0x06, 7	; 6
     604:	0e c0       	rjmp	.+28     	; 0x622 <__vector_6+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     606:	e1 e7       	ldi	r30, 0x71	; 113
     608:	f2 e0       	ldi	r31, 0x02	; 2
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	92 81       	ldd	r25, Z+2	; 0x02
     60e:	a3 81       	ldd	r26, Z+3	; 0x03
     610:	b4 81       	ldd	r27, Z+4	; 0x04
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	a1 1d       	adc	r26, r1
     616:	b1 1d       	adc	r27, r1
     618:	81 83       	std	Z+1, r24	; 0x01
     61a:	92 83       	std	Z+2, r25	; 0x02
     61c:	a3 83       	std	Z+3, r26	; 0x03
     61e:	b4 83       	std	Z+4, r27	; 0x04
     620:	0d c0       	rjmp	.+26     	; 0x63c <__vector_6+0x54>
		inline void dcrCount(){encdistance--;};
     622:	e1 e7       	ldi	r30, 0x71	; 113
     624:	f2 e0       	ldi	r31, 0x02	; 2
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	92 81       	ldd	r25, Z+2	; 0x02
     62a:	a3 81       	ldd	r26, Z+3	; 0x03
     62c:	b4 81       	ldd	r27, Z+4	; 0x04
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	a1 09       	sbc	r26, r1
     632:	b1 09       	sbc	r27, r1
     634:	81 83       	std	Z+1, r24	; 0x01
     636:	92 83       	std	Z+2, r25	; 0x02
     638:	a3 83       	std	Z+3, r26	; 0x03
     63a:	b4 83       	std	Z+4, r27	; 0x04
	{
		ex.incCount();
	}
	else
		ex.dcrCount();
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	0f 90       	pop	r0
     64a:	0b be       	out	0x3b, r0	; 59
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <__vector_5>:


ISR(INT_VECTY)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	0f 92       	push	r0
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	af 93       	push	r26
     66a:	bf 93       	push	r27
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
	if(bit_is_clear(ENCODERY_CHAPORTPIN,ENCODERY_CHBPIN))
     670:	35 99       	sbic	0x06, 5	; 6
     672:	0e c0       	rjmp	.+28     	; 0x690 <__vector_5+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     674:	ec e6       	ldi	r30, 0x6C	; 108
     676:	f2 e0       	ldi	r31, 0x02	; 2
     678:	81 81       	ldd	r24, Z+1	; 0x01
     67a:	92 81       	ldd	r25, Z+2	; 0x02
     67c:	a3 81       	ldd	r26, Z+3	; 0x03
     67e:	b4 81       	ldd	r27, Z+4	; 0x04
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	a1 1d       	adc	r26, r1
     684:	b1 1d       	adc	r27, r1
     686:	81 83       	std	Z+1, r24	; 0x01
     688:	92 83       	std	Z+2, r25	; 0x02
     68a:	a3 83       	std	Z+3, r26	; 0x03
     68c:	b4 83       	std	Z+4, r27	; 0x04
     68e:	0d c0       	rjmp	.+26     	; 0x6aa <__vector_5+0x54>
		inline void dcrCount(){encdistance--;};
     690:	ec e6       	ldi	r30, 0x6C	; 108
     692:	f2 e0       	ldi	r31, 0x02	; 2
     694:	81 81       	ldd	r24, Z+1	; 0x01
     696:	92 81       	ldd	r25, Z+2	; 0x02
     698:	a3 81       	ldd	r26, Z+3	; 0x03
     69a:	b4 81       	ldd	r27, Z+4	; 0x04
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	a1 09       	sbc	r26, r1
     6a0:	b1 09       	sbc	r27, r1
     6a2:	81 83       	std	Z+1, r24	; 0x01
     6a4:	92 83       	std	Z+2, r25	; 0x02
     6a6:	a3 83       	std	Z+3, r26	; 0x03
     6a8:	b4 83       	std	Z+4, r27	; 0x04
	{
		ey.incCount();
	}
	else
		ey.dcrCount();
}
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	bf 91       	pop	r27
     6b0:	af 91       	pop	r26
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	0f 90       	pop	r0
     6b8:	0b be       	out	0x3b, r0	; 59
     6ba:	0f 90       	pop	r0
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	0f 90       	pop	r0
     6c0:	1f 90       	pop	r1
     6c2:	18 95       	reti

000006c4 <__vector_42>:

 /*********************************************************PID computation timer*****************************************************/

 ISR(TIMER4_COMPA_vect)
 {
     6c4:	1f 92       	push	r1
     6c6:	0f 92       	push	r0
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	0f 92       	push	r0
     6cc:	11 24       	eor	r1, r1
     6ce:	0b b6       	in	r0, 0x3b	; 59
     6d0:	0f 92       	push	r0
     6d2:	8f 93       	push	r24
     6d4:	9f 93       	push	r25
     6d6:	af 93       	push	r26
     6d8:	bf 93       	push	r27
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;};	//keep in timer compare match
     6de:	e6 e7       	ldi	r30, 0x76	; 118
     6e0:	f2 e0       	ldi	r31, 0x02	; 2
     6e2:	85 81       	ldd	r24, Z+5	; 0x05
     6e4:	96 81       	ldd	r25, Z+6	; 0x06
     6e6:	a7 81       	ldd	r26, Z+7	; 0x07
     6e8:	b0 85       	ldd	r27, Z+8	; 0x08
     6ea:	81 83       	std	Z+1, r24	; 0x01
     6ec:	92 83       	std	Z+2, r25	; 0x02
     6ee:	a3 83       	std	Z+3, r26	; 0x03
     6f0:	b4 83       	std	Z+4, r27	; 0x04
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	16 82       	std	Z+6, r1	; 0x06
     6f6:	17 82       	std	Z+7, r1	; 0x07
     6f8:	10 86       	std	Z+8, r1	; 0x08
     6fa:	86 85       	ldd	r24, Z+14	; 0x0e
     6fc:	97 85       	ldd	r25, Z+15	; 0x0f
     6fe:	a0 89       	ldd	r26, Z+16	; 0x10
     700:	b1 89       	ldd	r27, Z+17	; 0x11
     702:	82 87       	std	Z+10, r24	; 0x0a
     704:	93 87       	std	Z+11, r25	; 0x0b
     706:	a4 87       	std	Z+12, r26	; 0x0c
     708:	b5 87       	std	Z+13, r27	; 0x0d
     70a:	16 86       	std	Z+14, r1	; 0x0e
     70c:	17 86       	std	Z+15, r1	; 0x0f
     70e:	10 8a       	std	Z+16, r1	; 0x10
     710:	11 8a       	std	Z+17, r1	; 0x11
     712:	87 89       	ldd	r24, Z+23	; 0x17
     714:	90 8d       	ldd	r25, Z+24	; 0x18
     716:	a1 8d       	ldd	r26, Z+25	; 0x19
     718:	b2 8d       	ldd	r27, Z+26	; 0x1a
     71a:	83 8b       	std	Z+19, r24	; 0x13
     71c:	94 8b       	std	Z+20, r25	; 0x14
     71e:	a5 8b       	std	Z+21, r26	; 0x15
     720:	b6 8b       	std	Z+22, r27	; 0x16
     722:	17 8a       	std	Z+23, r1	; 0x17
     724:	10 8e       	std	Z+24, r1	; 0x18
     726:	11 8e       	std	Z+25, r1	; 0x19
     728:	12 8e       	std	Z+26, r1	; 0x1a
     72a:	80 a1       	ldd	r24, Z+32	; 0x20
     72c:	91 a1       	ldd	r25, Z+33	; 0x21
     72e:	a2 a1       	ldd	r26, Z+34	; 0x22
     730:	b3 a1       	ldd	r27, Z+35	; 0x23
     732:	84 8f       	std	Z+28, r24	; 0x1c
     734:	95 8f       	std	Z+29, r25	; 0x1d
     736:	a6 8f       	std	Z+30, r26	; 0x1e
     738:	b7 8f       	std	Z+31, r27	; 0x1f
     73a:	10 a2       	std	Z+32, r1	; 0x20
     73c:	11 a2       	std	Z+33, r1	; 0x21
     73e:	12 a2       	std	Z+34, r1	; 0x22
     740:	13 a2       	std	Z+35, r1	; 0x23
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <pidflag>
 }
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	bf 91       	pop	r27
     74e:	af 91       	pop	r26
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	0f 90       	pop	r0
     756:	0b be       	out	0x3b, r0	; 59
     758:	0f 90       	pop	r0
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	0f 90       	pop	r0
     75e:	1f 90       	pop	r1
     760:	18 95       	reti

00000762 <_GLOBAL__sub_I_coupling_matrix>:
     762:	e6 e7       	ldi	r30, 0x76	; 118
     764:	f2 e0       	ldi	r31, 0x02	; 2
     766:	8a e9       	ldi	r24, 0x9A	; 154
     768:	92 e0       	ldi	r25, 0x02	; 2
	private:
		uint8_t no;
		long int speed;
		long int pprcount;
	public:
	Encoder():speed(0),pprcount(0){};
     76a:	11 82       	std	Z+1, r1	; 0x01
     76c:	12 82       	std	Z+2, r1	; 0x02
     76e:	13 82       	std	Z+3, r1	; 0x03
     770:	14 82       	std	Z+4, r1	; 0x04
     772:	15 82       	std	Z+5, r1	; 0x05
     774:	16 82       	std	Z+6, r1	; 0x06
     776:	17 82       	std	Z+7, r1	; 0x07
     778:	10 86       	std	Z+8, r1	; 0x08
     77a:	39 96       	adiw	r30, 0x09	; 9
 int id,jd;					//global loop counter 
 int velocity_motor[4];		//individual motor velocity
 int velocity_robot[4];		//robot velocity
 int ocr_motor[4];			//motor ocr 
 Motor m[4];				//base motors
 Encoder e[4];				// base motors encoders
     77c:	e8 17       	cp	r30, r24
     77e:	f9 07       	cpc	r31, r25
     780:	a1 f7       	brne	.-24     	; 0x76a <_GLOBAL__sub_I_coupling_matrix+0x8>
	
		private:
		uint8_t no;
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
     782:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     786:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     78a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     78e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
     792:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
     796:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
     79a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
     79e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
     7a2:	ec e0       	ldi	r30, 0x0C	; 12
     7a4:	f2 e0       	ldi	r31, 0x02	; 2
     7a6:	8c e6       	ldi	r24, 0x6C	; 108
     7a8:	92 e0       	ldi	r25, 0x02	; 2
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     7aa:	10 82       	st	Z, r1
     7ac:	11 82       	std	Z+1, r1	; 0x01
     7ae:	12 82       	std	Z+2, r1	; 0x02
     7b0:	13 82       	std	Z+3, r1	; 0x03
     7b2:	14 82       	std	Z+4, r1	; 0x04
     7b4:	15 82       	std	Z+5, r1	; 0x05
     7b6:	16 82       	std	Z+6, r1	; 0x06
     7b8:	17 82       	std	Z+7, r1	; 0x07
     7ba:	10 86       	std	Z+8, r1	; 0x08
     7bc:	11 86       	std	Z+9, r1	; 0x09
     7be:	12 86       	std	Z+10, r1	; 0x0a
     7c0:	13 86       	std	Z+11, r1	; 0x0b
     7c2:	15 86       	std	Z+13, r1	; 0x0d
     7c4:	14 86       	std	Z+12, r1	; 0x0c
     7c6:	17 86       	std	Z+15, r1	; 0x0f
     7c8:	16 86       	std	Z+14, r1	; 0x0e
     7ca:	11 8a       	std	Z+17, r1	; 0x11
     7cc:	10 8a       	std	Z+16, r1	; 0x10
     7ce:	13 8a       	std	Z+19, r1	; 0x13
     7d0:	12 8a       	std	Z+18, r1	; 0x12
     7d2:	78 96       	adiw	r30, 0x18	; 24
 FreeWheelEnc ex,ey;		//Free wheel encoders
 PID p[4];					//pid for the base motors
     7d4:	e8 17       	cp	r30, r24
     7d6:	f9 07       	cpc	r31, r25
     7d8:	41 f7       	brne	.-48     	; 0x7aa <_GLOBAL__sub_I_coupling_matrix+0x48>
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
 }
     7da:	08 95       	ret

000007dc <_ZN7Encoder15Init_InterruptsEv>:
	Init_Timers();
}

void Encoder::Init_Interrupts()
{
	sei();
     7dc:	78 94       	sei
	if(no==1)
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	81 30       	cpi	r24, 0x01	; 1
     7e4:	49 f4       	brne	.+18     	; 0x7f8 <_ZN7Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODER1_INT);
     7e6:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INT1_ISC1);	//falling edge
     7e8:	e9 e6       	ldi	r30, 0x69	; 105
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	82 60       	ori	r24, 0x02	; 2
     7f0:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER1_INT);		//setting INT pin
     7f2:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INT1_INTF);	    //clear int flag
     7f4:	e0 9a       	sbi	0x1c, 0	; 28
     7f6:	08 95       	ret
	}
	else if (no==2)
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	49 f4       	brne	.+18     	; 0x80e <_ZN7Encoder15Init_InterruptsEv+0x32>
	{
		EIMSK &= ~(1<<ENCODER2_INT);
     7fc:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INT2_ISC1);	//falling edge
     7fe:	e9 e6       	ldi	r30, 0x69	; 105
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	88 60       	ori	r24, 0x08	; 8
     806:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER2_INT);		//setting INT pin
     808:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INT2_INTF);	    //clear int flag
     80a:	e1 9a       	sbi	0x1c, 1	; 28
     80c:	08 95       	ret
	}
	else if (no==3)
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	49 f4       	brne	.+18     	; 0x824 <_ZN7Encoder15Init_InterruptsEv+0x48>
	{
		EIMSK &= ~(1<<ENCODER3_INT);
     812:	ea 98       	cbi	0x1d, 2	; 29
		EICRA |= (1<<INT3_ISC1);	//falling edge
     814:	e9 e6       	ldi	r30, 0x69	; 105
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER3_INT);		//setting INT pin
     81e:	ea 9a       	sbi	0x1d, 2	; 29
		EIFR |= (1<<INT3_INTF);	    //clear int flag
     820:	e2 9a       	sbi	0x1c, 2	; 28
     822:	08 95       	ret
	}
	else if (no==4)
     824:	84 30       	cpi	r24, 0x04	; 4
     826:	41 f4       	brne	.+16     	; 0x838 <_ZN7Encoder15Init_InterruptsEv+0x5c>
	{
		EIMSK &= ~(1<<ENCODER4_INT);
     828:	eb 98       	cbi	0x1d, 3	; 29
		EICRA |= (1<<INT4_ISC1);	//falling edge
     82a:	e9 e6       	ldi	r30, 0x69	; 105
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	80 81       	ld	r24, Z
     830:	80 68       	ori	r24, 0x80	; 128
     832:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER4_INT);		//setting INT pin
     834:	eb 9a       	sbi	0x1d, 3	; 29
		EIFR |= (1<<INT4_INTF);	    //clear int flag
     836:	e3 9a       	sbi	0x1c, 3	; 28
     838:	08 95       	ret

0000083a <_ZN7Encoder11Init_TimersEv>:
}

void Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     83a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     83e:	81 11       	cpse	r24, r1
     840:	17 c0       	rjmp	.+46     	; 0x870 <_ZN7Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     842:	e1 ea       	ldi	r30, 0xA1	; 161
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	8b 60       	ori	r24, 0x0B	; 11
     84a:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     84c:	e2 e7       	ldi	r30, 0x72	; 114
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     856:	8c e4       	ldi	r24, 0x4C	; 76
     858:	9d e1       	ldi	r25, 0x1D	; 29
     85a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     85e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     862:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     866:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <_ZZN7Encoder11Init_TimersEvE15was_initialized>
     870:	08 95       	ret

00000872 <_ZN7Encoder10InitialiseEh>:


#include "Encoder.h"

void Encoder::Initialise(uint8_t x)
{	
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
	no = x;
     878:	68 83       	st	Y, r22
	if(no==1)
     87a:	61 30       	cpi	r22, 0x01	; 1
     87c:	29 f4       	brne	.+10     	; 0x888 <_ZN7Encoder10InitialiseEh+0x16>
	{
		INPUT(ENCODER1_CHANNELA);
     87e:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODER1_CHANNELB);
     880:	08 98       	cbi	0x01, 0	; 1
		SET(ENCODER1_CHANNELA);
     882:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODER1_CHANNELB);
     884:	10 9a       	sbi	0x02, 0	; 2
     886:	14 c0       	rjmp	.+40     	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==2)
     888:	62 30       	cpi	r22, 0x02	; 2
     88a:	29 f4       	brne	.+10     	; 0x896 <_ZN7Encoder10InitialiseEh+0x24>
	{
		INPUT(ENCODER2_CHANNELA);
     88c:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODER2_CHANNELB);
     88e:	0a 98       	cbi	0x01, 2	; 1
		SET(ENCODER2_CHANNELA);
     890:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODER2_CHANNELB);
     892:	12 9a       	sbi	0x02, 2	; 2
     894:	0d c0       	rjmp	.+26     	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if (no==3)
     896:	63 30       	cpi	r22, 0x03	; 3
     898:	29 f4       	brne	.+10     	; 0x8a4 <_ZN7Encoder10InitialiseEh+0x32>
	{
		INPUT(ENCODER3_CHANNELA);
     89a:	52 98       	cbi	0x0a, 2	; 10
		INPUT(ENCODER3_CHANNELB);
     89c:	0c 98       	cbi	0x01, 4	; 1
		SET(ENCODER3_CHANNELA);
     89e:	5a 9a       	sbi	0x0b, 2	; 11
		SET(ENCODER3_CHANNELB);
     8a0:	14 9a       	sbi	0x02, 4	; 2
     8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==4)
     8a4:	64 30       	cpi	r22, 0x04	; 4
     8a6:	21 f4       	brne	.+8      	; 0x8b0 <_ZN7Encoder10InitialiseEh+0x3e>
	{
		INPUT(ENCODER4_CHANNELA);
     8a8:	53 98       	cbi	0x0a, 3	; 10
		INPUT(ENCODER4_CHANNELB);
     8aa:	0e 98       	cbi	0x01, 6	; 1
		SET(ENCODER4_CHANNELA);
     8ac:	5b 9a       	sbi	0x0b, 3	; 11
		SET(ENCODER4_CHANNELB);
     8ae:	16 9a       	sbi	0x02, 6	; 2
	}
	Init_Interrupts();
     8b0:	ce 01       	movw	r24, r28
     8b2:	94 df       	rcall	.-216    	; 0x7dc <_ZN7Encoder15Init_InterruptsEv>
	Init_Timers();
     8b4:	ce 01       	movw	r24, r28
     8b6:	c1 df       	rcall	.-126    	; 0x83a <_ZN7Encoder11Init_TimersEv>
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <_ZN12FreeWheelEnc15Init_InterruptsEv>:
	Init_Interrupts();
}

void FreeWheelEnc::Init_Interrupts()
{
	if(no==1)
     8be:	fc 01       	movw	r30, r24
     8c0:	80 81       	ld	r24, Z
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	49 f4       	brne	.+18     	; 0x8d8 <_ZN12FreeWheelEnc15Init_InterruptsEv+0x1a>
	{
		EIMSK &= ~(1<<ENCODERX_INT);
     8c6:	ed 98       	cbi	0x1d, 5	; 29
		EICRB |= (1<<INTX_ISC1);	//falling edge
     8c8:	ea e6       	ldi	r30, 0x6A	; 106
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	88 60       	ori	r24, 0x08	; 8
     8d0:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERX_INT);		//setting INT pin
     8d2:	ed 9a       	sbi	0x1d, 5	; 29
		EIFR  |= (1<<INTX_INTF);	    //clear int flag
     8d4:	e5 9a       	sbi	0x1c, 5	; 28
     8d6:	0a c0       	rjmp	.+20     	; 0x8ec <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	}
	
	else if (no==2)
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	41 f4       	brne	.+16     	; 0x8ec <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	{
		EIMSK &= ~(1<<ENCODERY_INT);
     8dc:	ec 98       	cbi	0x1d, 4	; 29
		EICRB |= (1<<INTY_ISC1);	//falling edge
     8de:	ea e6       	ldi	r30, 0x6A	; 106
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	82 60       	ori	r24, 0x02	; 2
     8e6:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERY_INT);		//setting INT pin
     8e8:	ec 9a       	sbi	0x1d, 4	; 29
		EIFR |= (1<<INTY_INTF);	    //clear int flag
     8ea:	e4 9a       	sbi	0x1c, 4	; 28
	}
	sei();
     8ec:	78 94       	sei
     8ee:	08 95       	ret

000008f0 <_ZN12FreeWheelEnc10InitialiseEh>:

#include "FreeWheelEnc.h"

void FreeWheelEnc::Initialise(uint8_t x)
{
	no = x;
     8f0:	fc 01       	movw	r30, r24
     8f2:	60 83       	st	Z, r22
	if(no==1)
     8f4:	61 30       	cpi	r22, 0x01	; 1
     8f6:	29 f4       	brne	.+10     	; 0x902 <_ZN12FreeWheelEnc10InitialiseEh+0x12>
	{
		INPUT(ENCODERX_CHANNELA);
     8f8:	6d 98       	cbi	0x0d, 5	; 13
		INPUT(ENCODERX_CHANNELB);
     8fa:	3f 98       	cbi	0x07, 7	; 7
		SET(ENCODERX_CHANNELA);
     8fc:	75 9a       	sbi	0x0e, 5	; 14
		SET(ENCODERX_CHANNELB);
     8fe:	47 9a       	sbi	0x08, 7	; 8
     900:	06 c0       	rjmp	.+12     	; 0x90e <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	}
	else if(no==2)
     902:	62 30       	cpi	r22, 0x02	; 2
     904:	21 f4       	brne	.+8      	; 0x90e <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	{
		INPUT(ENCODERY_CHANNELA);
     906:	6c 98       	cbi	0x0d, 4	; 13
		INPUT(ENCODERY_CHANNELB);
     908:	3d 98       	cbi	0x07, 5	; 7
		SET(ENCODERY_CHANNELA);
     90a:	74 9a       	sbi	0x0e, 4	; 14
		SET(ENCODERY_CHANNELB);
     90c:	45 9a       	sbi	0x08, 5	; 8
	}
	Init_Interrupts();
     90e:	d7 cf       	rjmp	.-82     	; 0x8be <_ZN12FreeWheelEnc15Init_InterruptsEv>
     910:	08 95       	ret

00000912 <main>:
#include "ZoneNavigate.h"


int main(void)
{
	initUART0();
     912:	09 d2       	rcall	.+1042   	; 0xd26 <_Z9initUART0v>
	initUART2();
     914:	14 d2       	rcall	.+1064   	; 0xd3e <_Z9initUART2v>
	initUART3();
     916:	1f d2       	rcall	.+1086   	; 0xd56 <_Z9initUART3v>
	drive_init();
     918:	17 dc       	rcall	.-2002   	; 0x148 <_Z10drive_initv>
     91a:	36 d4       	rcall	.+2156   	; 0x1188 <_Z10init_slavev>
	init_slave();
     91c:	78 94       	sei
     91e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <auto_mode>
	sei();
    while (1) 
    {	
		if(auto_mode)
     922:	88 23       	and	r24, r24
			operate_slave_auto();
     924:	11 f0       	breq	.+4      	; 0x92a <main+0x18>
     926:	93 d4       	rcall	.+2342   	; 0x124e <_Z18operate_slave_autov>
     928:	01 c0       	rjmp	.+2      	; 0x92c <main+0x1a>
		else
			operate_slave_manual();
     92a:	0c d3       	rcall	.+1560   	; 0xf44 <_Z20operate_slave_manualv>
     92c:	84 dc       	rcall	.-1784   	; 0x236 <_Z24calculate_wheel_velocityv>
			
		calculate_wheel_velocity();
     92e:	05 dd       	rcall	.-1526   	; 0x33a <_Z21update_wheel_velocityv>
     930:	f6 cf       	rjmp	.-20     	; 0x91e <main+0xc>

00000932 <_ZN5Motor7InitPWMEv>:
		update_wheel_velocity();
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
	initUART2();
	initUART3();
	drive_init();
	init_slave();
	sei();
    while (1) 
     936:	81 30       	cpi	r24, 0x01	; 1

}

void Motor::InitPWM()
{
	if (num==1)
     938:	f1 f4       	brne	.+60     	; 0x976 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     93a:	e7 e0       	ldi	r30, 0x07	; 7
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	80 81       	ld	r24, Z
     940:	82 60       	ori	r24, 0x02	; 2
     942:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     944:	80 81       	ld	r24, Z
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     94a:	ea e0       	ldi	r30, 0x0A	; 10
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	80 81       	ld	r24, Z
     950:	88 60       	ori	r24, 0x08	; 8
     952:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     954:	e0 e2       	ldi	r30, 0x20	; 32
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	80 81       	ld	r24, Z
     95a:	82 68       	ori	r24, 0x82	; 130
     95c:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     95e:	e1 e2       	ldi	r30, 0x21	; 33
     960:	f1 e0       	ldi	r31, 0x01	; 1
     962:	80 81       	ld	r24, Z
     964:	8a 61       	ori	r24, 0x1A	; 26
     966:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     968:	89 ef       	ldi	r24, 0xF9	; 249
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     970:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     974:	08 95       	ret
	}
	else if(num==2)
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	f1 f4       	brne	.+60     	; 0x9b6 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     97a:	e7 e0       	ldi	r30, 0x07	; 7
     97c:	f1 e0       	ldi	r31, 0x01	; 1
     97e:	80 81       	ld	r24, Z
     980:	88 60       	ori	r24, 0x08	; 8
     982:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     984:	80 81       	ld	r24, Z
     986:	84 60       	ori	r24, 0x04	; 4
     988:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     98a:	ea e0       	ldi	r30, 0x0A	; 10
     98c:	f1 e0       	ldi	r31, 0x01	; 1
     98e:	80 81       	ld	r24, Z
     990:	80 61       	ori	r24, 0x10	; 16
     992:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     994:	e0 e2       	ldi	r30, 0x20	; 32
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 81       	ld	r24, Z
     99a:	82 62       	ori	r24, 0x22	; 34
     99c:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     99e:	e1 e2       	ldi	r30, 0x21	; 33
     9a0:	f1 e0       	ldi	r31, 0x01	; 1
     9a2:	80 81       	ld	r24, Z
     9a4:	8a 61       	ori	r24, 0x1A	; 26
     9a6:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     9a8:	89 ef       	ldi	r24, 0xF9	; 249
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     9b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     9b4:	08 95       	ret
	}
	else if(num==3)
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	f1 f4       	brne	.+60     	; 0x9f6 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     9ba:	e7 e0       	ldi	r30, 0x07	; 7
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	80 81       	ld	r24, Z
     9c0:	80 61       	ori	r24, 0x10	; 16
     9c2:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     9c4:	80 81       	ld	r24, Z
     9c6:	80 62       	ori	r24, 0x20	; 32
     9c8:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     9ca:	ea e0       	ldi	r30, 0x0A	; 10
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	80 81       	ld	r24, Z
     9d0:	80 62       	ori	r24, 0x20	; 32
     9d2:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     9d4:	e0 e2       	ldi	r30, 0x20	; 32
     9d6:	f1 e0       	ldi	r31, 0x01	; 1
     9d8:	80 81       	ld	r24, Z
     9da:	8a 60       	ori	r24, 0x0A	; 10
     9dc:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     9de:	e1 e2       	ldi	r30, 0x21	; 33
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
     9e2:	80 81       	ld	r24, Z
     9e4:	8a 61       	ori	r24, 0x1A	; 26
     9e6:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     9f0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     9f4:	08 95       	ret
	} 
	else if(num==4)
     9f6:	84 30       	cpi	r24, 0x04	; 4
     9f8:	c9 f4       	brne	.+50     	; 0xa2c <_ZN5Motor7InitPWMEv+0xfa>
	{
		OUTPUT(DD_F4);
     9fa:	e7 e0       	ldi	r30, 0x07	; 7
     9fc:	f1 e0       	ldi	r31, 0x01	; 1
     9fe:	80 81       	ld	r24, Z
     a00:	80 64       	ori	r24, 0x40	; 64
     a02:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     a04:	80 81       	ld	r24, Z
     a06:	80 68       	ori	r24, 0x80	; 128
     a08:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     a0a:	6b 9a       	sbi	0x0d, 3	; 13

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     a0c:	e0 e9       	ldi	r30, 0x90	; 144
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	82 68       	ori	r24, 0x82	; 130
     a14:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     a16:	e1 e9       	ldi	r30, 0x91	; 145
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	8a 61       	ori	r24, 0x1A	; 26
     a1e:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     a20:	89 ef       	ldi	r24, 0xF9	; 249
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
     a28:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
     a2c:	08 95       	ret

00000a2e <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     a2e:	fc 01       	movw	r30, r24
     a30:	80 81       	ld	r24, Z
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	91 f0       	breq	.+36     	; 0xa5a <_ZN5Motor19SetForwardDirectionEv+0x2c>
     a36:	18 f4       	brcc	.+6      	; 0xa3e <_ZN5Motor19SetForwardDirectionEv+0x10>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	31 f0       	breq	.+12     	; 0xa48 <_ZN5Motor19SetForwardDirectionEv+0x1a>
     a3c:	08 95       	ret
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	a9 f0       	breq	.+42     	; 0xa6c <_ZN5Motor19SetForwardDirectionEv+0x3e>
     a42:	84 30       	cpi	r24, 0x04	; 4
     a44:	e1 f0       	breq	.+56     	; 0xa7e <_ZN5Motor19SetForwardDirectionEv+0x50>
     a46:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     a48:	e8 e0       	ldi	r30, 0x08	; 8
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	80 81       	ld	r24, Z
     a4e:	82 60       	ori	r24, 0x02	; 2
     a50:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     a52:	80 81       	ld	r24, Z
     a54:	8e 7f       	andi	r24, 0xFE	; 254
     a56:	80 83       	st	Z, r24
			break;
     a58:	08 95       	ret
		case 2:
			SET		(DD_F2);
     a5a:	e8 e0       	ldi	r30, 0x08	; 8
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	80 81       	ld	r24, Z
     a60:	88 60       	ori	r24, 0x08	; 8
     a62:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     a64:	80 81       	ld	r24, Z
     a66:	8b 7f       	andi	r24, 0xFB	; 251
     a68:	80 83       	st	Z, r24
			break;
     a6a:	08 95       	ret
		case 3:
			SET		(DD_F3);
     a6c:	e8 e0       	ldi	r30, 0x08	; 8
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	80 81       	ld	r24, Z
     a72:	80 61       	ori	r24, 0x10	; 16
     a74:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     a76:	80 81       	ld	r24, Z
     a78:	8f 7d       	andi	r24, 0xDF	; 223
     a7a:	80 83       	st	Z, r24
			break;
     a7c:	08 95       	ret
		case 4:
			SET		(DD_F4);
     a7e:	e8 e0       	ldi	r30, 0x08	; 8
     a80:	f1 e0       	ldi	r31, 0x01	; 1
     a82:	80 81       	ld	r24, Z
     a84:	80 64       	ori	r24, 0x40	; 64
     a86:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     a88:	80 81       	ld	r24, Z
     a8a:	8f 77       	andi	r24, 0x7F	; 127
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret

00000a90 <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	91 f0       	breq	.+36     	; 0xabc <_ZN5Motor19SetReverseDirectionEv+0x2c>
     a98:	18 f4       	brcc	.+6      	; 0xaa0 <_ZN5Motor19SetReverseDirectionEv+0x10>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	31 f0       	breq	.+12     	; 0xaaa <_ZN5Motor19SetReverseDirectionEv+0x1a>
     a9e:	08 95       	ret
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	a9 f0       	breq	.+42     	; 0xace <_ZN5Motor19SetReverseDirectionEv+0x3e>
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	e1 f0       	breq	.+56     	; 0xae0 <_ZN5Motor19SetReverseDirectionEv+0x50>
     aa8:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     aaa:	e8 e0       	ldi	r30, 0x08	; 8
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	80 81       	ld	r24, Z
     ab0:	8d 7f       	andi	r24, 0xFD	; 253
     ab2:	80 83       	st	Z, r24
			SET		(DD_B1);
     ab4:	80 81       	ld	r24, Z
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 83       	st	Z, r24
			break;
     aba:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     abc:	e8 e0       	ldi	r30, 0x08	; 8
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	80 81       	ld	r24, Z
     ac2:	87 7f       	andi	r24, 0xF7	; 247
     ac4:	80 83       	st	Z, r24
			SET		(DD_B2);
     ac6:	80 81       	ld	r24, Z
     ac8:	84 60       	ori	r24, 0x04	; 4
     aca:	80 83       	st	Z, r24
			break;
     acc:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     ace:	e8 e0       	ldi	r30, 0x08	; 8
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	80 81       	ld	r24, Z
     ad4:	8f 7e       	andi	r24, 0xEF	; 239
     ad6:	80 83       	st	Z, r24
			SET		(DD_B3);
     ad8:	80 81       	ld	r24, Z
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	80 83       	st	Z, r24
			break;
     ade:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     ae0:	e8 e0       	ldi	r30, 0x08	; 8
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	80 81       	ld	r24, Z
     ae6:	8f 7b       	andi	r24, 0xBF	; 191
     ae8:	80 83       	st	Z, r24
			SET		(DD_B4);
     aea:	80 81       	ld	r24, Z
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	80 83       	st	Z, r24
     af0:	08 95       	ret

00000af2 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     af2:	fc 01       	movw	r30, r24
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	b1 f0       	breq	.+44     	; 0xb26 <_ZN5Motor9StopMotorEv+0x34>
     afa:	18 f4       	brcc	.+6      	; 0xb02 <_ZN5Motor9StopMotorEv+0x10>
     afc:	81 30       	cpi	r24, 0x01	; 1
     afe:	31 f0       	breq	.+12     	; 0xb0c <_ZN5Motor9StopMotorEv+0x1a>
     b00:	08 95       	ret
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	e9 f0       	breq	.+58     	; 0xb40 <_ZN5Motor9StopMotorEv+0x4e>
     b06:	84 30       	cpi	r24, 0x04	; 4
     b08:	41 f1       	breq	.+80     	; 0xb5a <_ZN5Motor9StopMotorEv+0x68>
     b0a:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     b0c:	e8 e0       	ldi	r30, 0x08	; 8
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	80 81       	ld	r24, Z
     b12:	8d 7f       	andi	r24, 0xFD	; 253
     b14:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     b16:	80 81       	ld	r24, Z
     b18:	8e 7f       	andi	r24, 0xFE	; 254
     b1a:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     b1c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     b20:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     b24:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     b26:	e8 e0       	ldi	r30, 0x08	; 8
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	80 81       	ld	r24, Z
     b2c:	87 7f       	andi	r24, 0xF7	; 247
     b2e:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     b30:	80 81       	ld	r24, Z
     b32:	8b 7f       	andi	r24, 0xFB	; 251
     b34:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     b36:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     b3a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     b3e:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     b40:	e8 e0       	ldi	r30, 0x08	; 8
     b42:	f1 e0       	ldi	r31, 0x01	; 1
     b44:	80 81       	ld	r24, Z
     b46:	8f 7e       	andi	r24, 0xEF	; 239
     b48:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 7d       	andi	r24, 0xDF	; 223
     b4e:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     b50:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     b54:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     b58:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     b5a:	e8 e0       	ldi	r30, 0x08	; 8
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
     b5e:	80 81       	ld	r24, Z
     b60:	8f 7b       	andi	r24, 0xBF	; 191
     b62:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     b6a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     b6e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     b72:	08 95       	ret

00000b74 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	8c 01       	movw	r16, r24
     b7e:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     b80:	1c 16       	cp	r1, r28
     b82:	1d 06       	cpc	r1, r29
     b84:	0c f4       	brge	.+2      	; 0xb88 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     b86:	53 df       	rcall	.-346    	; 0xa2e <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr < 0)
     b88:	dd 23       	and	r29, r29
     b8a:	2c f4       	brge	.+10     	; 0xb96 <_ZN5Motor11SetOcrValueEi+0x22>
	{
		 Ocr = -Ocr;
     b8c:	d1 95       	neg	r29
     b8e:	c1 95       	neg	r28
     b90:	d1 09       	sbc	r29, r1
		 SetReverseDirection();
     b92:	c8 01       	movw	r24, r16
     b94:	7d df       	rcall	.-262    	; 0xa90 <_ZN5Motor19SetReverseDirectionEv>
     b96:	ca 3f       	cpi	r28, 0xFA	; 250
     b98:	d1 05       	cpc	r29, r1
     b9a:	14 f0       	brlt	.+4      	; 0xba0 <_ZN5Motor11SetOcrValueEi+0x2c>
     b9c:	c9 ef       	ldi	r28, 0xF9	; 249
     b9e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if( Ocr > MAX_VALUE)
		Ocr = MAX_VALUE;

	switch(num)
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 81       	ld	r24, Z
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	71 f0       	breq	.+28     	; 0xbc4 <_ZN5Motor11SetOcrValueEi+0x50>
     ba8:	18 f4       	brcc	.+6      	; 0xbb0 <_ZN5Motor11SetOcrValueEi+0x3c>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	31 f0       	breq	.+12     	; 0xbba <_ZN5Motor11SetOcrValueEi+0x46>
     bae:	18 c0       	rjmp	.+48     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	69 f0       	breq	.+26     	; 0xbce <_ZN5Motor11SetOcrValueEi+0x5a>
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	81 f0       	breq	.+32     	; 0xbd8 <_ZN5Motor11SetOcrValueEi+0x64>
     bb8:	13 c0       	rjmp	.+38     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
	{
		case 1:
			PWM_OCR1	= Ocr;
     bba:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     bbe:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
			break;
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 2:
			PWM_OCR2	= Ocr;
     bc4:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     bc8:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
			break;
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 3:
			PWM_OCR3	= Ocr;
     bce:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     bd2:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
			break;
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <_ZN5Motor11SetOcrValueEi+0x6c>
		case 4:
			PWM_OCR4	= Ocr;
     bd8:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     bdc:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
			break;
	}
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
	num = no;
     bf0:	68 83       	st	Y, r22
	InitPWM();
     bf2:	9f de       	rcall	.-706    	; 0x932 <_ZN5Motor7InitPWMEv>

	StopMotor();
     bf4:	ce 01       	movw	r24, r28
     bf6:	7d df       	rcall	.-262    	; 0xaf2 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	ce 01       	movw	r24, r28
     bfe:	ba df       	rcall	.-140    	; 0xb74 <_ZN5Motor11SetOcrValueEi>

}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <_ZN3PID7Set_PidEfff>:


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	fc 01       	movw	r30, r24
	kp = kP;
     c14:	40 83       	st	Z, r20
     c16:	51 83       	std	Z+1, r21	; 0x01
     c18:	62 83       	std	Z+2, r22	; 0x02
     c1a:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     c1c:	04 83       	std	Z+4, r16	; 0x04
     c1e:	15 83       	std	Z+5, r17	; 0x05
     c20:	26 83       	std	Z+6, r18	; 0x06
     c22:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     c24:	c0 86       	std	Z+8, r12	; 0x08
     c26:	d1 86       	std	Z+9, r13	; 0x09
     c28:	e2 86       	std	Z+10, r14	; 0x0a
     c2a:	f3 86       	std	Z+11, r15	; 0x0b
}
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	08 95       	ret

00000c3a <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     c3a:	8f 92       	push	r8
     c3c:	9f 92       	push	r9
     c3e:	af 92       	push	r10
     c40:	bf 92       	push	r11
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
     c50:	7b 01       	movw	r14, r22
	error = sp - input;
     c52:	6c 85       	ldd	r22, Y+12	; 0x0c
     c54:	7d 85       	ldd	r23, Y+13	; 0x0d
     c56:	8b 01       	movw	r16, r22
     c58:	0e 19       	sub	r16, r14
     c5a:	1f 09       	sbc	r17, r15
     c5c:	1f 87       	std	Y+15, r17	; 0x0f
     c5e:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     c60:	8a 89       	ldd	r24, Y+18	; 0x12
     c62:	9b 89       	ldd	r25, Y+19	; 0x13
     c64:	80 0f       	add	r24, r16
     c66:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     c68:	8e 37       	cpi	r24, 0x7E	; 126
     c6a:	91 05       	cpc	r25, r1
     c6c:	2c f0       	brlt	.+10     	; 0xc78 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     c6e:	8d e7       	ldi	r24, 0x7D	; 125
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9b 8b       	std	Y+19, r25	; 0x13
     c74:	8a 8b       	std	Y+18, r24	; 0x12
     c76:	0b c0       	rjmp	.+22     	; 0xc8e <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     c78:	83 38       	cpi	r24, 0x83	; 131
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	92 07       	cpc	r25, r18
     c7e:	1c f0       	brlt	.+6      	; 0xc86 <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     c80:	9b 8b       	std	Y+19, r25	; 0x13
     c82:	8a 8b       	std	Y+18, r24	; 0x12
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     c86:	83 e8       	ldi	r24, 0x83	; 131
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	9b 8b       	std	Y+19, r25	; 0x13
     c8c:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     c8e:	6a 89       	ldd	r22, Y+18	; 0x12
     c90:	7b 89       	ldd	r23, Y+19	; 0x13
     c92:	07 2e       	mov	r0, r23
     c94:	00 0c       	add	r0, r0
     c96:	88 0b       	sbc	r24, r24
     c98:	99 0b       	sbc	r25, r25
     c9a:	d8 d7       	rcall	.+4016   	; 0x1c4c <__floatsisf>
     c9c:	2c 81       	ldd	r18, Y+4	; 0x04
     c9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ca0:	4e 81       	ldd	r20, Y+6	; 0x06
     ca2:	5f 81       	ldd	r21, Y+7	; 0x07
     ca4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__mulsf3>
     ca8:	4b 01       	movw	r8, r22
     caa:	5c 01       	movw	r10, r24
     cac:	b8 01       	movw	r22, r16
     cae:	11 0f       	add	r17, r17
     cb0:	88 0b       	sbc	r24, r24
     cb2:	99 0b       	sbc	r25, r25
     cb4:	cb d7       	rcall	.+3990   	; 0x1c4c <__floatsisf>
     cb6:	28 81       	ld	r18, Y
     cb8:	39 81       	ldd	r19, Y+1	; 0x01
     cba:	4a 81       	ldd	r20, Y+2	; 0x02
     cbc:	5b 81       	ldd	r21, Y+3	; 0x03
     cbe:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__mulsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	c5 01       	movw	r24, r10
     cc8:	b4 01       	movw	r22, r8
     cca:	bd d6       	rcall	.+3450   	; 0x1a46 <__addsf3>
     ccc:	4b 01       	movw	r8, r22
     cce:	5c 01       	movw	r10, r24
     cd0:	88 89       	ldd	r24, Y+16	; 0x10
     cd2:	99 89       	ldd	r25, Y+17	; 0x11
     cd4:	b7 01       	movw	r22, r14
     cd6:	68 1b       	sub	r22, r24
     cd8:	79 0b       	sbc	r23, r25
     cda:	07 2e       	mov	r0, r23
     cdc:	00 0c       	add	r0, r0
     cde:	88 0b       	sbc	r24, r24
     ce0:	99 0b       	sbc	r25, r25
     ce2:	b4 d7       	rcall	.+3944   	; 0x1c4c <__floatsisf>
     ce4:	28 85       	ldd	r18, Y+8	; 0x08
     ce6:	39 85       	ldd	r19, Y+9	; 0x09
     ce8:	4a 85       	ldd	r20, Y+10	; 0x0a
     cea:	5b 85       	ldd	r21, Y+11	; 0x0b
     cec:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__mulsf3>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	c5 01       	movw	r24, r10
     cf6:	b4 01       	movw	r22, r8
     cf8:	a5 d6       	rcall	.+3402   	; 0x1a44 <__subsf3>
     cfa:	2c 89       	ldd	r18, Y+20	; 0x14
     cfc:	3d 89       	ldd	r19, Y+21	; 0x15
     cfe:	4e 89       	ldd	r20, Y+22	; 0x16
     d00:	5f 89       	ldd	r21, Y+23	; 0x17
     d02:	a1 d6       	rcall	.+3394   	; 0x1a46 <__addsf3>
     d04:	6c 8b       	std	Y+20, r22	; 0x14
     d06:	7d 8b       	std	Y+21, r23	; 0x15
     d08:	8e 8b       	std	Y+22, r24	; 0x16
     d0a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     d0c:	f9 8a       	std	Y+17, r15	; 0x11
     d0e:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	08 95       	ret

00000d26 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     d26:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
     d2a:	87 e6       	ldi	r24, 0x67	; 103
     d2c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
     d30:	88 e9       	ldi	r24, 0x98	; 152
     d32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
     d36:	86 e0       	ldi	r24, 0x06	; 6
     d38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
     d3c:	08 95       	ret

00000d3e <_Z9initUART2v>:
     d3e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
     d42:	87 e6       	ldi	r24, 0x67	; 103
     d44:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
     d48:	88 e9       	ldi	r24, 0x98	; 152
     d4a:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
     d54:	08 95       	ret

00000d56 <_Z9initUART3v>:
     d56:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
     d5a:	89 e1       	ldi	r24, 0x19	; 25
     d5c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
     d60:	88 e9       	ldi	r24, 0x98	; 152
     d62:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
     d66:	86 e0       	ldi	r24, 0x06	; 6
     d68:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     d6c:	08 95       	ret

00000d6e <_Z13UART3Transmith>:
     d6e:	e0 e3       	ldi	r30, 0x30	; 48
     d70:	f1 e0       	ldi	r31, 0x01	; 1
     d72:	90 81       	ld	r25, Z
     d74:	95 ff       	sbrs	r25, 5
     d76:	fd cf       	rjmp	.-6      	; 0xd72 <_Z13UART3Transmith+0x4>
     d78:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     d7c:	08 95       	ret

00000d7e <__vector_25>:

ISR(USART0_RX_vect)
{
     d7e:	1f 92       	push	r1
     d80:	0f 92       	push	r0
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	0f 92       	push	r0
     d86:	11 24       	eor	r1, r1
     d88:	8f 93       	push	r24
	buffer=UDR0;
     d8a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
     d8e:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <buffer>
}
     d92:	8f 91       	pop	r24
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_36>:

ISR(USART1_RX_vect)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	8f 93       	push	r24
	buffer1=UDR1;
     daa:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     dae:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <buffer1>
	
}
     db2:	8f 91       	pop	r24
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <__vector_51>:

ISR(USART2_RX_vect)
{
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	8f 93       	push	r24
	buffer2=UDR2;
     dca:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
     dce:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <buffer2>
		
}
     dd2:	8f 91       	pop	r24
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	0f 90       	pop	r0
     dda:	1f 90       	pop	r1
     ddc:	18 95       	reti

00000dde <__vector_54>:


ISR(USART3_RX_vect)
{
     dde:	1f 92       	push	r1
     de0:	0f 92       	push	r0
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	0f 92       	push	r0
     de6:	11 24       	eor	r1, r1
     de8:	0b b6       	in	r0, 0x3b	; 59
     dea:	0f 92       	push	r0
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
	buffer3=UDR3;
     df4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     df8:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <buffer3>
	if(rcvflag)
     dfc:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <rcvflag>
     e00:	99 23       	and	r25, r25
     e02:	89 f0       	breq	.+34     	; 0xe26 <__vector_54+0x48>
	{
		rcvdata[datacount] = buffer3;
     e04:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <_ZL9datacount>
     e08:	e9 2f       	mov	r30, r25
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ee 53       	subi	r30, 0x3E	; 62
     e0e:	fd 4f       	sbci	r31, 0xFD	; 253
     e10:	80 83       	st	Z, r24
		datacount++;
     e12:	9f 5f       	subi	r25, 0xFF	; 255
		if(datacount>3)
     e14:	94 30       	cpi	r25, 0x04	; 4
     e16:	18 f4       	brcc	.+6      	; 0xe1e <__vector_54+0x40>
{
	buffer3=UDR3;
	if(rcvflag)
	{
		rcvdata[datacount] = buffer3;
		datacount++;
     e18:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <_ZL9datacount>
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <__vector_54+0x48>
		if(datacount>3)
		{
			datacount=0;
     e1e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <_ZL9datacount>
			rcvflag = false;
     e22:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <rcvflag>
		}
	}
	if(buffer3==START_BYTE_MANUAL)
     e26:	8d 3f       	cpi	r24, 0xFD	; 253
     e28:	31 f4       	brne	.+12     	; 0xe36 <__vector_54+0x58>
	{
		rcvflag = true;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <rcvflag>
		auto_mode = false;
     e30:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <auto_mode>
     e34:	07 c0       	rjmp	.+14     	; 0xe44 <__vector_54+0x66>
	}
	else if(buffer3 == START_BYTE_AUTO)
     e36:	8e 3f       	cpi	r24, 0xFE	; 254
     e38:	29 f4       	brne	.+10     	; 0xe44 <__vector_54+0x66>
	{
		rcvflag = true;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <rcvflag>
		auto_mode = true;
     e40:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <auto_mode>
	}
}
     e44:	ff 91       	pop	r31
     e46:	ef 91       	pop	r30
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	0f 90       	pop	r0
     e4e:	0b be       	out	0x3b, r0	; 59
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <_Z15reset_auto_modev>:
	enable_robot_stop_interrupt();
}

void reset_auto_mode()
{
	current_location = Starting_Zone;
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <current_location>
	next_location = Starting_Zone;
     e60:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
	
	current_distance = SZONE;
     e64:	8a eb       	ldi	r24, 0xBA	; 186
     e66:	99 e0       	ldi	r25, 0x09	; 9
     e68:	a0 e0       	ldi	r26, 0x00	; 0
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <current_distance>
     e70:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <current_distance+0x1>
     e74:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <current_distance+0x2>
     e78:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <current_distance+0x3>
	next_distance = 0;
     e7c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <next_distance>
     e80:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <next_distance+0x1>
     e84:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_distance+0x2>
     e88:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <next_distance+0x3>
	
	DATA1 = 50;
     e8c:	e2 ec       	ldi	r30, 0xC2	; 194
     e8e:	f2 e0       	ldi	r31, 0x02	; 2
     e90:	82 e3       	ldi	r24, 0x32	; 50
     e92:	80 83       	st	Z, r24
	DATA2 = 50;
     e94:	81 83       	std	Z+1, r24	; 0x01
	DATA3 = 50;
     e96:	82 83       	std	Z+2, r24	; 0x02
		
	searching_rpm = SEARCH_RPM;
     e98:	8c e3       	ldi	r24, 0x3C	; 60
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <searching_rpm+0x1>
     ea0:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <searching_rpm>
	
	speed = 0;
     ea4:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <speed+0x1>
     ea8:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <speed>
	
	distance = 0;
     eac:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <distance>
     eb0:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <distance+0x1>
     eb4:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <distance+0x2>
     eb8:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <distance+0x3>
	slopeup = 0;
     ebc:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <slopeup>
     ec0:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <slopeup+0x1>
     ec4:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <slopeup+0x2>
     ec8:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <slopeup+0x3>
	slopedown = 0;
     ecc:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <slopedown>
     ed0:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <slopedown+0x1>
     ed4:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <slopedown+0x2>
     ed8:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <slopedown+0x3>
	ramp_down_off_adj = RAMP_DOWN_OFFSET;
     edc:	89 e1       	ldi	r24, 0x19	; 25
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <ramp_down_off_adj+0x1>
     ee4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ramp_down_off_adj>
	calculated = false;
     ee8:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <calculated>

	dir = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <dir>
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
		inline void Reset_Distance(){encdistance = 0;}
     ef2:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
     ef6:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
     efa:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
     efe:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
     f02:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
     f06:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
     f0a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
     f0e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
	
	ex.Reset_Distance();
	ey.Reset_Distance();
	
	moving = false;
     f12:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <moving>
	searching = false;
     f16:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <searching>
	searching_complete = false;
     f1a:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <searching_complete>
	pressed = false;
     f1e:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <pressed>
	Golden_Drop = false;
     f22:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <Golden_Drop>
	reset_auto = false;
     f26:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <reset_auto>
	give_shtcock = false;
     f2a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <give_shtcock>
	shift_robot = false;
     f2e:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <shift_robot>
	rotate_robot = false;
     f32:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <rotate_robot>
	go_after_rotate = false;
     f36:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <go_after_rotate>
	final_step = false;
     f3a:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <final_step>
	stop_flag = false;
     f3e:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <stop_flag>
     f42:	08 95       	ret

00000f44 <_Z20operate_slave_manualv>:
	
}


void operate_slave_manual()
{
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
	velocity_robot[0] = (-(DATA1 - 50)/50.0)*MAX_RPM_XY;
     f50:	06 ea       	ldi	r16, 0xA6	; 166
     f52:	12 e0       	ldi	r17, 0x02	; 2
     f54:	0f 2e       	mov	r0, r31
     f56:	f2 ec       	ldi	r31, 0xC2	; 194
     f58:	ef 2e       	mov	r14, r31
     f5a:	f2 e0       	ldi	r31, 0x02	; 2
     f5c:	ff 2e       	mov	r15, r31
     f5e:	f0 2d       	mov	r31, r0
     f60:	f7 01       	movw	r30, r14
     f62:	80 81       	ld	r24, Z
     f64:	c2 e3       	ldi	r28, 0x32	; 50
     f66:	d0 e0       	ldi	r29, 0x00	; 0
     f68:	be 01       	movw	r22, r28
     f6a:	68 1b       	sub	r22, r24
     f6c:	71 09       	sbc	r23, r1
     f6e:	07 2e       	mov	r0, r23
     f70:	00 0c       	add	r0, r0
     f72:	88 0b       	sbc	r24, r24
     f74:	99 0b       	sbc	r25, r25
     f76:	6a d6       	rcall	.+3284   	; 0x1c4c <__floatsisf>
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	48 e4       	ldi	r20, 0x48	; 72
     f7e:	52 e4       	ldi	r21, 0x42	; 66
     f80:	ca d5       	rcall	.+2964   	; 0x1b16 <__divsf3>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	47 ed       	ldi	r20, 0xD7	; 215
     f88:	53 e4       	ldi	r21, 0x43	; 67
     f8a:	14 d7       	rcall	.+3624   	; 0x1db4 <__mulsf3>
     f8c:	2c d6       	rcall	.+3160   	; 0x1be6 <__fixsfsi>
     f8e:	f8 01       	movw	r30, r16
     f90:	71 83       	std	Z+1, r23	; 0x01
     f92:	60 83       	st	Z, r22
	velocity_robot[1] = ((DATA2 - 50)/50.0)*MAX_RPM_XY;
     f94:	f7 01       	movw	r30, r14
     f96:	61 81       	ldd	r22, Z+1	; 0x01
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	62 53       	subi	r22, 0x32	; 50
     f9c:	71 09       	sbc	r23, r1
     f9e:	07 2e       	mov	r0, r23
     fa0:	00 0c       	add	r0, r0
     fa2:	88 0b       	sbc	r24, r24
     fa4:	99 0b       	sbc	r25, r25
     fa6:	52 d6       	rcall	.+3236   	; 0x1c4c <__floatsisf>
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	48 e4       	ldi	r20, 0x48	; 72
     fae:	52 e4       	ldi	r21, 0x42	; 66
     fb0:	b2 d5       	rcall	.+2916   	; 0x1b16 <__divsf3>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	47 ed       	ldi	r20, 0xD7	; 215
     fb8:	53 e4       	ldi	r21, 0x43	; 67
     fba:	fc d6       	rcall	.+3576   	; 0x1db4 <__mulsf3>
     fbc:	14 d6       	rcall	.+3112   	; 0x1be6 <__fixsfsi>
     fbe:	f8 01       	movw	r30, r16
     fc0:	73 83       	std	Z+3, r23	; 0x03
     fc2:	62 83       	std	Z+2, r22	; 0x02
	velocity_robot[2] = (-(DATA3 - 50)/50.0)*MAX_RPM_YAW;
     fc4:	f7 01       	movw	r30, r14
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	c8 1b       	sub	r28, r24
     fca:	d1 09       	sbc	r29, r1
     fcc:	be 01       	movw	r22, r28
     fce:	dd 0f       	add	r29, r29
     fd0:	88 0b       	sbc	r24, r24
     fd2:	99 0b       	sbc	r25, r25
     fd4:	3b d6       	rcall	.+3190   	; 0x1c4c <__floatsisf>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	48 e4       	ldi	r20, 0x48	; 72
     fdc:	52 e4       	ldi	r21, 0x42	; 66
     fde:	9b d5       	rcall	.+2870   	; 0x1b16 <__divsf3>
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	48 ec       	ldi	r20, 0xC8	; 200
     fe6:	52 e4       	ldi	r21, 0x42	; 66
     fe8:	e5 d6       	rcall	.+3530   	; 0x1db4 <__mulsf3>
     fea:	fd d5       	rcall	.+3066   	; 0x1be6 <__fixsfsi>
     fec:	f8 01       	movw	r30, r16
     fee:	75 83       	std	Z+5, r23	; 0x05
	if(reset_auto)	//reset auto mode data if sowitched from auto to manual
     ff0:	64 83       	std	Z+4, r22	; 0x04
     ff2:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <reset_auto>
		reset_auto_mode();
     ff6:	81 11       	cpse	r24, r1
     ff8:	30 df       	rcall	.-416    	; 0xe5a <_Z15reset_auto_modev>
		
	//UART2TransmitData(counter_motor);
	//UART2TransmitString("\n\r");
	
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	08 95       	ret

00001008 <_Z10move_robotv>:
}


void move_robot()
{
	dir = CALC_DIR(current_location,next_location);
    1008:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <next_location>
    1012:	82 1b       	sub	r24, r18
    1014:	91 09       	sbc	r25, r1
    1016:	12 f0       	brmi	.+4      	; 0x101c <_Z10move_robotv+0x14>
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	01 c0       	rjmp	.+2      	; 0x101e <_Z10move_robotv+0x16>
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	20 93 f2 02 	sts	0x02F2, r18	; 0x8002f2 <dir>
    1022:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    1026:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    102a:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    102e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
	ex.Reset_Distance();
	velocity_robot[0] = Y_COMPONENT_INITIAL;
    1032:	e6 ea       	ldi	r30, 0xA6	; 166
    1034:	f2 e0       	ldi	r31, 0x02	; 2
    1036:	8f e0       	ldi	r24, 0x0F	; 15
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
	velocity_robot[2] = 0;
    103e:	15 82       	std	Z+5, r1	; 0x05
    1040:	14 82       	std	Z+4, r1	; 0x04
	moving = true;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <moving>
	
	distance = abs(next_distance - current_distance);
    1048:	40 91 d8 02 	lds	r20, 0x02D8	; 0x8002d8 <next_distance>
    104c:	50 91 d9 02 	lds	r21, 0x02D9	; 0x8002d9 <next_distance+0x1>
    1050:	60 91 da 02 	lds	r22, 0x02DA	; 0x8002da <next_distance+0x2>
    1054:	70 91 db 02 	lds	r23, 0x02DB	; 0x8002db <next_distance+0x3>
    1058:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <current_distance>
    105c:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <current_distance+0x1>
    1060:	a0 91 de 02 	lds	r26, 0x02DE	; 0x8002de <current_distance+0x2>
    1064:	b0 91 df 02 	lds	r27, 0x02DF	; 0x8002df <current_distance+0x3>
    1068:	48 1b       	sub	r20, r24
    106a:	59 0b       	sbc	r21, r25
    106c:	6a 0b       	sbc	r22, r26
    106e:	7b 0b       	sbc	r23, r27
    1070:	db 01       	movw	r26, r22
    1072:	ca 01       	movw	r24, r20
    1074:	3a f4       	brpl	.+14     	; 0x1084 <_Z10move_robotv+0x7c>
    1076:	88 27       	eor	r24, r24
    1078:	99 27       	eor	r25, r25
    107a:	dc 01       	movw	r26, r24
    107c:	84 1b       	sub	r24, r20
    107e:	95 0b       	sbc	r25, r21
    1080:	a6 0b       	sbc	r26, r22
    1082:	b7 0b       	sbc	r27, r23
    1084:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <distance>
    1088:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <distance+0x1>
    108c:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <distance+0x2>
    1090:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <distance+0x3>
	
	if(distance >= 2600)
    1094:	88 32       	cpi	r24, 0x28	; 40
    1096:	9a 40       	sbci	r25, 0x0A	; 10
    1098:	a1 05       	cpc	r26, r1
    109a:	b1 05       	cpc	r27, r1
    109c:	94 f0       	brlt	.+36     	; 0x10c2 <_Z10move_robotv+0xba>
	{
		speed = dir*MAX_RPM_XY;
    109e:	4e ea       	ldi	r20, 0xAE	; 174
    10a0:	51 e0       	ldi	r21, 0x01	; 1
    10a2:	24 03       	mulsu	r18, r20
    10a4:	c0 01       	movw	r24, r0
    10a6:	25 9f       	mul	r18, r21
    10a8:	90 0d       	add	r25, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <speed+0x1>
    10b0:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <speed>
		ramp_down_off_adj = RAMP_DOWN_OFFSET + 30;
    10b4:	87 e3       	ldi	r24, 0x37	; 55
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <ramp_down_off_adj+0x1>
    10bc:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ramp_down_off_adj>
    10c0:	0e c0       	rjmp	.+28     	; 0x10de <_Z10move_robotv+0xd6>
	}
	else 
	{
		speed = dir*MIN_RPM_XY;
    10c2:	3a ef       	ldi	r19, 0xFA	; 250
    10c4:	23 03       	mulsu	r18, r19
    10c6:	c0 01       	movw	r24, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <speed+0x1>
    10ce:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <speed>
		ramp_down_off_adj = RAMP_DOWN_OFFSET;
    10d2:	89 e1       	ldi	r24, 0x19	; 25
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <ramp_down_off_adj+0x1>
    10da:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <ramp_down_off_adj>
	}
		 
	current_distance = next_distance;
    10de:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <next_distance>
    10e2:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <next_distance+0x1>
    10e6:	a0 91 da 02 	lds	r26, 0x02DA	; 0x8002da <next_distance+0x2>
    10ea:	b0 91 db 02 	lds	r27, 0x02DB	; 0x8002db <next_distance+0x3>
    10ee:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <current_distance>
    10f2:	90 93 dd 02 	sts	0x02DD, r25	; 0x8002dd <current_distance+0x1>
    10f6:	a0 93 de 02 	sts	0x02DE, r26	; 0x8002de <current_distance+0x2>
    10fa:	b0 93 df 02 	sts	0x02DF, r27	; 0x8002df <current_distance+0x3>
    10fe:	08 95       	ret

00001100 <_Z17Golden_Rack_Placev>:
	//UART0TransmitString("\n\r");
}

void Golden_Rack_Place()
{
	if(current_location == Loading_zone2)
    1100:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	99 f4       	brne	.+38     	; 0x112e <_Z17Golden_Rack_Placev+0x2e>
	{
		Golden_Drop =true;
    1108:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <Golden_Drop>
		next_location = Golden_zone;
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
		next_distance = GLDZONE;
    1112:	8e ef       	ldi	r24, 0xFE	; 254
    1114:	9c ef       	ldi	r25, 0xFC	; 252
    1116:	af ef       	ldi	r26, 0xFF	; 255
    1118:	bf ef       	ldi	r27, 0xFF	; 255
    111a:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    111e:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    1122:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    1126:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
		move_robot();		
    112a:	6e cf       	rjmp	.-292    	; 0x1008 <_Z10move_robotv>
    112c:	08 95       	ret
	}
	else if(Golden_Drop && current_location == Golden_zone)
    112e:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <Golden_Drop>
    1132:	99 23       	and	r25, r25
    1134:	91 f0       	breq	.+36     	; 0x115a <_Z17Golden_Rack_Placev+0x5a>
    1136:	85 30       	cpi	r24, 0x05	; 5
    1138:	81 f4       	brne	.+32     	; 0x115a <_Z17Golden_Rack_Placev+0x5a>
	{
		next_location = Loading_zone1;
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
		next_distance = LZONE1;
    1140:	89 ef       	ldi	r24, 0xF9	; 249
    1142:	94 e2       	ldi	r25, 0x24	; 36
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    114c:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    1150:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    1154:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
		move_robot();
    1158:	57 cf       	rjmp	.-338    	; 0x1008 <_Z10move_robotv>
    115a:	08 95       	ret

0000115c <_Z19send_data_to_masterh>:
		 
	current_distance = next_distance;
}

void send_data_to_master(uint8_t dat)
{
    115c:	cf 93       	push	r28
    115e:	c8 2f       	mov	r28, r24
	UART3Transmit(START_BYTE_MASTER);
    1160:	8c ef       	ldi	r24, 0xFC	; 252
    1162:	05 de       	rcall	.-1014   	; 0xd6e <_Z13UART3Transmith>
	UART3Transmit(dat);
    1164:	8c 2f       	mov	r24, r28
    1166:	03 de       	rcall	.-1018   	; 0xd6e <_Z13UART3Transmith>
}
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <_Z27enable_robot_stop_interruptv>:

void enable_robot_stop_interrupt()
{
	cli();
    116c:	f8 94       	cli
	PCICR |= (1 << PCIE0);
    116e:	e8 e6       	ldi	r30, 0x68	; 104
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	81 60       	ori	r24, 0x01	; 1
    1176:	80 83       	st	Z, r24
	PCIFR |= (1 << PCIF0);
    1178:	d8 9a       	sbi	0x1b, 0	; 27
	PCMSK0 |= (1 << PCINT4);
    117a:	eb e6       	ldi	r30, 0x6B	; 107
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	80 83       	st	Z, r24
	sei();
    1184:	78 94       	sei
    1186:	08 95       	ret

00001188 <_Z10init_slavev>:
	
	

void init_slave()
{	
	auto_mode = false;
    1188:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <auto_mode>
	
	INPUT(STOP_THE_DRIVE);
    118c:	24 98       	cbi	0x04, 4	; 4
	
	reset_auto_mode();
    118e:	65 de       	rcall	.-822    	; 0xe5a <_Z15reset_auto_modev>
	enable_robot_stop_interrupt();
    1190:	ed cf       	rjmp	.-38     	; 0x116c <_Z27enable_robot_stop_interruptv>
    1192:	08 95       	ret

00001194 <_Z15Brake_the_robotv>:
    1194:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <distance>
	sei();
}

void Brake_the_robot()
{
	distance = 0;
    1198:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <distance+0x1>
    119c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <distance+0x2>
    11a0:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <distance+0x3>
	moving = false;
    11a4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <moving>
	calculated = false;
    11a8:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <calculated>
	
	//if reached  different zone different task
	if(current_location == Rack_zone && next_location == Loading_zone1)
    11ac:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	91 f4       	brne	.+36     	; 0x11d8 <_Z15Brake_the_robotv+0x44>
    11b4:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	99 f5       	brne	.+102    	; 0x1222 <_Z15Brake_the_robotv+0x8e>
    11bc:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
    11c0:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
    11c4:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
    11c8:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
	{
		ey.Reset_Distance();
		searching = true;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <searching>
		give_shtcock = true;
    11d2:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <give_shtcock>
    11d6:	25 c0       	rjmp	.+74     	; 0x1222 <_Z15Brake_the_robotv+0x8e>
	}
	else if(current_location == Starting_Zone && next_location == Rack_zone)
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	31 f4       	brne	.+12     	; 0x11e8 <_Z15Brake_the_robotv+0x54>
    11dc:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	f9 f4       	brne	.+62     	; 0x1222 <_Z15Brake_the_robotv+0x8e>
		send_data_to_master(next_location);
    11e4:	bb df       	rcall	.-138    	; 0x115c <_Z19send_data_to_masterh>
    11e6:	1d c0       	rjmp	.+58     	; 0x1222 <_Z15Brake_the_robotv+0x8e>
	else if(current_location == Golden_zone && next_location == Loading_zone1)
    11e8:	85 30       	cpi	r24, 0x05	; 5
    11ea:	d9 f4       	brne	.+54     	; 0x1222 <_Z15Brake_the_robotv+0x8e>
    11ec:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	b9 f4       	brne	.+46     	; 0x1222 <_Z15Brake_the_robotv+0x8e>
    11f4:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
    11f8:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
    11fc:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
    1200:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
	{
		ey.Reset_Distance();
		shift_robot = true;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <shift_robot>
		velocity_robot[0] = -SEARCH_RPM;
    120a:	e6 ea       	ldi	r30, 0xA6	; 166
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	24 ec       	ldi	r18, 0xC4	; 196
    1210:	3f ef       	ldi	r19, 0xFF	; 255
    1212:	31 83       	std	Z+1, r19	; 0x01
    1214:	20 83       	st	Z, r18
		velocity_robot[1] = 0;
    1216:	13 82       	std	Z+3, r1	; 0x03
    1218:	12 82       	std	Z+2, r1	; 0x02
		velocity_robot[2] = 0;
    121a:	15 82       	std	Z+5, r1	; 0x05
    121c:	14 82       	std	Z+4, r1	; 0x04
		final_step = true;
    121e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <final_step>
	}
	stop_flag = false;
    1222:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <stop_flag>
	
	
	if(Golden_Drop)
    1226:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <Golden_Drop>
    122a:	88 23       	and	r24, r24
    122c:	19 f0       	breq	.+6      	; 0x1234 <_Z15Brake_the_robotv+0xa0>
		send_data_to_master(next_location);
    122e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    1232:	94 df       	rcall	.-216    	; 0x115c <_Z19send_data_to_masterh>
	
	current_location = next_location;	
    1234:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    1238:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <current_location>
    123c:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    1240:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    1244:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    1248:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
    124c:	08 95       	ret

0000124e <_Z18operate_slave_autov>:
	//UART2TransmitString("\n\r");
	
}

void operate_slave_auto()
{
    124e:	4f 92       	push	r4
    1250:	5f 92       	push	r5
    1252:	6f 92       	push	r6
    1254:	7f 92       	push	r7
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	28 97       	sbiw	r28, 0x08	; 8
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
	if (!moving && !searching)
    127e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <moving>
    1282:	81 11       	cpse	r24, r1
    1284:	64 c0       	rjmp	.+200    	; 0x134e <_Z18operate_slave_autov+0x100>
    1286:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <searching>
    128a:	81 11       	cpse	r24, r1
    128c:	60 c0       	rjmp	.+192    	; 0x134e <_Z18operate_slave_autov+0x100>
	{
		/******************************Data for auto mode from master************************************/
		if(DATA1 == Rack_load)
    128e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <rcvdata>
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	79 f4       	brne	.+30     	; 0x12b4 <_Z18operate_slave_autov+0x66>
		{
			next_location = Rack_zone;
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
			next_distance = RZONE;
    129c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <next_distance>
    12a0:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <next_distance+0x1>
    12a4:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_distance+0x2>
    12a8:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <next_distance+0x3>
			move_robot();
    12ac:	ad de       	rcall	.-678    	; 0x1008 <_Z10move_robotv>
			DATA1 = 0;
    12ae:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
    12b2:	4d c0       	rjmp	.+154    	; 0x134e <_Z18operate_slave_autov+0x100>
		}
		else if(DATA1 == Load1)
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	91 f4       	brne	.+36     	; 0x12dc <_Z18operate_slave_autov+0x8e>
		{
			next_location = Loading_zone1;
    12b8:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
			next_distance = LZONE1;
    12bc:	89 ef       	ldi	r24, 0xF9	; 249
    12be:	94 e2       	ldi	r25, 0x24	; 36
    12c0:	a0 e0       	ldi	r26, 0x00	; 0
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    12c8:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    12cc:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    12d0:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
			move_robot();
    12d4:	99 de       	rcall	.-718    	; 0x1008 <_Z10move_robotv>
			DATA1 = 0;
    12d6:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
    12da:	39 c0       	rjmp	.+114    	; 0x134e <_Z18operate_slave_autov+0x100>
		}
		else if (DATA1 == Load2)
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	99 f4       	brne	.+38     	; 0x1306 <_Z18operate_slave_autov+0xb8>
		{
			next_location = Loading_zone2;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <next_location>
			next_distance = LZONE2;
    12e6:	85 ea       	ldi	r24, 0xA5	; 165
    12e8:	9d e2       	ldi	r25, 0x2D	; 45
    12ea:	a0 e0       	ldi	r26, 0x00	; 0
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <next_distance>
    12f2:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <next_distance+0x1>
    12f6:	a0 93 da 02 	sts	0x02DA, r26	; 0x8002da <next_distance+0x2>
    12fa:	b0 93 db 02 	sts	0x02DB, r27	; 0x8002db <next_distance+0x3>
			move_robot();
    12fe:	84 de       	rcall	.-760    	; 0x1008 <_Z10move_robotv>
			DATA1 = 0;
    1300:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
    1304:	24 c0       	rjmp	.+72     	; 0x134e <_Z18operate_slave_autov+0x100>
		}
		else if (DATA1 == Search_automaticrobot)
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	e9 f4       	brne	.+58     	; 0x1344 <_Z18operate_slave_autov+0xf6>
		{
			if(searching_complete)
    130a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <searching_complete>
    130e:	88 23       	and	r24, r24
    1310:	59 f0       	breq	.+22     	; 0x1328 <_Z18operate_slave_autov+0xda>
			{
				velocity_robot[0] = SEARCH_RPM;
    1312:	e6 ea       	ldi	r30, 0xA6	; 166
    1314:	f2 e0       	ldi	r31, 0x02	; 2
    1316:	8c e3       	ldi	r24, 0x3C	; 60
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
				velocity_robot[1] = 0;
    131e:	13 82       	std	Z+3, r1	; 0x03
    1320:	12 82       	std	Z+2, r1	; 0x02
				velocity_robot[2] = 0;
    1322:	15 82       	std	Z+5, r1	; 0x05
    1324:	14 82       	std	Z+4, r1	; 0x04
    1326:	0b c0       	rjmp	.+22     	; 0x133e <_Z18operate_slave_autov+0xf0>
			}
			else
			{
				searching = true;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <searching>
    132e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <ey+0x1>
    1332:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <ey+0x2>
    1336:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <ey+0x3>
    133a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <ey+0x4>
				ey.Reset_Distance();
			}
			
			DATA1 = 0;
    133e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
			
		}
		else if(DATA1 == Golden_Rack)
    1342:	05 c0       	rjmp	.+10     	; 0x134e <_Z18operate_slave_autov+0x100>
    1344:	85 30       	cpi	r24, 0x05	; 5
		{
			Golden_Rack_Place();
    1346:	19 f4       	brne	.+6      	; 0x134e <_Z18operate_slave_autov+0x100>
    1348:	db de       	rcall	.-586    	; 0x1100 <_Z17Golden_Rack_Placev>
			DATA1 = 0;
    134a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <rcvdata>
		}
	}
	
	if(Golden_Drop)
    134e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <Golden_Drop>
    1352:	88 23       	and	r24, r24
    1354:	09 f4       	brne	.+2      	; 0x1358 <_Z18operate_slave_autov+0x10a>
    1356:	9b c0       	rjmp	.+310    	; 0x148e <_Z18operate_slave_autov+0x240>
	{
		//move forward to give golden rack
		if(go_after_rotate && (abs(ex.Get_Distance()) >= AUTOROBOT_DIST) )
    1358:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <go_after_rotate>
    135c:	88 23       	and	r24, r24
    135e:	71 f1       	breq	.+92     	; 0x13bc <_Z18operate_slave_autov+0x16e>
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
    1360:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <ex+0x1>
    1364:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <ex+0x2>
    1368:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <ex+0x3>
    136c:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <ex+0x4>
    1370:	18 16       	cp	r1, r24
    1372:	19 06       	cpc	r1, r25
    1374:	1a 06       	cpc	r1, r26
    1376:	1b 06       	cpc	r1, r27
    1378:	44 f4       	brge	.+16     	; 0x138a <_Z18operate_slave_autov+0x13c>
    137a:	21 e0       	ldi	r18, 0x01	; 1
    137c:	88 37       	cpi	r24, 0x78	; 120
    137e:	95 40       	sbci	r25, 0x05	; 5
    1380:	a1 05       	cpc	r26, r1
    1382:	b1 05       	cpc	r27, r1
    1384:	84 f4       	brge	.+32     	; 0x13a6 <_Z18operate_slave_autov+0x158>
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	0e c0       	rjmp	.+28     	; 0x13a6 <_Z18operate_slave_autov+0x158>
    138a:	b0 95       	com	r27
    138c:	a0 95       	com	r26
    138e:	90 95       	com	r25
    1390:	81 95       	neg	r24
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	af 4f       	sbci	r26, 0xFF	; 255
    1396:	bf 4f       	sbci	r27, 0xFF	; 255
    1398:	21 e0       	ldi	r18, 0x01	; 1
    139a:	88 37       	cpi	r24, 0x78	; 120
    139c:	95 40       	sbci	r25, 0x05	; 5
    139e:	a1 05       	cpc	r26, r1
    13a0:	b1 05       	cpc	r27, r1
    13a2:	0c f4       	brge	.+2      	; 0x13a6 <_Z18operate_slave_autov+0x158>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	22 23       	and	r18, r18
		{
			reset_robot_velocity();
    13a8:	49 f0       	breq	.+18     	; 0x13bc <_Z18operate_slave_autov+0x16e>
    13aa:	05 d8       	rcall	.-4086   	; 0x3b6 <_Z20reset_robot_velocityv>
			rotate_robot = false;
    13ac:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <rotate_robot>
			final_step = false;
    13b0:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <final_step>
			send_data_to_master(Give_GoldenRack);
    13b4:	87 e0       	ldi	r24, 0x07	; 7
    13b6:	d2 de       	rcall	.-604    	; 0x115c <_Z19send_data_to_masterh>
			Golden_Drop = false;
    13b8:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <Golden_Drop>
		}
		
		//move forward after rotating
		if(rotate_robot) 
    13bc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <rotate_robot>
    13c0:	88 23       	and	r24, r24
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <_Z18operate_slave_autov+0x178>
    13c4:	3c c0       	rjmp	.+120    	; 0x143e <_Z18operate_slave_autov+0x1f0>
		{
			if(counter_motor >= ROTATE_COUNT)
    13c6:	60 91 ba 02 	lds	r22, 0x02BA	; 0x8002ba <counter_motor>
    13ca:	70 91 bb 02 	lds	r23, 0x02BB	; 0x8002bb <counter_motor+0x1>
    13ce:	6c 33       	cpi	r22, 0x3C	; 60
    13d0:	85 e0       	ldi	r24, 0x05	; 5
    13d2:	78 07       	cpc	r23, r24
    13d4:	f0 f0       	brcs	.+60     	; 0x1412 <_Z18operate_slave_autov+0x1c4>
			{
				rotate_robot = false;
    13d6:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <rotate_robot>
				go_after_rotate = true;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <go_after_rotate>
				velocity_robot[0] = 0;
    13e0:	e6 ea       	ldi	r30, 0xA6	; 166
    13e2:	f2 e0       	ldi	r31, 0x02	; 2
    13e4:	11 82       	std	Z+1, r1	; 0x01
    13e6:	10 82       	st	Z, r1
				velocity_robot[1] = -130;
    13e8:	8e e7       	ldi	r24, 0x7E	; 126
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	93 83       	std	Z+3, r25	; 0x03
    13ee:	82 83       	std	Z+2, r24	; 0x02
				velocity_robot[2] = 0;
    13f0:	15 82       	std	Z+5, r1	; 0x05
    13f2:	14 82       	std	Z+4, r1	; 0x04
		inline void Reset_Distance(){encdistance = 0;}
    13f4:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <ex+0x1>
    13f8:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <ex+0x2>
    13fc:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ex+0x3>
    1400:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <ex+0x4>
				ex.Reset_Distance();
				counter_motor = 0;
    1404:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter_motor+0x1>
    1408:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <counter_motor>
				count_the_motor = false;
    140c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <count_the_motor>
    1410:	16 c0       	rjmp	.+44     	; 0x143e <_Z18operate_slave_autov+0x1f0>
			}
			else if(counter_motor <= (ROTATE_COUNT >> 1) )
    1412:	6f 39       	cpi	r22, 0x9F	; 159
    1414:	22 e0       	ldi	r18, 0x02	; 2
    1416:	72 07       	cpc	r23, r18
			{
				velocity_robot[2] = ((60/1340.0)*counter_motor)-80;
    1418:	90 f4       	brcc	.+36     	; 0x143e <_Z18operate_slave_autov+0x1f0>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	14 d4       	rcall	.+2088   	; 0x1c48 <__floatunsisf>
    1420:	2a e2       	ldi	r18, 0x2A	; 42
    1422:	37 e6       	ldi	r19, 0x67	; 103
    1424:	47 e3       	ldi	r20, 0x37	; 55
    1426:	5d e3       	ldi	r21, 0x3D	; 61
    1428:	c5 d4       	rcall	.+2442   	; 0x1db4 <__mulsf3>
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 ea       	ldi	r20, 0xA0	; 160
    1430:	52 e4       	ldi	r21, 0x42	; 66
    1432:	08 d3       	rcall	.+1552   	; 0x1a44 <__subsf3>
    1434:	d8 d3       	rcall	.+1968   	; 0x1be6 <__fixsfsi>
    1436:	70 93 ab 02 	sts	0x02AB, r23	; 0x8002ab <velocity_robot+0x5>
    143a:	60 93 aa 02 	sts	0x02AA, r22	; 0x8002aa <velocity_robot+0x4>
			}

		}		
		
		//after shifting
		if(shift_robot && ey.Get_Distance() >= Y_DISTANCE)
    143e:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <shift_robot>
    1442:	88 23       	and	r24, r24
    1444:	21 f1       	breq	.+72     	; 0x148e <_Z18operate_slave_autov+0x240>
    1446:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ey+0x1>
    144a:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <ey+0x2>
    144e:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <ey+0x3>
    1452:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <ey+0x4>
    1456:	80 3b       	cpi	r24, 0xB0	; 176
    1458:	94 40       	sbci	r25, 0x04	; 4
    145a:	a1 05       	cpc	r26, r1
    145c:	b1 05       	cpc	r27, r1
    145e:	bc f0       	brlt	.+46     	; 0x148e <_Z18operate_slave_autov+0x240>
		{
			reset_robot_velocity();
    1460:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z20reset_robot_velocityv>
			shift_robot = false;
    1464:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <shift_robot>
			rotate_robot = true;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <rotate_robot>
			count_the_motor = true;
    146e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <count_the_motor>
			counter_motor = 0;
    1472:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <counter_motor+0x1>
    1476:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <counter_motor>
			velocity_robot[0] = 0;
    147a:	e6 ea       	ldi	r30, 0xA6	; 166
    147c:	f2 e0       	ldi	r31, 0x02	; 2
    147e:	11 82       	std	Z+1, r1	; 0x01
    1480:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    1482:	13 82       	std	Z+3, r1	; 0x03
    1484:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = -80;
    1486:	80 eb       	ldi	r24, 0xB0	; 176
    1488:	9f ef       	ldi	r25, 0xFF	; 255
    148a:	95 83       	std	Z+5, r25	; 0x05
    148c:	84 83       	std	Z+4, r24	; 0x04
	
	}
	
	
	//return back after searching the automatic robot
	if(searching_complete && ey.Get_Distance() <= 30) //30 band for the ey encoder
    148e:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <searching_complete>
    1492:	88 23       	and	r24, r24
    1494:	81 f0       	breq	.+32     	; 0x14b6 <_Z18operate_slave_autov+0x268>
    1496:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <ey+0x1>
    149a:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <ey+0x2>
    149e:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <ey+0x3>
    14a2:	b0 91 70 02 	lds	r27, 0x0270	; 0x800270 <ey+0x4>
    14a6:	4f 97       	sbiw	r24, 0x1f	; 31
    14a8:	a1 05       	cpc	r26, r1
    14aa:	b1 05       	cpc	r27, r1
    14ac:	24 f4       	brge	.+8      	; 0x14b6 <_Z18operate_slave_autov+0x268>
	{

		reset_robot_velocity();
    14ae:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z20reset_robot_velocityv>
		searching_complete = false;
    14b2:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <searching_complete>
	}
	
	/**********************************If moving to different zone then perform ramping************************************/
	if (moving)
    14b6:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <moving>
    14ba:	88 23       	and	r24, r24
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <_Z18operate_slave_autov+0x272>
    14be:	c0 c1       	rjmp	.+896    	; 0x1840 <_Z18operate_slave_autov+0x5f2>
	{
		//to calculate slope only one time at the start
			if(!calculated)
    14c0:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <calculated>
    14c4:	81 11       	cpse	r24, r1
    14c6:	62 c0       	rjmp	.+196    	; 0x158c <_Z18operate_slave_autov+0x33e>
			{
				slopeup =  (speed-(dir*RAMP_UP_OFFSET))/RAMP_UP_DIST;
    14c8:	00 91 f2 02 	lds	r16, 0x02F2	; 0x8002f2 <dir>
    14cc:	00 2e       	mov	r0, r16
    14ce:	00 0c       	add	r0, r0
    14d0:	11 0b       	sbc	r17, r17
    14d2:	a0 90 f0 02 	lds	r10, 0x02F0	; 0x8002f0 <speed>
    14d6:	b0 90 f1 02 	lds	r11, 0x02F1	; 0x8002f1 <speed+0x1>
    14da:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <distance>
    14de:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <distance+0x1>
    14e2:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <distance+0x2>
    14e6:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <distance+0x3>
    14ea:	b0 d3       	rcall	.+1888   	; 0x1c4c <__floatsisf>
    14ec:	6b 01       	movw	r12, r22
    14ee:	7c 01       	movw	r14, r24
    14f0:	20 eb       	ldi	r18, 0xB0	; 176
    14f2:	20 03       	mulsu	r18, r16
    14f4:	b0 01       	movw	r22, r0
    14f6:	21 9f       	mul	r18, r17
    14f8:	70 0d       	add	r23, r0
    14fa:	11 24       	eor	r1, r1
    14fc:	6a 0d       	add	r22, r10
    14fe:	7b 1d       	adc	r23, r11
    1500:	07 2e       	mov	r0, r23
    1502:	00 0c       	add	r0, r0
    1504:	88 0b       	sbc	r24, r24
    1506:	99 0b       	sbc	r25, r25
    1508:	a1 d3       	rcall	.+1858   	; 0x1c4c <__floatsisf>
    150a:	2b 01       	movw	r4, r22
    150c:	3c 01       	movw	r6, r24
    150e:	24 ea       	ldi	r18, 0xA4	; 164
    1510:	30 e7       	ldi	r19, 0x70	; 112
    1512:	49 e1       	ldi	r20, 0x19	; 25
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	fd d2       	rcall	.+1530   	; 0x1b16 <__divsf3>
    151c:	9b 01       	movw	r18, r22
    151e:	ac 01       	movw	r20, r24
    1520:	c3 01       	movw	r24, r6
    1522:	b2 01       	movw	r22, r4
    1524:	f8 d2       	rcall	.+1520   	; 0x1b16 <__divsf3>
    1526:	60 93 ea 02 	sts	0x02EA, r22	; 0x8002ea <slopeup>
    152a:	70 93 eb 02 	sts	0x02EB, r23	; 0x8002eb <slopeup+0x1>
    152e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <slopeup+0x2>
    1532:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <slopeup+0x3>
				slopedown = (-((speed-dir*ramp_down_off_adj))/RAMP_DOWN_DIST);
    1536:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <ramp_down_off_adj>
    153a:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <ramp_down_off_adj+0x1>
    153e:	08 9f       	mul	r16, r24
    1540:	b0 01       	movw	r22, r0
    1542:	09 9f       	mul	r16, r25
    1544:	70 0d       	add	r23, r0
    1546:	18 9f       	mul	r17, r24
    1548:	70 0d       	add	r23, r0
    154a:	11 24       	eor	r1, r1
    154c:	6a 19       	sub	r22, r10
    154e:	7b 09       	sbc	r23, r11
    1550:	07 2e       	mov	r0, r23
    1552:	00 0c       	add	r0, r0
    1554:	88 0b       	sbc	r24, r24
    1556:	99 0b       	sbc	r25, r25
    1558:	79 d3       	rcall	.+1778   	; 0x1c4c <__floatsisf>
    155a:	4b 01       	movw	r8, r22
    155c:	5c 01       	movw	r10, r24
    155e:	2d ec       	ldi	r18, 0xCD	; 205
    1560:	3c ec       	ldi	r19, 0xCC	; 204
    1562:	4c e4       	ldi	r20, 0x4C	; 76
    1564:	50 e4       	ldi	r21, 0x40	; 64
    1566:	c7 01       	movw	r24, r14
    1568:	b6 01       	movw	r22, r12
    156a:	d5 d2       	rcall	.+1450   	; 0x1b16 <__divsf3>
    156c:	9b 01       	movw	r18, r22
    156e:	ac 01       	movw	r20, r24
    1570:	c5 01       	movw	r24, r10
    1572:	b4 01       	movw	r22, r8
    1574:	d0 d2       	rcall	.+1440   	; 0x1b16 <__divsf3>
    1576:	60 93 e6 02 	sts	0x02E6, r22	; 0x8002e6 <slopedown>
    157a:	70 93 e7 02 	sts	0x02E7, r23	; 0x8002e7 <slopedown+0x1>
    157e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <slopedown+0x2>
    1582:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <slopedown+0x3>
				calculated = true;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <calculated>
			}
			
		//if destination is reached interrupt is trigerred by the master
			
			if(stop_flag)
    158c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <stop_flag>
			{
				Brake_the_robot();
    1590:	81 11       	cpse	r24, r1
    1592:	00 de       	rcall	.-1024   	; 0x1194 <_Z15Brake_the_robotv>
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
    1594:	c0 90 72 02 	lds	r12, 0x0272	; 0x800272 <ex+0x1>
    1598:	d0 90 73 02 	lds	r13, 0x0273	; 0x800273 <ex+0x2>
    159c:	e0 90 74 02 	lds	r14, 0x0274	; 0x800274 <ex+0x3>
    15a0:	f0 90 75 02 	lds	r15, 0x0275	; 0x800275 <ex+0x4>
			}
			
			//if destination is reached
			if(abs(ex.Get_Distance()) >= distance)
    15a4:	80 90 e0 02 	lds	r8, 0x02E0	; 0x8002e0 <distance>
    15a8:	90 90 e1 02 	lds	r9, 0x02E1	; 0x8002e1 <distance+0x1>
    15ac:	a0 90 e2 02 	lds	r10, 0x02E2	; 0x8002e2 <distance+0x2>
    15b0:	b0 90 e3 02 	lds	r11, 0x02E3	; 0x8002e3 <distance+0x3>
    15b4:	d7 01       	movw	r26, r14
    15b6:	c6 01       	movw	r24, r12
    15b8:	ff 20       	and	r15, r15
    15ba:	3c f4       	brge	.+14     	; 0x15ca <_Z18operate_slave_autov+0x37c>
    15bc:	88 27       	eor	r24, r24
    15be:	99 27       	eor	r25, r25
    15c0:	dc 01       	movw	r26, r24
    15c2:	8c 19       	sub	r24, r12
    15c4:	9d 09       	sbc	r25, r13
    15c6:	ae 09       	sbc	r26, r14
    15c8:	bf 09       	sbc	r27, r15
    15ca:	88 15       	cp	r24, r8
    15cc:	99 05       	cpc	r25, r9
    15ce:	aa 05       	cpc	r26, r10
    15d0:	bb 05       	cpc	r27, r11
    15d2:	bc f0       	brlt	.+46     	; 0x1602 <_Z18operate_slave_autov+0x3b4>
			{
				//stop the robot
				if(current_location == Starting_Zone && next_location == Rack_zone)
    15d4:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <current_location>
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	79 f4       	brne	.+30     	; 0x15fa <_Z18operate_slave_autov+0x3ac>
    15dc:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <next_location>
    15e0:	84 30       	cpi	r24, 0x04	; 4
				{
					velocity_robot[0] = 0;
    15e2:	59 f4       	brne	.+22     	; 0x15fa <_Z18operate_slave_autov+0x3ac>
    15e4:	e6 ea       	ldi	r30, 0xA6	; 166
    15e6:	f2 e0       	ldi	r31, 0x02	; 2
    15e8:	11 82       	std	Z+1, r1	; 0x01
					velocity_robot[1] = -RAMP_DOWN_OFFSET;
    15ea:	10 82       	st	Z, r1
    15ec:	87 ee       	ldi	r24, 0xE7	; 231
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
					velocity_robot[2] = 0;
    15f0:	93 83       	std	Z+3, r25	; 0x03
    15f2:	82 83       	std	Z+2, r24	; 0x02
				}
				else
				{
					reset_motors();	
    15f4:	15 82       	std	Z+5, r1	; 0x05
    15f6:	14 82       	std	Z+4, r1	; 0x04
					Brake_the_robot();
    15f8:	23 c1       	rjmp	.+582    	; 0x1840 <_Z18operate_slave_autov+0x5f2>
    15fa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z12reset_motorsv>
				}
				
				
			}
			else if (abs(ex.Get_Distance()) >= RAMP_UP_DIST && (abs(ex.Get_Distance()) <= (distance-RAMP_DOWN_DIST)))
    15fe:	ca dd       	rcall	.-1132   	; 0x1194 <_Z15Brake_the_robotv>
    1600:	1f c1       	rjmp	.+574    	; 0x1840 <_Z18operate_slave_autov+0x5f2>
    1602:	1c 14       	cp	r1, r12
    1604:	1d 04       	cpc	r1, r13
    1606:	1e 04       	cpc	r1, r14
    1608:	1f 04       	cpc	r1, r15
    160a:	f4 f4       	brge	.+60     	; 0x1648 <_Z18operate_slave_autov+0x3fa>
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	1d d3       	rcall	.+1594   	; 0x1c4c <__floatsisf>
    1612:	2b 01       	movw	r4, r22
    1614:	3c 01       	movw	r6, r24
    1616:	c5 01       	movw	r24, r10
    1618:	b4 01       	movw	r22, r8
    161a:	18 d3       	rcall	.+1584   	; 0x1c4c <__floatsisf>
    161c:	69 83       	std	Y+1, r22	; 0x01
    161e:	7a 83       	std	Y+2, r23	; 0x02
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	9c 83       	std	Y+4, r25	; 0x04
    1624:	24 ea       	ldi	r18, 0xA4	; 164
    1626:	30 e7       	ldi	r19, 0x70	; 112
    1628:	49 e1       	ldi	r20, 0x19	; 25
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	74 d2       	rcall	.+1256   	; 0x1b16 <__divsf3>
    162e:	6d 83       	std	Y+5, r22	; 0x05
    1630:	7e 83       	std	Y+6, r23	; 0x06
    1632:	8f 83       	std	Y+7, r24	; 0x07
    1634:	98 87       	std	Y+8, r25	; 0x08
    1636:	9b 01       	movw	r18, r22
    1638:	ac 01       	movw	r20, r24
    163a:	c3 01       	movw	r24, r6
    163c:	b2 01       	movw	r22, r4
    163e:	b6 d3       	rcall	.+1900   	; 0x1dac <__gesf2>
    1640:	88 23       	and	r24, r24
    1642:	0c f4       	brge	.+2      	; 0x1646 <_Z18operate_slave_autov+0x3f8>
    1644:	47 c0       	rjmp	.+142    	; 0x16d4 <_Z18operate_slave_autov+0x486>
    1646:	21 c0       	rjmp	.+66     	; 0x168a <_Z18operate_slave_autov+0x43c>
    1648:	66 27       	eor	r22, r22
    164a:	77 27       	eor	r23, r23
    164c:	cb 01       	movw	r24, r22
    164e:	6c 19       	sub	r22, r12
    1650:	7d 09       	sbc	r23, r13
    1652:	8e 09       	sbc	r24, r14
    1654:	9f 09       	sbc	r25, r15
    1656:	fa d2       	rcall	.+1524   	; 0x1c4c <__floatsisf>
    1658:	2b 01       	movw	r4, r22
    165a:	3c 01       	movw	r6, r24
    165c:	c5 01       	movw	r24, r10
    165e:	b4 01       	movw	r22, r8
    1660:	f5 d2       	rcall	.+1514   	; 0x1c4c <__floatsisf>
    1662:	69 83       	std	Y+1, r22	; 0x01
    1664:	7a 83       	std	Y+2, r23	; 0x02
    1666:	8b 83       	std	Y+3, r24	; 0x03
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	24 ea       	ldi	r18, 0xA4	; 164
    166c:	30 e7       	ldi	r19, 0x70	; 112
    166e:	49 e1       	ldi	r20, 0x19	; 25
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	51 d2       	rcall	.+1186   	; 0x1b16 <__divsf3>
    1674:	6d 83       	std	Y+5, r22	; 0x05
    1676:	7e 83       	std	Y+6, r23	; 0x06
    1678:	8f 83       	std	Y+7, r24	; 0x07
    167a:	98 87       	std	Y+8, r25	; 0x08
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c3 01       	movw	r24, r6
    1682:	b2 01       	movw	r22, r4
    1684:	93 d3       	rcall	.+1830   	; 0x1dac <__gesf2>
    1686:	88 23       	and	r24, r24
    1688:	a4 f1       	brlt	.+104    	; 0x16f2 <_Z18operate_slave_autov+0x4a4>
    168a:	2d ec       	ldi	r18, 0xCD	; 205
    168c:	3c ec       	ldi	r19, 0xCC	; 204
    168e:	4c e4       	ldi	r20, 0x4C	; 76
    1690:	50 e4       	ldi	r21, 0x40	; 64
    1692:	69 81       	ldd	r22, Y+1	; 0x01
    1694:	7a 81       	ldd	r23, Y+2	; 0x02
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	3d d2       	rcall	.+1146   	; 0x1b16 <__divsf3>
    169c:	9b 01       	movw	r18, r22
    169e:	ac 01       	movw	r20, r24
    16a0:	69 81       	ldd	r22, Y+1	; 0x01
    16a2:	7a 81       	ldd	r23, Y+2	; 0x02
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	cd d1       	rcall	.+922    	; 0x1a44 <__subsf3>
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    16ae:	c3 01       	movw	r24, r6
    16b0:	b2 01       	movw	r22, r4
    16b2:	2d d2       	rcall	.+1114   	; 0x1b0e <__cmpsf2>
    16b4:	18 16       	cp	r1, r24
			{
				//normal
				velocity_robot[1] = speed;
    16b6:	4c f0       	brlt	.+18     	; 0x16ca <_Z18operate_slave_autov+0x47c>
    16b8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <speed>
    16bc:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <speed+0x1>
    16c0:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <velocity_robot+0x3>
    16c4:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <velocity_robot+0x2>
				
			}
			else if (abs(ex.Get_Distance()) <= RAMP_UP_DIST)
    16c8:	bb c0       	rjmp	.+374    	; 0x1840 <_Z18operate_slave_autov+0x5f2>
    16ca:	1c 14       	cp	r1, r12
    16cc:	1d 04       	cpc	r1, r13
    16ce:	1e 04       	cpc	r1, r14
    16d0:	1f 04       	cpc	r1, r15
    16d2:	7c f4       	brge	.+30     	; 0x16f2 <_Z18operate_slave_autov+0x4a4>
    16d4:	c7 01       	movw	r24, r14
    16d6:	b6 01       	movw	r22, r12
    16d8:	b9 d2       	rcall	.+1394   	; 0x1c4c <__floatsisf>
    16da:	2b 01       	movw	r4, r22
    16dc:	3c 01       	movw	r6, r24
    16de:	9b 01       	movw	r18, r22
    16e0:	ac 01       	movw	r20, r24
    16e2:	6d 81       	ldd	r22, Y+5	; 0x05
    16e4:	7e 81       	ldd	r23, Y+6	; 0x06
    16e6:	8f 81       	ldd	r24, Y+7	; 0x07
    16e8:	98 85       	ldd	r25, Y+8	; 0x08
    16ea:	60 d3       	rcall	.+1728   	; 0x1dac <__gesf2>
    16ec:	88 23       	and	r24, r24
    16ee:	a4 f4       	brge	.+40     	; 0x1718 <_Z18operate_slave_autov+0x4ca>
    16f0:	39 c0       	rjmp	.+114    	; 0x1764 <_Z18operate_slave_autov+0x516>
    16f2:	66 27       	eor	r22, r22
    16f4:	77 27       	eor	r23, r23
    16f6:	cb 01       	movw	r24, r22
    16f8:	6c 19       	sub	r22, r12
    16fa:	7d 09       	sbc	r23, r13
    16fc:	8e 09       	sbc	r24, r14
    16fe:	9f 09       	sbc	r25, r15
    1700:	a5 d2       	rcall	.+1354   	; 0x1c4c <__floatsisf>
    1702:	2b 01       	movw	r4, r22
    1704:	3c 01       	movw	r6, r24
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	6d 81       	ldd	r22, Y+5	; 0x05
    170c:	7e 81       	ldd	r23, Y+6	; 0x06
    170e:	8f 81       	ldd	r24, Y+7	; 0x07
    1710:	98 85       	ldd	r25, Y+8	; 0x08
			{
				//ramp up
				velocity_robot[1] = dir*((slopeup*ex.Get_Distance())+RAMP_UP_OFFSET);
    1712:	4c d3       	rcall	.+1688   	; 0x1dac <__gesf2>
    1714:	88 23       	and	r24, r24
    1716:	34 f1       	brlt	.+76     	; 0x1764 <_Z18operate_slave_autov+0x516>
    1718:	c7 01       	movw	r24, r14
    171a:	b6 01       	movw	r22, r12
    171c:	97 d2       	rcall	.+1326   	; 0x1c4c <__floatsisf>
    171e:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <slopeup>
    1722:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <slopeup+0x1>
    1726:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <slopeup+0x2>
    172a:	50 91 ed 02 	lds	r21, 0x02ED	; 0x8002ed <slopeup+0x3>
    172e:	42 d3       	rcall	.+1668   	; 0x1db4 <__mulsf3>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 ea       	ldi	r20, 0xA0	; 160
    1736:	52 e4       	ldi	r21, 0x42	; 66
    1738:	86 d1       	rcall	.+780    	; 0x1a46 <__addsf3>
    173a:	6b 01       	movw	r12, r22
    173c:	7c 01       	movw	r14, r24
    173e:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <dir>
    1742:	06 2e       	mov	r0, r22
    1744:	00 0c       	add	r0, r0
    1746:	77 0b       	sbc	r23, r23
    1748:	88 0b       	sbc	r24, r24
    174a:	99 0b       	sbc	r25, r25
    174c:	7f d2       	rcall	.+1278   	; 0x1c4c <__floatsisf>
    174e:	9b 01       	movw	r18, r22
    1750:	ac 01       	movw	r20, r24
    1752:	c7 01       	movw	r24, r14
    1754:	b6 01       	movw	r22, r12
    1756:	2e d3       	rcall	.+1628   	; 0x1db4 <__mulsf3>
    1758:	46 d2       	rcall	.+1164   	; 0x1be6 <__fixsfsi>
    175a:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <velocity_robot+0x3>
    175e:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <velocity_robot+0x2>
    1762:	6e c0       	rjmp	.+220    	; 0x1840 <_Z18operate_slave_autov+0x5f2>
			}			
			else if ((abs(ex.Get_Distance()) <= distance) && (abs(ex.Get_Distance()) >= (distance-RAMP_DOWN_DIST)))
    1764:	2d ec       	ldi	r18, 0xCD	; 205
    1766:	3c ec       	ldi	r19, 0xCC	; 204
    1768:	4c e4       	ldi	r20, 0x4C	; 76
    176a:	50 e4       	ldi	r21, 0x40	; 64
    176c:	69 81       	ldd	r22, Y+1	; 0x01
    176e:	7a 81       	ldd	r23, Y+2	; 0x02
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	d0 d1       	rcall	.+928    	; 0x1b16 <__divsf3>
    1776:	6d 83       	std	Y+5, r22	; 0x05
    1778:	7e 83       	std	Y+6, r23	; 0x06
    177a:	8f 83       	std	Y+7, r24	; 0x07
    177c:	98 87       	std	Y+8, r25	; 0x08
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	69 81       	ldd	r22, Y+1	; 0x01
    1784:	7a 81       	ldd	r23, Y+2	; 0x02
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	5c d1       	rcall	.+696    	; 0x1a44 <__subsf3>
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	c3 01       	movw	r24, r6
    1792:	b2 01       	movw	r22, r4
    1794:	0b d3       	rcall	.+1558   	; 0x1dac <__gesf2>
    1796:	88 23       	and	r24, r24
    1798:	0c f4       	brge	.+2      	; 0x179c <_Z18operate_slave_autov+0x54e>
			{
				//ramp down
					velocity_robot[1] = (dir*(slopedown)*ex.Get_Distance())+(dir*ramp_down_off_adj-(dir*ramp_down_off_adj-speed)*distance/RAMP_DOWN_DIST);
    179a:	52 c0       	rjmp	.+164    	; 0x1840 <_Z18operate_slave_autov+0x5f2>
    179c:	70 90 f2 02 	lds	r7, 0x02F2	; 0x8002f2 <dir>
    17a0:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <ramp_down_off_adj>
    17a4:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <ramp_down_off_adj+0x1>
    17a8:	47 2d       	mov	r20, r7
    17aa:	42 03       	mulsu	r20, r18
    17ac:	80 01       	movw	r16, r0
    17ae:	43 9f       	mul	r20, r19
    17b0:	10 0d       	add	r17, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	b8 01       	movw	r22, r16
    17b6:	01 2e       	mov	r0, r17
    17b8:	00 0c       	add	r0, r0
    17ba:	88 0b       	sbc	r24, r24
    17bc:	99 0b       	sbc	r25, r25
    17be:	46 d2       	rcall	.+1164   	; 0x1c4c <__floatsisf>
    17c0:	69 83       	std	Y+1, r22	; 0x01
    17c2:	7a 83       	std	Y+2, r23	; 0x02
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <speed>
    17cc:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <speed+0x1>
    17d0:	d8 01       	movw	r26, r16
    17d2:	a8 1b       	sub	r26, r24
    17d4:	b9 0b       	sbc	r27, r25
    17d6:	a5 01       	movw	r20, r10
    17d8:	94 01       	movw	r18, r8
    17da:	4f d3       	rcall	.+1694   	; 0x1e7a <__mulshisi3>
    17dc:	37 d2       	rcall	.+1134   	; 0x1c4c <__floatsisf>
    17de:	2d 81       	ldd	r18, Y+5	; 0x05
    17e0:	3e 81       	ldd	r19, Y+6	; 0x06
    17e2:	4f 81       	ldd	r20, Y+7	; 0x07
    17e4:	58 85       	ldd	r21, Y+8	; 0x08
    17e6:	97 d1       	rcall	.+814    	; 0x1b16 <__divsf3>
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
    17ec:	69 81       	ldd	r22, Y+1	; 0x01
    17ee:	7a 81       	ldd	r23, Y+2	; 0x02
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	27 d1       	rcall	.+590    	; 0x1a44 <__subsf3>
    17f6:	4b 01       	movw	r8, r22
    17f8:	5c 01       	movw	r10, r24
    17fa:	67 2d       	mov	r22, r7
    17fc:	77 0c       	add	r7, r7
    17fe:	77 0b       	sbc	r23, r23
    1800:	88 0b       	sbc	r24, r24
    1802:	99 0b       	sbc	r25, r25
    1804:	23 d2       	rcall	.+1094   	; 0x1c4c <__floatsisf>
    1806:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <slopedown>
    180a:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <slopedown+0x1>
    180e:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <slopedown+0x2>
    1812:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <slopedown+0x3>
    1816:	ce d2       	rcall	.+1436   	; 0x1db4 <__mulsf3>
    1818:	2b 01       	movw	r4, r22
    181a:	3c 01       	movw	r6, r24
    181c:	c7 01       	movw	r24, r14
    181e:	b6 01       	movw	r22, r12
    1820:	15 d2       	rcall	.+1066   	; 0x1c4c <__floatsisf>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	c3 01       	movw	r24, r6
    1828:	b2 01       	movw	r22, r4
    182a:	c4 d2       	rcall	.+1416   	; 0x1db4 <__mulsf3>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	c5 01       	movw	r24, r10
    1832:	b4 01       	movw	r22, r8
    1834:	08 d1       	rcall	.+528    	; 0x1a46 <__addsf3>
    1836:	d7 d1       	rcall	.+942    	; 0x1be6 <__fixsfsi>
    1838:	70 93 a9 02 	sts	0x02A9, r23	; 0x8002a9 <velocity_robot+0x3>
    183c:	60 93 a8 02 	sts	0x02A8, r22	; 0x8002a8 <velocity_robot+0x2>
    1840:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <searching>
    1844:	88 23       	and	r24, r24
			
			
	}
	
	//Search the automatic robot
	if(searching)
    1846:	09 f4       	brne	.+2      	; 0x184a <_Z18operate_slave_autov+0x5fc>
    1848:	ac c0       	rjmp	.+344    	; 0x19a2 <_Z18operate_slave_autov+0x754>
    184a:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <rcvdata+0x2>
    184e:	81 11       	cpse	r24, r1
	{
		if(DATA3 == 0)
    1850:	10 c0       	rjmp	.+32     	; 0x1872 <_Z18operate_slave_autov+0x624>
    1852:	e6 ea       	ldi	r30, 0xA6	; 166
    1854:	f2 e0       	ldi	r31, 0x02	; 2
    1856:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
		{
			velocity_robot[0] = -searching_rpm;
    185a:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
    185e:	91 95       	neg	r25
    1860:	81 95       	neg	r24
    1862:	91 09       	sbc	r25, r1
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	80 83       	st	Z, r24
    1868:	13 82       	std	Z+3, r1	; 0x03
    186a:	12 82       	std	Z+2, r1	; 0x02
    186c:	15 82       	std	Z+5, r1	; 0x05
			velocity_robot[1] = 0;
    186e:	14 82       	std	Z+4, r1	; 0x04
    1870:	8e c0       	rjmp	.+284    	; 0x198e <_Z18operate_slave_autov+0x740>
			velocity_robot[2] = 0;
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	99 f4       	brne	.+38     	; 0x189c <_Z18operate_slave_autov+0x64e>
    1876:	e6 ea       	ldi	r30, 0xA6	; 166
		}
		else if(DATA3 == 1)
    1878:	f2 e0       	ldi	r31, 0x02	; 2
    187a:	11 82       	std	Z+1, r1	; 0x01
		{
			velocity_robot[0] = 0;
    187c:	10 82       	st	Z, r1
    187e:	13 82       	std	Z+3, r1	; 0x03
    1880:	12 82       	std	Z+2, r1	; 0x02
    1882:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
			velocity_robot[1] = 0;
    1886:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
			velocity_robot[2] = -searching_rpm;
    188a:	91 95       	neg	r25
    188c:	81 95       	neg	r24
    188e:	91 09       	sbc	r25, r1
    1890:	95 83       	std	Z+5, r25	; 0x05
    1892:	84 83       	std	Z+4, r24	; 0x04
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pressed>
			pressed = true;
    189a:	7d c0       	rjmp	.+250    	; 0x1996 <_Z18operate_slave_autov+0x748>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	81 f4       	brne	.+32     	; 0x18c0 <_Z18operate_slave_autov+0x672>
    18a0:	e6 ea       	ldi	r30, 0xA6	; 166
		}	
		else if (DATA3 == 2)
    18a2:	f2 e0       	ldi	r31, 0x02	; 2
    18a4:	11 82       	std	Z+1, r1	; 0x01
		{
			velocity_robot[0] = 0;
    18a6:	10 82       	st	Z, r1
    18a8:	13 82       	std	Z+3, r1	; 0x03
    18aa:	12 82       	std	Z+2, r1	; 0x02
    18ac:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
			velocity_robot[1] = 0;
    18b0:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
			velocity_robot[2] = searching_rpm;
    18b4:	95 83       	std	Z+5, r25	; 0x05
    18b6:	84 83       	std	Z+4, r24	; 0x04
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pressed>
			pressed = true;
    18be:	6b c0       	rjmp	.+214    	; 0x1996 <_Z18operate_slave_autov+0x748>
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	99 f4       	brne	.+38     	; 0x18ea <_Z18operate_slave_autov+0x69c>
    18c4:	e6 ea       	ldi	r30, 0xA6	; 166
		}
		else if(DATA3 == 4)
    18c6:	f2 e0       	ldi	r31, 0x02	; 2
    18c8:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
		{
			velocity_robot[0] = -searching_rpm;
    18cc:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
    18d0:	91 95       	neg	r25
    18d2:	81 95       	neg	r24
    18d4:	91 09       	sbc	r25, r1
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
    18da:	13 82       	std	Z+3, r1	; 0x03
    18dc:	12 82       	std	Z+2, r1	; 0x02
    18de:	15 82       	std	Z+5, r1	; 0x05
			velocity_robot[1] = 0;
    18e0:	14 82       	std	Z+4, r1	; 0x04
    18e2:	81 e0       	ldi	r24, 0x01	; 1
			velocity_robot[2] = 0;
    18e4:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pressed>
			pressed = true;
    18e8:	56 c0       	rjmp	.+172    	; 0x1996 <_Z18operate_slave_autov+0x748>
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	81 f4       	brne	.+32     	; 0x190e <_Z18operate_slave_autov+0x6c0>
    18ee:	e6 ea       	ldi	r30, 0xA6	; 166
		}
		else if(DATA3 == 3)
    18f0:	f2 e0       	ldi	r31, 0x02	; 2
    18f2:	11 82       	std	Z+1, r1	; 0x01
		{
			velocity_robot[0] = 0;
    18f4:	10 82       	st	Z, r1
    18f6:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
    18fa:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
			velocity_robot[1] = searching_rpm;
    18fe:	93 83       	std	Z+3, r25	; 0x03
    1900:	82 83       	std	Z+2, r24	; 0x02
    1902:	15 82       	std	Z+5, r1	; 0x05
    1904:	14 82       	std	Z+4, r1	; 0x04
    1906:	81 e0       	ldi	r24, 0x01	; 1
			velocity_robot[2] = 0;
    1908:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pressed>
			pressed = true;
    190c:	44 c0       	rjmp	.+136    	; 0x1996 <_Z18operate_slave_autov+0x748>
    190e:	85 30       	cpi	r24, 0x05	; 5
    1910:	99 f4       	brne	.+38     	; 0x1938 <_Z18operate_slave_autov+0x6ea>
    1912:	e6 ea       	ldi	r30, 0xA6	; 166
		}
		else if(DATA3 == 5)
    1914:	f2 e0       	ldi	r31, 0x02	; 2
    1916:	11 82       	std	Z+1, r1	; 0x01
		{
			velocity_robot[0] = 0;
    1918:	10 82       	st	Z, r1
    191a:	13 82       	std	Z+3, r1	; 0x03
    191c:	12 82       	std	Z+2, r1	; 0x02
    191e:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
			velocity_robot[1] = 0;
    1922:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
			velocity_robot[2] = -searching_rpm;
    1926:	91 95       	neg	r25
    1928:	81 95       	neg	r24
    192a:	91 09       	sbc	r25, r1
    192c:	95 83       	std	Z+5, r25	; 0x05
    192e:	84 83       	std	Z+4, r24	; 0x04
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pressed>
			pressed = true;		
    1936:	2f c0       	rjmp	.+94     	; 0x1996 <_Z18operate_slave_autov+0x748>
    1938:	86 30       	cpi	r24, 0x06	; 6
    193a:	81 f4       	brne	.+32     	; 0x195c <_Z18operate_slave_autov+0x70e>
		}
		else if (DATA3 == 6)
    193c:	e6 ea       	ldi	r30, 0xA6	; 166
    193e:	f2 e0       	ldi	r31, 0x02	; 2
		{
			velocity_robot[0] = 0;
    1940:	11 82       	std	Z+1, r1	; 0x01
    1942:	10 82       	st	Z, r1
    1944:	13 82       	std	Z+3, r1	; 0x03
    1946:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[1] = 0;
    1948:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <searching_rpm>
			velocity_robot[2] = searching_rpm;
    194c:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <searching_rpm+0x1>
    1950:	95 83       	std	Z+5, r25	; 0x05
    1952:	84 83       	std	Z+4, r24	; 0x04
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <pressed>
			pressed = true;		
    195a:	1d c0       	rjmp	.+58     	; 0x1996 <_Z18operate_slave_autov+0x748>
    195c:	87 30       	cpi	r24, 0x07	; 7
    195e:	b9 f4       	brne	.+46     	; 0x198e <_Z18operate_slave_autov+0x740>
		}
		else if (DATA3 == 7)
    1960:	0e 94 db 01 	call	0x3b6	; 0x3b6 <_Z20reset_robot_velocityv>
		{
			reset_robot_velocity();
    1964:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <pressed>
			pressed = false;
    1968:	8c e3       	ldi	r24, 0x3C	; 60
    196a:	90 e0       	ldi	r25, 0x00	; 0
			searching_rpm = SEARCH_RPM;
    196c:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <searching_rpm+0x1>
    1970:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <searching_rpm>
    1974:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <searching>
			searching = false;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <searching_complete>
			searching_complete = true;
    197e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <give_shtcock>
			if(give_shtcock)
    1982:	88 23       	and	r24, r24
    1984:	71 f0       	breq	.+28     	; 0x19a2 <_Z18operate_slave_autov+0x754>
    1986:	86 e0       	ldi	r24, 0x06	; 6
    1988:	e9 db       	rcall	.-2094   	; 0x115c <_Z19send_data_to_masterh>
			{
				send_data_to_master(Give_shutcock);
    198a:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <give_shtcock>
    198e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <pressed>
				give_shtcock =	false;
    1992:	88 23       	and	r24, r24
			}
		}
		if (pressed)
    1994:	31 f0       	breq	.+12     	; 0x19a2 <_Z18operate_slave_autov+0x754>
    1996:	84 e1       	ldi	r24, 0x14	; 20
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <searching_rpm+0x1>
			searching_rpm = ADJUST_RPM;
    199e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <searching_rpm>
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <reset_auto>
	}
		
	reset_auto = true;	
    19a8:	28 96       	adiw	r28, 0x08	; 8
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
	//UART0Transmit(' ');
	//UART0TransmitData(velocity_robot[1]);
	//UART0Transmit(' ');
	//UART0TransmitData(ramp_down_off_adj);
	//UART0TransmitString("\n\r");
}
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	7f 90       	pop	r7
    19ce:	6f 90       	pop	r6
    19d0:	5f 90       	pop	r5
    19d2:	4f 90       	pop	r4
    19d4:	08 95       	ret

000019d6 <__vector_9>:
    19d6:	1f 92       	push	r1
    19d8:	0f 92       	push	r0
    19da:	0f b6       	in	r0, 0x3f	; 63
	current_location = next_location;	
	ex.Reset_Distance();
}

ISR(PCINT0_vect)
{
    19dc:	0f 92       	push	r0
    19de:	11 24       	eor	r1, r1
    19e0:	0b b6       	in	r0, 0x3b	; 59
    19e2:	0f 92       	push	r0
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
	if(moving && !searching && !final_step)
    19fc:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <moving>
    1a00:	88 23       	and	r24, r24
    1a02:	69 f0       	breq	.+26     	; 0x1a1e <__vector_9+0x48>
    1a04:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <searching>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <__vector_9+0x48>
    1a0c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <final_step>
    1a10:	81 11       	cpse	r24, r1
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <__vector_9+0x48>
	{
		reset_motors();
    1a14:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z12reset_motorsv>
		stop_flag = true;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <stop_flag>
	}
	
}
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0b be       	out	0x3b, r0	; 59
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__subsf3>:
    1a44:	50 58       	subi	r21, 0x80	; 128

00001a46 <__addsf3>:
    1a46:	bb 27       	eor	r27, r27
    1a48:	aa 27       	eor	r26, r26
    1a4a:	0e d0       	rcall	.+28     	; 0x1a68 <__addsf3x>
    1a4c:	75 c1       	rjmp	.+746    	; 0x1d38 <__fp_round>
    1a4e:	66 d1       	rcall	.+716    	; 0x1d1c <__fp_pscA>
    1a50:	30 f0       	brcs	.+12     	; 0x1a5e <__addsf3+0x18>
    1a52:	6b d1       	rcall	.+726    	; 0x1d2a <__fp_pscB>
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <__addsf3+0x18>
    1a56:	31 f4       	brne	.+12     	; 0x1a64 <__addsf3+0x1e>
    1a58:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <__addsf3+0x1a>
    1a5c:	1e f4       	brtc	.+6      	; 0x1a64 <__addsf3+0x1e>
    1a5e:	5b c1       	rjmp	.+694    	; 0x1d16 <__fp_nan>
    1a60:	0e f4       	brtc	.+2      	; 0x1a64 <__addsf3+0x1e>
    1a62:	e0 95       	com	r30
    1a64:	e7 fb       	bst	r30, 7
    1a66:	51 c1       	rjmp	.+674    	; 0x1d0a <__fp_inf>

00001a68 <__addsf3x>:
    1a68:	e9 2f       	mov	r30, r25
    1a6a:	77 d1       	rcall	.+750    	; 0x1d5a <__fp_split3>
    1a6c:	80 f3       	brcs	.-32     	; 0x1a4e <__addsf3+0x8>
    1a6e:	ba 17       	cp	r27, r26
    1a70:	62 07       	cpc	r22, r18
    1a72:	73 07       	cpc	r23, r19
    1a74:	84 07       	cpc	r24, r20
    1a76:	95 07       	cpc	r25, r21
    1a78:	18 f0       	brcs	.+6      	; 0x1a80 <__addsf3x+0x18>
    1a7a:	71 f4       	brne	.+28     	; 0x1a98 <__addsf3x+0x30>
    1a7c:	9e f5       	brtc	.+102    	; 0x1ae4 <__addsf3x+0x7c>
    1a7e:	8f c1       	rjmp	.+798    	; 0x1d9e <__fp_zero>
    1a80:	0e f4       	brtc	.+2      	; 0x1a84 <__addsf3x+0x1c>
    1a82:	e0 95       	com	r30
    1a84:	0b 2e       	mov	r0, r27
    1a86:	ba 2f       	mov	r27, r26
    1a88:	a0 2d       	mov	r26, r0
    1a8a:	0b 01       	movw	r0, r22
    1a8c:	b9 01       	movw	r22, r18
    1a8e:	90 01       	movw	r18, r0
    1a90:	0c 01       	movw	r0, r24
    1a92:	ca 01       	movw	r24, r20
    1a94:	a0 01       	movw	r20, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	ff 27       	eor	r31, r31
    1a9a:	59 1b       	sub	r21, r25
    1a9c:	99 f0       	breq	.+38     	; 0x1ac4 <__addsf3x+0x5c>
    1a9e:	59 3f       	cpi	r21, 0xF9	; 249
    1aa0:	50 f4       	brcc	.+20     	; 0x1ab6 <__addsf3x+0x4e>
    1aa2:	50 3e       	cpi	r21, 0xE0	; 224
    1aa4:	68 f1       	brcs	.+90     	; 0x1b00 <__addsf3x+0x98>
    1aa6:	1a 16       	cp	r1, r26
    1aa8:	f0 40       	sbci	r31, 0x00	; 0
    1aaa:	a2 2f       	mov	r26, r18
    1aac:	23 2f       	mov	r18, r19
    1aae:	34 2f       	mov	r19, r20
    1ab0:	44 27       	eor	r20, r20
    1ab2:	58 5f       	subi	r21, 0xF8	; 248
    1ab4:	f3 cf       	rjmp	.-26     	; 0x1a9c <__addsf3x+0x34>
    1ab6:	46 95       	lsr	r20
    1ab8:	37 95       	ror	r19
    1aba:	27 95       	ror	r18
    1abc:	a7 95       	ror	r26
    1abe:	f0 40       	sbci	r31, 0x00	; 0
    1ac0:	53 95       	inc	r21
    1ac2:	c9 f7       	brne	.-14     	; 0x1ab6 <__addsf3x+0x4e>
    1ac4:	7e f4       	brtc	.+30     	; 0x1ae4 <__addsf3x+0x7c>
    1ac6:	1f 16       	cp	r1, r31
    1ac8:	ba 0b       	sbc	r27, r26
    1aca:	62 0b       	sbc	r22, r18
    1acc:	73 0b       	sbc	r23, r19
    1ace:	84 0b       	sbc	r24, r20
    1ad0:	ba f0       	brmi	.+46     	; 0x1b00 <__addsf3x+0x98>
    1ad2:	91 50       	subi	r25, 0x01	; 1
    1ad4:	a1 f0       	breq	.+40     	; 0x1afe <__addsf3x+0x96>
    1ad6:	ff 0f       	add	r31, r31
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	66 1f       	adc	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	88 1f       	adc	r24, r24
    1ae0:	c2 f7       	brpl	.-16     	; 0x1ad2 <__addsf3x+0x6a>
    1ae2:	0e c0       	rjmp	.+28     	; 0x1b00 <__addsf3x+0x98>
    1ae4:	ba 0f       	add	r27, r26
    1ae6:	62 1f       	adc	r22, r18
    1ae8:	73 1f       	adc	r23, r19
    1aea:	84 1f       	adc	r24, r20
    1aec:	48 f4       	brcc	.+18     	; 0x1b00 <__addsf3x+0x98>
    1aee:	87 95       	ror	r24
    1af0:	77 95       	ror	r23
    1af2:	67 95       	ror	r22
    1af4:	b7 95       	ror	r27
    1af6:	f7 95       	ror	r31
    1af8:	9e 3f       	cpi	r25, 0xFE	; 254
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <__addsf3x+0x96>
    1afc:	b3 cf       	rjmp	.-154    	; 0x1a64 <__addsf3+0x1e>
    1afe:	93 95       	inc	r25
    1b00:	88 0f       	add	r24, r24
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <__addsf3x+0x9e>
    1b04:	99 27       	eor	r25, r25
    1b06:	ee 0f       	add	r30, r30
    1b08:	97 95       	ror	r25
    1b0a:	87 95       	ror	r24
    1b0c:	08 95       	ret

00001b0e <__cmpsf2>:
    1b0e:	d9 d0       	rcall	.+434    	; 0x1cc2 <__fp_cmp>
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <__cmpsf2+0x6>
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	08 95       	ret

00001b16 <__divsf3>:
    1b16:	0c d0       	rcall	.+24     	; 0x1b30 <__divsf3x>
    1b18:	0f c1       	rjmp	.+542    	; 0x1d38 <__fp_round>
    1b1a:	07 d1       	rcall	.+526    	; 0x1d2a <__fp_pscB>
    1b1c:	40 f0       	brcs	.+16     	; 0x1b2e <__divsf3+0x18>
    1b1e:	fe d0       	rcall	.+508    	; 0x1d1c <__fp_pscA>
    1b20:	30 f0       	brcs	.+12     	; 0x1b2e <__divsf3+0x18>
    1b22:	21 f4       	brne	.+8      	; 0x1b2c <__divsf3+0x16>
    1b24:	5f 3f       	cpi	r21, 0xFF	; 255
    1b26:	19 f0       	breq	.+6      	; 0x1b2e <__divsf3+0x18>
    1b28:	f0 c0       	rjmp	.+480    	; 0x1d0a <__fp_inf>
    1b2a:	51 11       	cpse	r21, r1
    1b2c:	39 c1       	rjmp	.+626    	; 0x1da0 <__fp_szero>
    1b2e:	f3 c0       	rjmp	.+486    	; 0x1d16 <__fp_nan>

00001b30 <__divsf3x>:
    1b30:	14 d1       	rcall	.+552    	; 0x1d5a <__fp_split3>
    1b32:	98 f3       	brcs	.-26     	; 0x1b1a <__divsf3+0x4>

00001b34 <__divsf3_pse>:
    1b34:	99 23       	and	r25, r25
    1b36:	c9 f3       	breq	.-14     	; 0x1b2a <__divsf3+0x14>
    1b38:	55 23       	and	r21, r21
    1b3a:	b1 f3       	breq	.-20     	; 0x1b28 <__divsf3+0x12>
    1b3c:	95 1b       	sub	r25, r21
    1b3e:	55 0b       	sbc	r21, r21
    1b40:	bb 27       	eor	r27, r27
    1b42:	aa 27       	eor	r26, r26
    1b44:	62 17       	cp	r22, r18
    1b46:	73 07       	cpc	r23, r19
    1b48:	84 07       	cpc	r24, r20
    1b4a:	38 f0       	brcs	.+14     	; 0x1b5a <__divsf3_pse+0x26>
    1b4c:	9f 5f       	subi	r25, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	44 1f       	adc	r20, r20
    1b56:	aa 1f       	adc	r26, r26
    1b58:	a9 f3       	breq	.-22     	; 0x1b44 <__divsf3_pse+0x10>
    1b5a:	33 d0       	rcall	.+102    	; 0x1bc2 <__divsf3_pse+0x8e>
    1b5c:	0e 2e       	mov	r0, r30
    1b5e:	3a f0       	brmi	.+14     	; 0x1b6e <__divsf3_pse+0x3a>
    1b60:	e0 e8       	ldi	r30, 0x80	; 128
    1b62:	30 d0       	rcall	.+96     	; 0x1bc4 <__divsf3_pse+0x90>
    1b64:	91 50       	subi	r25, 0x01	; 1
    1b66:	50 40       	sbci	r21, 0x00	; 0
    1b68:	e6 95       	lsr	r30
    1b6a:	00 1c       	adc	r0, r0
    1b6c:	ca f7       	brpl	.-14     	; 0x1b60 <__divsf3_pse+0x2c>
    1b6e:	29 d0       	rcall	.+82     	; 0x1bc2 <__divsf3_pse+0x8e>
    1b70:	fe 2f       	mov	r31, r30
    1b72:	27 d0       	rcall	.+78     	; 0x1bc2 <__divsf3_pse+0x8e>
    1b74:	66 0f       	add	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	88 1f       	adc	r24, r24
    1b7a:	bb 1f       	adc	r27, r27
    1b7c:	26 17       	cp	r18, r22
    1b7e:	37 07       	cpc	r19, r23
    1b80:	48 07       	cpc	r20, r24
    1b82:	ab 07       	cpc	r26, r27
    1b84:	b0 e8       	ldi	r27, 0x80	; 128
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <__divsf3_pse+0x56>
    1b88:	bb 0b       	sbc	r27, r27
    1b8a:	80 2d       	mov	r24, r0
    1b8c:	bf 01       	movw	r22, r30
    1b8e:	ff 27       	eor	r31, r31
    1b90:	93 58       	subi	r25, 0x83	; 131
    1b92:	5f 4f       	sbci	r21, 0xFF	; 255
    1b94:	2a f0       	brmi	.+10     	; 0x1ba0 <__divsf3_pse+0x6c>
    1b96:	9e 3f       	cpi	r25, 0xFE	; 254
    1b98:	51 05       	cpc	r21, r1
    1b9a:	68 f0       	brcs	.+26     	; 0x1bb6 <__divsf3_pse+0x82>
    1b9c:	b6 c0       	rjmp	.+364    	; 0x1d0a <__fp_inf>
    1b9e:	00 c1       	rjmp	.+512    	; 0x1da0 <__fp_szero>
    1ba0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba2:	ec f3       	brlt	.-6      	; 0x1b9e <__divsf3_pse+0x6a>
    1ba4:	98 3e       	cpi	r25, 0xE8	; 232
    1ba6:	dc f3       	brlt	.-10     	; 0x1b9e <__divsf3_pse+0x6a>
    1ba8:	86 95       	lsr	r24
    1baa:	77 95       	ror	r23
    1bac:	67 95       	ror	r22
    1bae:	b7 95       	ror	r27
    1bb0:	f7 95       	ror	r31
    1bb2:	9f 5f       	subi	r25, 0xFF	; 255
    1bb4:	c9 f7       	brne	.-14     	; 0x1ba8 <__divsf3_pse+0x74>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	91 1d       	adc	r25, r1
    1bba:	96 95       	lsr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	97 f9       	bld	r25, 7
    1bc0:	08 95       	ret
    1bc2:	e1 e0       	ldi	r30, 0x01	; 1
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	88 1f       	adc	r24, r24
    1bca:	bb 1f       	adc	r27, r27
    1bcc:	62 17       	cp	r22, r18
    1bce:	73 07       	cpc	r23, r19
    1bd0:	84 07       	cpc	r24, r20
    1bd2:	ba 07       	cpc	r27, r26
    1bd4:	20 f0       	brcs	.+8      	; 0x1bde <__divsf3_pse+0xaa>
    1bd6:	62 1b       	sub	r22, r18
    1bd8:	73 0b       	sbc	r23, r19
    1bda:	84 0b       	sbc	r24, r20
    1bdc:	ba 0b       	sbc	r27, r26
    1bde:	ee 1f       	adc	r30, r30
    1be0:	88 f7       	brcc	.-30     	; 0x1bc4 <__divsf3_pse+0x90>
    1be2:	e0 95       	com	r30
    1be4:	08 95       	ret

00001be6 <__fixsfsi>:
    1be6:	04 d0       	rcall	.+8      	; 0x1bf0 <__fixunssfsi>
    1be8:	68 94       	set
    1bea:	b1 11       	cpse	r27, r1
    1bec:	d9 c0       	rjmp	.+434    	; 0x1da0 <__fp_szero>
    1bee:	08 95       	ret

00001bf0 <__fixunssfsi>:
    1bf0:	bc d0       	rcall	.+376    	; 0x1d6a <__fp_splitA>
    1bf2:	88 f0       	brcs	.+34     	; 0x1c16 <__fixunssfsi+0x26>
    1bf4:	9f 57       	subi	r25, 0x7F	; 127
    1bf6:	90 f0       	brcs	.+36     	; 0x1c1c <__fixunssfsi+0x2c>
    1bf8:	b9 2f       	mov	r27, r25
    1bfa:	99 27       	eor	r25, r25
    1bfc:	b7 51       	subi	r27, 0x17	; 23
    1bfe:	a0 f0       	brcs	.+40     	; 0x1c28 <__fixunssfsi+0x38>
    1c00:	d1 f0       	breq	.+52     	; 0x1c36 <__fixunssfsi+0x46>
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	88 1f       	adc	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	1a f0       	brmi	.+6      	; 0x1c12 <__fixunssfsi+0x22>
    1c0c:	ba 95       	dec	r27
    1c0e:	c9 f7       	brne	.-14     	; 0x1c02 <__fixunssfsi+0x12>
    1c10:	12 c0       	rjmp	.+36     	; 0x1c36 <__fixunssfsi+0x46>
    1c12:	b1 30       	cpi	r27, 0x01	; 1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <__fixunssfsi+0x46>
    1c16:	c3 d0       	rcall	.+390    	; 0x1d9e <__fp_zero>
    1c18:	b1 e0       	ldi	r27, 0x01	; 1
    1c1a:	08 95       	ret
    1c1c:	c0 c0       	rjmp	.+384    	; 0x1d9e <__fp_zero>
    1c1e:	67 2f       	mov	r22, r23
    1c20:	78 2f       	mov	r23, r24
    1c22:	88 27       	eor	r24, r24
    1c24:	b8 5f       	subi	r27, 0xF8	; 248
    1c26:	39 f0       	breq	.+14     	; 0x1c36 <__fixunssfsi+0x46>
    1c28:	b9 3f       	cpi	r27, 0xF9	; 249
    1c2a:	cc f3       	brlt	.-14     	; 0x1c1e <__fixunssfsi+0x2e>
    1c2c:	86 95       	lsr	r24
    1c2e:	77 95       	ror	r23
    1c30:	67 95       	ror	r22
    1c32:	b3 95       	inc	r27
    1c34:	d9 f7       	brne	.-10     	; 0x1c2c <__fixunssfsi+0x3c>
    1c36:	3e f4       	brtc	.+14     	; 0x1c46 <__fixunssfsi+0x56>
    1c38:	90 95       	com	r25
    1c3a:	80 95       	com	r24
    1c3c:	70 95       	com	r23
    1c3e:	61 95       	neg	r22
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	8f 4f       	sbci	r24, 0xFF	; 255
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	08 95       	ret

00001c48 <__floatunsisf>:
    1c48:	e8 94       	clt
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <__floatsisf+0x12>

00001c4c <__floatsisf>:
    1c4c:	97 fb       	bst	r25, 7
    1c4e:	3e f4       	brtc	.+14     	; 0x1c5e <__floatsisf+0x12>
    1c50:	90 95       	com	r25
    1c52:	80 95       	com	r24
    1c54:	70 95       	com	r23
    1c56:	61 95       	neg	r22
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5e:	99 23       	and	r25, r25
    1c60:	a9 f0       	breq	.+42     	; 0x1c8c <__floatsisf+0x40>
    1c62:	f9 2f       	mov	r31, r25
    1c64:	96 e9       	ldi	r25, 0x96	; 150
    1c66:	bb 27       	eor	r27, r27
    1c68:	93 95       	inc	r25
    1c6a:	f6 95       	lsr	r31
    1c6c:	87 95       	ror	r24
    1c6e:	77 95       	ror	r23
    1c70:	67 95       	ror	r22
    1c72:	b7 95       	ror	r27
    1c74:	f1 11       	cpse	r31, r1
    1c76:	f8 cf       	rjmp	.-16     	; 0x1c68 <__floatsisf+0x1c>
    1c78:	fa f4       	brpl	.+62     	; 0x1cb8 <__floatsisf+0x6c>
    1c7a:	bb 0f       	add	r27, r27
    1c7c:	11 f4       	brne	.+4      	; 0x1c82 <__floatsisf+0x36>
    1c7e:	60 ff       	sbrs	r22, 0
    1c80:	1b c0       	rjmp	.+54     	; 0x1cb8 <__floatsisf+0x6c>
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	8f 4f       	sbci	r24, 0xFF	; 255
    1c88:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8a:	16 c0       	rjmp	.+44     	; 0x1cb8 <__floatsisf+0x6c>
    1c8c:	88 23       	and	r24, r24
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <__floatsisf+0x48>
    1c90:	96 e9       	ldi	r25, 0x96	; 150
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <__floatsisf+0x6a>
    1c94:	77 23       	and	r23, r23
    1c96:	21 f0       	breq	.+8      	; 0x1ca0 <__floatsisf+0x54>
    1c98:	9e e8       	ldi	r25, 0x8E	; 142
    1c9a:	87 2f       	mov	r24, r23
    1c9c:	76 2f       	mov	r23, r22
    1c9e:	05 c0       	rjmp	.+10     	; 0x1caa <__floatsisf+0x5e>
    1ca0:	66 23       	and	r22, r22
    1ca2:	71 f0       	breq	.+28     	; 0x1cc0 <__floatsisf+0x74>
    1ca4:	96 e8       	ldi	r25, 0x86	; 134
    1ca6:	86 2f       	mov	r24, r22
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	60 e0       	ldi	r22, 0x00	; 0
    1cac:	2a f0       	brmi	.+10     	; 0x1cb8 <__floatsisf+0x6c>
    1cae:	9a 95       	dec	r25
    1cb0:	66 0f       	add	r22, r22
    1cb2:	77 1f       	adc	r23, r23
    1cb4:	88 1f       	adc	r24, r24
    1cb6:	da f7       	brpl	.-10     	; 0x1cae <__floatsisf+0x62>
    1cb8:	88 0f       	add	r24, r24
    1cba:	96 95       	lsr	r25
    1cbc:	87 95       	ror	r24
    1cbe:	97 f9       	bld	r25, 7
    1cc0:	08 95       	ret

00001cc2 <__fp_cmp>:
    1cc2:	99 0f       	add	r25, r25
    1cc4:	00 08       	sbc	r0, r0
    1cc6:	55 0f       	add	r21, r21
    1cc8:	aa 0b       	sbc	r26, r26
    1cca:	e0 e8       	ldi	r30, 0x80	; 128
    1ccc:	fe ef       	ldi	r31, 0xFE	; 254
    1cce:	16 16       	cp	r1, r22
    1cd0:	17 06       	cpc	r1, r23
    1cd2:	e8 07       	cpc	r30, r24
    1cd4:	f9 07       	cpc	r31, r25
    1cd6:	c0 f0       	brcs	.+48     	; 0x1d08 <__fp_cmp+0x46>
    1cd8:	12 16       	cp	r1, r18
    1cda:	13 06       	cpc	r1, r19
    1cdc:	e4 07       	cpc	r30, r20
    1cde:	f5 07       	cpc	r31, r21
    1ce0:	98 f0       	brcs	.+38     	; 0x1d08 <__fp_cmp+0x46>
    1ce2:	62 1b       	sub	r22, r18
    1ce4:	73 0b       	sbc	r23, r19
    1ce6:	84 0b       	sbc	r24, r20
    1ce8:	95 0b       	sbc	r25, r21
    1cea:	39 f4       	brne	.+14     	; 0x1cfa <__fp_cmp+0x38>
    1cec:	0a 26       	eor	r0, r26
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <__fp_cmp+0x46>
    1cf0:	23 2b       	or	r18, r19
    1cf2:	24 2b       	or	r18, r20
    1cf4:	25 2b       	or	r18, r21
    1cf6:	21 f4       	brne	.+8      	; 0x1d00 <__fp_cmp+0x3e>
    1cf8:	08 95       	ret
    1cfa:	0a 26       	eor	r0, r26
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <__fp_cmp+0x3e>
    1cfe:	a1 40       	sbci	r26, 0x01	; 1
    1d00:	a6 95       	lsr	r26
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	81 1d       	adc	r24, r1
    1d06:	81 1d       	adc	r24, r1
    1d08:	08 95       	ret

00001d0a <__fp_inf>:
    1d0a:	97 f9       	bld	r25, 7
    1d0c:	9f 67       	ori	r25, 0x7F	; 127
    1d0e:	80 e8       	ldi	r24, 0x80	; 128
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	08 95       	ret

00001d16 <__fp_nan>:
    1d16:	9f ef       	ldi	r25, 0xFF	; 255
    1d18:	80 ec       	ldi	r24, 0xC0	; 192
    1d1a:	08 95       	ret

00001d1c <__fp_pscA>:
    1d1c:	00 24       	eor	r0, r0
    1d1e:	0a 94       	dec	r0
    1d20:	16 16       	cp	r1, r22
    1d22:	17 06       	cpc	r1, r23
    1d24:	18 06       	cpc	r1, r24
    1d26:	09 06       	cpc	r0, r25
    1d28:	08 95       	ret

00001d2a <__fp_pscB>:
    1d2a:	00 24       	eor	r0, r0
    1d2c:	0a 94       	dec	r0
    1d2e:	12 16       	cp	r1, r18
    1d30:	13 06       	cpc	r1, r19
    1d32:	14 06       	cpc	r1, r20
    1d34:	05 06       	cpc	r0, r21
    1d36:	08 95       	ret

00001d38 <__fp_round>:
    1d38:	09 2e       	mov	r0, r25
    1d3a:	03 94       	inc	r0
    1d3c:	00 0c       	add	r0, r0
    1d3e:	11 f4       	brne	.+4      	; 0x1d44 <__fp_round+0xc>
    1d40:	88 23       	and	r24, r24
    1d42:	52 f0       	brmi	.+20     	; 0x1d58 <__fp_round+0x20>
    1d44:	bb 0f       	add	r27, r27
    1d46:	40 f4       	brcc	.+16     	; 0x1d58 <__fp_round+0x20>
    1d48:	bf 2b       	or	r27, r31
    1d4a:	11 f4       	brne	.+4      	; 0x1d50 <__fp_round+0x18>
    1d4c:	60 ff       	sbrs	r22, 0
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <__fp_round+0x20>
    1d50:	6f 5f       	subi	r22, 0xFF	; 255
    1d52:	7f 4f       	sbci	r23, 0xFF	; 255
    1d54:	8f 4f       	sbci	r24, 0xFF	; 255
    1d56:	9f 4f       	sbci	r25, 0xFF	; 255
    1d58:	08 95       	ret

00001d5a <__fp_split3>:
    1d5a:	57 fd       	sbrc	r21, 7
    1d5c:	90 58       	subi	r25, 0x80	; 128
    1d5e:	44 0f       	add	r20, r20
    1d60:	55 1f       	adc	r21, r21
    1d62:	59 f0       	breq	.+22     	; 0x1d7a <__fp_splitA+0x10>
    1d64:	5f 3f       	cpi	r21, 0xFF	; 255
    1d66:	71 f0       	breq	.+28     	; 0x1d84 <__fp_splitA+0x1a>
    1d68:	47 95       	ror	r20

00001d6a <__fp_splitA>:
    1d6a:	88 0f       	add	r24, r24
    1d6c:	97 fb       	bst	r25, 7
    1d6e:	99 1f       	adc	r25, r25
    1d70:	61 f0       	breq	.+24     	; 0x1d8a <__fp_splitA+0x20>
    1d72:	9f 3f       	cpi	r25, 0xFF	; 255
    1d74:	79 f0       	breq	.+30     	; 0x1d94 <__fp_splitA+0x2a>
    1d76:	87 95       	ror	r24
    1d78:	08 95       	ret
    1d7a:	12 16       	cp	r1, r18
    1d7c:	13 06       	cpc	r1, r19
    1d7e:	14 06       	cpc	r1, r20
    1d80:	55 1f       	adc	r21, r21
    1d82:	f2 cf       	rjmp	.-28     	; 0x1d68 <__fp_split3+0xe>
    1d84:	46 95       	lsr	r20
    1d86:	f1 df       	rcall	.-30     	; 0x1d6a <__fp_splitA>
    1d88:	08 c0       	rjmp	.+16     	; 0x1d9a <__fp_splitA+0x30>
    1d8a:	16 16       	cp	r1, r22
    1d8c:	17 06       	cpc	r1, r23
    1d8e:	18 06       	cpc	r1, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	f1 cf       	rjmp	.-30     	; 0x1d76 <__fp_splitA+0xc>
    1d94:	86 95       	lsr	r24
    1d96:	71 05       	cpc	r23, r1
    1d98:	61 05       	cpc	r22, r1
    1d9a:	08 94       	sec
    1d9c:	08 95       	ret

00001d9e <__fp_zero>:
    1d9e:	e8 94       	clt

00001da0 <__fp_szero>:
    1da0:	bb 27       	eor	r27, r27
    1da2:	66 27       	eor	r22, r22
    1da4:	77 27       	eor	r23, r23
    1da6:	cb 01       	movw	r24, r22
    1da8:	97 f9       	bld	r25, 7
    1daa:	08 95       	ret

00001dac <__gesf2>:
    1dac:	8a df       	rcall	.-236    	; 0x1cc2 <__fp_cmp>
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <__gesf2+0x6>
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	08 95       	ret

00001db4 <__mulsf3>:
    1db4:	0b d0       	rcall	.+22     	; 0x1dcc <__mulsf3x>
    1db6:	c0 cf       	rjmp	.-128    	; 0x1d38 <__fp_round>
    1db8:	b1 df       	rcall	.-158    	; 0x1d1c <__fp_pscA>
    1dba:	28 f0       	brcs	.+10     	; 0x1dc6 <__mulsf3+0x12>
    1dbc:	b6 df       	rcall	.-148    	; 0x1d2a <__fp_pscB>
    1dbe:	18 f0       	brcs	.+6      	; 0x1dc6 <__mulsf3+0x12>
    1dc0:	95 23       	and	r25, r21
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <__mulsf3+0x12>
    1dc4:	a2 cf       	rjmp	.-188    	; 0x1d0a <__fp_inf>
    1dc6:	a7 cf       	rjmp	.-178    	; 0x1d16 <__fp_nan>
    1dc8:	11 24       	eor	r1, r1
    1dca:	ea cf       	rjmp	.-44     	; 0x1da0 <__fp_szero>

00001dcc <__mulsf3x>:
    1dcc:	c6 df       	rcall	.-116    	; 0x1d5a <__fp_split3>
    1dce:	a0 f3       	brcs	.-24     	; 0x1db8 <__mulsf3+0x4>

00001dd0 <__mulsf3_pse>:
    1dd0:	95 9f       	mul	r25, r21
    1dd2:	d1 f3       	breq	.-12     	; 0x1dc8 <__mulsf3+0x14>
    1dd4:	95 0f       	add	r25, r21
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	55 1f       	adc	r21, r21
    1dda:	62 9f       	mul	r22, r18
    1ddc:	f0 01       	movw	r30, r0
    1dde:	72 9f       	mul	r23, r18
    1de0:	bb 27       	eor	r27, r27
    1de2:	f0 0d       	add	r31, r0
    1de4:	b1 1d       	adc	r27, r1
    1de6:	63 9f       	mul	r22, r19
    1de8:	aa 27       	eor	r26, r26
    1dea:	f0 0d       	add	r31, r0
    1dec:	b1 1d       	adc	r27, r1
    1dee:	aa 1f       	adc	r26, r26
    1df0:	64 9f       	mul	r22, r20
    1df2:	66 27       	eor	r22, r22
    1df4:	b0 0d       	add	r27, r0
    1df6:	a1 1d       	adc	r26, r1
    1df8:	66 1f       	adc	r22, r22
    1dfa:	82 9f       	mul	r24, r18
    1dfc:	22 27       	eor	r18, r18
    1dfe:	b0 0d       	add	r27, r0
    1e00:	a1 1d       	adc	r26, r1
    1e02:	62 1f       	adc	r22, r18
    1e04:	73 9f       	mul	r23, r19
    1e06:	b0 0d       	add	r27, r0
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	62 1f       	adc	r22, r18
    1e0c:	83 9f       	mul	r24, r19
    1e0e:	a0 0d       	add	r26, r0
    1e10:	61 1d       	adc	r22, r1
    1e12:	22 1f       	adc	r18, r18
    1e14:	74 9f       	mul	r23, r20
    1e16:	33 27       	eor	r19, r19
    1e18:	a0 0d       	add	r26, r0
    1e1a:	61 1d       	adc	r22, r1
    1e1c:	23 1f       	adc	r18, r19
    1e1e:	84 9f       	mul	r24, r20
    1e20:	60 0d       	add	r22, r0
    1e22:	21 1d       	adc	r18, r1
    1e24:	82 2f       	mov	r24, r18
    1e26:	76 2f       	mov	r23, r22
    1e28:	6a 2f       	mov	r22, r26
    1e2a:	11 24       	eor	r1, r1
    1e2c:	9f 57       	subi	r25, 0x7F	; 127
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	8a f0       	brmi	.+34     	; 0x1e54 <__mulsf3_pse+0x84>
    1e32:	e1 f0       	breq	.+56     	; 0x1e6c <__mulsf3_pse+0x9c>
    1e34:	88 23       	and	r24, r24
    1e36:	4a f0       	brmi	.+18     	; 0x1e4a <__mulsf3_pse+0x7a>
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	66 1f       	adc	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	91 50       	subi	r25, 0x01	; 1
    1e46:	50 40       	sbci	r21, 0x00	; 0
    1e48:	a9 f7       	brne	.-22     	; 0x1e34 <__mulsf3_pse+0x64>
    1e4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	70 f0       	brcs	.+28     	; 0x1e6c <__mulsf3_pse+0x9c>
    1e50:	5c cf       	rjmp	.-328    	; 0x1d0a <__fp_inf>
    1e52:	a6 cf       	rjmp	.-180    	; 0x1da0 <__fp_szero>
    1e54:	5f 3f       	cpi	r21, 0xFF	; 255
    1e56:	ec f3       	brlt	.-6      	; 0x1e52 <__mulsf3_pse+0x82>
    1e58:	98 3e       	cpi	r25, 0xE8	; 232
    1e5a:	dc f3       	brlt	.-10     	; 0x1e52 <__mulsf3_pse+0x82>
    1e5c:	86 95       	lsr	r24
    1e5e:	77 95       	ror	r23
    1e60:	67 95       	ror	r22
    1e62:	b7 95       	ror	r27
    1e64:	f7 95       	ror	r31
    1e66:	e7 95       	ror	r30
    1e68:	9f 5f       	subi	r25, 0xFF	; 255
    1e6a:	c1 f7       	brne	.-16     	; 0x1e5c <__mulsf3_pse+0x8c>
    1e6c:	fe 2b       	or	r31, r30
    1e6e:	88 0f       	add	r24, r24
    1e70:	91 1d       	adc	r25, r1
    1e72:	96 95       	lsr	r25
    1e74:	87 95       	ror	r24
    1e76:	97 f9       	bld	r25, 7
    1e78:	08 95       	ret

00001e7a <__mulshisi3>:
    1e7a:	b7 ff       	sbrs	r27, 7
    1e7c:	0c c0       	rjmp	.+24     	; 0x1e96 <__muluhisi3>

00001e7e <__mulohisi3>:
    1e7e:	0b d0       	rcall	.+22     	; 0x1e96 <__muluhisi3>
    1e80:	82 1b       	sub	r24, r18
    1e82:	93 0b       	sbc	r25, r19
    1e84:	08 95       	ret

00001e86 <__tablejump2__>:
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	8b bf       	out	0x3b, r24	; 59
    1e8e:	07 90       	elpm	r0, Z+
    1e90:	f6 91       	elpm	r31, Z
    1e92:	e0 2d       	mov	r30, r0
    1e94:	19 94       	eijmp

00001e96 <__muluhisi3>:
    1e96:	09 d0       	rcall	.+18     	; 0x1eaa <__umulhisi3>
    1e98:	a5 9f       	mul	r26, r21
    1e9a:	90 0d       	add	r25, r0
    1e9c:	b4 9f       	mul	r27, r20
    1e9e:	90 0d       	add	r25, r0
    1ea0:	a4 9f       	mul	r26, r20
    1ea2:	80 0d       	add	r24, r0
    1ea4:	91 1d       	adc	r25, r1
    1ea6:	11 24       	eor	r1, r1
    1ea8:	08 95       	ret

00001eaa <__umulhisi3>:
    1eaa:	a2 9f       	mul	r26, r18
    1eac:	b0 01       	movw	r22, r0
    1eae:	b3 9f       	mul	r27, r19
    1eb0:	c0 01       	movw	r24, r0
    1eb2:	a3 9f       	mul	r26, r19
    1eb4:	70 0d       	add	r23, r0
    1eb6:	81 1d       	adc	r24, r1
    1eb8:	11 24       	eor	r1, r1
    1eba:	91 1d       	adc	r25, r1
    1ebc:	b2 9f       	mul	r27, r18
    1ebe:	70 0d       	add	r23, r0
    1ec0:	81 1d       	adc	r24, r1
    1ec2:	11 24       	eor	r1, r1
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	08 95       	ret

00001ec8 <_exit>:
    1ec8:	f8 94       	cli

00001eca <__stop_program>:
    1eca:	ff cf       	rjmp	.-2      	; 0x1eca <__stop_program>

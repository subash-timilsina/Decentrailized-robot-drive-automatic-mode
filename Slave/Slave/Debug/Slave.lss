
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00002010  000020a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002010  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f2  0080020c  0080020c  000020b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036d2  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001812  00000000  00000000  00005aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c0  00000000  00000000  000072b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  00008b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014ae  00000000  00000000  000093ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001623  00000000  00000000  0000a89a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000bebd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	17 c2       	rjmp	.+1070   	; 0x434 <__vector_1>
       6:	00 00       	nop
       8:	59 c2       	rjmp	.+1202   	; 0x4bc <__vector_2>
       a:	00 00       	nop
       c:	8e c2       	rjmp	.+1308   	; 0x52a <__vector_3>
       e:	00 00       	nop
      10:	c3 c2       	rjmp	.+1414   	; 0x598 <__vector_4>
      12:	00 00       	nop
      14:	2f c3       	rjmp	.+1630   	; 0x674 <__vector_5>
      16:	00 00       	nop
      18:	f6 c2       	rjmp	.+1516   	; 0x606 <__vector_6>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_9>
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	84 c0       	rjmp	.+264    	; 0x146 <__bad_interrupt>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	99 c6       	rjmp	.+3378   	; 0xd98 <__vector_25>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	93 c6       	rjmp	.+3366   	; 0xdb8 <__vector_36>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c3       	rjmp	.+1592   	; 0x6e2 <__vector_42>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	85 c6       	rjmp	.+3338   	; 0xdd8 <__vector_51>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	8f c6       	rjmp	.+3358   	; 0xdf8 <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	c0 03       	fmuls	r20, r16

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
      f6:	12 e0       	ldi	r17, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	e0 e1       	ldi	r30, 0x10	; 16
      fe:	f0 e2       	ldi	r31, 0x20	; 32
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0b bf       	out	0x3b, r16	; 59
     104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
     106:	07 90       	elpm	r0, Z+
     108:	0d 92       	st	X+, r0
     10a:	ac 30       	cpi	r26, 0x0C	; 12
     10c:	b1 07       	cpc	r27, r17
     10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	ac e0       	ldi	r26, 0x0C	; 12
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ae 3f       	cpi	r26, 0xFE	; 254
     11c:	b2 07       	cpc	r27, r18
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	c3 e7       	ldi	r28, 0x73	; 115
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	00 e0       	ldi	r16, 0x00	; 0
     128:	06 c0       	rjmp	.+12     	; 0x136 <__do_global_ctors+0x16>
     12a:	21 97       	sbiw	r28, 0x01	; 1
     12c:	01 09       	sbc	r16, r1
     12e:	80 2f       	mov	r24, r16
     130:	fe 01       	movw	r30, r28
     132:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <__tablejump2__>
     136:	c2 37       	cpi	r28, 0x72	; 114
     138:	d1 07       	cpc	r29, r17
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	08 07       	cpc	r16, r24
     13e:	a9 f7       	brne	.-22     	; 0x12a <__do_global_ctors+0xa>
     140:	f7 d3       	rcall	.+2030   	; 0x930 <main>
     142:	0c 94 06 10 	jmp	0x200c	; 0x200c <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <_Z10drive_initv>:
 
 
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
	 pidflag = false; 
     154:	10 92 bd 02 	sts	0x02BD, r1
	 for(id=0;id<4;id++)
     158:	10 92 b9 02 	sts	0x02B9, r1
     15c:	10 92 b8 02 	sts	0x02B8, r1
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
	 {
		 velocity_motor[id] = 0;
     164:	9c 01       	movw	r18, r24
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	f9 01       	movw	r30, r18
     16c:	e2 55       	subi	r30, 0x52	; 82
     16e:	fd 4f       	sbci	r31, 0xFD	; 253
     170:	11 82       	std	Z+1, r1	; 0x01
     172:	10 82       	st	Z, r1
		 velocity_robot[id] = 0;
     174:	f9 01       	movw	r30, r18
     176:	ea 55       	subi	r30, 0x5A	; 90
     178:	fd 4f       	sbci	r31, 0xFD	; 253
     17a:	11 82       	std	Z+1, r1	; 0x01
     17c:	10 82       	st	Z, r1
		 m[id].Initialise(id+1);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	68 0f       	add	r22, r24
     182:	86 56       	subi	r24, 0x66	; 102
     184:	9d 4f       	sbci	r25, 0xFD	; 253
     186:	40 d5       	rcall	.+2688   	; 0xc08 <_ZN5Motor10InitialiseEh>
		 e[id].Initialise(id+1);
     188:	80 91 b8 02 	lds	r24, 0x02B8
     18c:	90 91 b9 02 	lds	r25, 0x02B9
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	68 0f       	add	r22, r24
     194:	9c 01       	movw	r18, r24
     196:	22 0f       	add	r18, r18
     198:	33 1f       	adc	r19, r19
     19a:	22 0f       	add	r18, r18
     19c:	33 1f       	adc	r19, r19
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	8a 58       	subi	r24, 0x8A	; 138
     1a8:	9d 4f       	sbci	r25, 0xFD	; 253
     1aa:	72 d3       	rcall	.+1764   	; 0x890 <_ZN7Encoder10InitialiseEh>
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
     1ac:	80 91 b8 02 	lds	r24, 0x02B8
     1b0:	90 91 b9 02 	lds	r25, 0x02B9
     1b4:	9c 01       	movw	r18, r24
     1b6:	22 0f       	add	r18, r18
     1b8:	33 1f       	adc	r19, r19
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	0f 2e       	mov	r0, r31
     1cc:	f5 e8       	ldi	r31, 0x85	; 133
     1ce:	cf 2e       	mov	r12, r31
     1d0:	fb ee       	ldi	r31, 0xEB	; 235
     1d2:	df 2e       	mov	r13, r31
     1d4:	f1 e5       	ldi	r31, 0x51	; 81
     1d6:	ef 2e       	mov	r14, r31
     1d8:	ff e3       	ldi	r31, 0x3F	; 63
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	00 e0       	ldi	r16, 0x00	; 0
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	98 01       	movw	r18, r16
     1e4:	4c e5       	ldi	r20, 0x5C	; 92
     1e6:	5f e8       	ldi	r21, 0x8F	; 143
     1e8:	6a e1       	ldi	r22, 0x1A	; 26
     1ea:	70 e4       	ldi	r23, 0x40	; 64
     1ec:	84 5f       	subi	r24, 0xF4	; 244
     1ee:	9d 4f       	sbci	r25, 0xFD	; 253
     1f0:	19 d5       	rcall	.+2610   	; 0xc24 <_ZN3PID7Set_PidEfff>
 /**************************Initialise the drive components************************/
 
 void drive_init()
 {
	 pidflag = false; 
	 for(id=0;id<4;id++)
     1f2:	80 91 b8 02 	lds	r24, 0x02B8
     1f6:	90 91 b9 02 	lds	r25, 0x02B9
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	90 93 b9 02 	sts	0x02B9, r25
     200:	80 93 b8 02 	sts	0x02B8, r24
     204:	84 30       	cpi	r24, 0x04	; 4
     206:	91 05       	cpc	r25, r1
     208:	0c f4       	brge	.+2      	; 0x20c <_Z10drive_initv+0xc4>
     20a:	ac cf       	rjmp	.-168    	; 0x164 <_Z10drive_initv+0x1c>
		 velocity_robot[id] = 0;
		 m[id].Initialise(id+1);
		 e[id].Initialise(id+1);
		 p[id].Set_Pid(2.415,0,0.82);	//2.415 , 0 , 0.82
	 }
	 ex.Initialise(1);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	81 e7       	ldi	r24, 0x71	; 113
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	7d d3       	rcall	.+1786   	; 0x90e <_ZN12FreeWheelEnc10InitialiseEh>
	 ey.Initialise(2);
     214:	62 e0       	ldi	r22, 0x02	; 2
     216:	8c e6       	ldi	r24, 0x6C	; 108
     218:	92 e0       	ldi	r25, 0x02	; 2
     21a:	79 d3       	rcall	.+1778   	; 0x90e <_ZN12FreeWheelEnc10InitialiseEh>
	 counter_motor = 0;
     21c:	10 92 bb 02 	sts	0x02BB, r1
     220:	10 92 ba 02 	sts	0x02BA, r1
	 count_the_motor = false;
     224:	10 92 bc 02 	sts	0x02BC, r1
 }
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	08 95       	ret

00000236 <_Z24calculate_wheel_velocityv>:
 
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
     236:	2f 92       	push	r2
     238:	3f 92       	push	r3
     23a:	5f 92       	push	r5
     23c:	6f 92       	push	r6
     23e:	8f 92       	push	r8
     240:	9f 92       	push	r9
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	ce ea       	ldi	r28, 0xAE	; 174
     256:	d2 e0       	ldi	r29, 0x02	; 2
     258:	0f 2e       	mov	r0, r31
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	cf 2e       	mov	r12, r31
     25e:	f2 e0       	ldi	r31, 0x02	; 2
     260:	df 2e       	mov	r13, r31
     262:	f0 2d       	mov	r31, r0
     264:	0f 2e       	mov	r0, r31
     266:	f6 eb       	ldi	r31, 0xB6	; 182
     268:	2f 2e       	mov	r2, r31
     26a:	f2 e0       	ldi	r31, 0x02	; 2
     26c:	3f 2e       	mov	r3, r31
     26e:	f0 2d       	mov	r31, r0
	  for(id=0;id<4;id++)
     270:	7e 01       	movw	r14, r28
     272:	0f 2e       	mov	r0, r31
     274:	f6 ea       	ldi	r31, 0xA6	; 166
     276:	8f 2e       	mov	r8, r31
     278:	f2 e0       	ldi	r31, 0x02	; 2
     27a:	9f 2e       	mov	r9, r31
     27c:	f0 2d       	mov	r31, r0
     27e:	6c ea       	ldi	r22, 0xAC	; 172
     280:	72 e0       	ldi	r23, 0x02	; 2
     282:	51 2c       	mov	r5, r1
     284:	61 2c       	mov	r6, r1
     286:	57 01       	movw	r10, r14
     288:	f4 01       	movw	r30, r8
     28a:	d6 01       	movw	r26, r12
     28c:	85 2d       	mov	r24, r5
     28e:	96 2d       	mov	r25, r6
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
		  {
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
     290:	41 91       	ld	r20, Z+
     292:	51 91       	ld	r21, Z+
     294:	1d 91       	ld	r17, X+
     296:	14 03       	mulsu	r17, r20
     298:	90 01       	movw	r18, r0
     29a:	15 9f       	mul	r17, r21
     29c:	30 0d       	add	r19, r0
     29e:	11 24       	eor	r1, r1
     2a0:	82 0f       	add	r24, r18
     2a2:	93 1f       	adc	r25, r19
  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
	  {
		  velocity_motor[id] = 0;
		  for(jd=0;jd<3;jd++)
     2a4:	e6 17       	cp	r30, r22
     2a6:	f7 07       	cpc	r31, r23
     2a8:	99 f7       	brne	.-26     	; 0x290 <_Z24calculate_wheel_velocityv+0x5a>
     2aa:	f5 01       	movw	r30, r10
     2ac:	91 83       	std	Z+1, r25	; 0x01
     2ae:	80 83       	st	Z, r24
     2b0:	f2 e0       	ldi	r31, 0x02	; 2
     2b2:	ef 0e       	add	r14, r31
     2b4:	f1 1c       	adc	r15, r1
     2b6:	83 e0       	ldi	r24, 0x03	; 3
     2b8:	c8 0e       	add	r12, r24
     2ba:	d1 1c       	adc	r13, r1
 
 /***********************Calculation of inverse kinematics****************************************/

  void calculate_wheel_velocity()
  {
	  for(id=0;id<4;id++)
     2bc:	e2 14       	cp	r14, r2
     2be:	f3 04       	cpc	r15, r3
     2c0:	11 f7       	brne	.-60     	; 0x286 <_Z24calculate_wheel_velocityv+0x50>
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	90 93 b7 02 	sts	0x02B7, r25
     2ca:	80 93 b6 02 	sts	0x02B6, r24
     2ce:	0f 2e       	mov	r0, r31
     2d0:	fe e9       	ldi	r31, 0x9E	; 158
     2d2:	cf 2e       	mov	r12, r31
     2d4:	f2 e0       	ldi	r31, 0x02	; 2
     2d6:	df 2e       	mov	r13, r31
     2d8:	f0 2d       	mov	r31, r0
     2da:	0f 2e       	mov	r0, r31
     2dc:	fc e0       	ldi	r31, 0x0C	; 12
     2de:	ef 2e       	mov	r14, r31
     2e0:	f2 e0       	ldi	r31, 0x02	; 2
     2e2:	ff 2e       	mov	r15, r31
     2e4:	f0 2d       	mov	r31, r0
		  
	  }
	  
	  for(id=0;id<4;id++)
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
     2e6:	69 91       	ld	r22, Y+
     2e8:	79 91       	ld	r23, Y+
     2ea:	07 2e       	mov	r0, r23
     2ec:	00 0c       	add	r0, r0
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	4b ee       	ldi	r20, 0xEB	; 235
     2fc:	53 e4       	ldi	r21, 0x43	; 67
     2fe:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__divsf3>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	4a ea       	ldi	r20, 0xAA	; 170
     308:	52 e4       	ldi	r21, 0x42	; 66
     30a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__mulsf3>
     30e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fixsfsi>
     312:	f6 01       	movw	r30, r12
     314:	61 93       	st	Z+, r22
     316:	71 93       	st	Z+, r23
     318:	6f 01       	movw	r12, r30
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     31a:	f7 01       	movw	r30, r14
     31c:	75 87       	std	Z+13, r23	; 0x0d
     31e:	64 87       	std	Z+12, r22	; 0x0c
     320:	f8 e1       	ldi	r31, 0x18	; 24
     322:	ef 0e       	add	r14, r31
     324:	f1 1c       	adc	r15, r1
			  velocity_motor[id] += velocity_robot[jd] * coupling_matrix[id][jd];
		  }
		  
	  }
	  
	  for(id=0;id<4;id++)
     326:	c2 15       	cp	r28, r2
     328:	d3 05       	cpc	r29, r3
     32a:	e9 f6       	brne	.-70     	; 0x2e6 <_Z24calculate_wheel_velocityv+0xb0>
     32c:	84 e0       	ldi	r24, 0x04	; 4
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	90 93 b9 02 	sts	0x02B9, r25
     334:	80 93 b8 02 	sts	0x02B8, r24
	  {
		  ocr_motor[id] = (velocity_motor[id]/MAX_RPM)*RPM_COUNT;
		  p[id].Set_SP(ocr_motor[id]);
	  }
	  
  }
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	bf 90       	pop	r11
     348:	af 90       	pop	r10
     34a:	9f 90       	pop	r9
     34c:	8f 90       	pop	r8
     34e:	6f 90       	pop	r6
     350:	5f 90       	pop	r5
     352:	3f 90       	pop	r3
     354:	2f 90       	pop	r2
     356:	08 95       	ret

00000358 <_Z21update_wheel_velocityv>:
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
     358:	80 91 bd 02 	lds	r24, 0x02BD
     35c:	88 23       	and	r24, r24
     35e:	c9 f1       	breq	.+114    	; 0x3d2 <_Z21update_wheel_velocityv+0x7a>
		{
			for(id = 0; id<4 ; id++)
     360:	10 92 b9 02 	sts	0x02B9, r1
     364:	10 92 b8 02 	sts	0x02B8, r1
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
	public:
	Encoder():speed(0),pprcount(0){};
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
     36c:	fc 01       	movw	r30, r24
     36e:	ee 0f       	add	r30, r30
     370:	ff 1f       	adc	r31, r31
     372:	ee 0f       	add	r30, r30
     374:	ff 1f       	adc	r31, r31
     376:	ee 0f       	add	r30, r30
     378:	ff 1f       	adc	r31, r31
     37a:	e8 0f       	add	r30, r24
     37c:	f9 1f       	adc	r31, r25
     37e:	ea 58       	subi	r30, 0x8A	; 138
     380:	fd 4f       	sbci	r31, 0xFD	; 253
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
     382:	61 81       	ldd	r22, Z+1	; 0x01
     384:	72 81       	ldd	r23, Z+2	; 0x02
     386:	9c 01       	movw	r18, r24
     388:	22 0f       	add	r18, r18
     38a:	33 1f       	adc	r19, r19
     38c:	82 0f       	add	r24, r18
     38e:	93 1f       	adc	r25, r19
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	84 5f       	subi	r24, 0xF4	; 244
     39e:	9d 4f       	sbci	r25, 0xFD	; 253
     3a0:	5b d4       	rcall	.+2230   	; 0xc58 <_ZN3PID7ComputeEi>
     3a2:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fixsfsi>
     3a6:	20 91 b8 02 	lds	r18, 0x02B8
     3aa:	30 91 b9 02 	lds	r19, 0x02B9
     3ae:	c9 01       	movw	r24, r18
     3b0:	86 56       	subi	r24, 0x66	; 102
     3b2:	9d 4f       	sbci	r25, 0xFD	; 253
     3b4:	ee d3       	rcall	.+2012   	; 0xb92 <_ZN5Motor11SetOcrValueEi>
	/*******************************************Updating the calculated velocity in motors********************************************/
  void update_wheel_velocity()
  {  
		if(pidflag)
		{
			for(id = 0; id<4 ; id++)
     3b6:	80 91 b8 02 	lds	r24, 0x02B8
     3ba:	90 91 b9 02 	lds	r25, 0x02B9
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	90 93 b9 02 	sts	0x02B9, r25
     3c4:	80 93 b8 02 	sts	0x02B8, r24
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	91 05       	cpc	r25, r1
     3cc:	7c f2       	brlt	.-98     	; 0x36c <_Z21update_wheel_velocityv+0x14>
			{
				m[id].SetOcrValue(p[id].Compute(e[id].Get_Speed()));
			}
			pidflag = false;
     3ce:	10 92 bd 02 	sts	0x02BD, r1
     3d2:	08 95       	ret

000003d4 <_Z20reset_robot_velocityv>:

void reset_robot_velocity()
{
	for(id = 0; id<4 ; id++)
	{
		 velocity_robot[id] = 0;	//reset the robot velocities
     3d4:	e6 ea       	ldi	r30, 0xA6	; 166
     3d6:	f2 e0       	ldi	r31, 0x02	; 2
     3d8:	11 82       	std	Z+1, r1	; 0x01
     3da:	10 82       	st	Z, r1
     3dc:	13 82       	std	Z+3, r1	; 0x03
     3de:	12 82       	std	Z+2, r1	; 0x02
     3e0:	15 82       	std	Z+5, r1	; 0x05
     3e2:	14 82       	std	Z+4, r1	; 0x04
     3e4:	17 82       	std	Z+7, r1	; 0x07
     3e6:	16 82       	std	Z+6, r1	; 0x06
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	90 93 b9 02 	sts	0x02B9, r25
     3f0:	80 93 b8 02 	sts	0x02B8, r24
     3f4:	08 95       	ret

000003f6 <_Z12reset_motorsv>:
	}
}

void reset_motors()
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	ae ea       	ldi	r26, 0xAE	; 174
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	c6 ea       	ldi	r28, 0xA6	; 166
     400:	d2 e0       	ldi	r29, 0x02	; 2
     402:	ec e0       	ldi	r30, 0x0C	; 12
     404:	f2 e0       	ldi	r31, 0x02	; 2
     406:	86 eb       	ldi	r24, 0xB6	; 182
     408:	92 e0       	ldi	r25, 0x02	; 2
	for(id = 0; id<4 ; id++)
	{
		velocity_motor[id] = 0;
     40a:	1d 92       	st	X+, r1
     40c:	1d 92       	st	X+, r1
		velocity_robot[id] = 0;
     40e:	19 92       	st	Y+, r1
     410:	19 92       	st	Y+, r1
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
		inline void  reset_output(){cv = 0;};
     412:	14 8a       	std	Z+20, r1	; 0x14
     414:	15 8a       	std	Z+21, r1	; 0x15
     416:	16 8a       	std	Z+22, r1	; 0x16
     418:	17 8a       	std	Z+23, r1	; 0x17
     41a:	78 96       	adiw	r30, 0x18	; 24
	}
}

void reset_motors()
{
	for(id = 0; id<4 ; id++)
     41c:	a8 17       	cp	r26, r24
     41e:	b9 07       	cpc	r27, r25
     420:	a1 f7       	brne	.-24     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 b9 02 	sts	0x02B9, r25
     42a:	80 93 b8 02 	sts	0x02B8, r24
	{
		velocity_motor[id] = 0;
		velocity_robot[id] = 0;
		p[id].reset_output();
	}
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <__vector_1>:
/*********************************************************************Motors encoders interrupts*****************************************************************/

// motor orientation is alternate so channel a and channel b in two sides are different.

ISR(INT_VECT1)
{
     434:	1f 92       	push	r1
     436:	0f 92       	push	r0
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	0f 92       	push	r0
     43c:	11 24       	eor	r1, r1
     43e:	0b b6       	in	r0, 0x3b	; 59
     440:	0f 92       	push	r0
     442:	8f 93       	push	r24
     444:	9f 93       	push	r25
     446:	af 93       	push	r26
     448:	bf 93       	push	r27
     44a:	ef 93       	push	r30
     44c:	ff 93       	push	r31
	if(bit_is_clear(ENCODER1_CHAPORTPIN,ENCODER1_CHBPIN))		
     44e:	00 99       	sbic	0x00, 0	; 0
     450:	0e c0       	rjmp	.+28     	; 0x46e <__vector_1+0x3a>
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     452:	e6 e7       	ldi	r30, 0x76	; 118
     454:	f2 e0       	ldi	r31, 0x02	; 2
     456:	85 81       	ldd	r24, Z+5	; 0x05
     458:	96 81       	ldd	r25, Z+6	; 0x06
     45a:	a7 81       	ldd	r26, Z+7	; 0x07
     45c:	b0 85       	ldd	r27, Z+8	; 0x08
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	a1 1d       	adc	r26, r1
     462:	b1 1d       	adc	r27, r1
     464:	85 83       	std	Z+5, r24	; 0x05
     466:	96 83       	std	Z+6, r25	; 0x06
     468:	a7 83       	std	Z+7, r26	; 0x07
     46a:	b0 87       	std	Z+8, r27	; 0x08
     46c:	0d c0       	rjmp	.+26     	; 0x488 <__vector_1+0x54>
	inline void dcrCount(){pprcount--;};
     46e:	e6 e7       	ldi	r30, 0x76	; 118
     470:	f2 e0       	ldi	r31, 0x02	; 2
     472:	85 81       	ldd	r24, Z+5	; 0x05
     474:	96 81       	ldd	r25, Z+6	; 0x06
     476:	a7 81       	ldd	r26, Z+7	; 0x07
     478:	b0 85       	ldd	r27, Z+8	; 0x08
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	a1 09       	sbc	r26, r1
     47e:	b1 09       	sbc	r27, r1
     480:	85 83       	std	Z+5, r24	; 0x05
     482:	96 83       	std	Z+6, r25	; 0x06
     484:	a7 83       	std	Z+7, r26	; 0x07
     486:	b0 87       	std	Z+8, r27	; 0x08
	{
		e[0].incCount();
	}
	else
		e[0].dcrCount();
	if(count_the_motor)
     488:	80 91 bc 02 	lds	r24, 0x02BC
     48c:	88 23       	and	r24, r24
     48e:	49 f0       	breq	.+18     	; 0x4a2 <__vector_1+0x6e>
		counter_motor++;
     490:	80 91 ba 02 	lds	r24, 0x02BA
     494:	90 91 bb 02 	lds	r25, 0x02BB
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	90 93 bb 02 	sts	0x02BB, r25
     49e:	80 93 ba 02 	sts	0x02BA, r24
}
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	0f 90       	pop	r0
     4b0:	0b be       	out	0x3b, r0	; 59
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_2>:



ISR(INT_VECT2)
{
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	0b b6       	in	r0, 0x3b	; 59
     4c8:	0f 92       	push	r0
     4ca:	8f 93       	push	r24
     4cc:	9f 93       	push	r25
     4ce:	af 93       	push	r26
     4d0:	bf 93       	push	r27
     4d2:	ef 93       	push	r30
     4d4:	ff 93       	push	r31
	if(bit_is_clear(ENCODER2_CHAPORTPIN,ENCODER2_CHBPIN))		
     4d6:	02 99       	sbic	0x00, 2	; 0
     4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <__vector_2+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     4da:	e6 e7       	ldi	r30, 0x76	; 118
     4dc:	f2 e0       	ldi	r31, 0x02	; 2
     4de:	86 85       	ldd	r24, Z+14	; 0x0e
     4e0:	97 85       	ldd	r25, Z+15	; 0x0f
     4e2:	a0 89       	ldd	r26, Z+16	; 0x10
     4e4:	b1 89       	ldd	r27, Z+17	; 0x11
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	a1 1d       	adc	r26, r1
     4ea:	b1 1d       	adc	r27, r1
     4ec:	86 87       	std	Z+14, r24	; 0x0e
     4ee:	97 87       	std	Z+15, r25	; 0x0f
     4f0:	a0 8b       	std	Z+16, r26	; 0x10
     4f2:	b1 8b       	std	Z+17, r27	; 0x11
     4f4:	0d c0       	rjmp	.+26     	; 0x510 <__vector_2+0x54>
	inline void dcrCount(){pprcount--;};
     4f6:	e6 e7       	ldi	r30, 0x76	; 118
     4f8:	f2 e0       	ldi	r31, 0x02	; 2
     4fa:	86 85       	ldd	r24, Z+14	; 0x0e
     4fc:	97 85       	ldd	r25, Z+15	; 0x0f
     4fe:	a0 89       	ldd	r26, Z+16	; 0x10
     500:	b1 89       	ldd	r27, Z+17	; 0x11
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	a1 09       	sbc	r26, r1
     506:	b1 09       	sbc	r27, r1
     508:	86 87       	std	Z+14, r24	; 0x0e
     50a:	97 87       	std	Z+15, r25	; 0x0f
     50c:	a0 8b       	std	Z+16, r26	; 0x10
     50e:	b1 8b       	std	Z+17, r27	; 0x11
		e[1].incCount();
	}
	else
		e[1].dcrCount();
	
}
     510:	ff 91       	pop	r31
     512:	ef 91       	pop	r30
     514:	bf 91       	pop	r27
     516:	af 91       	pop	r26
     518:	9f 91       	pop	r25
     51a:	8f 91       	pop	r24
     51c:	0f 90       	pop	r0
     51e:	0b be       	out	0x3b, r0	; 59
     520:	0f 90       	pop	r0
     522:	0f be       	out	0x3f, r0	; 63
     524:	0f 90       	pop	r0
     526:	1f 90       	pop	r1
     528:	18 95       	reti

0000052a <__vector_3>:
ISR(INT_VECT3)
{
     52a:	1f 92       	push	r1
     52c:	0f 92       	push	r0
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	0f 92       	push	r0
     532:	11 24       	eor	r1, r1
     534:	0b b6       	in	r0, 0x3b	; 59
     536:	0f 92       	push	r0
     538:	8f 93       	push	r24
     53a:	9f 93       	push	r25
     53c:	af 93       	push	r26
     53e:	bf 93       	push	r27
     540:	ef 93       	push	r30
     542:	ff 93       	push	r31
	if(bit_is_set(ENCODER3_CHAPORTPIN,ENCODER3_CHBPIN))		
     544:	04 9b       	sbis	0x00, 4	; 0
     546:	0e c0       	rjmp	.+28     	; 0x564 <__vector_3+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     548:	e6 e7       	ldi	r30, 0x76	; 118
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	87 89       	ldd	r24, Z+23	; 0x17
     54e:	90 8d       	ldd	r25, Z+24	; 0x18
     550:	a1 8d       	ldd	r26, Z+25	; 0x19
     552:	b2 8d       	ldd	r27, Z+26	; 0x1a
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	a1 1d       	adc	r26, r1
     558:	b1 1d       	adc	r27, r1
     55a:	87 8b       	std	Z+23, r24	; 0x17
     55c:	90 8f       	std	Z+24, r25	; 0x18
     55e:	a1 8f       	std	Z+25, r26	; 0x19
     560:	b2 8f       	std	Z+26, r27	; 0x1a
     562:	0d c0       	rjmp	.+26     	; 0x57e <__vector_3+0x54>
	inline void dcrCount(){pprcount--;};
     564:	e6 e7       	ldi	r30, 0x76	; 118
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	87 89       	ldd	r24, Z+23	; 0x17
     56a:	90 8d       	ldd	r25, Z+24	; 0x18
     56c:	a1 8d       	ldd	r26, Z+25	; 0x19
     56e:	b2 8d       	ldd	r27, Z+26	; 0x1a
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	a1 09       	sbc	r26, r1
     574:	b1 09       	sbc	r27, r1
     576:	87 8b       	std	Z+23, r24	; 0x17
     578:	90 8f       	std	Z+24, r25	; 0x18
     57a:	a1 8f       	std	Z+25, r26	; 0x19
     57c:	b2 8f       	std	Z+26, r27	; 0x1a
	{
		e[2].incCount();
	}
	else
		e[2].dcrCount();
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	0f 90       	pop	r0
     58c:	0b be       	out	0x3b, r0	; 59
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <__vector_4>:

ISR(INT_VECT4)
{
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	0b b6       	in	r0, 0x3b	; 59
     5a4:	0f 92       	push	r0
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
	if(bit_is_set(ENCODER4_CHAPORTPIN,ENCODER4_CHBPIN))		
     5b2:	06 9b       	sbis	0x00, 6	; 0
     5b4:	0e c0       	rjmp	.+28     	; 0x5d2 <__vector_4+0x3a>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     5b6:	e6 e7       	ldi	r30, 0x76	; 118
     5b8:	f2 e0       	ldi	r31, 0x02	; 2
     5ba:	80 a1       	ldd	r24, Z+32	; 0x20
     5bc:	91 a1       	ldd	r25, Z+33	; 0x21
     5be:	a2 a1       	ldd	r26, Z+34	; 0x22
     5c0:	b3 a1       	ldd	r27, Z+35	; 0x23
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	a1 1d       	adc	r26, r1
     5c6:	b1 1d       	adc	r27, r1
     5c8:	80 a3       	std	Z+32, r24	; 0x20
     5ca:	91 a3       	std	Z+33, r25	; 0x21
     5cc:	a2 a3       	std	Z+34, r26	; 0x22
     5ce:	b3 a3       	std	Z+35, r27	; 0x23
     5d0:	0d c0       	rjmp	.+26     	; 0x5ec <__vector_4+0x54>
	inline void dcrCount(){pprcount--;};
     5d2:	e6 e7       	ldi	r30, 0x76	; 118
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	80 a1       	ldd	r24, Z+32	; 0x20
     5d8:	91 a1       	ldd	r25, Z+33	; 0x21
     5da:	a2 a1       	ldd	r26, Z+34	; 0x22
     5dc:	b3 a1       	ldd	r27, Z+35	; 0x23
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	a1 09       	sbc	r26, r1
     5e2:	b1 09       	sbc	r27, r1
     5e4:	80 a3       	std	Z+32, r24	; 0x20
     5e6:	91 a3       	std	Z+33, r25	; 0x21
     5e8:	a2 a3       	std	Z+34, r26	; 0x22
     5ea:	b3 a3       	std	Z+35, r27	; 0x23
	{
		e[3].incCount();
	}
	else
		e[3].dcrCount();
}
     5ec:	ff 91       	pop	r31
     5ee:	ef 91       	pop	r30
     5f0:	bf 91       	pop	r27
     5f2:	af 91       	pop	r26
     5f4:	9f 91       	pop	r25
     5f6:	8f 91       	pop	r24
     5f8:	0f 90       	pop	r0
     5fa:	0b be       	out	0x3b, r0	; 59
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_6>:

/*******************************************************************************Free Wheel Encoders Interrupts****************************************************/

ISR(INT_VECTX)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
	if(bit_is_clear(ENCODERX_CHAPORTPIN,ENCODERX_CHBPIN))
     620:	37 99       	sbic	0x06, 7	; 6
     622:	0e c0       	rjmp	.+28     	; 0x640 <__vector_6+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     624:	e1 e7       	ldi	r30, 0x71	; 113
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	81 81       	ldd	r24, Z+1	; 0x01
     62a:	92 81       	ldd	r25, Z+2	; 0x02
     62c:	a3 81       	ldd	r26, Z+3	; 0x03
     62e:	b4 81       	ldd	r27, Z+4	; 0x04
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	a1 1d       	adc	r26, r1
     634:	b1 1d       	adc	r27, r1
     636:	81 83       	std	Z+1, r24	; 0x01
     638:	92 83       	std	Z+2, r25	; 0x02
     63a:	a3 83       	std	Z+3, r26	; 0x03
     63c:	b4 83       	std	Z+4, r27	; 0x04
     63e:	0d c0       	rjmp	.+26     	; 0x65a <__vector_6+0x54>
		inline void dcrCount(){encdistance--;};
     640:	e1 e7       	ldi	r30, 0x71	; 113
     642:	f2 e0       	ldi	r31, 0x02	; 2
     644:	81 81       	ldd	r24, Z+1	; 0x01
     646:	92 81       	ldd	r25, Z+2	; 0x02
     648:	a3 81       	ldd	r26, Z+3	; 0x03
     64a:	b4 81       	ldd	r27, Z+4	; 0x04
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	a1 09       	sbc	r26, r1
     650:	b1 09       	sbc	r27, r1
     652:	81 83       	std	Z+1, r24	; 0x01
     654:	92 83       	std	Z+2, r25	; 0x02
     656:	a3 83       	std	Z+3, r26	; 0x03
     658:	b4 83       	std	Z+4, r27	; 0x04
	{
		ex.incCount();
	}
	else
		ex.dcrCount();
}
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	0f 90       	pop	r0
     668:	0b be       	out	0x3b, r0	; 59
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_5>:


ISR(INT_VECTY)
{
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	0b b6       	in	r0, 0x3b	; 59
     680:	0f 92       	push	r0
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
	if(bit_is_clear(ENCODERY_CHAPORTPIN,ENCODERY_CHBPIN))
     68e:	35 99       	sbic	0x06, 5	; 6
     690:	0e c0       	rjmp	.+28     	; 0x6ae <__vector_5+0x3a>
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
     692:	ec e6       	ldi	r30, 0x6C	; 108
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	81 81       	ldd	r24, Z+1	; 0x01
     698:	92 81       	ldd	r25, Z+2	; 0x02
     69a:	a3 81       	ldd	r26, Z+3	; 0x03
     69c:	b4 81       	ldd	r27, Z+4	; 0x04
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	a1 1d       	adc	r26, r1
     6a2:	b1 1d       	adc	r27, r1
     6a4:	81 83       	std	Z+1, r24	; 0x01
     6a6:	92 83       	std	Z+2, r25	; 0x02
     6a8:	a3 83       	std	Z+3, r26	; 0x03
     6aa:	b4 83       	std	Z+4, r27	; 0x04
     6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <__vector_5+0x54>
		inline void dcrCount(){encdistance--;};
     6ae:	ec e6       	ldi	r30, 0x6C	; 108
     6b0:	f2 e0       	ldi	r31, 0x02	; 2
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	92 81       	ldd	r25, Z+2	; 0x02
     6b6:	a3 81       	ldd	r26, Z+3	; 0x03
     6b8:	b4 81       	ldd	r27, Z+4	; 0x04
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	a1 09       	sbc	r26, r1
     6be:	b1 09       	sbc	r27, r1
     6c0:	81 83       	std	Z+1, r24	; 0x01
     6c2:	92 83       	std	Z+2, r25	; 0x02
     6c4:	a3 83       	std	Z+3, r26	; 0x03
     6c6:	b4 83       	std	Z+4, r27	; 0x04
	{
		ey.incCount();
	}
	else
		ey.dcrCount();
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	0f 90       	pop	r0
     6d6:	0b be       	out	0x3b, r0	; 59
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <__vector_42>:

 /*********************************************************PID computation timer*****************************************************/

 ISR(TIMER4_COMPA_vect)
 {
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	0b b6       	in	r0, 0x3b	; 59
     6ee:	0f 92       	push	r0
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;};	//keep in timer compare match
     6fc:	e6 e7       	ldi	r30, 0x76	; 118
     6fe:	f2 e0       	ldi	r31, 0x02	; 2
     700:	85 81       	ldd	r24, Z+5	; 0x05
     702:	96 81       	ldd	r25, Z+6	; 0x06
     704:	a7 81       	ldd	r26, Z+7	; 0x07
     706:	b0 85       	ldd	r27, Z+8	; 0x08
     708:	81 83       	std	Z+1, r24	; 0x01
     70a:	92 83       	std	Z+2, r25	; 0x02
     70c:	a3 83       	std	Z+3, r26	; 0x03
     70e:	b4 83       	std	Z+4, r27	; 0x04
     710:	15 82       	std	Z+5, r1	; 0x05
     712:	16 82       	std	Z+6, r1	; 0x06
     714:	17 82       	std	Z+7, r1	; 0x07
     716:	10 86       	std	Z+8, r1	; 0x08
     718:	86 85       	ldd	r24, Z+14	; 0x0e
     71a:	97 85       	ldd	r25, Z+15	; 0x0f
     71c:	a0 89       	ldd	r26, Z+16	; 0x10
     71e:	b1 89       	ldd	r27, Z+17	; 0x11
     720:	82 87       	std	Z+10, r24	; 0x0a
     722:	93 87       	std	Z+11, r25	; 0x0b
     724:	a4 87       	std	Z+12, r26	; 0x0c
     726:	b5 87       	std	Z+13, r27	; 0x0d
     728:	16 86       	std	Z+14, r1	; 0x0e
     72a:	17 86       	std	Z+15, r1	; 0x0f
     72c:	10 8a       	std	Z+16, r1	; 0x10
     72e:	11 8a       	std	Z+17, r1	; 0x11
     730:	87 89       	ldd	r24, Z+23	; 0x17
     732:	90 8d       	ldd	r25, Z+24	; 0x18
     734:	a1 8d       	ldd	r26, Z+25	; 0x19
     736:	b2 8d       	ldd	r27, Z+26	; 0x1a
     738:	83 8b       	std	Z+19, r24	; 0x13
     73a:	94 8b       	std	Z+20, r25	; 0x14
     73c:	a5 8b       	std	Z+21, r26	; 0x15
     73e:	b6 8b       	std	Z+22, r27	; 0x16
     740:	17 8a       	std	Z+23, r1	; 0x17
     742:	10 8e       	std	Z+24, r1	; 0x18
     744:	11 8e       	std	Z+25, r1	; 0x19
     746:	12 8e       	std	Z+26, r1	; 0x1a
     748:	80 a1       	ldd	r24, Z+32	; 0x20
     74a:	91 a1       	ldd	r25, Z+33	; 0x21
     74c:	a2 a1       	ldd	r26, Z+34	; 0x22
     74e:	b3 a1       	ldd	r27, Z+35	; 0x23
     750:	84 8f       	std	Z+28, r24	; 0x1c
     752:	95 8f       	std	Z+29, r25	; 0x1d
     754:	a6 8f       	std	Z+30, r26	; 0x1e
     756:	b7 8f       	std	Z+31, r27	; 0x1f
     758:	10 a2       	std	Z+32, r1	; 0x20
     75a:	11 a2       	std	Z+33, r1	; 0x21
     75c:	12 a2       	std	Z+34, r1	; 0x22
     75e:	13 a2       	std	Z+35, r1	; 0x23
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	80 93 bd 02 	sts	0x02BD, r24
 }
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	0f 90       	pop	r0
     774:	0b be       	out	0x3b, r0	; 59
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <_GLOBAL__sub_I_coupling_matrix>:
     780:	e6 e7       	ldi	r30, 0x76	; 118
     782:	f2 e0       	ldi	r31, 0x02	; 2
     784:	8a e9       	ldi	r24, 0x9A	; 154
     786:	92 e0       	ldi	r25, 0x02	; 2
	private:
		uint8_t no;
		long int speed;
		long int pprcount;
	public:
	Encoder():speed(0),pprcount(0){};
     788:	11 82       	std	Z+1, r1	; 0x01
     78a:	12 82       	std	Z+2, r1	; 0x02
     78c:	13 82       	std	Z+3, r1	; 0x03
     78e:	14 82       	std	Z+4, r1	; 0x04
     790:	15 82       	std	Z+5, r1	; 0x05
     792:	16 82       	std	Z+6, r1	; 0x06
     794:	17 82       	std	Z+7, r1	; 0x07
     796:	10 86       	std	Z+8, r1	; 0x08
     798:	39 96       	adiw	r30, 0x09	; 9
 int id,jd;					//global loop counter 
 int velocity_motor[4];		//individual motor velocity
 int velocity_robot[4];		//robot velocity
 int ocr_motor[4];			//motor ocr 
 Motor m[4];				//base motors
 Encoder e[4];				// base motors encoders
     79a:	e8 17       	cp	r30, r24
     79c:	f9 07       	cpc	r31, r25
     79e:	a1 f7       	brne	.-24     	; 0x788 <_GLOBAL__sub_I_coupling_matrix+0x8>
	
		private:
		uint8_t no;
		long int encdistance;
		public:
		FreeWheelEnc():encdistance(0){};
     7a0:	10 92 72 02 	sts	0x0272, r1
     7a4:	10 92 73 02 	sts	0x0273, r1
     7a8:	10 92 74 02 	sts	0x0274, r1
     7ac:	10 92 75 02 	sts	0x0275, r1
     7b0:	10 92 6d 02 	sts	0x026D, r1
     7b4:	10 92 6e 02 	sts	0x026E, r1
     7b8:	10 92 6f 02 	sts	0x026F, r1
     7bc:	10 92 70 02 	sts	0x0270, r1
     7c0:	ec e0       	ldi	r30, 0x0C	; 12
     7c2:	f2 e0       	ldi	r31, 0x02	; 2
     7c4:	8c e6       	ldi	r24, 0x6C	; 108
     7c6:	92 e0       	ldi	r25, 0x02	; 2
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     7c8:	10 82       	st	Z, r1
     7ca:	11 82       	std	Z+1, r1	; 0x01
     7cc:	12 82       	std	Z+2, r1	; 0x02
     7ce:	13 82       	std	Z+3, r1	; 0x03
     7d0:	14 82       	std	Z+4, r1	; 0x04
     7d2:	15 82       	std	Z+5, r1	; 0x05
     7d4:	16 82       	std	Z+6, r1	; 0x06
     7d6:	17 82       	std	Z+7, r1	; 0x07
     7d8:	10 86       	std	Z+8, r1	; 0x08
     7da:	11 86       	std	Z+9, r1	; 0x09
     7dc:	12 86       	std	Z+10, r1	; 0x0a
     7de:	13 86       	std	Z+11, r1	; 0x0b
     7e0:	15 86       	std	Z+13, r1	; 0x0d
     7e2:	14 86       	std	Z+12, r1	; 0x0c
     7e4:	17 86       	std	Z+15, r1	; 0x0f
     7e6:	16 86       	std	Z+14, r1	; 0x0e
     7e8:	11 8a       	std	Z+17, r1	; 0x11
     7ea:	10 8a       	std	Z+16, r1	; 0x10
     7ec:	13 8a       	std	Z+19, r1	; 0x13
     7ee:	12 8a       	std	Z+18, r1	; 0x12
     7f0:	78 96       	adiw	r30, 0x18	; 24
 FreeWheelEnc ex,ey;		//Free wheel encoders
 PID p[4];					//pid for the base motors
     7f2:	e8 17       	cp	r30, r24
     7f4:	f9 07       	cpc	r31, r25
     7f6:	41 f7       	brne	.-48     	; 0x7c8 <_GLOBAL__sub_I_coupling_matrix+0x48>
	 e[0].Calc_Speed();
	 e[1].Calc_Speed();
	 e[2].Calc_Speed();
	 e[3].Calc_Speed();
	 pidflag = true;
 }
     7f8:	08 95       	ret

000007fa <_ZN7Encoder15Init_InterruptsEv>:
	Init_Timers();
}

void Encoder::Init_Interrupts()
{
	sei();
     7fa:	78 94       	sei
	if(no==1)
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 81       	ld	r24, Z
     800:	81 30       	cpi	r24, 0x01	; 1
     802:	49 f4       	brne	.+18     	; 0x816 <_ZN7Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODER1_INT);
     804:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INT1_ISC1);	//falling edge
     806:	e9 e6       	ldi	r30, 0x69	; 105
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	82 60       	ori	r24, 0x02	; 2
     80e:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER1_INT);		//setting INT pin
     810:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INT1_INTF);	    //clear int flag
     812:	e0 9a       	sbi	0x1c, 0	; 28
     814:	08 95       	ret
	}
	else if (no==2)
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	49 f4       	brne	.+18     	; 0x82c <_ZN7Encoder15Init_InterruptsEv+0x32>
	{
		EIMSK &= ~(1<<ENCODER2_INT);
     81a:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INT2_ISC1);	//falling edge
     81c:	e9 e6       	ldi	r30, 0x69	; 105
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	88 60       	ori	r24, 0x08	; 8
     824:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER2_INT);		//setting INT pin
     826:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INT2_INTF);	    //clear int flag
     828:	e1 9a       	sbi	0x1c, 1	; 28
     82a:	08 95       	ret
	}
	else if (no==3)
     82c:	83 30       	cpi	r24, 0x03	; 3
     82e:	49 f4       	brne	.+18     	; 0x842 <_ZN7Encoder15Init_InterruptsEv+0x48>
	{
		EIMSK &= ~(1<<ENCODER3_INT);
     830:	ea 98       	cbi	0x1d, 2	; 29
		EICRA |= (1<<INT3_ISC1);	//falling edge
     832:	e9 e6       	ldi	r30, 0x69	; 105
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	80 62       	ori	r24, 0x20	; 32
     83a:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER3_INT);		//setting INT pin
     83c:	ea 9a       	sbi	0x1d, 2	; 29
		EIFR |= (1<<INT3_INTF);	    //clear int flag
     83e:	e2 9a       	sbi	0x1c, 2	; 28
     840:	08 95       	ret
	}
	else if (no==4)
     842:	84 30       	cpi	r24, 0x04	; 4
     844:	41 f4       	brne	.+16     	; 0x856 <_ZN7Encoder15Init_InterruptsEv+0x5c>
	{
		EIMSK &= ~(1<<ENCODER4_INT);
     846:	eb 98       	cbi	0x1d, 3	; 29
		EICRA |= (1<<INT4_ISC1);	//falling edge
     848:	e9 e6       	ldi	r30, 0x69	; 105
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	80 68       	ori	r24, 0x80	; 128
     850:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODER4_INT);		//setting INT pin
     852:	eb 9a       	sbi	0x1d, 3	; 29
		EIFR |= (1<<INT4_INTF);	    //clear int flag
     854:	e3 9a       	sbi	0x1c, 3	; 28
     856:	08 95       	ret

00000858 <_ZN7Encoder11Init_TimersEv>:
}

void Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     858:	80 91 be 02 	lds	r24, 0x02BE
     85c:	81 11       	cpse	r24, r1
     85e:	17 c0       	rjmp	.+46     	; 0x88e <_ZN7Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     860:	e1 ea       	ldi	r30, 0xA1	; 161
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	8b 60       	ori	r24, 0x0B	; 11
     868:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     86a:	e2 e7       	ldi	r30, 0x72	; 114
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	82 60       	ori	r24, 0x02	; 2
     872:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     874:	8c e4       	ldi	r24, 0x4C	; 76
     876:	9d e1       	ldi	r25, 0x1D	; 29
     878:	90 93 a9 00 	sts	0x00A9, r25
     87c:	80 93 a8 00 	sts	0x00A8, r24
		TCNT4 = 0;
     880:	10 92 a5 00 	sts	0x00A5, r1
     884:	10 92 a4 00 	sts	0x00A4, r1
		was_initialized = true;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 be 02 	sts	0x02BE, r24
     88e:	08 95       	ret

00000890 <_ZN7Encoder10InitialiseEh>:


#include "Encoder.h"

void Encoder::Initialise(uint8_t x)
{	
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
	no = x;
     896:	68 83       	st	Y, r22
	if(no==1)
     898:	61 30       	cpi	r22, 0x01	; 1
     89a:	29 f4       	brne	.+10     	; 0x8a6 <_ZN7Encoder10InitialiseEh+0x16>
	{
		INPUT(ENCODER1_CHANNELA);
     89c:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODER1_CHANNELB);
     89e:	08 98       	cbi	0x01, 0	; 1
		SET(ENCODER1_CHANNELA);
     8a0:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODER1_CHANNELB);
     8a2:	10 9a       	sbi	0x02, 0	; 2
     8a4:	14 c0       	rjmp	.+40     	; 0x8ce <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==2)
     8a6:	62 30       	cpi	r22, 0x02	; 2
     8a8:	29 f4       	brne	.+10     	; 0x8b4 <_ZN7Encoder10InitialiseEh+0x24>
	{
		INPUT(ENCODER2_CHANNELA);
     8aa:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODER2_CHANNELB);
     8ac:	0a 98       	cbi	0x01, 2	; 1
		SET(ENCODER2_CHANNELA);
     8ae:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODER2_CHANNELB);
     8b0:	12 9a       	sbi	0x02, 2	; 2
     8b2:	0d c0       	rjmp	.+26     	; 0x8ce <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if (no==3)
     8b4:	63 30       	cpi	r22, 0x03	; 3
     8b6:	29 f4       	brne	.+10     	; 0x8c2 <_ZN7Encoder10InitialiseEh+0x32>
	{
		INPUT(ENCODER3_CHANNELA);
     8b8:	52 98       	cbi	0x0a, 2	; 10
		INPUT(ENCODER3_CHANNELB);
     8ba:	0c 98       	cbi	0x01, 4	; 1
		SET(ENCODER3_CHANNELA);
     8bc:	5a 9a       	sbi	0x0b, 2	; 11
		SET(ENCODER3_CHANNELB);
     8be:	14 9a       	sbi	0x02, 4	; 2
     8c0:	06 c0       	rjmp	.+12     	; 0x8ce <_ZN7Encoder10InitialiseEh+0x3e>
	}
	else if(no==4)
     8c2:	64 30       	cpi	r22, 0x04	; 4
     8c4:	21 f4       	brne	.+8      	; 0x8ce <_ZN7Encoder10InitialiseEh+0x3e>
	{
		INPUT(ENCODER4_CHANNELA);
     8c6:	53 98       	cbi	0x0a, 3	; 10
		INPUT(ENCODER4_CHANNELB);
     8c8:	0e 98       	cbi	0x01, 6	; 1
		SET(ENCODER4_CHANNELA);
     8ca:	5b 9a       	sbi	0x0b, 3	; 11
		SET(ENCODER4_CHANNELB);
     8cc:	16 9a       	sbi	0x02, 6	; 2
	}
	Init_Interrupts();
     8ce:	ce 01       	movw	r24, r28
     8d0:	94 df       	rcall	.-216    	; 0x7fa <_ZN7Encoder15Init_InterruptsEv>
	Init_Timers();
     8d2:	ce 01       	movw	r24, r28
     8d4:	c1 df       	rcall	.-126    	; 0x858 <_ZN7Encoder11Init_TimersEv>
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <_ZN12FreeWheelEnc15Init_InterruptsEv>:
	Init_Interrupts();
}

void FreeWheelEnc::Init_Interrupts()
{
	if(no==1)
     8dc:	fc 01       	movw	r30, r24
     8de:	80 81       	ld	r24, Z
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	49 f4       	brne	.+18     	; 0x8f6 <_ZN12FreeWheelEnc15Init_InterruptsEv+0x1a>
	{
		EIMSK &= ~(1<<ENCODERX_INT);
     8e4:	ed 98       	cbi	0x1d, 5	; 29
		EICRB |= (1<<INTX_ISC1);	//falling edge
     8e6:	ea e6       	ldi	r30, 0x6A	; 106
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	88 60       	ori	r24, 0x08	; 8
     8ee:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERX_INT);		//setting INT pin
     8f0:	ed 9a       	sbi	0x1d, 5	; 29
		EIFR  |= (1<<INTX_INTF);	    //clear int flag
     8f2:	e5 9a       	sbi	0x1c, 5	; 28
     8f4:	0a c0       	rjmp	.+20     	; 0x90a <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	}
	
	else if (no==2)
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	41 f4       	brne	.+16     	; 0x90a <_ZN12FreeWheelEnc15Init_InterruptsEv+0x2e>
	{
		EIMSK &= ~(1<<ENCODERY_INT);
     8fa:	ec 98       	cbi	0x1d, 4	; 29
		EICRB |= (1<<INTY_ISC1);	//falling edge
     8fc:	ea e6       	ldi	r30, 0x6A	; 106
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	82 60       	ori	r24, 0x02	; 2
     904:	80 83       	st	Z, r24
		EIMSK |= (1<<ENCODERY_INT);		//setting INT pin
     906:	ec 9a       	sbi	0x1d, 4	; 29
		EIFR |= (1<<INTY_INTF);	    //clear int flag
     908:	e4 9a       	sbi	0x1c, 4	; 28
	}
	sei();
     90a:	78 94       	sei
     90c:	08 95       	ret

0000090e <_ZN12FreeWheelEnc10InitialiseEh>:

#include "FreeWheelEnc.h"

void FreeWheelEnc::Initialise(uint8_t x)
{
	no = x;
     90e:	fc 01       	movw	r30, r24
     910:	60 83       	st	Z, r22
	if(no==1)
     912:	61 30       	cpi	r22, 0x01	; 1
     914:	29 f4       	brne	.+10     	; 0x920 <_ZN12FreeWheelEnc10InitialiseEh+0x12>
	{
		INPUT(ENCODERX_CHANNELA);
     916:	6d 98       	cbi	0x0d, 5	; 13
		INPUT(ENCODERX_CHANNELB);
     918:	3f 98       	cbi	0x07, 7	; 7
		SET(ENCODERX_CHANNELA);
     91a:	75 9a       	sbi	0x0e, 5	; 14
		SET(ENCODERX_CHANNELB);
     91c:	47 9a       	sbi	0x08, 7	; 8
     91e:	06 c0       	rjmp	.+12     	; 0x92c <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	}
	else if(no==2)
     920:	62 30       	cpi	r22, 0x02	; 2
     922:	21 f4       	brne	.+8      	; 0x92c <_ZN12FreeWheelEnc10InitialiseEh+0x1e>
	{
		INPUT(ENCODERY_CHANNELA);
     924:	6c 98       	cbi	0x0d, 4	; 13
		INPUT(ENCODERY_CHANNELB);
     926:	3d 98       	cbi	0x07, 5	; 7
		SET(ENCODERY_CHANNELA);
     928:	74 9a       	sbi	0x0e, 4	; 14
		SET(ENCODERY_CHANNELB);
     92a:	45 9a       	sbi	0x08, 5	; 8
	}
	Init_Interrupts();
     92c:	d7 cf       	rjmp	.-82     	; 0x8dc <_ZN12FreeWheelEnc15Init_InterruptsEv>
     92e:	08 95       	ret

00000930 <main>:
#include "ZoneNavigate.h"


int main(void)
{
	initUART0();
     930:	07 d2       	rcall	.+1038   	; 0xd40 <_Z9initUART0v>
	initUART2();
     932:	12 d2       	rcall	.+1060   	; 0xd58 <_Z9initUART2v>
	initUART3();
     934:	1d d2       	rcall	.+1082   	; 0xd70 <_Z9initUART3v>
	drive_init();
     936:	08 dc       	rcall	.-2032   	; 0x148 <_Z10drive_initv>
	init_slave();
     938:	89 d4       	rcall	.+2322   	; 0x124c <_Z10init_slavev>
	sei();
     93a:	78 94       	sei
    while (1) 
    {	
		if(auto_mode)
     93c:	80 91 bf 02 	lds	r24, 0x02BF
     940:	88 23       	and	r24, r24
     942:	11 f0       	breq	.+4      	; 0x948 <main+0x18>
			operate_slave_auto();
     944:	c2 d4       	rcall	.+2436   	; 0x12ca <_Z18operate_slave_autov>
     946:	01 c0       	rjmp	.+2      	; 0x94a <main+0x1a>
		else
			operate_slave_manual();
     948:	22 d3       	rcall	.+1604   	; 0xf8e <_Z20operate_slave_manualv>
			
		calculate_wheel_velocity();
     94a:	75 dc       	rcall	.-1814   	; 0x236 <_Z24calculate_wheel_velocityv>
		update_wheel_velocity();
     94c:	05 dd       	rcall	.-1526   	; 0x358 <_Z21update_wheel_velocityv>
 */ 

#include "ZoneNavigate.h"


int main(void)
     94e:	f6 cf       	rjmp	.-20     	; 0x93c <main+0xc>

00000950 <_ZN5Motor7InitPWMEv>:

}

void Motor::InitPWM()
{
	if (num==1)
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	f1 f4       	brne	.+60     	; 0x994 <_ZN5Motor7InitPWMEv+0x44>
	{
		OUTPUT(DD_F1);
     958:	e7 e0       	ldi	r30, 0x07	; 7
     95a:	f1 e0       	ldi	r31, 0x01	; 1
     95c:	80 81       	ld	r24, Z
     95e:	82 60       	ori	r24, 0x02	; 2
     960:	80 83       	st	Z, r24
		OUTPUT(DD_B1);
     962:	80 81       	ld	r24, Z
     964:	81 60       	ori	r24, 0x01	; 1
     966:	80 83       	st	Z, r24

		OUTPUT(DD_PWM1);
     968:	ea e0       	ldi	r30, 0x0A	; 10
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	80 81       	ld	r24, Z
     96e:	88 60       	ori	r24, 0x08	; 8
     970:	80 83       	st	Z, r24

		PWM_TCCRA1	|=  ( 1 << PWM_1COM1 ) | ( 1 << PWM_1WGM1 );														//
     972:	e0 e2       	ldi	r30, 0x20	; 32
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	80 81       	ld	r24, Z
     978:	82 68       	ori	r24, 0x82	; 130
     97a:	80 83       	st	Z, r24
		PWM_TCCRB1	|=  ( 1 << PWM_1WGM2 ) | ( 1 << PWM_1WGM3 ) | ( 1 << PWM_1CS1);									//PRESCALAR 8
     97c:	e1 e2       	ldi	r30, 0x21	; 33
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	80 81       	ld	r24, Z
     982:	8a 61       	ori	r24, 0x1A	; 26
     984:	80 83       	st	Z, r24
		PWM_ICR1		 =         ICR_TOP;
     986:	89 ef       	ldi	r24, 0xF9	; 249
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	90 93 27 01 	sts	0x0127, r25
     98e:	80 93 26 01 	sts	0x0126, r24
     992:	08 95       	ret
	}
	else if(num==2)
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	f1 f4       	brne	.+60     	; 0x9d4 <_ZN5Motor7InitPWMEv+0x84>
	{
		OUTPUT(DD_F2);
     998:	e7 e0       	ldi	r30, 0x07	; 7
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	80 81       	ld	r24, Z
     99e:	88 60       	ori	r24, 0x08	; 8
     9a0:	80 83       	st	Z, r24
		OUTPUT(DD_B2);
     9a2:	80 81       	ld	r24, Z
     9a4:	84 60       	ori	r24, 0x04	; 4
     9a6:	80 83       	st	Z, r24

		OUTPUT(DD_PWM2);
     9a8:	ea e0       	ldi	r30, 0x0A	; 10
     9aa:	f1 e0       	ldi	r31, 0x01	; 1
     9ac:	80 81       	ld	r24, Z
     9ae:	80 61       	ori	r24, 0x10	; 16
     9b0:	80 83       	st	Z, r24

		PWM_TCCRA2	|=  ( 1 << PWM_2COM1 ) | ( 1 << PWM_2WGM1 );														//
     9b2:	e0 e2       	ldi	r30, 0x20	; 32
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	80 81       	ld	r24, Z
     9b8:	82 62       	ori	r24, 0x22	; 34
     9ba:	80 83       	st	Z, r24
		PWM_TCCRB2	|=  ( 1 << PWM_2WGM2 ) | ( 1 << PWM_2WGM3 ) | ( 1 << PWM_2CS1);									//PRESCALAR 8
     9bc:	e1 e2       	ldi	r30, 0x21	; 33
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	80 81       	ld	r24, Z
     9c2:	8a 61       	ori	r24, 0x1A	; 26
     9c4:	80 83       	st	Z, r24
		PWM_ICR2		 =         ICR_TOP;
     9c6:	89 ef       	ldi	r24, 0xF9	; 249
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	90 93 27 01 	sts	0x0127, r25
     9ce:	80 93 26 01 	sts	0x0126, r24
     9d2:	08 95       	ret
	}
	else if(num==3)
     9d4:	83 30       	cpi	r24, 0x03	; 3
     9d6:	f1 f4       	brne	.+60     	; 0xa14 <_ZN5Motor7InitPWMEv+0xc4>
	{
		OUTPUT(DD_F3);
     9d8:	e7 e0       	ldi	r30, 0x07	; 7
     9da:	f1 e0       	ldi	r31, 0x01	; 1
     9dc:	80 81       	ld	r24, Z
     9de:	80 61       	ori	r24, 0x10	; 16
     9e0:	80 83       	st	Z, r24
		OUTPUT(DD_B3);
     9e2:	80 81       	ld	r24, Z
     9e4:	80 62       	ori	r24, 0x20	; 32
     9e6:	80 83       	st	Z, r24

		OUTPUT(DD_PWM3);
     9e8:	ea e0       	ldi	r30, 0x0A	; 10
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	80 81       	ld	r24, Z
     9ee:	80 62       	ori	r24, 0x20	; 32
     9f0:	80 83       	st	Z, r24

		PWM_TCCRA3	|=  ( 1 << PWM_3COM1 ) | ( 1 << PWM_3WGM1 );														//
     9f2:	e0 e2       	ldi	r30, 0x20	; 32
     9f4:	f1 e0       	ldi	r31, 0x01	; 1
     9f6:	80 81       	ld	r24, Z
     9f8:	8a 60       	ori	r24, 0x0A	; 10
     9fa:	80 83       	st	Z, r24
		PWM_TCCRB3	|=  ( 1 << PWM_3WGM2 ) | ( 1 << PWM_3WGM3 ) | ( 1 << PWM_3CS1);									//PRESCALAR 8
     9fc:	e1 e2       	ldi	r30, 0x21	; 33
     9fe:	f1 e0       	ldi	r31, 0x01	; 1
     a00:	80 81       	ld	r24, Z
     a02:	8a 61       	ori	r24, 0x1A	; 26
     a04:	80 83       	st	Z, r24
		PWM_ICR3		 =         ICR_TOP;
     a06:	89 ef       	ldi	r24, 0xF9	; 249
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 27 01 	sts	0x0127, r25
     a0e:	80 93 26 01 	sts	0x0126, r24
     a12:	08 95       	ret
	} 
	else if(num==4)
     a14:	84 30       	cpi	r24, 0x04	; 4
     a16:	c9 f4       	brne	.+50     	; 0xa4a <_ZN5Motor7InitPWMEv+0xfa>
	{
		OUTPUT(DD_F4);
     a18:	e7 e0       	ldi	r30, 0x07	; 7
     a1a:	f1 e0       	ldi	r31, 0x01	; 1
     a1c:	80 81       	ld	r24, Z
     a1e:	80 64       	ori	r24, 0x40	; 64
     a20:	80 83       	st	Z, r24
		OUTPUT(DD_B4);
     a22:	80 81       	ld	r24, Z
     a24:	80 68       	ori	r24, 0x80	; 128
     a26:	80 83       	st	Z, r24

		OUTPUT(DD_PWM4);
     a28:	6b 9a       	sbi	0x0d, 3	; 13

		PWM_TCCRA4	|=  ( 1 << PWM_4COM1 ) | ( 1 << PWM_4WGM1 );														//
     a2a:	e0 e9       	ldi	r30, 0x90	; 144
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 81       	ld	r24, Z
     a30:	82 68       	ori	r24, 0x82	; 130
     a32:	80 83       	st	Z, r24
		PWM_TCCRB4	|=  ( 1 << PWM_4WGM2 ) | ( 1 << PWM_4WGM3 ) | ( 1 << PWM_4CS1);									//PRESCALAR 8
     a34:	e1 e9       	ldi	r30, 0x91	; 145
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	80 81       	ld	r24, Z
     a3a:	8a 61       	ori	r24, 0x1A	; 26
     a3c:	80 83       	st	Z, r24
		PWM_ICR4	 =         ICR_TOP;
     a3e:	89 ef       	ldi	r24, 0xF9	; 249
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 97 00 	sts	0x0097, r25
     a46:	80 93 96 00 	sts	0x0096, r24
     a4a:	08 95       	ret

00000a4c <_ZN5Motor19SetForwardDirectionEv>:
	
}

void Motor::SetForwardDirection()
{
	switch(num)
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	91 f0       	breq	.+36     	; 0xa78 <_ZN5Motor19SetForwardDirectionEv+0x2c>
     a54:	18 f4       	brcc	.+6      	; 0xa5c <_ZN5Motor19SetForwardDirectionEv+0x10>
     a56:	81 30       	cpi	r24, 0x01	; 1
     a58:	31 f0       	breq	.+12     	; 0xa66 <_ZN5Motor19SetForwardDirectionEv+0x1a>
     a5a:	08 95       	ret
     a5c:	83 30       	cpi	r24, 0x03	; 3
     a5e:	a9 f0       	breq	.+42     	; 0xa8a <_ZN5Motor19SetForwardDirectionEv+0x3e>
     a60:	84 30       	cpi	r24, 0x04	; 4
     a62:	e1 f0       	breq	.+56     	; 0xa9c <_ZN5Motor19SetForwardDirectionEv+0x50>
     a64:	08 95       	ret
	{
		case 1:
			SET		(DD_F1);
     a66:	e8 e0       	ldi	r30, 0x08	; 8
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	80 81       	ld	r24, Z
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     a70:	80 81       	ld	r24, Z
     a72:	8e 7f       	andi	r24, 0xFE	; 254
     a74:	80 83       	st	Z, r24
			break;
     a76:	08 95       	ret
		case 2:
			SET		(DD_F2);
     a78:	e8 e0       	ldi	r30, 0x08	; 8
     a7a:	f1 e0       	ldi	r31, 0x01	; 1
     a7c:	80 81       	ld	r24, Z
     a7e:	88 60       	ori	r24, 0x08	; 8
     a80:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     a82:	80 81       	ld	r24, Z
     a84:	8b 7f       	andi	r24, 0xFB	; 251
     a86:	80 83       	st	Z, r24
			break;
     a88:	08 95       	ret
		case 3:
			SET		(DD_F3);
     a8a:	e8 e0       	ldi	r30, 0x08	; 8
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	80 81       	ld	r24, Z
     a90:	80 61       	ori	r24, 0x10	; 16
     a92:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     a94:	80 81       	ld	r24, Z
     a96:	8f 7d       	andi	r24, 0xDF	; 223
     a98:	80 83       	st	Z, r24
			break;
     a9a:	08 95       	ret
		case 4:
			SET		(DD_F4);
     a9c:	e8 e0       	ldi	r30, 0x08	; 8
     a9e:	f1 e0       	ldi	r31, 0x01	; 1
     aa0:	80 81       	ld	r24, Z
     aa2:	80 64       	ori	r24, 0x40	; 64
     aa4:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     aa6:	80 81       	ld	r24, Z
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	80 83       	st	Z, r24
     aac:	08 95       	ret

00000aae <_ZN5Motor19SetReverseDirectionEv>:
	

}
void Motor::SetReverseDirection()
{
	switch(num)
     aae:	fc 01       	movw	r30, r24
     ab0:	80 81       	ld	r24, Z
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	91 f0       	breq	.+36     	; 0xada <_ZN5Motor19SetReverseDirectionEv+0x2c>
     ab6:	18 f4       	brcc	.+6      	; 0xabe <_ZN5Motor19SetReverseDirectionEv+0x10>
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	31 f0       	breq	.+12     	; 0xac8 <_ZN5Motor19SetReverseDirectionEv+0x1a>
     abc:	08 95       	ret
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	a9 f0       	breq	.+42     	; 0xaec <_ZN5Motor19SetReverseDirectionEv+0x3e>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	e1 f0       	breq	.+56     	; 0xafe <_ZN5Motor19SetReverseDirectionEv+0x50>
     ac6:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     ac8:	e8 e0       	ldi	r30, 0x08	; 8
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	80 81       	ld	r24, Z
     ace:	8d 7f       	andi	r24, 0xFD	; 253
     ad0:	80 83       	st	Z, r24
			SET		(DD_B1);
     ad2:	80 81       	ld	r24, Z
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	80 83       	st	Z, r24
			break;
     ad8:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     ada:	e8 e0       	ldi	r30, 0x08	; 8
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	80 81       	ld	r24, Z
     ae0:	87 7f       	andi	r24, 0xF7	; 247
     ae2:	80 83       	st	Z, r24
			SET		(DD_B2);
     ae4:	80 81       	ld	r24, Z
     ae6:	84 60       	ori	r24, 0x04	; 4
     ae8:	80 83       	st	Z, r24
			break;
     aea:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     aec:	e8 e0       	ldi	r30, 0x08	; 8
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	80 81       	ld	r24, Z
     af2:	8f 7e       	andi	r24, 0xEF	; 239
     af4:	80 83       	st	Z, r24
			SET		(DD_B3);
     af6:	80 81       	ld	r24, Z
     af8:	80 62       	ori	r24, 0x20	; 32
     afa:	80 83       	st	Z, r24
			break;
     afc:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     afe:	e8 e0       	ldi	r30, 0x08	; 8
     b00:	f1 e0       	ldi	r31, 0x01	; 1
     b02:	80 81       	ld	r24, Z
     b04:	8f 7b       	andi	r24, 0xBF	; 191
     b06:	80 83       	st	Z, r24
			SET		(DD_B4);
     b08:	80 81       	ld	r24, Z
     b0a:	80 68       	ori	r24, 0x80	; 128
     b0c:	80 83       	st	Z, r24
     b0e:	08 95       	ret

00000b10 <_ZN5Motor9StopMotorEv>:

}

void Motor::StopMotor()
{
	switch(num)
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	b1 f0       	breq	.+44     	; 0xb44 <_ZN5Motor9StopMotorEv+0x34>
     b18:	18 f4       	brcc	.+6      	; 0xb20 <_ZN5Motor9StopMotorEv+0x10>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	31 f0       	breq	.+12     	; 0xb2a <_ZN5Motor9StopMotorEv+0x1a>
     b1e:	08 95       	ret
     b20:	83 30       	cpi	r24, 0x03	; 3
     b22:	e9 f0       	breq	.+58     	; 0xb5e <_ZN5Motor9StopMotorEv+0x4e>
     b24:	84 30       	cpi	r24, 0x04	; 4
     b26:	41 f1       	breq	.+80     	; 0xb78 <_ZN5Motor9StopMotorEv+0x68>
     b28:	08 95       	ret
	{
		case 1:
			CLEAR	(DD_F1);
     b2a:	e8 e0       	ldi	r30, 0x08	; 8
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	80 81       	ld	r24, Z
     b30:	8d 7f       	andi	r24, 0xFD	; 253
     b32:	80 83       	st	Z, r24
			CLEAR	(DD_B1);
     b34:	80 81       	ld	r24, Z
     b36:	8e 7f       	andi	r24, 0xFE	; 254
     b38:	80 83       	st	Z, r24

			PWM_OCR1 = 0;
     b3a:	10 92 29 01 	sts	0x0129, r1
     b3e:	10 92 28 01 	sts	0x0128, r1
			break;
     b42:	08 95       	ret
		case 2:
			CLEAR	(DD_F2);
     b44:	e8 e0       	ldi	r30, 0x08	; 8
     b46:	f1 e0       	ldi	r31, 0x01	; 1
     b48:	80 81       	ld	r24, Z
     b4a:	87 7f       	andi	r24, 0xF7	; 247
     b4c:	80 83       	st	Z, r24
			CLEAR	(DD_B2);
     b4e:	80 81       	ld	r24, Z
     b50:	8b 7f       	andi	r24, 0xFB	; 251
     b52:	80 83       	st	Z, r24

			PWM_OCR2 = 0;
     b54:	10 92 2b 01 	sts	0x012B, r1
     b58:	10 92 2a 01 	sts	0x012A, r1
			break;
     b5c:	08 95       	ret
		case 3:
			CLEAR	(DD_F3);
     b5e:	e8 e0       	ldi	r30, 0x08	; 8
     b60:	f1 e0       	ldi	r31, 0x01	; 1
     b62:	80 81       	ld	r24, Z
     b64:	8f 7e       	andi	r24, 0xEF	; 239
     b66:	80 83       	st	Z, r24
			CLEAR	(DD_B3);
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7d       	andi	r24, 0xDF	; 223
     b6c:	80 83       	st	Z, r24

			PWM_OCR3 = 0;
     b6e:	10 92 2d 01 	sts	0x012D, r1
     b72:	10 92 2c 01 	sts	0x012C, r1
			break;
     b76:	08 95       	ret
		case 4:
			CLEAR	(DD_F4);
     b78:	e8 e0       	ldi	r30, 0x08	; 8
     b7a:	f1 e0       	ldi	r31, 0x01	; 1
     b7c:	80 81       	ld	r24, Z
     b7e:	8f 7b       	andi	r24, 0xBF	; 191
     b80:	80 83       	st	Z, r24
			CLEAR	(DD_B4);
     b82:	80 81       	ld	r24, Z
     b84:	8f 77       	andi	r24, 0x7F	; 127
     b86:	80 83       	st	Z, r24

			PWM_OCR4 = 0;
     b88:	10 92 99 00 	sts	0x0099, r1
     b8c:	10 92 98 00 	sts	0x0098, r1
     b90:	08 95       	ret

00000b92 <_ZN5Motor11SetOcrValueEi>:
	}
}


void Motor::SetOcrValue(int Ocr)
{
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	8c 01       	movw	r16, r24
     b9c:	eb 01       	movw	r28, r22
    if (Ocr > 0)
     b9e:	1c 16       	cp	r1, r28
     ba0:	1d 06       	cpc	r1, r29
     ba2:	0c f4       	brge	.+2      	; 0xba6 <_ZN5Motor11SetOcrValueEi+0x14>
        SetForwardDirection();
     ba4:	53 df       	rcall	.-346    	; 0xa4c <_ZN5Motor19SetForwardDirectionEv>
	if( Ocr < 0)
     ba6:	dd 23       	and	r29, r29
     ba8:	2c f4       	brge	.+10     	; 0xbb4 <_ZN5Motor11SetOcrValueEi+0x22>
	{
		 Ocr = -Ocr;
     baa:	d1 95       	neg	r29
     bac:	c1 95       	neg	r28
     bae:	d1 09       	sbc	r29, r1
		 SetReverseDirection();
     bb0:	c8 01       	movw	r24, r16
     bb2:	7d df       	rcall	.-262    	; 0xaae <_ZN5Motor19SetReverseDirectionEv>
     bb4:	ca 3f       	cpi	r28, 0xFA	; 250
     bb6:	d1 05       	cpc	r29, r1
     bb8:	14 f0       	brlt	.+4      	; 0xbbe <_ZN5Motor11SetOcrValueEi+0x2c>
     bba:	c9 ef       	ldi	r28, 0xF9	; 249
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if( Ocr > MAX_VALUE)
		Ocr = MAX_VALUE;

	switch(num)
     bbe:	f8 01       	movw	r30, r16
     bc0:	80 81       	ld	r24, Z
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	71 f0       	breq	.+28     	; 0xbe2 <_ZN5Motor11SetOcrValueEi+0x50>
     bc6:	18 f4       	brcc	.+6      	; 0xbce <_ZN5Motor11SetOcrValueEi+0x3c>
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	31 f0       	breq	.+12     	; 0xbd8 <_ZN5Motor11SetOcrValueEi+0x46>
     bcc:	18 c0       	rjmp	.+48     	; 0xbfe <_ZN5Motor11SetOcrValueEi+0x6c>
     bce:	83 30       	cpi	r24, 0x03	; 3
     bd0:	69 f0       	breq	.+26     	; 0xbec <_ZN5Motor11SetOcrValueEi+0x5a>
     bd2:	84 30       	cpi	r24, 0x04	; 4
     bd4:	81 f0       	breq	.+32     	; 0xbf6 <_ZN5Motor11SetOcrValueEi+0x64>
     bd6:	13 c0       	rjmp	.+38     	; 0xbfe <_ZN5Motor11SetOcrValueEi+0x6c>
	{
		case 1:
			PWM_OCR1	= Ocr;
     bd8:	d0 93 29 01 	sts	0x0129, r29
     bdc:	c0 93 28 01 	sts	0x0128, r28
			break;
     be0:	0e c0       	rjmp	.+28     	; 0xbfe <_ZN5Motor11SetOcrValueEi+0x6c>
		case 2:
			PWM_OCR2	= Ocr;
     be2:	d0 93 2b 01 	sts	0x012B, r29
     be6:	c0 93 2a 01 	sts	0x012A, r28
			break;
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <_ZN5Motor11SetOcrValueEi+0x6c>
		case 3:
			PWM_OCR3	= Ocr;
     bec:	d0 93 2d 01 	sts	0x012D, r29
     bf0:	c0 93 2c 01 	sts	0x012C, r28
			break;
     bf4:	04 c0       	rjmp	.+8      	; 0xbfe <_ZN5Motor11SetOcrValueEi+0x6c>
		case 4:
			PWM_OCR4	= Ocr;
     bf6:	d0 93 99 00 	sts	0x0099, r29
     bfa:	c0 93 98 00 	sts	0x0098, r28
			break;
	}
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <_ZN5Motor10InitialiseEh>:
#include "Motor.h"



void Motor::Initialise(uint8_t no)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	ec 01       	movw	r28, r24
	num = no;
     c0e:	68 83       	st	Y, r22
	InitPWM();
     c10:	9f de       	rcall	.-706    	; 0x950 <_ZN5Motor7InitPWMEv>

	StopMotor();
     c12:	ce 01       	movw	r24, r28
     c14:	7d df       	rcall	.-262    	; 0xb10 <_ZN5Motor9StopMotorEv>
	SetOcrValue(0);
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	ce 01       	movw	r24, r28
     c1c:	ba df       	rcall	.-140    	; 0xb92 <_ZN5Motor11SetOcrValueEi>

}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <_ZN3PID7Set_PidEfff>:


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	fc 01       	movw	r30, r24
	kp = kP;
     c32:	40 83       	st	Z, r20
     c34:	51 83       	std	Z+1, r21	; 0x01
     c36:	62 83       	std	Z+2, r22	; 0x02
     c38:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     c3a:	04 83       	std	Z+4, r16	; 0x04
     c3c:	15 83       	std	Z+5, r17	; 0x05
     c3e:	26 83       	std	Z+6, r18	; 0x06
     c40:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     c42:	c0 86       	std	Z+8, r12	; 0x08
     c44:	d1 86       	std	Z+9, r13	; 0x09
     c46:	e2 86       	std	Z+10, r14	; 0x0a
     c48:	f3 86       	std	Z+11, r15	; 0x0b
}
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	08 95       	ret

00000c58 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	ec 01       	movw	r28, r24
     c6a:	8b 01       	movw	r16, r22
	error = sp - input;
     c6c:	6c 85       	ldd	r22, Y+12	; 0x0c
     c6e:	7d 85       	ldd	r23, Y+13	; 0x0d
     c70:	60 1b       	sub	r22, r16
     c72:	71 0b       	sbc	r23, r17
     c74:	7f 87       	std	Y+15, r23	; 0x0f
     c76:	6e 87       	std	Y+14, r22	; 0x0e
	
	errorsum += error;
     c78:	8a 89       	ldd	r24, Y+18	; 0x12
     c7a:	9b 89       	ldd	r25, Y+19	; 0x13
     c7c:	86 0f       	add	r24, r22
     c7e:	97 1f       	adc	r25, r23
	
	//Limiting I-term
	if (errorsum > 125)
     c80:	8e 37       	cpi	r24, 0x7E	; 126
     c82:	91 05       	cpc	r25, r1
     c84:	2c f0       	brlt	.+10     	; 0xc90 <_ZN3PID7ComputeEi+0x38>
		errorsum = 125;
     c86:	8d e7       	ldi	r24, 0x7D	; 125
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	9b 8b       	std	Y+19, r25	; 0x13
     c8c:	8a 8b       	std	Y+18, r24	; 0x12
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <_ZN3PID7ComputeEi+0x4e>
	else if (errorsum < -125)
     c90:	83 38       	cpi	r24, 0x83	; 131
     c92:	2f ef       	ldi	r18, 0xFF	; 255
     c94:	92 07       	cpc	r25, r18
     c96:	1c f0       	brlt	.+6      	; 0xc9e <_ZN3PID7ComputeEi+0x46>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     c98:	9b 8b       	std	Y+19, r25	; 0x13
     c9a:	8a 8b       	std	Y+18, r24	; 0x12
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <_ZN3PID7ComputeEi+0x4e>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     c9e:	83 e8       	ldi	r24, 0x83	; 131
     ca0:	9f ef       	ldi	r25, 0xFF	; 255
     ca2:	9b 8b       	std	Y+19, r25	; 0x13
     ca4:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     ca6:	07 2e       	mov	r0, r23
     ca8:	00 0c       	add	r0, r0
     caa:	88 0b       	sbc	r24, r24
     cac:	99 0b       	sbc	r25, r25
     cae:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     cb2:	28 81       	ld	r18, Y
     cb4:	39 81       	ldd	r19, Y+1	; 0x01
     cb6:	4a 81       	ldd	r20, Y+2	; 0x02
     cb8:	5b 81       	ldd	r21, Y+3	; 0x03
     cba:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__mulsf3>
     cbe:	6b 01       	movw	r12, r22
     cc0:	7c 01       	movw	r14, r24
     cc2:	8a 89       	ldd	r24, Y+18	; 0x12
     cc4:	9b 89       	ldd	r25, Y+19	; 0x13
     cc6:	bc 01       	movw	r22, r24
     cc8:	99 0f       	add	r25, r25
     cca:	88 0b       	sbc	r24, r24
     ccc:	99 0b       	sbc	r25, r25
     cce:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     cd2:	2c 81       	ldd	r18, Y+4	; 0x04
     cd4:	3d 81       	ldd	r19, Y+5	; 0x05
     cd6:	4e 81       	ldd	r20, Y+6	; 0x06
     cd8:	5f 81       	ldd	r21, Y+7	; 0x07
     cda:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__mulsf3>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	c7 01       	movw	r24, r14
     ce4:	b6 01       	movw	r22, r12
     ce6:	51 d7       	rcall	.+3746   	; 0x1b8a <__addsf3>
     ce8:	6b 01       	movw	r12, r22
     cea:	7c 01       	movw	r14, r24
     cec:	88 89       	ldd	r24, Y+16	; 0x10
     cee:	99 89       	ldd	r25, Y+17	; 0x11
     cf0:	98 01       	movw	r18, r16
     cf2:	28 1b       	sub	r18, r24
     cf4:	39 0b       	sbc	r19, r25
     cf6:	b9 01       	movw	r22, r18
     cf8:	33 0f       	add	r19, r19
     cfa:	88 0b       	sbc	r24, r24
     cfc:	99 0b       	sbc	r25, r25
     cfe:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <__floatsisf>
     d02:	28 85       	ldd	r18, Y+8	; 0x08
     d04:	39 85       	ldd	r19, Y+9	; 0x09
     d06:	4a 85       	ldd	r20, Y+10	; 0x0a
     d08:	5b 85       	ldd	r21, Y+11	; 0x0b
     d0a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__mulsf3>
     d0e:	9b 01       	movw	r18, r22
     d10:	ac 01       	movw	r20, r24
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	38 d7       	rcall	.+3696   	; 0x1b88 <__subsf3>
     d18:	2c 89       	ldd	r18, Y+20	; 0x14
     d1a:	3d 89       	ldd	r19, Y+21	; 0x15
     d1c:	4e 89       	ldd	r20, Y+22	; 0x16
     d1e:	5f 89       	ldd	r21, Y+23	; 0x17
     d20:	34 d7       	rcall	.+3688   	; 0x1b8a <__addsf3>
     d22:	6c 8b       	std	Y+20, r22	; 0x14
     d24:	7d 8b       	std	Y+21, r23	; 0x15
     d26:	8e 8b       	std	Y+22, r24	; 0x16
     d28:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     d2a:	19 8b       	std	Y+17, r17	; 0x11
     d2c:	08 8b       	std	Y+16, r16	; 0x10
	return cv;
}
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	08 95       	ret

00000d40 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
     d40:	10 92 c5 00 	sts	0x00C5, r1
     d44:	87 e6       	ldi	r24, 0x67	; 103
     d46:	80 93 c4 00 	sts	0x00C4, r24
     d4a:	88 e9       	ldi	r24, 0x98	; 152
     d4c:	80 93 c1 00 	sts	0x00C1, r24
     d50:	86 e0       	ldi	r24, 0x06	; 6
     d52:	80 93 c2 00 	sts	0x00C2, r24
     d56:	08 95       	ret

00000d58 <_Z9initUART2v>:
     d58:	10 92 d5 00 	sts	0x00D5, r1
     d5c:	87 e6       	ldi	r24, 0x67	; 103
     d5e:	80 93 d4 00 	sts	0x00D4, r24
     d62:	88 e9       	ldi	r24, 0x98	; 152
     d64:	80 93 d1 00 	sts	0x00D1, r24
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	80 93 d2 00 	sts	0x00D2, r24
     d6e:	08 95       	ret

00000d70 <_Z9initUART3v>:
     d70:	10 92 35 01 	sts	0x0135, r1
     d74:	89 e1       	ldi	r24, 0x19	; 25
     d76:	80 93 34 01 	sts	0x0134, r24
     d7a:	88 e9       	ldi	r24, 0x98	; 152
     d7c:	80 93 31 01 	sts	0x0131, r24
     d80:	86 e0       	ldi	r24, 0x06	; 6
     d82:	80 93 32 01 	sts	0x0132, r24
     d86:	08 95       	ret

00000d88 <_Z13UART3Transmith>:
     d88:	e0 e3       	ldi	r30, 0x30	; 48
     d8a:	f1 e0       	ldi	r31, 0x01	; 1
     d8c:	90 81       	ld	r25, Z
     d8e:	95 ff       	sbrs	r25, 5
     d90:	fd cf       	rjmp	.-6      	; 0xd8c <_Z13UART3Transmith+0x4>
     d92:	80 93 36 01 	sts	0x0136, r24
     d96:	08 95       	ret

00000d98 <__vector_25>:

ISR(USART0_RX_vect)
{
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	8f 93       	push	r24
	buffer=UDR0;
     da4:	80 91 c6 00 	lds	r24, 0x00C6
     da8:	80 93 c8 02 	sts	0x02C8, r24
}
     dac:	8f 91       	pop	r24
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	0f 90       	pop	r0
     db4:	1f 90       	pop	r1
     db6:	18 95       	reti

00000db8 <__vector_36>:

ISR(USART1_RX_vect)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	8f 93       	push	r24
	buffer1=UDR1;
     dc4:	80 91 ce 00 	lds	r24, 0x00CE
     dc8:	80 93 c7 02 	sts	0x02C7, r24
	
}
     dcc:	8f 91       	pop	r24
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <__vector_51>:

ISR(USART2_RX_vect)
{
     dd8:	1f 92       	push	r1
     dda:	0f 92       	push	r0
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	0f 92       	push	r0
     de0:	11 24       	eor	r1, r1
     de2:	8f 93       	push	r24
	buffer2=UDR2;
     de4:	80 91 d6 00 	lds	r24, 0x00D6
     de8:	80 93 c6 02 	sts	0x02C6, r24
		
}
     dec:	8f 91       	pop	r24
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_54>:


ISR(USART3_RX_vect)
{
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	0b b6       	in	r0, 0x3b	; 59
     e04:	0f 92       	push	r0
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
	buffer3=UDR3;
     e0e:	90 91 36 01 	lds	r25, 0x0136
     e12:	90 93 c5 02 	sts	0x02C5, r25
	if(rcvflag)
     e16:	80 91 c0 02 	lds	r24, 0x02C0
     e1a:	88 23       	and	r24, r24
     e1c:	89 f0       	breq	.+34     	; 0xe40 <__vector_54+0x48>
	{
		rcvdata[datacount] = buffer3;
     e1e:	80 91 c1 02 	lds	r24, 0x02C1
     e22:	e8 2f       	mov	r30, r24
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	ee 53       	subi	r30, 0x3E	; 62
     e28:	fd 4f       	sbci	r31, 0xFD	; 253
     e2a:	90 83       	st	Z, r25
		datacount++;
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
		if(datacount>3)
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	18 f4       	brcc	.+6      	; 0xe38 <__vector_54+0x40>
{
	buffer3=UDR3;
	if(rcvflag)
	{
		rcvdata[datacount] = buffer3;
		datacount++;
     e32:	80 93 c1 02 	sts	0x02C1, r24
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <__vector_54+0x48>
		if(datacount>3)
		{
			datacount=0;
     e38:	10 92 c1 02 	sts	0x02C1, r1
			rcvflag = false;
     e3c:	10 92 c0 02 	sts	0x02C0, r1
		}
	}
	if(buffer3==START_BYTE_MANUAL)
     e40:	80 91 c5 02 	lds	r24, 0x02C5
     e44:	8d 3f       	cpi	r24, 0xFD	; 253
     e46:	31 f4       	brne	.+12     	; 0xe54 <__vector_54+0x5c>
	{
		rcvflag = true;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	80 93 c0 02 	sts	0x02C0, r24
		auto_mode = false;
     e4e:	10 92 bf 02 	sts	0x02BF, r1
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <__vector_54+0x6a>
	}
	else if(buffer3 == START_BYTE_AUTO)
     e54:	8e 3f       	cpi	r24, 0xFE	; 254
     e56:	29 f4       	brne	.+10     	; 0xe62 <__vector_54+0x6a>
	{
		rcvflag = true;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 c0 02 	sts	0x02C0, r24
		auto_mode = true;
     e5e:	80 93 bf 02 	sts	0x02BF, r24
	}
}
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	0f 90       	pop	r0
     e6c:	0b be       	out	0x3b, r0	; 59
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <_Z15reset_auto_modev>:
	enable_robot_stop_interrupt();
}

void reset_auto_mode()
{
	current_location = Starting_Zone;
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	80 93 cb 02 	sts	0x02CB, r24
	next_location = Starting_Zone;
     e7e:	80 93 ca 02 	sts	0x02CA, r24
	Goto_zone = No_where;
     e82:	10 92 c9 02 	sts	0x02C9, r1
	
	current_distance = SZONE;
     e86:	88 ed       	ldi	r24, 0xD8	; 216
     e88:	99 e0       	ldi	r25, 0x09	; 9
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	80 93 df 02 	sts	0x02DF, r24
     e92:	90 93 e0 02 	sts	0x02E0, r25
     e96:	a0 93 e1 02 	sts	0x02E1, r26
     e9a:	b0 93 e2 02 	sts	0x02E2, r27
	next_distance = 0;
     e9e:	10 92 db 02 	sts	0x02DB, r1
     ea2:	10 92 dc 02 	sts	0x02DC, r1
     ea6:	10 92 dd 02 	sts	0x02DD, r1
     eaa:	10 92 de 02 	sts	0x02DE, r1
	
	DATA1 = 50;
     eae:	e2 ec       	ldi	r30, 0xC2	; 194
     eb0:	f2 e0       	ldi	r31, 0x02	; 2
     eb2:	82 e3       	ldi	r24, 0x32	; 50
     eb4:	80 83       	st	Z, r24
	DATA2 = 50;
     eb6:	81 83       	std	Z+1, r24	; 0x01
	DATA3 = 50;
     eb8:	82 83       	std	Z+2, r24	; 0x02
		
	searching_rpm = SEARCH_RPM;
     eba:	8c e3       	ldi	r24, 0x3C	; 60
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 fa 02 	sts	0x02FA, r25
     ec2:	80 93 f9 02 	sts	0x02F9, r24
	
	speed = 0;
     ec6:	10 92 fc 02 	sts	0x02FC, r1
     eca:	10 92 fb 02 	sts	0x02FB, r1
	
	distance = 0;
     ece:	10 92 e3 02 	sts	0x02E3, r1
     ed2:	10 92 e4 02 	sts	0x02E4, r1
     ed6:	10 92 e5 02 	sts	0x02E5, r1
     eda:	10 92 e6 02 	sts	0x02E6, r1
	slopeup = 0;
     ede:	10 92 f5 02 	sts	0x02F5, r1
     ee2:	10 92 f6 02 	sts	0x02F6, r1
     ee6:	10 92 f7 02 	sts	0x02F7, r1
     eea:	10 92 f8 02 	sts	0x02F8, r1
	slopedown = 0;
     eee:	10 92 f1 02 	sts	0x02F1, r1
     ef2:	10 92 f2 02 	sts	0x02F2, r1
     ef6:	10 92 f3 02 	sts	0x02F3, r1
     efa:	10 92 f4 02 	sts	0x02F4, r1
	ramp_down_off_adj = RAMP_DOWN_OFFSET;
     efe:	89 e1       	ldi	r24, 0x19	; 25
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 f0 02 	sts	0x02F0, r25
     f06:	80 93 ef 02 	sts	0x02EF, r24
	ramp_up_dist = 0;
     f0a:	10 92 eb 02 	sts	0x02EB, r1
     f0e:	10 92 ec 02 	sts	0x02EC, r1
     f12:	10 92 ed 02 	sts	0x02ED, r1
     f16:	10 92 ee 02 	sts	0x02EE, r1
	ramp_down_dist = 0;
     f1a:	10 92 e7 02 	sts	0x02E7, r1
     f1e:	10 92 e8 02 	sts	0x02E8, r1
     f22:	10 92 e9 02 	sts	0x02E9, r1
     f26:	10 92 ea 02 	sts	0x02EA, r1
	calculated = false;
     f2a:	10 92 d5 02 	sts	0x02D5, r1

	dir = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 fd 02 	sts	0x02FD, r24
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
		inline void Reset_Distance(){encdistance = 0;}
     f34:	10 92 72 02 	sts	0x0272, r1
     f38:	10 92 73 02 	sts	0x0273, r1
     f3c:	10 92 74 02 	sts	0x0274, r1
     f40:	10 92 75 02 	sts	0x0275, r1
     f44:	10 92 6d 02 	sts	0x026D, r1
     f48:	10 92 6e 02 	sts	0x026E, r1
     f4c:	10 92 6f 02 	sts	0x026F, r1
     f50:	10 92 70 02 	sts	0x0270, r1
	
	ex.Reset_Distance();
	ey.Reset_Distance();
	
	moving = false;
     f54:	10 92 da 02 	sts	0x02DA, r1
	searching = false;
     f58:	10 92 d9 02 	sts	0x02D9, r1
	search_fence = false;
     f5c:	10 92 d8 02 	sts	0x02D8, r1
	pressed = false;
     f60:	10 92 d6 02 	sts	0x02D6, r1
	Golden_Drop = false;
     f64:	10 92 d7 02 	sts	0x02D7, r1
	reset_auto = false;
     f68:	10 92 d4 02 	sts	0x02D4, r1
	give_shtcock = false;
     f6c:	10 92 d3 02 	sts	0x02D3, r1
	shift_robot = false;
     f70:	10 92 d2 02 	sts	0x02D2, r1
	rotate_robot = false;
     f74:	10 92 d1 02 	sts	0x02D1, r1
	final_step = false;
     f78:	10 92 d0 02 	sts	0x02D0, r1
	stop_flag = false;
     f7c:	10 92 cf 02 	sts	0x02CF, r1
	line_track_enable = false;
     f80:	10 92 ce 02 	sts	0x02CE, r1
	after_move_back = false;
     f84:	10 92 cd 02 	sts	0x02CD, r1
	donot_stop_on_line = false;
     f88:	10 92 cc 02 	sts	0x02CC, r1
     f8c:	08 95       	ret

00000f8e <_Z20operate_slave_manualv>:
}


void operate_slave_manual()
{
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
	velocity_robot[0] = (-(DATA1 - 50)/50.0)*MAX_RPM_XY;
     f9a:	06 ea       	ldi	r16, 0xA6	; 166
     f9c:	12 e0       	ldi	r17, 0x02	; 2
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f2 ec       	ldi	r31, 0xC2	; 194
     fa2:	ef 2e       	mov	r14, r31
     fa4:	f2 e0       	ldi	r31, 0x02	; 2
     fa6:	ff 2e       	mov	r15, r31
     fa8:	f0 2d       	mov	r31, r0
     faa:	f7 01       	movw	r30, r14
     fac:	80 81       	ld	r24, Z
     fae:	c2 e3       	ldi	r28, 0x32	; 50
     fb0:	d0 e0       	ldi	r29, 0x00	; 0
     fb2:	be 01       	movw	r22, r28
     fb4:	68 1b       	sub	r22, r24
     fb6:	71 09       	sbc	r23, r1
     fb8:	07 2e       	mov	r0, r23
     fba:	00 0c       	add	r0, r0
     fbc:	88 0b       	sbc	r24, r24
     fbe:	99 0b       	sbc	r25, r25
     fc0:	e7 d6       	rcall	.+3534   	; 0x1d90 <__floatsisf>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	48 e4       	ldi	r20, 0x48	; 72
     fc8:	52 e4       	ldi	r21, 0x42	; 66
     fca:	47 d6       	rcall	.+3214   	; 0x1c5a <__divsf3>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	47 ed       	ldi	r20, 0xD7	; 215
     fd2:	53 e4       	ldi	r21, 0x43	; 67
     fd4:	91 d7       	rcall	.+3874   	; 0x1ef8 <__mulsf3>
     fd6:	a9 d6       	rcall	.+3410   	; 0x1d2a <__fixsfsi>
     fd8:	f8 01       	movw	r30, r16
     fda:	71 83       	std	Z+1, r23	; 0x01
     fdc:	60 83       	st	Z, r22
	velocity_robot[1] = ((DATA2 - 50)/50.0)*MAX_RPM_XY;
     fde:	f7 01       	movw	r30, r14
     fe0:	61 81       	ldd	r22, Z+1	; 0x01
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	62 53       	subi	r22, 0x32	; 50
     fe6:	71 09       	sbc	r23, r1
     fe8:	07 2e       	mov	r0, r23
     fea:	00 0c       	add	r0, r0
     fec:	88 0b       	sbc	r24, r24
     fee:	99 0b       	sbc	r25, r25
     ff0:	cf d6       	rcall	.+3486   	; 0x1d90 <__floatsisf>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	48 e4       	ldi	r20, 0x48	; 72
     ff8:	52 e4       	ldi	r21, 0x42	; 66
     ffa:	2f d6       	rcall	.+3166   	; 0x1c5a <__divsf3>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	47 ed       	ldi	r20, 0xD7	; 215
    1002:	53 e4       	ldi	r21, 0x43	; 67
    1004:	79 d7       	rcall	.+3826   	; 0x1ef8 <__mulsf3>
    1006:	91 d6       	rcall	.+3362   	; 0x1d2a <__fixsfsi>
    1008:	f8 01       	movw	r30, r16
    100a:	73 83       	std	Z+3, r23	; 0x03
    100c:	62 83       	std	Z+2, r22	; 0x02
	velocity_robot[2] = (-(DATA3 - 50)/50.0)*MAX_RPM_YAW;
    100e:	f7 01       	movw	r30, r14
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	c8 1b       	sub	r28, r24
    1014:	d1 09       	sbc	r29, r1
    1016:	be 01       	movw	r22, r28
    1018:	dd 0f       	add	r29, r29
    101a:	88 0b       	sbc	r24, r24
    101c:	99 0b       	sbc	r25, r25
    101e:	b8 d6       	rcall	.+3440   	; 0x1d90 <__floatsisf>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	48 e4       	ldi	r20, 0x48	; 72
    1026:	52 e4       	ldi	r21, 0x42	; 66
    1028:	18 d6       	rcall	.+3120   	; 0x1c5a <__divsf3>
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	48 ec       	ldi	r20, 0xC8	; 200
    1030:	52 e4       	ldi	r21, 0x42	; 66
    1032:	62 d7       	rcall	.+3780   	; 0x1ef8 <__mulsf3>
    1034:	7a d6       	rcall	.+3316   	; 0x1d2a <__fixsfsi>
    1036:	f8 01       	movw	r30, r16
    1038:	75 83       	std	Z+5, r23	; 0x05
    103a:	64 83       	std	Z+4, r22	; 0x04
	if(reset_auto)	//reset auto mode data if sowitched from auto to manual
    103c:	80 91 d4 02 	lds	r24, 0x02D4
    1040:	81 11       	cpse	r24, r1
		reset_auto_mode();
    1042:	1a df       	rcall	.-460    	; 0xe78 <_Z15reset_auto_modev>
		
	//UART0TransmitData(ey.Get_Distance());
	//UART0TransmitString("\n\r");
	
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	08 95       	ret

00001052 <_Z10move_robotv>:

}


void move_robot()
{
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
	dir = CALC_DIR(current_location,next_location);
    105a:	80 91 cb 02 	lds	r24, 0x02CB
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	20 91 ca 02 	lds	r18, 0x02CA
    1064:	82 1b       	sub	r24, r18
    1066:	91 09       	sbc	r25, r1
    1068:	12 f0       	brmi	.+4      	; 0x106e <_Z10move_robotv+0x1c>
    106a:	21 e0       	ldi	r18, 0x01	; 1
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <_Z10move_robotv+0x1e>
    106e:	2f ef       	ldi	r18, 0xFF	; 255
    1070:	20 93 fd 02 	sts	0x02FD, r18
    1074:	10 92 72 02 	sts	0x0272, r1
    1078:	10 92 73 02 	sts	0x0273, r1
    107c:	10 92 74 02 	sts	0x0274, r1
    1080:	10 92 75 02 	sts	0x0275, r1
	ex.Reset_Distance();
	
	velocity_robot[2] = 0;
    1084:	10 92 ab 02 	sts	0x02AB, r1
    1088:	10 92 aa 02 	sts	0x02AA, r1
	
	moving = true;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 da 02 	sts	0x02DA, r24
	
	distance = abs(next_distance - current_distance);
    1092:	40 91 db 02 	lds	r20, 0x02DB
    1096:	50 91 dc 02 	lds	r21, 0x02DC
    109a:	60 91 dd 02 	lds	r22, 0x02DD
    109e:	70 91 de 02 	lds	r23, 0x02DE
    10a2:	80 91 df 02 	lds	r24, 0x02DF
    10a6:	90 91 e0 02 	lds	r25, 0x02E0
    10aa:	a0 91 e1 02 	lds	r26, 0x02E1
    10ae:	b0 91 e2 02 	lds	r27, 0x02E2
    10b2:	48 1b       	sub	r20, r24
    10b4:	59 0b       	sbc	r21, r25
    10b6:	6a 0b       	sbc	r22, r26
    10b8:	7b 0b       	sbc	r23, r27
    10ba:	db 01       	movw	r26, r22
    10bc:	ca 01       	movw	r24, r20
    10be:	3a f4       	brpl	.+14     	; 0x10ce <_Z10move_robotv+0x7c>
    10c0:	88 27       	eor	r24, r24
    10c2:	99 27       	eor	r25, r25
    10c4:	dc 01       	movw	r26, r24
    10c6:	84 1b       	sub	r24, r20
    10c8:	95 0b       	sbc	r25, r21
    10ca:	a6 0b       	sbc	r26, r22
    10cc:	b7 0b       	sbc	r27, r23
    10ce:	80 93 e3 02 	sts	0x02E3, r24
    10d2:	90 93 e4 02 	sts	0x02E4, r25
    10d6:	a0 93 e5 02 	sts	0x02E5, r26
    10da:	b0 93 e6 02 	sts	0x02E6, r27
	
	if(distance >= 3400)
    10de:	88 34       	cpi	r24, 0x48	; 72
    10e0:	9d 40       	sbci	r25, 0x0D	; 13
    10e2:	a1 05       	cpc	r26, r1
    10e4:	b1 05       	cpc	r27, r1
    10e6:	c4 f0       	brlt	.+48     	; 0x1118 <_Z10move_robotv+0xc6>
	{
		speed = dir*MAX_RPM_XY;
    10e8:	4e ea       	ldi	r20, 0xAE	; 174
    10ea:	51 e0       	ldi	r21, 0x01	; 1
    10ec:	24 03       	mulsu	r18, r20
    10ee:	c0 01       	movw	r24, r0
    10f0:	25 9f       	mul	r18, r21
    10f2:	90 0d       	add	r25, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	90 93 fc 02 	sts	0x02FC, r25
    10fa:	80 93 fb 02 	sts	0x02FB, r24
		ramp_down_off_adj = RAMP_DOWN_OFFSET + 30;
    10fe:	87 e3       	ldi	r24, 0x37	; 55
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 f0 02 	sts	0x02F0, r25
    1106:	80 93 ef 02 	sts	0x02EF, r24
		velocity_robot[0] = Y_COMPONENT_BIG;
    110a:	84 e1       	ldi	r24, 0x14	; 20
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	90 93 a7 02 	sts	0x02A7, r25
    1112:	80 93 a6 02 	sts	0x02A6, r24
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <_Z10move_robotv+0xee>
	}
	else 
	{
		speed = dir*MIN_RPM_XY;
    1118:	3a ef       	ldi	r19, 0xFA	; 250
    111a:	23 03       	mulsu	r18, r19
    111c:	c0 01       	movw	r24, r0
    111e:	11 24       	eor	r1, r1
    1120:	90 93 fc 02 	sts	0x02FC, r25
    1124:	80 93 fb 02 	sts	0x02FB, r24
		ramp_down_off_adj = RAMP_DOWN_OFFSET;
    1128:	89 e1       	ldi	r24, 0x19	; 25
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	90 93 f0 02 	sts	0x02F0, r25
    1130:	80 93 ef 02 	sts	0x02EF, r24
		velocity_robot[0] = Y_COMPONENT_SMALL;
    1134:	8f e0       	ldi	r24, 0x0F	; 15
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	90 93 a7 02 	sts	0x02A7, r25
    113c:	80 93 a6 02 	sts	0x02A6, r24
	}
		 
	ramp_up_dist = distance/10.0;			//9.59 factor
    1140:	60 91 e3 02 	lds	r22, 0x02E3
    1144:	70 91 e4 02 	lds	r23, 0x02E4
    1148:	80 91 e5 02 	lds	r24, 0x02E5
    114c:	90 91 e6 02 	lds	r25, 0x02E6
    1150:	1f d6       	rcall	.+3134   	; 0x1d90 <__floatsisf>
    1152:	6b 01       	movw	r12, r22
    1154:	7c 01       	movw	r14, r24
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	7d d5       	rcall	.+2810   	; 0x1c5a <__divsf3>
    1160:	60 93 eb 02 	sts	0x02EB, r22
    1164:	70 93 ec 02 	sts	0x02EC, r23
    1168:	80 93 ed 02 	sts	0x02ED, r24
    116c:	90 93 ee 02 	sts	0x02EE, r25
	ramp_down_dist = distance/3.20;			//3.20 factor
    1170:	2d ec       	ldi	r18, 0xCD	; 205
    1172:	3c ec       	ldi	r19, 0xCC	; 204
    1174:	4c e4       	ldi	r20, 0x4C	; 76
    1176:	50 e4       	ldi	r21, 0x40	; 64
    1178:	c7 01       	movw	r24, r14
    117a:	b6 01       	movw	r22, r12
    117c:	6e d5       	rcall	.+2780   	; 0x1c5a <__divsf3>
    117e:	60 93 e7 02 	sts	0x02E7, r22
    1182:	70 93 e8 02 	sts	0x02E8, r23
    1186:	80 93 e9 02 	sts	0x02E9, r24
    118a:	90 93 ea 02 	sts	0x02EA, r25
	
	current_distance = next_distance;
    118e:	80 91 db 02 	lds	r24, 0x02DB
    1192:	90 91 dc 02 	lds	r25, 0x02DC
    1196:	a0 91 dd 02 	lds	r26, 0x02DD
    119a:	b0 91 de 02 	lds	r27, 0x02DE
    119e:	80 93 df 02 	sts	0x02DF, r24
    11a2:	90 93 e0 02 	sts	0x02E0, r25
    11a6:	a0 93 e1 02 	sts	0x02E1, r26
    11aa:	b0 93 e2 02 	sts	0x02E2, r27
}
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	08 95       	ret

000011b8 <_Z17Golden_Rack_Placev>:
	//UART0TransmitString("\n\r");
}

void Golden_Rack_Place()
{
	if(current_location == Loading_zone2 || current_location == Starting_Zone)
    11b8:	80 91 cb 02 	lds	r24, 0x02CB
    11bc:	98 2f       	mov	r25, r24
    11be:	9d 7f       	andi	r25, 0xFD	; 253
    11c0:	91 30       	cpi	r25, 0x01	; 1
    11c2:	a1 f4       	brne	.+40     	; 0x11ec <_Z17Golden_Rack_Placev+0x34>
	{
		Golden_Drop =true;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	80 93 d7 02 	sts	0x02D7, r24
		next_location = Golden_zone;
    11ca:	85 e0       	ldi	r24, 0x05	; 5
    11cc:	80 93 ca 02 	sts	0x02CA, r24
		next_distance = GLDZONE;
    11d0:	80 ee       	ldi	r24, 0xE0	; 224
    11d2:	9c ef       	ldi	r25, 0xFC	; 252
    11d4:	af ef       	ldi	r26, 0xFF	; 255
    11d6:	bf ef       	ldi	r27, 0xFF	; 255
    11d8:	80 93 db 02 	sts	0x02DB, r24
    11dc:	90 93 dc 02 	sts	0x02DC, r25
    11e0:	a0 93 dd 02 	sts	0x02DD, r26
    11e4:	b0 93 de 02 	sts	0x02DE, r27
		move_robot();		
    11e8:	34 cf       	rjmp	.-408    	; 0x1052 <_Z10move_robotv>
    11ea:	08 95       	ret
	}
	else if(Golden_Drop && current_location == Golden_zone)
    11ec:	90 91 d7 02 	lds	r25, 0x02D7
    11f0:	99 23       	and	r25, r25
    11f2:	a9 f0       	breq	.+42     	; 0x121e <_Z17Golden_Rack_Placev+0x66>
    11f4:	85 30       	cpi	r24, 0x05	; 5
    11f6:	99 f4       	brne	.+38     	; 0x121e <_Z17Golden_Rack_Placev+0x66>
	{
		next_location = Loading_zone1;
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	80 93 ca 02 	sts	0x02CA, r24
		next_distance = LZONE1;
    11fe:	89 ea       	ldi	r24, 0xA9	; 169
    1200:	94 e2       	ldi	r25, 0x24	; 36
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	80 93 db 02 	sts	0x02DB, r24
    120a:	90 93 dc 02 	sts	0x02DC, r25
    120e:	a0 93 dd 02 	sts	0x02DD, r26
    1212:	b0 93 de 02 	sts	0x02DE, r27
		move_robot();
    1216:	1d df       	rcall	.-454    	; 0x1052 <_Z10move_robotv>
		donot_stop_on_line = true;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	80 93 cc 02 	sts	0x02CC, r24
    121e:	08 95       	ret

00001220 <_Z19send_data_to_masterh>:
	
	current_distance = next_distance;
}

void send_data_to_master(uint8_t dat)
{
    1220:	cf 93       	push	r28
    1222:	c8 2f       	mov	r28, r24
	UART3Transmit(START_BYTE_MASTER);
    1224:	8c ef       	ldi	r24, 0xFC	; 252
    1226:	b0 dd       	rcall	.-1184   	; 0xd88 <_Z13UART3Transmith>
	UART3Transmit(dat);
    1228:	8c 2f       	mov	r24, r28
    122a:	ae dd       	rcall	.-1188   	; 0xd88 <_Z13UART3Transmith>
}
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <_Z27enable_robot_stop_interruptv>:

void enable_robot_stop_interrupt()
{
	cli();
    1230:	f8 94       	cli
	PCICR |= (1 << PCIE0);
    1232:	e8 e6       	ldi	r30, 0x68	; 104
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	80 83       	st	Z, r24
	PCIFR |= (1 << PCIF0);
    123c:	d8 9a       	sbi	0x1b, 0	; 27
	PCMSK0 |= (1 << PCINT4);
    123e:	eb e6       	ldi	r30, 0x6B	; 107
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 61       	ori	r24, 0x10	; 16
    1246:	80 83       	st	Z, r24
	sei();
    1248:	78 94       	sei
    124a:	08 95       	ret

0000124c <_Z10init_slavev>:
	
	

void init_slave()
{	
	auto_mode = false;
    124c:	10 92 bf 02 	sts	0x02BF, r1
	
	INPUT(STOP_THE_DRIVE);
    1250:	24 98       	cbi	0x04, 4	; 4
	
	reset_auto_mode();
    1252:	12 de       	rcall	.-988    	; 0xe78 <_Z15reset_auto_modev>
	enable_robot_stop_interrupt();
    1254:	ed cf       	rjmp	.-38     	; 0x1230 <_Z27enable_robot_stop_interruptv>
    1256:	08 95       	ret

00001258 <_Z15Brake_the_robotv>:
	sei();
}

void Brake_the_robot()
{
	distance = 0;
    1258:	10 92 e3 02 	sts	0x02E3, r1
    125c:	10 92 e4 02 	sts	0x02E4, r1
    1260:	10 92 e5 02 	sts	0x02E5, r1
    1264:	10 92 e6 02 	sts	0x02E6, r1
	moving = false;
    1268:	10 92 da 02 	sts	0x02DA, r1
	calculated = false;
    126c:	10 92 d5 02 	sts	0x02D5, r1
	line_track_enable = false;
    1270:	10 92 ce 02 	sts	0x02CE, r1
	//{
		//searching = true;
		//give_shtcock = true;
	//}
	
	if(current_location == Starting_Zone && next_location == Rack_zone)
    1274:	80 91 cb 02 	lds	r24, 0x02CB
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	31 f4       	brne	.+12     	; 0x1288 <_Z15Brake_the_robotv+0x30>
    127c:	80 91 ca 02 	lds	r24, 0x02CA
    1280:	84 30       	cpi	r24, 0x04	; 4
    1282:	69 f4       	brne	.+26     	; 0x129e <_Z15Brake_the_robotv+0x46>
		send_data_to_master(next_location);
    1284:	cd df       	rcall	.-102    	; 0x1220 <_Z19send_data_to_masterh>
    1286:	0b c0       	rjmp	.+22     	; 0x129e <_Z15Brake_the_robotv+0x46>
	else if(current_location == Golden_zone && next_location == Loading_zone1)
    1288:	85 30       	cpi	r24, 0x05	; 5
    128a:	49 f4       	brne	.+18     	; 0x129e <_Z15Brake_the_robotv+0x46>
    128c:	80 91 ca 02 	lds	r24, 0x02CA
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	29 f4       	brne	.+10     	; 0x129e <_Z15Brake_the_robotv+0x46>
	{
		shift_robot = true;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 d2 02 	sts	0x02D2, r24
		final_step = true;
    129a:	80 93 d0 02 	sts	0x02D0, r24
	}
	stop_flag = false;
    129e:	10 92 cf 02 	sts	0x02CF, r1
	
	
	if(Golden_Drop)
    12a2:	80 91 d7 02 	lds	r24, 0x02D7
    12a6:	88 23       	and	r24, r24
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <_Z15Brake_the_robotv+0x58>
		send_data_to_master(next_location);
    12aa:	80 91 ca 02 	lds	r24, 0x02CA
    12ae:	b8 df       	rcall	.-144    	; 0x1220 <_Z19send_data_to_masterh>
	
	current_location = next_location;	
    12b0:	80 91 ca 02 	lds	r24, 0x02CA
    12b4:	80 93 cb 02 	sts	0x02CB, r24
    12b8:	10 92 72 02 	sts	0x0272, r1
    12bc:	10 92 73 02 	sts	0x0273, r1
    12c0:	10 92 74 02 	sts	0x0274, r1
    12c4:	10 92 75 02 	sts	0x0275, r1
    12c8:	08 95       	ret

000012ca <_Z18operate_slave_autov>:
	//UART0TransmitString("\n\r");
	
}

void operate_slave_auto()
{
    12ca:	4f 92       	push	r4
    12cc:	5f 92       	push	r5
    12ce:	6f 92       	push	r6
    12d0:	7f 92       	push	r7
    12d2:	8f 92       	push	r8
    12d4:	9f 92       	push	r9
    12d6:	af 92       	push	r10
    12d8:	bf 92       	push	r11
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <_Z18operate_slave_autov+0x22>
    12ec:	1f 92       	push	r1
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	if (!moving && !searching && !search_fence)
    12f2:	80 91 da 02 	lds	r24, 0x02DA
    12f6:	81 11       	cpse	r24, r1
    12f8:	72 c0       	rjmp	.+228    	; 0x13de <_Z18operate_slave_autov+0x114>
    12fa:	80 91 d9 02 	lds	r24, 0x02D9
    12fe:	81 11       	cpse	r24, r1
    1300:	6e c0       	rjmp	.+220    	; 0x13de <_Z18operate_slave_autov+0x114>
    1302:	80 91 d8 02 	lds	r24, 0x02D8
    1306:	81 11       	cpse	r24, r1
    1308:	78 c3       	rjmp	.+1776   	; 0x19fa <_Z18operate_slave_autov+0x730>
	{
		//for up and down purpose adjustment
		if(DATA1 == up_rob)
    130a:	80 91 c2 02 	lds	r24, 0x02C2
    130e:	85 30       	cpi	r24, 0x05	; 5
    1310:	59 f4       	brne	.+22     	; 0x1328 <_Z18operate_slave_autov+0x5e>
		{
			velocity_robot[0] = -60;
    1312:	e6 ea       	ldi	r30, 0xA6	; 166
    1314:	f2 e0       	ldi	r31, 0x02	; 2
    1316:	84 ec       	ldi	r24, 0xC4	; 196
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	91 83       	std	Z+1, r25	; 0x01
    131c:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    131e:	13 82       	std	Z+3, r1	; 0x03
    1320:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;					
    1322:	15 82       	std	Z+5, r1	; 0x05
    1324:	14 82       	std	Z+4, r1	; 0x04
    1326:	2c c0       	rjmp	.+88     	; 0x1380 <_Z18operate_slave_autov+0xb6>
		}
		else if(DATA1 == down_rob)
    1328:	86 30       	cpi	r24, 0x06	; 6
    132a:	59 f4       	brne	.+22     	; 0x1342 <_Z18operate_slave_autov+0x78>
		{
			velocity_robot[0] = 60;
    132c:	e6 ea       	ldi	r30, 0xA6	; 166
    132e:	f2 e0       	ldi	r31, 0x02	; 2
    1330:	8c e3       	ldi	r24, 0x3C	; 60
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    1338:	13 82       	std	Z+3, r1	; 0x03
    133a:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;  
    133c:	15 82       	std	Z+5, r1	; 0x05
    133e:	14 82       	std	Z+4, r1	; 0x04
    1340:	1f c0       	rjmp	.+62     	; 0x1380 <_Z18operate_slave_autov+0xb6>
		} 
		else if(DATA1 == right_rob)
    1342:	87 30       	cpi	r24, 0x07	; 7
    1344:	59 f4       	brne	.+22     	; 0x135c <_Z18operate_slave_autov+0x92>
		{
			velocity_robot[0] = 0;
    1346:	e6 ea       	ldi	r30, 0xA6	; 166
    1348:	f2 e0       	ldi	r31, 0x02	; 2
    134a:	11 82       	std	Z+1, r1	; 0x01
    134c:	10 82       	st	Z, r1
			velocity_robot[1] = 60;
    134e:	8c e3       	ldi	r24, 0x3C	; 60
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	93 83       	std	Z+3, r25	; 0x03
    1354:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    1356:	15 82       	std	Z+5, r1	; 0x05
    1358:	14 82       	std	Z+4, r1	; 0x04
    135a:	12 c0       	rjmp	.+36     	; 0x1380 <_Z18operate_slave_autov+0xb6>
		}
		else if(DATA1 == left_rob)
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	59 f4       	brne	.+22     	; 0x1376 <_Z18operate_slave_autov+0xac>
		{
			velocity_robot[0] = 0;
    1360:	e6 ea       	ldi	r30, 0xA6	; 166
    1362:	f2 e0       	ldi	r31, 0x02	; 2
    1364:	11 82       	std	Z+1, r1	; 0x01
    1366:	10 82       	st	Z, r1
			velocity_robot[1] = -60;
    1368:	84 ec       	ldi	r24, 0xC4	; 196
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	93 83       	std	Z+3, r25	; 0x03
    136e:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    1370:	15 82       	std	Z+5, r1	; 0x05
    1372:	14 82       	std	Z+4, r1	; 0x04
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <_Z18operate_slave_autov+0xb6>
		}
		else 
		{
			if(!Golden_Drop)
    1376:	80 91 d7 02 	lds	r24, 0x02D7
    137a:	81 11       	cpse	r24, r1
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <_Z18operate_slave_autov+0xb6>
				reset_robot_velocity();
    137e:	2a d8       	rcall	.-4012   	; 0x3d4 <_Z20reset_robot_velocityv>
		}
			
		/******************************Data for auto mode from master************************************/
		if(DATA1 == Rack_load)
    1380:	80 91 c2 02 	lds	r24, 0x02C2
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	49 f4       	brne	.+18     	; 0x139a <_Z18operate_slave_autov+0xd0>
		{
			Goto_zone = Rack_zone;
    1388:	84 e0       	ldi	r24, 0x04	; 4
    138a:	80 93 c9 02 	sts	0x02C9, r24
			search_fence = true;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 93 d8 02 	sts	0x02D8, r24
			DATA1 = 0;
    1394:	10 92 c2 02 	sts	0x02C2, r1
    1398:	2b c3       	rjmp	.+1622   	; 0x19f0 <_Z18operate_slave_autov+0x726>
		}
		else if(DATA1 == Load1)
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	41 f4       	brne	.+16     	; 0x13ae <_Z18operate_slave_autov+0xe4>
		{
			Goto_zone = Loading_zone1;
    139e:	80 93 c9 02 	sts	0x02C9, r24
			search_fence = true;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 d8 02 	sts	0x02D8, r24
			DATA1 = 0;
    13a8:	10 92 c2 02 	sts	0x02C2, r1
    13ac:	21 c3       	rjmp	.+1602   	; 0x19f0 <_Z18operate_slave_autov+0x726>
		}
		else if (DATA1 == Load2)
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	41 f4       	brne	.+16     	; 0x13c2 <_Z18operate_slave_autov+0xf8>
		{
			Goto_zone = Loading_zone2;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	80 93 c9 02 	sts	0x02C9, r24
			search_fence = true;
    13b8:	80 93 d8 02 	sts	0x02D8, r24
			DATA1 = 0;
    13bc:	10 92 c2 02 	sts	0x02C2, r1
    13c0:	17 c3       	rjmp	.+1582   	; 0x19f0 <_Z18operate_slave_autov+0x726>
		}
		else if (DATA1 == Search_automaticrobot)
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	31 f4       	brne	.+12     	; 0x13d2 <_Z18operate_slave_autov+0x108>
		{
			searching = true;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	80 93 d9 02 	sts	0x02D9, r24
			DATA1 = 0;
    13cc:	10 92 c2 02 	sts	0x02C2, r1
    13d0:	0f c3       	rjmp	.+1566   	; 0x19f0 <_Z18operate_slave_autov+0x726>
		}
		else if(DATA1 == Golden_Rack)
    13d2:	89 30       	cpi	r24, 0x09	; 9
    13d4:	21 f4       	brne	.+8      	; 0x13de <_Z18operate_slave_autov+0x114>
		{	
			Golden_Rack_Place();	
    13d6:	f0 de       	rcall	.-544    	; 0x11b8 <_Z17Golden_Rack_Placev>
			DATA1 = 0;
    13d8:	10 92 c2 02 	sts	0x02C2, r1
    13dc:	09 c3       	rjmp	.+1554   	; 0x19f0 <_Z18operate_slave_autov+0x726>
		}
	}
	
	if(final_step)
    13de:	80 91 d0 02 	lds	r24, 0x02D0
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <_Z18operate_slave_autov+0x11e>
    13e6:	68 c0       	rjmp	.+208    	; 0x14b8 <_Z18operate_slave_autov+0x1ee>
	{	
		//after the golden rack is thrown robot will shift back	
		if(DATA1 == Go_after_throw)
    13e8:	80 91 c2 02 	lds	r24, 0x02C2
    13ec:	8e 30       	cpi	r24, 0x0E	; 14
    13ee:	c1 f4       	brne	.+48     	; 0x1420 <_Z18operate_slave_autov+0x156>
		{
			velocity_robot[0] = 60;
    13f0:	e6 ea       	ldi	r30, 0xA6	; 166
    13f2:	f2 e0       	ldi	r31, 0x02	; 2
    13f4:	8c e3       	ldi	r24, 0x3C	; 60
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	91 83       	std	Z+1, r25	; 0x01
    13fa:	80 83       	st	Z, r24
			velocity_robot[1] = 30;
    13fc:	8e e1       	ldi	r24, 0x1E	; 30
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	93 83       	std	Z+3, r25	; 0x03
    1402:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    1404:	15 82       	std	Z+5, r1	; 0x05
    1406:	14 82       	std	Z+4, r1	; 0x04
    1408:	10 92 6d 02 	sts	0x026D, r1
    140c:	10 92 6e 02 	sts	0x026E, r1
    1410:	10 92 6f 02 	sts	0x026F, r1
    1414:	10 92 70 02 	sts	0x0270, r1
			ey.Reset_Distance();
			after_move_back = true;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 cd 02 	sts	0x02CD, r24
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <_Z18operate_slave_autov+0x15e>
		}
		
		//stop the robot after certain shift when the rack is thrown
		if(after_move_back && (ey.Get_Distance() <= -330) )
    1420:	80 91 cd 02 	lds	r24, 0x02CD
    1424:	88 23       	and	r24, r24
    1426:	71 f0       	breq	.+28     	; 0x1444 <_Z18operate_slave_autov+0x17a>
    1428:	80 91 6d 02 	lds	r24, 0x026D
    142c:	90 91 6e 02 	lds	r25, 0x026E
    1430:	a0 91 6f 02 	lds	r26, 0x026F
    1434:	b0 91 70 02 	lds	r27, 0x0270
    1438:	87 3b       	cpi	r24, 0xB7	; 183
    143a:	9e 4f       	sbci	r25, 0xFE	; 254
    143c:	af 4f       	sbci	r26, 0xFF	; 255
    143e:	bf 4f       	sbci	r27, 0xFF	; 255
    1440:	0c f4       	brge	.+2      	; 0x1444 <_Z18operate_slave_autov+0x17a>
    1442:	e0 c2       	rjmp	.+1472   	; 0x1a04 <_Z18operate_slave_autov+0x73a>
			Golden_Drop = false;
			after_move_back = false;
		}
		
		//move forward after rotating
		if(rotate_robot) 
    1444:	80 91 d1 02 	lds	r24, 0x02D1
    1448:	88 23       	and	r24, r24
    144a:	d9 f0       	breq	.+54     	; 0x1482 <_Z18operate_slave_autov+0x1b8>
		{
			if(counter_motor >= ROTATE_COUNT)
    144c:	80 91 ba 02 	lds	r24, 0x02BA
    1450:	90 91 bb 02 	lds	r25, 0x02BB
    1454:	8c 3b       	cpi	r24, 0xBC	; 188
    1456:	92 40       	sbci	r25, 0x02	; 2
    1458:	a0 f0       	brcs	.+40     	; 0x1482 <_Z18operate_slave_autov+0x1b8>
			{
				rotate_robot = false;
    145a:	10 92 d1 02 	sts	0x02D1, r1
				velocity_robot[0] = -150;
    145e:	e6 ea       	ldi	r30, 0xA6	; 166
    1460:	f2 e0       	ldi	r31, 0x02	; 2
    1462:	8a e6       	ldi	r24, 0x6A	; 106
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
				velocity_robot[1] = 35;
    146a:	83 e2       	ldi	r24, 0x23	; 35
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	93 83       	std	Z+3, r25	; 0x03
    1470:	82 83       	std	Z+2, r24	; 0x02
				velocity_robot[2] = 0;
    1472:	15 82       	std	Z+5, r1	; 0x05
    1474:	14 82       	std	Z+4, r1	; 0x04
				count_the_motor = false;
    1476:	10 92 bc 02 	sts	0x02BC, r1
				counter_motor = 0;
    147a:	10 92 bb 02 	sts	0x02BB, r1
    147e:	10 92 ba 02 	sts	0x02BA, r1
			}
		}		
		
		//after shifting
		if(shift_robot)
    1482:	80 91 d2 02 	lds	r24, 0x02D2
    1486:	88 23       	and	r24, r24
    1488:	b9 f0       	breq	.+46     	; 0x14b8 <_Z18operate_slave_autov+0x1ee>
		{
			shift_robot = false;
    148a:	10 92 d2 02 	sts	0x02D2, r1
			rotate_robot = true;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 d1 02 	sts	0x02D1, r24
			count_the_motor = true;
    1494:	80 93 bc 02 	sts	0x02BC, r24
			velocity_robot[0] =  0;
    1498:	e6 ea       	ldi	r30, 0xA6	; 166
    149a:	f2 e0       	ldi	r31, 0x02	; 2
    149c:	11 82       	std	Z+1, r1	; 0x01
    149e:	10 82       	st	Z, r1
			velocity_robot[1] =  0;
    14a0:	13 82       	std	Z+3, r1	; 0x03
    14a2:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = -150;			
    14a4:	8a e6       	ldi	r24, 0x6A	; 106
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	95 83       	std	Z+5, r25	; 0x05
    14aa:	84 83       	std	Z+4, r24	; 0x04
			counter_motor = 0;
    14ac:	10 92 bb 02 	sts	0x02BB, r1
    14b0:	10 92 ba 02 	sts	0x02BA, r1
			send_data_to_master(enable_gldprox);	
    14b4:	8c e0       	ldi	r24, 0x0C	; 12
    14b6:	b4 de       	rcall	.-664    	; 0x1220 <_Z19send_data_to_masterh>
		}
	
	}
	
	if(search_fence)
    14b8:	80 91 d8 02 	lds	r24, 0x02D8
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <_Z18operate_slave_autov+0x1f8>
    14c0:	4f c0       	rjmp	.+158    	; 0x1560 <_Z18operate_slave_autov+0x296>
	{
		if(DATA2 == 2)
    14c2:	80 91 c3 02 	lds	r24, 0x02C3
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	09 f0       	breq	.+2      	; 0x14cc <_Z18operate_slave_autov+0x202>
    14ca:	40 c0       	rjmp	.+128    	; 0x154c <_Z18operate_slave_autov+0x282>
		{
			if(Goto_zone == Rack_zone)
    14cc:	80 91 c9 02 	lds	r24, 0x02C9
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	81 f4       	brne	.+32     	; 0x14f4 <_Z18operate_slave_autov+0x22a>
			{
				next_location = Rack_zone;
    14d4:	80 93 ca 02 	sts	0x02CA, r24
				next_distance = RZONE;
    14d8:	10 92 db 02 	sts	0x02DB, r1
    14dc:	10 92 dc 02 	sts	0x02DC, r1
    14e0:	10 92 dd 02 	sts	0x02DD, r1
    14e4:	10 92 de 02 	sts	0x02DE, r1
				move_robot();
    14e8:	b4 dd       	rcall	.-1176   	; 0x1052 <_Z10move_robotv>
				search_fence = false;
    14ea:	10 92 d8 02 	sts	0x02D8, r1
				Goto_zone = No_where;
    14ee:	10 92 c9 02 	sts	0x02C9, r1
    14f2:	36 c0       	rjmp	.+108    	; 0x1560 <_Z18operate_slave_autov+0x296>
			}
			else if(Goto_zone == Loading_zone1)
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	a1 f4       	brne	.+40     	; 0x1520 <_Z18operate_slave_autov+0x256>
			{
				next_location = Loading_zone1;
    14f8:	80 93 ca 02 	sts	0x02CA, r24
				next_distance = LZONE1;
    14fc:	89 ea       	ldi	r24, 0xA9	; 169
    14fe:	94 e2       	ldi	r25, 0x24	; 36
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	80 93 db 02 	sts	0x02DB, r24
    1508:	90 93 dc 02 	sts	0x02DC, r25
    150c:	a0 93 dd 02 	sts	0x02DD, r26
    1510:	b0 93 de 02 	sts	0x02DE, r27
				move_robot();
    1514:	9e dd       	rcall	.-1220   	; 0x1052 <_Z10move_robotv>
				search_fence = false;
    1516:	10 92 d8 02 	sts	0x02D8, r1
				Goto_zone = No_where;
    151a:	10 92 c9 02 	sts	0x02C9, r1
    151e:	20 c0       	rjmp	.+64     	; 0x1560 <_Z18operate_slave_autov+0x296>
			}
			else if(Goto_zone == Loading_zone2)
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	f1 f4       	brne	.+60     	; 0x1560 <_Z18operate_slave_autov+0x296>
			{
				next_location = Loading_zone2;
    1524:	80 93 ca 02 	sts	0x02CA, r24
				next_distance = LZONE2;
    1528:	85 e5       	ldi	r24, 0x55	; 85
    152a:	9d e2       	ldi	r25, 0x2D	; 45
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	80 93 db 02 	sts	0x02DB, r24
    1534:	90 93 dc 02 	sts	0x02DC, r25
    1538:	a0 93 dd 02 	sts	0x02DD, r26
    153c:	b0 93 de 02 	sts	0x02DE, r27
				move_robot();
    1540:	88 dd       	rcall	.-1264   	; 0x1052 <_Z10move_robotv>
				search_fence = false;
    1542:	10 92 d8 02 	sts	0x02D8, r1
				Goto_zone = No_where;	
    1546:	10 92 c9 02 	sts	0x02C9, r1
    154a:	0a c0       	rjmp	.+20     	; 0x1560 <_Z18operate_slave_autov+0x296>
			}
		}
		else 
		{
			velocity_robot[0] = SEARCH_RPM;
    154c:	e6 ea       	ldi	r30, 0xA6	; 166
    154e:	f2 e0       	ldi	r31, 0x02	; 2
    1550:	8c e3       	ldi	r24, 0x3C	; 60
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	91 83       	std	Z+1, r25	; 0x01
    1556:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    1558:	13 82       	std	Z+3, r1	; 0x03
    155a:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;
    155c:	15 82       	std	Z+5, r1	; 0x05
    155e:	14 82       	std	Z+4, r1	; 0x04
		
	}
	
	
	/**********************************If moving to different zone then perform ramping************************************/
	if (moving)
    1560:	80 91 da 02 	lds	r24, 0x02DA
    1564:	88 23       	and	r24, r24
    1566:	09 f4       	brne	.+2      	; 0x156a <_Z18operate_slave_autov+0x2a0>
    1568:	7d c1       	rjmp	.+762    	; 0x1864 <_Z18operate_slave_autov+0x59a>
	{
		//to calculate slope only one time at the start
			if(!calculated)
    156a:	80 91 d5 02 	lds	r24, 0x02D5
    156e:	81 11       	cpse	r24, r1
    1570:	4c c0       	rjmp	.+152    	; 0x160a <_Z18operate_slave_autov+0x340>
			{
				slopeup =  (speed-(dir*RAMP_UP_OFFSET))/ramp_up_dist;
    1572:	80 91 fd 02 	lds	r24, 0x02FD
    1576:	e0 90 fb 02 	lds	r14, 0x02FB
    157a:	f0 90 fc 02 	lds	r15, 0x02FC
    157e:	c8 2e       	mov	r12, r24
    1580:	08 2e       	mov	r0, r24
    1582:	00 0c       	add	r0, r0
    1584:	dd 08       	sbc	r13, r13
    1586:	b7 01       	movw	r22, r14
    1588:	f0 e5       	ldi	r31, 0x50	; 80
    158a:	8f 02       	muls	r24, r31
    158c:	60 19       	sub	r22, r0
    158e:	71 09       	sbc	r23, r1
    1590:	11 24       	eor	r1, r1
    1592:	07 2e       	mov	r0, r23
    1594:	00 0c       	add	r0, r0
    1596:	88 0b       	sbc	r24, r24
    1598:	99 0b       	sbc	r25, r25
    159a:	fa d3       	rcall	.+2036   	; 0x1d90 <__floatsisf>
    159c:	20 91 eb 02 	lds	r18, 0x02EB
    15a0:	30 91 ec 02 	lds	r19, 0x02EC
    15a4:	40 91 ed 02 	lds	r20, 0x02ED
    15a8:	50 91 ee 02 	lds	r21, 0x02EE
    15ac:	56 d3       	rcall	.+1708   	; 0x1c5a <__divsf3>
    15ae:	60 93 f5 02 	sts	0x02F5, r22
    15b2:	70 93 f6 02 	sts	0x02F6, r23
    15b6:	80 93 f7 02 	sts	0x02F7, r24
    15ba:	90 93 f8 02 	sts	0x02F8, r25
				slopedown = (-((speed-dir*ramp_down_off_adj))/ramp_down_dist);
    15be:	80 91 ef 02 	lds	r24, 0x02EF
    15c2:	90 91 f0 02 	lds	r25, 0x02F0
    15c6:	c8 9e       	mul	r12, r24
    15c8:	b0 01       	movw	r22, r0
    15ca:	c9 9e       	mul	r12, r25
    15cc:	70 0d       	add	r23, r0
    15ce:	d8 9e       	mul	r13, r24
    15d0:	70 0d       	add	r23, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	6e 19       	sub	r22, r14
    15d6:	7f 09       	sbc	r23, r15
    15d8:	07 2e       	mov	r0, r23
    15da:	00 0c       	add	r0, r0
    15dc:	88 0b       	sbc	r24, r24
    15de:	99 0b       	sbc	r25, r25
    15e0:	d7 d3       	rcall	.+1966   	; 0x1d90 <__floatsisf>
    15e2:	20 91 e7 02 	lds	r18, 0x02E7
    15e6:	30 91 e8 02 	lds	r19, 0x02E8
    15ea:	40 91 e9 02 	lds	r20, 0x02E9
    15ee:	50 91 ea 02 	lds	r21, 0x02EA
    15f2:	33 d3       	rcall	.+1638   	; 0x1c5a <__divsf3>
    15f4:	60 93 f1 02 	sts	0x02F1, r22
    15f8:	70 93 f2 02 	sts	0x02F2, r23
    15fc:	80 93 f3 02 	sts	0x02F3, r24
    1600:	90 93 f4 02 	sts	0x02F4, r25
				calculated = true;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	80 93 d5 02 	sts	0x02D5, r24
			}
			
			if(!line_track_enable && !donot_stop_on_line && (abs(ex.Get_Distance()) >= (distance-LINETRACK_ENB_DIST)))
    160a:	80 91 ce 02 	lds	r24, 0x02CE
    160e:	81 11       	cpse	r24, r1
    1610:	30 c0       	rjmp	.+96     	; 0x1672 <_Z18operate_slave_autov+0x3a8>
    1612:	80 91 cc 02 	lds	r24, 0x02CC
    1616:	81 11       	cpse	r24, r1
    1618:	2c c0       	rjmp	.+88     	; 0x1672 <_Z18operate_slave_autov+0x3a8>
    161a:	80 91 e3 02 	lds	r24, 0x02E3
    161e:	90 91 e4 02 	lds	r25, 0x02E4
    1622:	a0 91 e5 02 	lds	r26, 0x02E5
    1626:	b0 91 e6 02 	lds	r27, 0x02E6
    162a:	80 52       	subi	r24, 0x20	; 32
    162c:	93 40       	sbci	r25, 0x03	; 3
    162e:	a1 09       	sbc	r26, r1
    1630:	b1 09       	sbc	r27, r1
    1632:	40 91 72 02 	lds	r20, 0x0272
    1636:	50 91 73 02 	lds	r21, 0x0273
    163a:	60 91 74 02 	lds	r22, 0x0274
    163e:	70 91 75 02 	lds	r23, 0x0275
    1642:	77 23       	and	r23, r23
    1644:	3c f4       	brge	.+14     	; 0x1654 <_Z18operate_slave_autov+0x38a>
    1646:	70 95       	com	r23
    1648:	60 95       	com	r22
    164a:	50 95       	com	r21
    164c:	41 95       	neg	r20
    164e:	5f 4f       	sbci	r21, 0xFF	; 255
    1650:	6f 4f       	sbci	r22, 0xFF	; 255
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	48 17       	cp	r20, r24
    1656:	59 07       	cpc	r21, r25
    1658:	6a 07       	cpc	r22, r26
    165a:	7b 07       	cpc	r23, r27
    165c:	0c f0       	brlt	.+2      	; 0x1660 <_Z18operate_slave_autov+0x396>
    165e:	db c1       	rjmp	.+950    	; 0x1a16 <_Z18operate_slave_autov+0x74c>
    1660:	08 c0       	rjmp	.+16     	; 0x1672 <_Z18operate_slave_autov+0x3a8>
			{
				if(next_location == Rack_zone || next_location == Golden_zone)
				{
					send_data_to_master(enable_prox);
    1662:	8b e0       	ldi	r24, 0x0B	; 11
    1664:	dd dd       	rcall	.-1094   	; 0x1220 <_Z19send_data_to_masterh>
    1666:	02 c0       	rjmp	.+4      	; 0x166c <_Z18operate_slave_autov+0x3a2>
				}
				else 
				{
					send_data_to_master(enable_Jpulse);
    1668:	8f e0       	ldi	r24, 0x0F	; 15
    166a:	da dd       	rcall	.-1100   	; 0x1220 <_Z19send_data_to_masterh>
				}
				line_track_enable = true;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	80 93 ce 02 	sts	0x02CE, r24
			}
			
			//if destination is reached interrupt is trigerred by the master
			
			if(stop_flag)
    1672:	80 91 cf 02 	lds	r24, 0x02CF
    1676:	81 11       	cpse	r24, r1
			{
				Brake_the_robot();
    1678:	ef dd       	rcall	.-1058   	; 0x1258 <_Z15Brake_the_robotv>
		FreeWheelEnc():encdistance(0){};
		void Initialise(uint8_t x);
		void Init_Interrupts();
		inline void incCount(){encdistance++;};
		inline void dcrCount(){encdistance--;};
		inline long int Get_Distance(){return encdistance;};
    167a:	c0 90 72 02 	lds	r12, 0x0272
    167e:	d0 90 73 02 	lds	r13, 0x0273
    1682:	e0 90 74 02 	lds	r14, 0x0274
    1686:	f0 90 75 02 	lds	r15, 0x0275
			}
			
			//if destination is reached
			if(abs(ex.Get_Distance()) >= distance)
    168a:	40 90 e3 02 	lds	r4, 0x02E3
    168e:	50 90 e4 02 	lds	r5, 0x02E4
    1692:	60 90 e5 02 	lds	r6, 0x02E5
    1696:	70 90 e6 02 	lds	r7, 0x02E6
    169a:	d7 01       	movw	r26, r14
    169c:	c6 01       	movw	r24, r12
    169e:	ff 20       	and	r15, r15
    16a0:	3c f4       	brge	.+14     	; 0x16b0 <_Z18operate_slave_autov+0x3e6>
    16a2:	88 27       	eor	r24, r24
    16a4:	99 27       	eor	r25, r25
    16a6:	dc 01       	movw	r26, r24
    16a8:	8c 19       	sub	r24, r12
    16aa:	9d 09       	sbc	r25, r13
    16ac:	ae 09       	sbc	r26, r14
    16ae:	bf 09       	sbc	r27, r15
    16b0:	84 15       	cp	r24, r4
    16b2:	95 05       	cpc	r25, r5
    16b4:	a6 05       	cpc	r26, r6
    16b6:	b7 05       	cpc	r27, r7
    16b8:	bc f0       	brlt	.+46     	; 0x16e8 <_Z18operate_slave_autov+0x41e>
			{
				//stop the robot
				if(donot_stop_on_line)
    16ba:	80 91 cc 02 	lds	r24, 0x02CC
    16be:	88 23       	and	r24, r24
    16c0:	21 f0       	breq	.+8      	; 0x16ca <_Z18operate_slave_autov+0x400>
				{
					Brake_the_robot();
    16c2:	ca dd       	rcall	.-1132   	; 0x1258 <_Z15Brake_the_robotv>
					donot_stop_on_line = false;
    16c4:	10 92 cc 02 	sts	0x02CC, r1
    16c8:	cd c0       	rjmp	.+410    	; 0x1864 <_Z18operate_slave_autov+0x59a>
				}
				else
				{
					velocity_robot[0] = 0;
    16ca:	e6 ea       	ldi	r30, 0xA6	; 166
    16cc:	f2 e0       	ldi	r31, 0x02	; 2
    16ce:	11 82       	std	Z+1, r1	; 0x01
    16d0:	10 82       	st	Z, r1
					velocity_robot[1] = dir*RAMP_DOWN_OFFSET;
    16d2:	80 91 fd 02 	lds	r24, 0x02FD
    16d6:	29 e1       	ldi	r18, 0x19	; 25
    16d8:	82 02       	muls	r24, r18
    16da:	c0 01       	movw	r24, r0
    16dc:	11 24       	eor	r1, r1
    16de:	93 83       	std	Z+3, r25	; 0x03
    16e0:	82 83       	std	Z+2, r24	; 0x02
					velocity_robot[2] = 0;
    16e2:	15 82       	std	Z+5, r1	; 0x05
    16e4:	14 82       	std	Z+4, r1	; 0x04
    16e6:	be c0       	rjmp	.+380    	; 0x1864 <_Z18operate_slave_autov+0x59a>
				}
			}
			else if (abs(ex.Get_Distance()) >= ramp_up_dist && (abs(ex.Get_Distance()) <= (distance-ramp_down_dist)))
    16e8:	1c 14       	cp	r1, r12
    16ea:	1d 04       	cpc	r1, r13
    16ec:	1e 04       	cpc	r1, r14
    16ee:	1f 04       	cpc	r1, r15
    16f0:	ac f4       	brge	.+42     	; 0x171c <_Z18operate_slave_autov+0x452>
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	4c d3       	rcall	.+1688   	; 0x1d90 <__floatsisf>
    16f8:	69 83       	std	Y+1, r22	; 0x01
    16fa:	7a 83       	std	Y+2, r23	; 0x02
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	80 90 eb 02 	lds	r8, 0x02EB
    1704:	90 90 ec 02 	lds	r9, 0x02EC
    1708:	a0 90 ed 02 	lds	r10, 0x02ED
    170c:	b0 90 ee 02 	lds	r11, 0x02EE
    1710:	a5 01       	movw	r20, r10
    1712:	94 01       	movw	r18, r8
    1714:	ed d3       	rcall	.+2010   	; 0x1ef0 <__gesf2>
    1716:	88 23       	and	r24, r24
    1718:	dc f4       	brge	.+54     	; 0x1750 <_Z18operate_slave_autov+0x486>
    171a:	48 c0       	rjmp	.+144    	; 0x17ac <_Z18operate_slave_autov+0x4e2>
    171c:	66 27       	eor	r22, r22
    171e:	77 27       	eor	r23, r23
    1720:	cb 01       	movw	r24, r22
    1722:	6c 19       	sub	r22, r12
    1724:	7d 09       	sbc	r23, r13
    1726:	8e 09       	sbc	r24, r14
    1728:	9f 09       	sbc	r25, r15
    172a:	32 d3       	rcall	.+1636   	; 0x1d90 <__floatsisf>
    172c:	69 83       	std	Y+1, r22	; 0x01
    172e:	7a 83       	std	Y+2, r23	; 0x02
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	80 90 eb 02 	lds	r8, 0x02EB
    1738:	90 90 ec 02 	lds	r9, 0x02EC
    173c:	a0 90 ed 02 	lds	r10, 0x02ED
    1740:	b0 90 ee 02 	lds	r11, 0x02EE
    1744:	a5 01       	movw	r20, r10
    1746:	94 01       	movw	r18, r8
    1748:	d3 d3       	rcall	.+1958   	; 0x1ef0 <__gesf2>
    174a:	88 23       	and	r24, r24
    174c:	c4 f4       	brge	.+48     	; 0x177e <_Z18operate_slave_autov+0x4b4>
    174e:	3b c0       	rjmp	.+118    	; 0x17c6 <_Z18operate_slave_autov+0x4fc>
    1750:	c3 01       	movw	r24, r6
    1752:	b2 01       	movw	r22, r4
    1754:	1d d3       	rcall	.+1594   	; 0x1d90 <__floatsisf>
    1756:	20 91 e7 02 	lds	r18, 0x02E7
    175a:	30 91 e8 02 	lds	r19, 0x02E8
    175e:	40 91 e9 02 	lds	r20, 0x02E9
    1762:	50 91 ea 02 	lds	r21, 0x02EA
    1766:	10 d2       	rcall	.+1056   	; 0x1b88 <__subsf3>
    1768:	9b 01       	movw	r18, r22
    176a:	ac 01       	movw	r20, r24
    176c:	69 81       	ldd	r22, Y+1	; 0x01
    176e:	7a 81       	ldd	r23, Y+2	; 0x02
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	6e d2       	rcall	.+1244   	; 0x1c52 <__cmpsf2>
    1776:	18 16       	cp	r1, r24
    1778:	0c f0       	brlt	.+2      	; 0x177c <_Z18operate_slave_autov+0x4b2>
    177a:	54 c1       	rjmp	.+680    	; 0x1a24 <_Z18operate_slave_autov+0x75a>
    177c:	17 c0       	rjmp	.+46     	; 0x17ac <_Z18operate_slave_autov+0x4e2>
    177e:	c3 01       	movw	r24, r6
    1780:	b2 01       	movw	r22, r4
    1782:	06 d3       	rcall	.+1548   	; 0x1d90 <__floatsisf>
    1784:	20 91 e7 02 	lds	r18, 0x02E7
    1788:	30 91 e8 02 	lds	r19, 0x02E8
    178c:	40 91 e9 02 	lds	r20, 0x02E9
    1790:	50 91 ea 02 	lds	r21, 0x02EA
    1794:	f9 d1       	rcall	.+1010   	; 0x1b88 <__subsf3>
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	69 81       	ldd	r22, Y+1	; 0x01
    179c:	7a 81       	ldd	r23, Y+2	; 0x02
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	9c 81       	ldd	r25, Y+4	; 0x04
    17a2:	57 d2       	rcall	.+1198   	; 0x1c52 <__cmpsf2>
    17a4:	18 16       	cp	r1, r24
    17a6:	0c f0       	brlt	.+2      	; 0x17aa <_Z18operate_slave_autov+0x4e0>
    17a8:	3d c1       	rjmp	.+634    	; 0x1a24 <_Z18operate_slave_autov+0x75a>
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <_Z18operate_slave_autov+0x4fc>
			{
				//normal
				velocity_robot[1] = speed;
			}
			else if (abs(ex.Get_Distance()) <= ramp_up_dist)
    17ac:	c7 01       	movw	r24, r14
    17ae:	b6 01       	movw	r22, r12
    17b0:	ef d2       	rcall	.+1502   	; 0x1d90 <__floatsisf>
    17b2:	69 83       	std	Y+1, r22	; 0x01
    17b4:	7a 83       	std	Y+2, r23	; 0x02
    17b6:	8b 83       	std	Y+3, r24	; 0x03
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	a5 01       	movw	r20, r10
    17bc:	94 01       	movw	r18, r8
    17be:	49 d2       	rcall	.+1170   	; 0x1c52 <__cmpsf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	94 f4       	brge	.+36     	; 0x17e8 <_Z18operate_slave_autov+0x51e>
    17c4:	37 c0       	rjmp	.+110    	; 0x1834 <_Z18operate_slave_autov+0x56a>
    17c6:	66 27       	eor	r22, r22
    17c8:	77 27       	eor	r23, r23
    17ca:	cb 01       	movw	r24, r22
    17cc:	6c 19       	sub	r22, r12
    17ce:	7d 09       	sbc	r23, r13
    17d0:	8e 09       	sbc	r24, r14
    17d2:	9f 09       	sbc	r25, r15
    17d4:	dd d2       	rcall	.+1466   	; 0x1d90 <__floatsisf>
    17d6:	69 83       	std	Y+1, r22	; 0x01
    17d8:	7a 83       	std	Y+2, r23	; 0x02
    17da:	8b 83       	std	Y+3, r24	; 0x03
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	a5 01       	movw	r20, r10
    17e0:	94 01       	movw	r18, r8
    17e2:	37 d2       	rcall	.+1134   	; 0x1c52 <__cmpsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	34 f1       	brlt	.+76     	; 0x1834 <_Z18operate_slave_autov+0x56a>
			{
				//ramp up
				velocity_robot[1] = dir*((slopeup*ex.Get_Distance())+RAMP_UP_OFFSET);
    17e8:	60 91 fd 02 	lds	r22, 0x02FD
    17ec:	06 2e       	mov	r0, r22
    17ee:	00 0c       	add	r0, r0
    17f0:	77 0b       	sbc	r23, r23
    17f2:	88 0b       	sbc	r24, r24
    17f4:	99 0b       	sbc	r25, r25
    17f6:	cc d2       	rcall	.+1432   	; 0x1d90 <__floatsisf>
    17f8:	4b 01       	movw	r8, r22
    17fa:	5c 01       	movw	r10, r24
    17fc:	c7 01       	movw	r24, r14
    17fe:	b6 01       	movw	r22, r12
    1800:	c7 d2       	rcall	.+1422   	; 0x1d90 <__floatsisf>
    1802:	20 91 f5 02 	lds	r18, 0x02F5
    1806:	30 91 f6 02 	lds	r19, 0x02F6
    180a:	40 91 f7 02 	lds	r20, 0x02F7
    180e:	50 91 f8 02 	lds	r21, 0x02F8
    1812:	72 d3       	rcall	.+1764   	; 0x1ef8 <__mulsf3>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 ea       	ldi	r20, 0xA0	; 160
    181a:	52 e4       	ldi	r21, 0x42	; 66
    181c:	b6 d1       	rcall	.+876    	; 0x1b8a <__addsf3>
    181e:	9b 01       	movw	r18, r22
    1820:	ac 01       	movw	r20, r24
    1822:	c5 01       	movw	r24, r10
    1824:	b4 01       	movw	r22, r8
    1826:	68 d3       	rcall	.+1744   	; 0x1ef8 <__mulsf3>
    1828:	80 d2       	rcall	.+1280   	; 0x1d2a <__fixsfsi>
    182a:	70 93 a9 02 	sts	0x02A9, r23
    182e:	60 93 a8 02 	sts	0x02A8, r22
    1832:	18 c0       	rjmp	.+48     	; 0x1864 <_Z18operate_slave_autov+0x59a>
			}			
			else if ((abs(ex.Get_Distance()) <= distance) && (abs(ex.Get_Distance()) >= (distance-ramp_down_dist)))
    1834:	80 90 e7 02 	lds	r8, 0x02E7
    1838:	90 90 e8 02 	lds	r9, 0x02E8
    183c:	a0 90 e9 02 	lds	r10, 0x02E9
    1840:	b0 90 ea 02 	lds	r11, 0x02EA
    1844:	c3 01       	movw	r24, r6
    1846:	b2 01       	movw	r22, r4
    1848:	a3 d2       	rcall	.+1350   	; 0x1d90 <__floatsisf>
    184a:	a5 01       	movw	r20, r10
    184c:	94 01       	movw	r18, r8
    184e:	9c d1       	rcall	.+824    	; 0x1b88 <__subsf3>
    1850:	9b 01       	movw	r18, r22
    1852:	ac 01       	movw	r20, r24
    1854:	69 81       	ldd	r22, Y+1	; 0x01
    1856:	7a 81       	ldd	r23, Y+2	; 0x02
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	49 d3       	rcall	.+1682   	; 0x1ef0 <__gesf2>
    185e:	88 23       	and	r24, r24
    1860:	0c f0       	brlt	.+2      	; 0x1864 <_Z18operate_slave_autov+0x59a>
    1862:	e9 c0       	rjmp	.+466    	; 0x1a36 <_Z18operate_slave_autov+0x76c>
			
			
	}
	
	//Search the automatic robot
	if(searching)
    1864:	80 91 d9 02 	lds	r24, 0x02D9
    1868:	88 23       	and	r24, r24
    186a:	09 f4       	brne	.+2      	; 0x186e <_Z18operate_slave_autov+0x5a4>
    186c:	bd c0       	rjmp	.+378    	; 0x19e8 <_Z18operate_slave_autov+0x71e>
	{
		if(DATA1 == Stop_Search)
    186e:	80 91 c2 02 	lds	r24, 0x02C2
    1872:	8d 30       	cpi	r24, 0x0D	; 13
    1874:	71 f4       	brne	.+28     	; 0x1892 <_Z18operate_slave_autov+0x5c8>
		{
			reset_robot_velocity(); 
    1876:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Z20reset_robot_velocityv>
			searching = false;
    187a:	10 92 d9 02 	sts	0x02D9, r1
			pressed = false;
    187e:	10 92 d6 02 	sts	0x02D6, r1
			searching_rpm = SEARCH_RPM;
    1882:	8c e3       	ldi	r24, 0x3C	; 60
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	90 93 fa 02 	sts	0x02FA, r25
    188a:	80 93 f9 02 	sts	0x02F9, r24
			DATA1 = 0;
    188e:	10 92 c2 02 	sts	0x02C2, r1
		}
		
		if(DATA3 == 0)
    1892:	80 91 c4 02 	lds	r24, 0x02C4
    1896:	81 11       	cpse	r24, r1
    1898:	10 c0       	rjmp	.+32     	; 0x18ba <_Z18operate_slave_autov+0x5f0>
		{
			velocity_robot[0] = -searching_rpm;
    189a:	e6 ea       	ldi	r30, 0xA6	; 166
    189c:	f2 e0       	ldi	r31, 0x02	; 2
    189e:	80 91 f9 02 	lds	r24, 0x02F9
    18a2:	90 91 fa 02 	lds	r25, 0x02FA
    18a6:	91 95       	neg	r25
    18a8:	81 95       	neg	r24
    18aa:	91 09       	sbc	r25, r1
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
			velocity_robot[1] = 0;
    18b0:	13 82       	std	Z+3, r1	; 0x03
    18b2:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = 0;				
    18b4:	15 82       	std	Z+5, r1	; 0x05
    18b6:	14 82       	std	Z+4, r1	; 0x04
    18b8:	8d c0       	rjmp	.+282    	; 0x19d4 <_Z18operate_slave_autov+0x70a>
		}
		else if(DATA3 == 1)
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	a9 f4       	brne	.+42     	; 0x18e8 <_Z18operate_slave_autov+0x61e>
		{
			velocity_robot[0] = -searching_rpm;
    18be:	80 91 f9 02 	lds	r24, 0x02F9
    18c2:	90 91 fa 02 	lds	r25, 0x02FA
    18c6:	e6 ea       	ldi	r30, 0xA6	; 166
    18c8:	f2 e0       	ldi	r31, 0x02	; 2
    18ca:	22 27       	eor	r18, r18
    18cc:	33 27       	eor	r19, r19
    18ce:	28 1b       	sub	r18, r24
    18d0:	39 0b       	sbc	r19, r25
    18d2:	31 83       	std	Z+1, r19	; 0x01
    18d4:	20 83       	st	Z, r18
			velocity_robot[1] = searching_rpm - 5;
    18d6:	05 97       	sbiw	r24, 0x05	; 5
    18d8:	93 83       	std	Z+3, r25	; 0x03
    18da:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    18dc:	15 82       	std	Z+5, r1	; 0x05
    18de:	14 82       	std	Z+4, r1	; 0x04
			pressed = true;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 d6 02 	sts	0x02D6, r24
    18e6:	7a c0       	rjmp	.+244    	; 0x19dc <_Z18operate_slave_autov+0x712>
		}	
		else if (DATA3 == 2)
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	81 f4       	brne	.+32     	; 0x190c <_Z18operate_slave_autov+0x642>
		{
			velocity_robot[0] = 0;
    18ec:	e6 ea       	ldi	r30, 0xA6	; 166
    18ee:	f2 e0       	ldi	r31, 0x02	; 2
    18f0:	11 82       	std	Z+1, r1	; 0x01
    18f2:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    18f4:	13 82       	std	Z+3, r1	; 0x03
    18f6:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = searching_rpm;
    18f8:	80 91 f9 02 	lds	r24, 0x02F9
    18fc:	90 91 fa 02 	lds	r25, 0x02FA
    1900:	95 83       	std	Z+5, r25	; 0x05
    1902:	84 83       	std	Z+4, r24	; 0x04
			pressed = true;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	80 93 d6 02 	sts	0x02D6, r24
    190a:	68 c0       	rjmp	.+208    	; 0x19dc <_Z18operate_slave_autov+0x712>
		}
		else if(DATA3 == 4)
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	99 f4       	brne	.+38     	; 0x1936 <_Z18operate_slave_autov+0x66c>
		{
			velocity_robot[0] = 0;
    1910:	e6 ea       	ldi	r30, 0xA6	; 166
    1912:	f2 e0       	ldi	r31, 0x02	; 2
    1914:	11 82       	std	Z+1, r1	; 0x01
    1916:	10 82       	st	Z, r1
			velocity_robot[1] = -searching_rpm;
    1918:	80 91 f9 02 	lds	r24, 0x02F9
    191c:	90 91 fa 02 	lds	r25, 0x02FA
    1920:	91 95       	neg	r25
    1922:	81 95       	neg	r24
    1924:	91 09       	sbc	r25, r1
    1926:	93 83       	std	Z+3, r25	; 0x03
    1928:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    192a:	15 82       	std	Z+5, r1	; 0x05
    192c:	14 82       	std	Z+4, r1	; 0x04
			pressed = true;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	80 93 d6 02 	sts	0x02D6, r24
    1934:	53 c0       	rjmp	.+166    	; 0x19dc <_Z18operate_slave_autov+0x712>
		}
		else if(DATA3 == 3)
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	81 f4       	brne	.+32     	; 0x195a <_Z18operate_slave_autov+0x690>
		{
			velocity_robot[0] = 0;
    193a:	e6 ea       	ldi	r30, 0xA6	; 166
    193c:	f2 e0       	ldi	r31, 0x02	; 2
    193e:	11 82       	std	Z+1, r1	; 0x01
    1940:	10 82       	st	Z, r1
			velocity_robot[1] = searching_rpm;
    1942:	80 91 f9 02 	lds	r24, 0x02F9
    1946:	90 91 fa 02 	lds	r25, 0x02FA
    194a:	93 83       	std	Z+3, r25	; 0x03
    194c:	82 83       	std	Z+2, r24	; 0x02
			velocity_robot[2] = 0;
    194e:	15 82       	std	Z+5, r1	; 0x05
    1950:	14 82       	std	Z+4, r1	; 0x04
			pressed = true;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 d6 02 	sts	0x02D6, r24
    1958:	41 c0       	rjmp	.+130    	; 0x19dc <_Z18operate_slave_autov+0x712>
		}
		else if(DATA3 == 5)
    195a:	85 30       	cpi	r24, 0x05	; 5
    195c:	99 f4       	brne	.+38     	; 0x1984 <_Z18operate_slave_autov+0x6ba>
		{
			velocity_robot[0] = 0;
    195e:	e6 ea       	ldi	r30, 0xA6	; 166
    1960:	f2 e0       	ldi	r31, 0x02	; 2
    1962:	11 82       	std	Z+1, r1	; 0x01
    1964:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    1966:	13 82       	std	Z+3, r1	; 0x03
    1968:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = -searching_rpm;
    196a:	80 91 f9 02 	lds	r24, 0x02F9
    196e:	90 91 fa 02 	lds	r25, 0x02FA
    1972:	91 95       	neg	r25
    1974:	81 95       	neg	r24
    1976:	91 09       	sbc	r25, r1
    1978:	95 83       	std	Z+5, r25	; 0x05
    197a:	84 83       	std	Z+4, r24	; 0x04
			pressed = true;		
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 d6 02 	sts	0x02D6, r24
    1982:	2c c0       	rjmp	.+88     	; 0x19dc <_Z18operate_slave_autov+0x712>
		}
		else if (DATA3 == 6)
    1984:	86 30       	cpi	r24, 0x06	; 6
    1986:	81 f4       	brne	.+32     	; 0x19a8 <_Z18operate_slave_autov+0x6de>
		{
			velocity_robot[0] = 0;
    1988:	e6 ea       	ldi	r30, 0xA6	; 166
    198a:	f2 e0       	ldi	r31, 0x02	; 2
    198c:	11 82       	std	Z+1, r1	; 0x01
    198e:	10 82       	st	Z, r1
			velocity_robot[1] = 0;
    1990:	13 82       	std	Z+3, r1	; 0x03
    1992:	12 82       	std	Z+2, r1	; 0x02
			velocity_robot[2] = searching_rpm;
    1994:	80 91 f9 02 	lds	r24, 0x02F9
    1998:	90 91 fa 02 	lds	r25, 0x02FA
    199c:	95 83       	std	Z+5, r25	; 0x05
    199e:	84 83       	std	Z+4, r24	; 0x04
			pressed = true;		
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	80 93 d6 02 	sts	0x02D6, r24
    19a6:	1a c0       	rjmp	.+52     	; 0x19dc <_Z18operate_slave_autov+0x712>
		}
		else if (DATA3 == 7)
    19a8:	87 30       	cpi	r24, 0x07	; 7
    19aa:	a1 f4       	brne	.+40     	; 0x19d4 <_Z18operate_slave_autov+0x70a>
		{
			reset_robot_velocity();
    19ac:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Z20reset_robot_velocityv>
			pressed = false;
    19b0:	10 92 d6 02 	sts	0x02D6, r1
			searching_rpm = SEARCH_RPM;
    19b4:	8c e3       	ldi	r24, 0x3C	; 60
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	90 93 fa 02 	sts	0x02FA, r25
    19bc:	80 93 f9 02 	sts	0x02F9, r24
			searching = false;
    19c0:	10 92 d9 02 	sts	0x02D9, r1
			if(give_shtcock)
    19c4:	80 91 d3 02 	lds	r24, 0x02D3
    19c8:	88 23       	and	r24, r24
    19ca:	21 f0       	breq	.+8      	; 0x19d4 <_Z18operate_slave_autov+0x70a>
			{
				send_data_to_master(Give_shutcock);
    19cc:	8a e0       	ldi	r24, 0x0A	; 10
    19ce:	28 dc       	rcall	.-1968   	; 0x1220 <_Z19send_data_to_masterh>
				give_shtcock =	false;
    19d0:	10 92 d3 02 	sts	0x02D3, r1
			}
		}
		if (pressed)
    19d4:	80 91 d6 02 	lds	r24, 0x02D6
    19d8:	88 23       	and	r24, r24
    19da:	31 f0       	breq	.+12     	; 0x19e8 <_Z18operate_slave_autov+0x71e>
			searching_rpm = ADJUST_RPM;
    19dc:	84 e1       	ldi	r24, 0x14	; 20
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	90 93 fa 02 	sts	0x02FA, r25
    19e4:	80 93 f9 02 	sts	0x02F9, r24
	}
		
	reset_auto = true;	
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 d4 02 	sts	0x02D4, r24
    19ee:	77 c0       	rjmp	.+238    	; 0x1ade <_Z18operate_slave_autov+0x814>
			Golden_Rack_Place();	
			DATA1 = 0;
		}
	}
	
	if(final_step)
    19f0:	80 91 d0 02 	lds	r24, 0x02D0
    19f4:	81 11       	cpse	r24, r1
    19f6:	14 cd       	rjmp	.-1496   	; 0x1420 <_Z18operate_slave_autov+0x156>
    19f8:	5f cd       	rjmp	.-1346   	; 0x14b8 <_Z18operate_slave_autov+0x1ee>
    19fa:	80 91 d0 02 	lds	r24, 0x02D0
    19fe:	81 11       	cpse	r24, r1
    1a00:	f3 cc       	rjmp	.-1562   	; 0x13e8 <_Z18operate_slave_autov+0x11e>
    1a02:	5f cd       	rjmp	.-1346   	; 0x14c2 <_Z18operate_slave_autov+0x1f8>
		}
		
		//stop the robot after certain shift when the rack is thrown
		if(after_move_back && (ey.Get_Distance() <= -330) )
		{
			reset_robot_velocity();
    1a04:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Z20reset_robot_velocityv>
			final_step = false;
    1a08:	10 92 d0 02 	sts	0x02D0, r1
			Golden_Drop = false;
    1a0c:	10 92 d7 02 	sts	0x02D7, r1
			after_move_back = false;
    1a10:	10 92 cd 02 	sts	0x02CD, r1
    1a14:	17 cd       	rjmp	.-1490   	; 0x1444 <_Z18operate_slave_autov+0x17a>
				calculated = true;
			}
			
			if(!line_track_enable && !donot_stop_on_line && (abs(ex.Get_Distance()) >= (distance-LINETRACK_ENB_DIST)))
			{
				if(next_location == Rack_zone || next_location == Golden_zone)
    1a16:	80 91 ca 02 	lds	r24, 0x02CA
    1a1a:	84 50       	subi	r24, 0x04	; 4
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <_Z18operate_slave_autov+0x758>
    1a20:	23 ce       	rjmp	.-954    	; 0x1668 <_Z18operate_slave_autov+0x39e>
    1a22:	1f ce       	rjmp	.-962    	; 0x1662 <_Z18operate_slave_autov+0x398>
				}
			}
			else if (abs(ex.Get_Distance()) >= ramp_up_dist && (abs(ex.Get_Distance()) <= (distance-ramp_down_dist)))
			{
				//normal
				velocity_robot[1] = speed;
    1a24:	80 91 fb 02 	lds	r24, 0x02FB
    1a28:	90 91 fc 02 	lds	r25, 0x02FC
    1a2c:	90 93 a9 02 	sts	0x02A9, r25
    1a30:	80 93 a8 02 	sts	0x02A8, r24
    1a34:	17 cf       	rjmp	.-466    	; 0x1864 <_Z18operate_slave_autov+0x59a>
				velocity_robot[1] = dir*((slopeup*ex.Get_Distance())+RAMP_UP_OFFSET);
			}			
			else if ((abs(ex.Get_Distance()) <= distance) && (abs(ex.Get_Distance()) >= (distance-ramp_down_dist)))
			{
				//ramp down
					velocity_robot[1] = (dir*(slopedown)*ex.Get_Distance())+(dir*ramp_down_off_adj-(dir*ramp_down_off_adj-speed)*distance/ramp_down_dist);
    1a36:	60 91 fd 02 	lds	r22, 0x02FD
    1a3a:	20 91 ef 02 	lds	r18, 0x02EF
    1a3e:	30 91 f0 02 	lds	r19, 0x02F0
    1a42:	62 03       	mulsu	r22, r18
    1a44:	80 01       	movw	r16, r0
    1a46:	63 9f       	mul	r22, r19
    1a48:	10 0d       	add	r17, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	06 2e       	mov	r0, r22
    1a4e:	00 0c       	add	r0, r0
    1a50:	77 0b       	sbc	r23, r23
    1a52:	88 0b       	sbc	r24, r24
    1a54:	99 0b       	sbc	r25, r25
    1a56:	9c d1       	rcall	.+824    	; 0x1d90 <__floatsisf>
    1a58:	20 91 f1 02 	lds	r18, 0x02F1
    1a5c:	30 91 f2 02 	lds	r19, 0x02F2
    1a60:	40 91 f3 02 	lds	r20, 0x02F3
    1a64:	50 91 f4 02 	lds	r21, 0x02F4
    1a68:	47 d2       	rcall	.+1166   	; 0x1ef8 <__mulsf3>
    1a6a:	69 83       	std	Y+1, r22	; 0x01
    1a6c:	7a 83       	std	Y+2, r23	; 0x02
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	c7 01       	movw	r24, r14
    1a74:	b6 01       	movw	r22, r12
    1a76:	8c d1       	rcall	.+792    	; 0x1d90 <__floatsisf>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	69 81       	ldd	r22, Y+1	; 0x01
    1a7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	39 d2       	rcall	.+1138   	; 0x1ef8 <__mulsf3>
    1a86:	69 83       	std	Y+1, r22	; 0x01
    1a88:	7a 83       	std	Y+2, r23	; 0x02
    1a8a:	8b 83       	std	Y+3, r24	; 0x03
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	b8 01       	movw	r22, r16
    1a90:	01 2e       	mov	r0, r17
    1a92:	00 0c       	add	r0, r0
    1a94:	88 0b       	sbc	r24, r24
    1a96:	99 0b       	sbc	r25, r25
    1a98:	7b d1       	rcall	.+758    	; 0x1d90 <__floatsisf>
    1a9a:	6b 01       	movw	r12, r22
    1a9c:	7c 01       	movw	r14, r24
    1a9e:	80 91 fb 02 	lds	r24, 0x02FB
    1aa2:	90 91 fc 02 	lds	r25, 0x02FC
    1aa6:	d8 01       	movw	r26, r16
    1aa8:	a8 1b       	sub	r26, r24
    1aaa:	b9 0b       	sbc	r27, r25
    1aac:	a3 01       	movw	r20, r6
    1aae:	92 01       	movw	r18, r4
    1ab0:	86 d2       	rcall	.+1292   	; 0x1fbe <__mulshisi3>
    1ab2:	6e d1       	rcall	.+732    	; 0x1d90 <__floatsisf>
    1ab4:	a5 01       	movw	r20, r10
    1ab6:	94 01       	movw	r18, r8
    1ab8:	d0 d0       	rcall	.+416    	; 0x1c5a <__divsf3>
    1aba:	9b 01       	movw	r18, r22
    1abc:	ac 01       	movw	r20, r24
    1abe:	c7 01       	movw	r24, r14
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	62 d0       	rcall	.+196    	; 0x1b88 <__subsf3>
    1ac4:	9b 01       	movw	r18, r22
    1ac6:	ac 01       	movw	r20, r24
    1ac8:	69 81       	ldd	r22, Y+1	; 0x01
    1aca:	7a 81       	ldd	r23, Y+2	; 0x02
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad0:	5c d0       	rcall	.+184    	; 0x1b8a <__addsf3>
    1ad2:	2b d1       	rcall	.+598    	; 0x1d2a <__fixsfsi>
    1ad4:	70 93 a9 02 	sts	0x02A9, r23
    1ad8:	60 93 a8 02 	sts	0x02A8, r22
    1adc:	c3 ce       	rjmp	.-634    	; 0x1864 <_Z18operate_slave_autov+0x59a>
	//UART0Transmit(' ');
	//UART0TransmitData(velocity_robot[1]);
	//UART0Transmit(' ');
	//UART0TransmitData(counter_motor);
	//UART0TransmitString("\n\r");
}
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	df 90       	pop	r13
    1af4:	cf 90       	pop	r12
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
    1afe:	7f 90       	pop	r7
    1b00:	6f 90       	pop	r6
    1b02:	5f 90       	pop	r5
    1b04:	4f 90       	pop	r4
    1b06:	08 95       	ret

00001b08 <__vector_9>:
	current_location = next_location;	
	ex.Reset_Distance();
}

ISR(PCINT0_vect)
{
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	0b b6       	in	r0, 0x3b	; 59
    1b14:	0f 92       	push	r0
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	af 93       	push	r26
    1b28:	bf 93       	push	r27
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
	if(moving && !searching && !final_step)
    1b2e:	80 91 da 02 	lds	r24, 0x02DA
    1b32:	88 23       	and	r24, r24
    1b34:	91 f0       	breq	.+36     	; 0x1b5a <__vector_9+0x52>
    1b36:	80 91 d9 02 	lds	r24, 0x02D9
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	0e c0       	rjmp	.+28     	; 0x1b5a <__vector_9+0x52>
    1b3e:	80 91 d0 02 	lds	r24, 0x02D0
    1b42:	81 11       	cpse	r24, r1
    1b44:	0a c0       	rjmp	.+20     	; 0x1b5a <__vector_9+0x52>
    1b46:	03 c0       	rjmp	.+6      	; 0x1b4e <__vector_9+0x46>
		reset_motors();
		stop_flag = true;
	}
	else if(final_step)
	{
		reset_motors();
    1b48:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z12reset_motorsv>
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <__vector_9+0x5a>

ISR(PCINT0_vect)
{
	if(moving && !searching && !final_step)
	{
		reset_motors();
    1b4e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <_Z12reset_motorsv>
		stop_flag = true;
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	80 93 cf 02 	sts	0x02CF, r24
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <__vector_9+0x5a>
	}
	else if(final_step)
    1b5a:	80 91 d0 02 	lds	r24, 0x02D0
    1b5e:	81 11       	cpse	r24, r1
    1b60:	f3 cf       	rjmp	.-26     	; 0x1b48 <__vector_9+0x40>
	{
		reset_motors();
	}
	
}
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	bf 91       	pop	r27
    1b68:	af 91       	pop	r26
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	7f 91       	pop	r23
    1b70:	6f 91       	pop	r22
    1b72:	5f 91       	pop	r21
    1b74:	4f 91       	pop	r20
    1b76:	3f 91       	pop	r19
    1b78:	2f 91       	pop	r18
    1b7a:	0f 90       	pop	r0
    1b7c:	0b be       	out	0x3b, r0	; 59
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <__subsf3>:
    1b88:	50 58       	subi	r21, 0x80	; 128

00001b8a <__addsf3>:
    1b8a:	bb 27       	eor	r27, r27
    1b8c:	aa 27       	eor	r26, r26
    1b8e:	0e d0       	rcall	.+28     	; 0x1bac <__addsf3x>
    1b90:	75 c1       	rjmp	.+746    	; 0x1e7c <__fp_round>
    1b92:	66 d1       	rcall	.+716    	; 0x1e60 <__fp_pscA>
    1b94:	30 f0       	brcs	.+12     	; 0x1ba2 <__addsf3+0x18>
    1b96:	6b d1       	rcall	.+726    	; 0x1e6e <__fp_pscB>
    1b98:	20 f0       	brcs	.+8      	; 0x1ba2 <__addsf3+0x18>
    1b9a:	31 f4       	brne	.+12     	; 0x1ba8 <__addsf3+0x1e>
    1b9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__addsf3+0x1a>
    1ba0:	1e f4       	brtc	.+6      	; 0x1ba8 <__addsf3+0x1e>
    1ba2:	5b c1       	rjmp	.+694    	; 0x1e5a <__fp_nan>
    1ba4:	0e f4       	brtc	.+2      	; 0x1ba8 <__addsf3+0x1e>
    1ba6:	e0 95       	com	r30
    1ba8:	e7 fb       	bst	r30, 7
    1baa:	51 c1       	rjmp	.+674    	; 0x1e4e <__fp_inf>

00001bac <__addsf3x>:
    1bac:	e9 2f       	mov	r30, r25
    1bae:	77 d1       	rcall	.+750    	; 0x1e9e <__fp_split3>
    1bb0:	80 f3       	brcs	.-32     	; 0x1b92 <__addsf3+0x8>
    1bb2:	ba 17       	cp	r27, r26
    1bb4:	62 07       	cpc	r22, r18
    1bb6:	73 07       	cpc	r23, r19
    1bb8:	84 07       	cpc	r24, r20
    1bba:	95 07       	cpc	r25, r21
    1bbc:	18 f0       	brcs	.+6      	; 0x1bc4 <__addsf3x+0x18>
    1bbe:	71 f4       	brne	.+28     	; 0x1bdc <__addsf3x+0x30>
    1bc0:	9e f5       	brtc	.+102    	; 0x1c28 <__addsf3x+0x7c>
    1bc2:	8f c1       	rjmp	.+798    	; 0x1ee2 <__fp_zero>
    1bc4:	0e f4       	brtc	.+2      	; 0x1bc8 <__addsf3x+0x1c>
    1bc6:	e0 95       	com	r30
    1bc8:	0b 2e       	mov	r0, r27
    1bca:	ba 2f       	mov	r27, r26
    1bcc:	a0 2d       	mov	r26, r0
    1bce:	0b 01       	movw	r0, r22
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	90 01       	movw	r18, r0
    1bd4:	0c 01       	movw	r0, r24
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	a0 01       	movw	r20, r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	ff 27       	eor	r31, r31
    1bde:	59 1b       	sub	r21, r25
    1be0:	99 f0       	breq	.+38     	; 0x1c08 <__addsf3x+0x5c>
    1be2:	59 3f       	cpi	r21, 0xF9	; 249
    1be4:	50 f4       	brcc	.+20     	; 0x1bfa <__addsf3x+0x4e>
    1be6:	50 3e       	cpi	r21, 0xE0	; 224
    1be8:	68 f1       	brcs	.+90     	; 0x1c44 <__addsf3x+0x98>
    1bea:	1a 16       	cp	r1, r26
    1bec:	f0 40       	sbci	r31, 0x00	; 0
    1bee:	a2 2f       	mov	r26, r18
    1bf0:	23 2f       	mov	r18, r19
    1bf2:	34 2f       	mov	r19, r20
    1bf4:	44 27       	eor	r20, r20
    1bf6:	58 5f       	subi	r21, 0xF8	; 248
    1bf8:	f3 cf       	rjmp	.-26     	; 0x1be0 <__addsf3x+0x34>
    1bfa:	46 95       	lsr	r20
    1bfc:	37 95       	ror	r19
    1bfe:	27 95       	ror	r18
    1c00:	a7 95       	ror	r26
    1c02:	f0 40       	sbci	r31, 0x00	; 0
    1c04:	53 95       	inc	r21
    1c06:	c9 f7       	brne	.-14     	; 0x1bfa <__addsf3x+0x4e>
    1c08:	7e f4       	brtc	.+30     	; 0x1c28 <__addsf3x+0x7c>
    1c0a:	1f 16       	cp	r1, r31
    1c0c:	ba 0b       	sbc	r27, r26
    1c0e:	62 0b       	sbc	r22, r18
    1c10:	73 0b       	sbc	r23, r19
    1c12:	84 0b       	sbc	r24, r20
    1c14:	ba f0       	brmi	.+46     	; 0x1c44 <__addsf3x+0x98>
    1c16:	91 50       	subi	r25, 0x01	; 1
    1c18:	a1 f0       	breq	.+40     	; 0x1c42 <__addsf3x+0x96>
    1c1a:	ff 0f       	add	r31, r31
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	66 1f       	adc	r22, r22
    1c20:	77 1f       	adc	r23, r23
    1c22:	88 1f       	adc	r24, r24
    1c24:	c2 f7       	brpl	.-16     	; 0x1c16 <__addsf3x+0x6a>
    1c26:	0e c0       	rjmp	.+28     	; 0x1c44 <__addsf3x+0x98>
    1c28:	ba 0f       	add	r27, r26
    1c2a:	62 1f       	adc	r22, r18
    1c2c:	73 1f       	adc	r23, r19
    1c2e:	84 1f       	adc	r24, r20
    1c30:	48 f4       	brcc	.+18     	; 0x1c44 <__addsf3x+0x98>
    1c32:	87 95       	ror	r24
    1c34:	77 95       	ror	r23
    1c36:	67 95       	ror	r22
    1c38:	b7 95       	ror	r27
    1c3a:	f7 95       	ror	r31
    1c3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <__addsf3x+0x96>
    1c40:	b3 cf       	rjmp	.-154    	; 0x1ba8 <__addsf3+0x1e>
    1c42:	93 95       	inc	r25
    1c44:	88 0f       	add	r24, r24
    1c46:	08 f0       	brcs	.+2      	; 0x1c4a <__addsf3x+0x9e>
    1c48:	99 27       	eor	r25, r25
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	97 95       	ror	r25
    1c4e:	87 95       	ror	r24
    1c50:	08 95       	ret

00001c52 <__cmpsf2>:
    1c52:	d9 d0       	rcall	.+434    	; 0x1e06 <__fp_cmp>
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <__cmpsf2+0x6>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	08 95       	ret

00001c5a <__divsf3>:
    1c5a:	0c d0       	rcall	.+24     	; 0x1c74 <__divsf3x>
    1c5c:	0f c1       	rjmp	.+542    	; 0x1e7c <__fp_round>
    1c5e:	07 d1       	rcall	.+526    	; 0x1e6e <__fp_pscB>
    1c60:	40 f0       	brcs	.+16     	; 0x1c72 <__divsf3+0x18>
    1c62:	fe d0       	rcall	.+508    	; 0x1e60 <__fp_pscA>
    1c64:	30 f0       	brcs	.+12     	; 0x1c72 <__divsf3+0x18>
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <__divsf3+0x16>
    1c68:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <__divsf3+0x18>
    1c6c:	f0 c0       	rjmp	.+480    	; 0x1e4e <__fp_inf>
    1c6e:	51 11       	cpse	r21, r1
    1c70:	39 c1       	rjmp	.+626    	; 0x1ee4 <__fp_szero>
    1c72:	f3 c0       	rjmp	.+486    	; 0x1e5a <__fp_nan>

00001c74 <__divsf3x>:
    1c74:	14 d1       	rcall	.+552    	; 0x1e9e <__fp_split3>
    1c76:	98 f3       	brcs	.-26     	; 0x1c5e <__divsf3+0x4>

00001c78 <__divsf3_pse>:
    1c78:	99 23       	and	r25, r25
    1c7a:	c9 f3       	breq	.-14     	; 0x1c6e <__divsf3+0x14>
    1c7c:	55 23       	and	r21, r21
    1c7e:	b1 f3       	breq	.-20     	; 0x1c6c <__divsf3+0x12>
    1c80:	95 1b       	sub	r25, r21
    1c82:	55 0b       	sbc	r21, r21
    1c84:	bb 27       	eor	r27, r27
    1c86:	aa 27       	eor	r26, r26
    1c88:	62 17       	cp	r22, r18
    1c8a:	73 07       	cpc	r23, r19
    1c8c:	84 07       	cpc	r24, r20
    1c8e:	38 f0       	brcs	.+14     	; 0x1c9e <__divsf3_pse+0x26>
    1c90:	9f 5f       	subi	r25, 0xFF	; 255
    1c92:	5f 4f       	sbci	r21, 0xFF	; 255
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	44 1f       	adc	r20, r20
    1c9a:	aa 1f       	adc	r26, r26
    1c9c:	a9 f3       	breq	.-22     	; 0x1c88 <__divsf3_pse+0x10>
    1c9e:	33 d0       	rcall	.+102    	; 0x1d06 <__divsf3_pse+0x8e>
    1ca0:	0e 2e       	mov	r0, r30
    1ca2:	3a f0       	brmi	.+14     	; 0x1cb2 <__divsf3_pse+0x3a>
    1ca4:	e0 e8       	ldi	r30, 0x80	; 128
    1ca6:	30 d0       	rcall	.+96     	; 0x1d08 <__divsf3_pse+0x90>
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	e6 95       	lsr	r30
    1cae:	00 1c       	adc	r0, r0
    1cb0:	ca f7       	brpl	.-14     	; 0x1ca4 <__divsf3_pse+0x2c>
    1cb2:	29 d0       	rcall	.+82     	; 0x1d06 <__divsf3_pse+0x8e>
    1cb4:	fe 2f       	mov	r31, r30
    1cb6:	27 d0       	rcall	.+78     	; 0x1d06 <__divsf3_pse+0x8e>
    1cb8:	66 0f       	add	r22, r22
    1cba:	77 1f       	adc	r23, r23
    1cbc:	88 1f       	adc	r24, r24
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	26 17       	cp	r18, r22
    1cc2:	37 07       	cpc	r19, r23
    1cc4:	48 07       	cpc	r20, r24
    1cc6:	ab 07       	cpc	r26, r27
    1cc8:	b0 e8       	ldi	r27, 0x80	; 128
    1cca:	09 f0       	breq	.+2      	; 0x1cce <__divsf3_pse+0x56>
    1ccc:	bb 0b       	sbc	r27, r27
    1cce:	80 2d       	mov	r24, r0
    1cd0:	bf 01       	movw	r22, r30
    1cd2:	ff 27       	eor	r31, r31
    1cd4:	93 58       	subi	r25, 0x83	; 131
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd8:	2a f0       	brmi	.+10     	; 0x1ce4 <__divsf3_pse+0x6c>
    1cda:	9e 3f       	cpi	r25, 0xFE	; 254
    1cdc:	51 05       	cpc	r21, r1
    1cde:	68 f0       	brcs	.+26     	; 0x1cfa <__divsf3_pse+0x82>
    1ce0:	b6 c0       	rjmp	.+364    	; 0x1e4e <__fp_inf>
    1ce2:	00 c1       	rjmp	.+512    	; 0x1ee4 <__fp_szero>
    1ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce6:	ec f3       	brlt	.-6      	; 0x1ce2 <__divsf3_pse+0x6a>
    1ce8:	98 3e       	cpi	r25, 0xE8	; 232
    1cea:	dc f3       	brlt	.-10     	; 0x1ce2 <__divsf3_pse+0x6a>
    1cec:	86 95       	lsr	r24
    1cee:	77 95       	ror	r23
    1cf0:	67 95       	ror	r22
    1cf2:	b7 95       	ror	r27
    1cf4:	f7 95       	ror	r31
    1cf6:	9f 5f       	subi	r25, 0xFF	; 255
    1cf8:	c9 f7       	brne	.-14     	; 0x1cec <__divsf3_pse+0x74>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	91 1d       	adc	r25, r1
    1cfe:	96 95       	lsr	r25
    1d00:	87 95       	ror	r24
    1d02:	97 f9       	bld	r25, 7
    1d04:	08 95       	ret
    1d06:	e1 e0       	ldi	r30, 0x01	; 1
    1d08:	66 0f       	add	r22, r22
    1d0a:	77 1f       	adc	r23, r23
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	bb 1f       	adc	r27, r27
    1d10:	62 17       	cp	r22, r18
    1d12:	73 07       	cpc	r23, r19
    1d14:	84 07       	cpc	r24, r20
    1d16:	ba 07       	cpc	r27, r26
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <__divsf3_pse+0xaa>
    1d1a:	62 1b       	sub	r22, r18
    1d1c:	73 0b       	sbc	r23, r19
    1d1e:	84 0b       	sbc	r24, r20
    1d20:	ba 0b       	sbc	r27, r26
    1d22:	ee 1f       	adc	r30, r30
    1d24:	88 f7       	brcc	.-30     	; 0x1d08 <__divsf3_pse+0x90>
    1d26:	e0 95       	com	r30
    1d28:	08 95       	ret

00001d2a <__fixsfsi>:
    1d2a:	04 d0       	rcall	.+8      	; 0x1d34 <__fixunssfsi>
    1d2c:	68 94       	set
    1d2e:	b1 11       	cpse	r27, r1
    1d30:	d9 c0       	rjmp	.+434    	; 0x1ee4 <__fp_szero>
    1d32:	08 95       	ret

00001d34 <__fixunssfsi>:
    1d34:	bc d0       	rcall	.+376    	; 0x1eae <__fp_splitA>
    1d36:	88 f0       	brcs	.+34     	; 0x1d5a <__fixunssfsi+0x26>
    1d38:	9f 57       	subi	r25, 0x7F	; 127
    1d3a:	90 f0       	brcs	.+36     	; 0x1d60 <__fixunssfsi+0x2c>
    1d3c:	b9 2f       	mov	r27, r25
    1d3e:	99 27       	eor	r25, r25
    1d40:	b7 51       	subi	r27, 0x17	; 23
    1d42:	a0 f0       	brcs	.+40     	; 0x1d6c <__fixunssfsi+0x38>
    1d44:	d1 f0       	breq	.+52     	; 0x1d7a <__fixunssfsi+0x46>
    1d46:	66 0f       	add	r22, r22
    1d48:	77 1f       	adc	r23, r23
    1d4a:	88 1f       	adc	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	1a f0       	brmi	.+6      	; 0x1d56 <__fixunssfsi+0x22>
    1d50:	ba 95       	dec	r27
    1d52:	c9 f7       	brne	.-14     	; 0x1d46 <__fixunssfsi+0x12>
    1d54:	12 c0       	rjmp	.+36     	; 0x1d7a <__fixunssfsi+0x46>
    1d56:	b1 30       	cpi	r27, 0x01	; 1
    1d58:	81 f0       	breq	.+32     	; 0x1d7a <__fixunssfsi+0x46>
    1d5a:	c3 d0       	rcall	.+390    	; 0x1ee2 <__fp_zero>
    1d5c:	b1 e0       	ldi	r27, 0x01	; 1
    1d5e:	08 95       	ret
    1d60:	c0 c0       	rjmp	.+384    	; 0x1ee2 <__fp_zero>
    1d62:	67 2f       	mov	r22, r23
    1d64:	78 2f       	mov	r23, r24
    1d66:	88 27       	eor	r24, r24
    1d68:	b8 5f       	subi	r27, 0xF8	; 248
    1d6a:	39 f0       	breq	.+14     	; 0x1d7a <__fixunssfsi+0x46>
    1d6c:	b9 3f       	cpi	r27, 0xF9	; 249
    1d6e:	cc f3       	brlt	.-14     	; 0x1d62 <__fixunssfsi+0x2e>
    1d70:	86 95       	lsr	r24
    1d72:	77 95       	ror	r23
    1d74:	67 95       	ror	r22
    1d76:	b3 95       	inc	r27
    1d78:	d9 f7       	brne	.-10     	; 0x1d70 <__fixunssfsi+0x3c>
    1d7a:	3e f4       	brtc	.+14     	; 0x1d8a <__fixunssfsi+0x56>
    1d7c:	90 95       	com	r25
    1d7e:	80 95       	com	r24
    1d80:	70 95       	com	r23
    1d82:	61 95       	neg	r22
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	08 95       	ret

00001d8c <__floatunsisf>:
    1d8c:	e8 94       	clt
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <__floatsisf+0x12>

00001d90 <__floatsisf>:
    1d90:	97 fb       	bst	r25, 7
    1d92:	3e f4       	brtc	.+14     	; 0x1da2 <__floatsisf+0x12>
    1d94:	90 95       	com	r25
    1d96:	80 95       	com	r24
    1d98:	70 95       	com	r23
    1d9a:	61 95       	neg	r22
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	99 23       	and	r25, r25
    1da4:	a9 f0       	breq	.+42     	; 0x1dd0 <__floatsisf+0x40>
    1da6:	f9 2f       	mov	r31, r25
    1da8:	96 e9       	ldi	r25, 0x96	; 150
    1daa:	bb 27       	eor	r27, r27
    1dac:	93 95       	inc	r25
    1dae:	f6 95       	lsr	r31
    1db0:	87 95       	ror	r24
    1db2:	77 95       	ror	r23
    1db4:	67 95       	ror	r22
    1db6:	b7 95       	ror	r27
    1db8:	f1 11       	cpse	r31, r1
    1dba:	f8 cf       	rjmp	.-16     	; 0x1dac <__floatsisf+0x1c>
    1dbc:	fa f4       	brpl	.+62     	; 0x1dfc <__floatsisf+0x6c>
    1dbe:	bb 0f       	add	r27, r27
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__floatsisf+0x36>
    1dc2:	60 ff       	sbrs	r22, 0
    1dc4:	1b c0       	rjmp	.+54     	; 0x1dfc <__floatsisf+0x6c>
    1dc6:	6f 5f       	subi	r22, 0xFF	; 255
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dca:	8f 4f       	sbci	r24, 0xFF	; 255
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	16 c0       	rjmp	.+44     	; 0x1dfc <__floatsisf+0x6c>
    1dd0:	88 23       	and	r24, r24
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <__floatsisf+0x48>
    1dd4:	96 e9       	ldi	r25, 0x96	; 150
    1dd6:	11 c0       	rjmp	.+34     	; 0x1dfa <__floatsisf+0x6a>
    1dd8:	77 23       	and	r23, r23
    1dda:	21 f0       	breq	.+8      	; 0x1de4 <__floatsisf+0x54>
    1ddc:	9e e8       	ldi	r25, 0x8E	; 142
    1dde:	87 2f       	mov	r24, r23
    1de0:	76 2f       	mov	r23, r22
    1de2:	05 c0       	rjmp	.+10     	; 0x1dee <__floatsisf+0x5e>
    1de4:	66 23       	and	r22, r22
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <__floatsisf+0x74>
    1de8:	96 e8       	ldi	r25, 0x86	; 134
    1dea:	86 2f       	mov	r24, r22
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	2a f0       	brmi	.+10     	; 0x1dfc <__floatsisf+0x6c>
    1df2:	9a 95       	dec	r25
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	88 1f       	adc	r24, r24
    1dfa:	da f7       	brpl	.-10     	; 0x1df2 <__floatsisf+0x62>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	96 95       	lsr	r25
    1e00:	87 95       	ror	r24
    1e02:	97 f9       	bld	r25, 7
    1e04:	08 95       	ret

00001e06 <__fp_cmp>:
    1e06:	99 0f       	add	r25, r25
    1e08:	00 08       	sbc	r0, r0
    1e0a:	55 0f       	add	r21, r21
    1e0c:	aa 0b       	sbc	r26, r26
    1e0e:	e0 e8       	ldi	r30, 0x80	; 128
    1e10:	fe ef       	ldi	r31, 0xFE	; 254
    1e12:	16 16       	cp	r1, r22
    1e14:	17 06       	cpc	r1, r23
    1e16:	e8 07       	cpc	r30, r24
    1e18:	f9 07       	cpc	r31, r25
    1e1a:	c0 f0       	brcs	.+48     	; 0x1e4c <__fp_cmp+0x46>
    1e1c:	12 16       	cp	r1, r18
    1e1e:	13 06       	cpc	r1, r19
    1e20:	e4 07       	cpc	r30, r20
    1e22:	f5 07       	cpc	r31, r21
    1e24:	98 f0       	brcs	.+38     	; 0x1e4c <__fp_cmp+0x46>
    1e26:	62 1b       	sub	r22, r18
    1e28:	73 0b       	sbc	r23, r19
    1e2a:	84 0b       	sbc	r24, r20
    1e2c:	95 0b       	sbc	r25, r21
    1e2e:	39 f4       	brne	.+14     	; 0x1e3e <__fp_cmp+0x38>
    1e30:	0a 26       	eor	r0, r26
    1e32:	61 f0       	breq	.+24     	; 0x1e4c <__fp_cmp+0x46>
    1e34:	23 2b       	or	r18, r19
    1e36:	24 2b       	or	r18, r20
    1e38:	25 2b       	or	r18, r21
    1e3a:	21 f4       	brne	.+8      	; 0x1e44 <__fp_cmp+0x3e>
    1e3c:	08 95       	ret
    1e3e:	0a 26       	eor	r0, r26
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <__fp_cmp+0x3e>
    1e42:	a1 40       	sbci	r26, 0x01	; 1
    1e44:	a6 95       	lsr	r26
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	81 1d       	adc	r24, r1
    1e4a:	81 1d       	adc	r24, r1
    1e4c:	08 95       	ret

00001e4e <__fp_inf>:
    1e4e:	97 f9       	bld	r25, 7
    1e50:	9f 67       	ori	r25, 0x7F	; 127
    1e52:	80 e8       	ldi	r24, 0x80	; 128
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	08 95       	ret

00001e5a <__fp_nan>:
    1e5a:	9f ef       	ldi	r25, 0xFF	; 255
    1e5c:	80 ec       	ldi	r24, 0xC0	; 192
    1e5e:	08 95       	ret

00001e60 <__fp_pscA>:
    1e60:	00 24       	eor	r0, r0
    1e62:	0a 94       	dec	r0
    1e64:	16 16       	cp	r1, r22
    1e66:	17 06       	cpc	r1, r23
    1e68:	18 06       	cpc	r1, r24
    1e6a:	09 06       	cpc	r0, r25
    1e6c:	08 95       	ret

00001e6e <__fp_pscB>:
    1e6e:	00 24       	eor	r0, r0
    1e70:	0a 94       	dec	r0
    1e72:	12 16       	cp	r1, r18
    1e74:	13 06       	cpc	r1, r19
    1e76:	14 06       	cpc	r1, r20
    1e78:	05 06       	cpc	r0, r21
    1e7a:	08 95       	ret

00001e7c <__fp_round>:
    1e7c:	09 2e       	mov	r0, r25
    1e7e:	03 94       	inc	r0
    1e80:	00 0c       	add	r0, r0
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <__fp_round+0xc>
    1e84:	88 23       	and	r24, r24
    1e86:	52 f0       	brmi	.+20     	; 0x1e9c <__fp_round+0x20>
    1e88:	bb 0f       	add	r27, r27
    1e8a:	40 f4       	brcc	.+16     	; 0x1e9c <__fp_round+0x20>
    1e8c:	bf 2b       	or	r27, r31
    1e8e:	11 f4       	brne	.+4      	; 0x1e94 <__fp_round+0x18>
    1e90:	60 ff       	sbrs	r22, 0
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <__fp_round+0x20>
    1e94:	6f 5f       	subi	r22, 0xFF	; 255
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9c:	08 95       	ret

00001e9e <__fp_split3>:
    1e9e:	57 fd       	sbrc	r21, 7
    1ea0:	90 58       	subi	r25, 0x80	; 128
    1ea2:	44 0f       	add	r20, r20
    1ea4:	55 1f       	adc	r21, r21
    1ea6:	59 f0       	breq	.+22     	; 0x1ebe <__fp_splitA+0x10>
    1ea8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eaa:	71 f0       	breq	.+28     	; 0x1ec8 <__fp_splitA+0x1a>
    1eac:	47 95       	ror	r20

00001eae <__fp_splitA>:
    1eae:	88 0f       	add	r24, r24
    1eb0:	97 fb       	bst	r25, 7
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	61 f0       	breq	.+24     	; 0x1ece <__fp_splitA+0x20>
    1eb6:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb8:	79 f0       	breq	.+30     	; 0x1ed8 <__fp_splitA+0x2a>
    1eba:	87 95       	ror	r24
    1ebc:	08 95       	ret
    1ebe:	12 16       	cp	r1, r18
    1ec0:	13 06       	cpc	r1, r19
    1ec2:	14 06       	cpc	r1, r20
    1ec4:	55 1f       	adc	r21, r21
    1ec6:	f2 cf       	rjmp	.-28     	; 0x1eac <__fp_split3+0xe>
    1ec8:	46 95       	lsr	r20
    1eca:	f1 df       	rcall	.-30     	; 0x1eae <__fp_splitA>
    1ecc:	08 c0       	rjmp	.+16     	; 0x1ede <__fp_splitA+0x30>
    1ece:	16 16       	cp	r1, r22
    1ed0:	17 06       	cpc	r1, r23
    1ed2:	18 06       	cpc	r1, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	f1 cf       	rjmp	.-30     	; 0x1eba <__fp_splitA+0xc>
    1ed8:	86 95       	lsr	r24
    1eda:	71 05       	cpc	r23, r1
    1edc:	61 05       	cpc	r22, r1
    1ede:	08 94       	sec
    1ee0:	08 95       	ret

00001ee2 <__fp_zero>:
    1ee2:	e8 94       	clt

00001ee4 <__fp_szero>:
    1ee4:	bb 27       	eor	r27, r27
    1ee6:	66 27       	eor	r22, r22
    1ee8:	77 27       	eor	r23, r23
    1eea:	cb 01       	movw	r24, r22
    1eec:	97 f9       	bld	r25, 7
    1eee:	08 95       	ret

00001ef0 <__gesf2>:
    1ef0:	8a df       	rcall	.-236    	; 0x1e06 <__fp_cmp>
    1ef2:	08 f4       	brcc	.+2      	; 0x1ef6 <__gesf2+0x6>
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	08 95       	ret

00001ef8 <__mulsf3>:
    1ef8:	0b d0       	rcall	.+22     	; 0x1f10 <__mulsf3x>
    1efa:	c0 cf       	rjmp	.-128    	; 0x1e7c <__fp_round>
    1efc:	b1 df       	rcall	.-158    	; 0x1e60 <__fp_pscA>
    1efe:	28 f0       	brcs	.+10     	; 0x1f0a <__mulsf3+0x12>
    1f00:	b6 df       	rcall	.-148    	; 0x1e6e <__fp_pscB>
    1f02:	18 f0       	brcs	.+6      	; 0x1f0a <__mulsf3+0x12>
    1f04:	95 23       	and	r25, r21
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <__mulsf3+0x12>
    1f08:	a2 cf       	rjmp	.-188    	; 0x1e4e <__fp_inf>
    1f0a:	a7 cf       	rjmp	.-178    	; 0x1e5a <__fp_nan>
    1f0c:	11 24       	eor	r1, r1
    1f0e:	ea cf       	rjmp	.-44     	; 0x1ee4 <__fp_szero>

00001f10 <__mulsf3x>:
    1f10:	c6 df       	rcall	.-116    	; 0x1e9e <__fp_split3>
    1f12:	a0 f3       	brcs	.-24     	; 0x1efc <__mulsf3+0x4>

00001f14 <__mulsf3_pse>:
    1f14:	95 9f       	mul	r25, r21
    1f16:	d1 f3       	breq	.-12     	; 0x1f0c <__mulsf3+0x14>
    1f18:	95 0f       	add	r25, r21
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	55 1f       	adc	r21, r21
    1f1e:	62 9f       	mul	r22, r18
    1f20:	f0 01       	movw	r30, r0
    1f22:	72 9f       	mul	r23, r18
    1f24:	bb 27       	eor	r27, r27
    1f26:	f0 0d       	add	r31, r0
    1f28:	b1 1d       	adc	r27, r1
    1f2a:	63 9f       	mul	r22, r19
    1f2c:	aa 27       	eor	r26, r26
    1f2e:	f0 0d       	add	r31, r0
    1f30:	b1 1d       	adc	r27, r1
    1f32:	aa 1f       	adc	r26, r26
    1f34:	64 9f       	mul	r22, r20
    1f36:	66 27       	eor	r22, r22
    1f38:	b0 0d       	add	r27, r0
    1f3a:	a1 1d       	adc	r26, r1
    1f3c:	66 1f       	adc	r22, r22
    1f3e:	82 9f       	mul	r24, r18
    1f40:	22 27       	eor	r18, r18
    1f42:	b0 0d       	add	r27, r0
    1f44:	a1 1d       	adc	r26, r1
    1f46:	62 1f       	adc	r22, r18
    1f48:	73 9f       	mul	r23, r19
    1f4a:	b0 0d       	add	r27, r0
    1f4c:	a1 1d       	adc	r26, r1
    1f4e:	62 1f       	adc	r22, r18
    1f50:	83 9f       	mul	r24, r19
    1f52:	a0 0d       	add	r26, r0
    1f54:	61 1d       	adc	r22, r1
    1f56:	22 1f       	adc	r18, r18
    1f58:	74 9f       	mul	r23, r20
    1f5a:	33 27       	eor	r19, r19
    1f5c:	a0 0d       	add	r26, r0
    1f5e:	61 1d       	adc	r22, r1
    1f60:	23 1f       	adc	r18, r19
    1f62:	84 9f       	mul	r24, r20
    1f64:	60 0d       	add	r22, r0
    1f66:	21 1d       	adc	r18, r1
    1f68:	82 2f       	mov	r24, r18
    1f6a:	76 2f       	mov	r23, r22
    1f6c:	6a 2f       	mov	r22, r26
    1f6e:	11 24       	eor	r1, r1
    1f70:	9f 57       	subi	r25, 0x7F	; 127
    1f72:	50 40       	sbci	r21, 0x00	; 0
    1f74:	8a f0       	brmi	.+34     	; 0x1f98 <__mulsf3_pse+0x84>
    1f76:	e1 f0       	breq	.+56     	; 0x1fb0 <__mulsf3_pse+0x9c>
    1f78:	88 23       	and	r24, r24
    1f7a:	4a f0       	brmi	.+18     	; 0x1f8e <__mulsf3_pse+0x7a>
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	bb 1f       	adc	r27, r27
    1f82:	66 1f       	adc	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	88 1f       	adc	r24, r24
    1f88:	91 50       	subi	r25, 0x01	; 1
    1f8a:	50 40       	sbci	r21, 0x00	; 0
    1f8c:	a9 f7       	brne	.-22     	; 0x1f78 <__mulsf3_pse+0x64>
    1f8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f90:	51 05       	cpc	r21, r1
    1f92:	70 f0       	brcs	.+28     	; 0x1fb0 <__mulsf3_pse+0x9c>
    1f94:	5c cf       	rjmp	.-328    	; 0x1e4e <__fp_inf>
    1f96:	a6 cf       	rjmp	.-180    	; 0x1ee4 <__fp_szero>
    1f98:	5f 3f       	cpi	r21, 0xFF	; 255
    1f9a:	ec f3       	brlt	.-6      	; 0x1f96 <__mulsf3_pse+0x82>
    1f9c:	98 3e       	cpi	r25, 0xE8	; 232
    1f9e:	dc f3       	brlt	.-10     	; 0x1f96 <__mulsf3_pse+0x82>
    1fa0:	86 95       	lsr	r24
    1fa2:	77 95       	ror	r23
    1fa4:	67 95       	ror	r22
    1fa6:	b7 95       	ror	r27
    1fa8:	f7 95       	ror	r31
    1faa:	e7 95       	ror	r30
    1fac:	9f 5f       	subi	r25, 0xFF	; 255
    1fae:	c1 f7       	brne	.-16     	; 0x1fa0 <__mulsf3_pse+0x8c>
    1fb0:	fe 2b       	or	r31, r30
    1fb2:	88 0f       	add	r24, r24
    1fb4:	91 1d       	adc	r25, r1
    1fb6:	96 95       	lsr	r25
    1fb8:	87 95       	ror	r24
    1fba:	97 f9       	bld	r25, 7
    1fbc:	08 95       	ret

00001fbe <__mulshisi3>:
    1fbe:	b7 ff       	sbrs	r27, 7
    1fc0:	0c c0       	rjmp	.+24     	; 0x1fda <__muluhisi3>

00001fc2 <__mulohisi3>:
    1fc2:	0b d0       	rcall	.+22     	; 0x1fda <__muluhisi3>
    1fc4:	82 1b       	sub	r24, r18
    1fc6:	93 0b       	sbc	r25, r19
    1fc8:	08 95       	ret

00001fca <__tablejump2__>:
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	88 1f       	adc	r24, r24
    1fd0:	8b bf       	out	0x3b, r24	; 59
    1fd2:	07 90       	elpm	r0, Z+
    1fd4:	f6 91       	elpm	r31, Z
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	19 94       	eijmp

00001fda <__muluhisi3>:
    1fda:	09 d0       	rcall	.+18     	; 0x1fee <__umulhisi3>
    1fdc:	a5 9f       	mul	r26, r21
    1fde:	90 0d       	add	r25, r0
    1fe0:	b4 9f       	mul	r27, r20
    1fe2:	90 0d       	add	r25, r0
    1fe4:	a4 9f       	mul	r26, r20
    1fe6:	80 0d       	add	r24, r0
    1fe8:	91 1d       	adc	r25, r1
    1fea:	11 24       	eor	r1, r1
    1fec:	08 95       	ret

00001fee <__umulhisi3>:
    1fee:	a2 9f       	mul	r26, r18
    1ff0:	b0 01       	movw	r22, r0
    1ff2:	b3 9f       	mul	r27, r19
    1ff4:	c0 01       	movw	r24, r0
    1ff6:	a3 9f       	mul	r26, r19
    1ff8:	70 0d       	add	r23, r0
    1ffa:	81 1d       	adc	r24, r1
    1ffc:	11 24       	eor	r1, r1
    1ffe:	91 1d       	adc	r25, r1
    2000:	b2 9f       	mul	r27, r18
    2002:	70 0d       	add	r23, r0
    2004:	81 1d       	adc	r24, r1
    2006:	11 24       	eor	r1, r1
    2008:	91 1d       	adc	r25, r1
    200a:	08 95       	ret

0000200c <_exit>:
    200c:	f8 94       	cli

0000200e <__stop_program>:
    200e:	ff cf       	rjmp	.-2      	; 0x200e <__stop_program>


Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800200  00800200  00001ba2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ba5  00000000  00000000  00001ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016ee  00000000  00000000  00005a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b1b  00000000  00000000  0000715f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00008c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001615  00000000  00000000  00009434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001271  00000000  00000000  0000aa49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000bcba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	84 c3       	rjmp	.+1800   	; 0x70e <__vector_1>
       6:	00 00       	nop
       8:	35 c3       	rjmp	.+1642   	; 0x674 <__vector_2>
       a:	00 00       	nop
       c:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_3>
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_6>
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	af c2       	rjmp	.+1374   	; 0x59c <__vector_15>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_21>
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_25>
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c0       	rjmp	.+158    	; 0x12c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__vector_36>
      94:	4b c0       	rjmp	.+150    	; 0x12c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c0       	rjmp	.+146    	; 0x12c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c0       	rjmp	.+142    	; 0x12c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c0       	rjmp	.+138    	; 0x12c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c0       	rjmp	.+134    	; 0x12c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	69 c3       	rjmp	.+1746   	; 0x77c <__vector_42>
      aa:	00 00       	nop
      ac:	3f c0       	rjmp	.+126    	; 0x12c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c0       	rjmp	.+122    	; 0x12c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c0       	rjmp	.+118    	; 0x12c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c0       	rjmp	.+114    	; 0x12c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c0       	rjmp	.+110    	; 0x12c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c0       	rjmp	.+106    	; 0x12c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c0       	rjmp	.+102    	; 0x12c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c0       	rjmp	.+98     	; 0x12c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_51>
      d0:	2d c0       	rjmp	.+90     	; 0x12c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c0       	rjmp	.+86     	; 0x12c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__vector_54>
      dc:	27 c0       	rjmp	.+78     	; 0x12c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c0       	rjmp	.+74     	; 0x12c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	ed 03       	fmulsu	r22, r21

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a6 39       	cpi	r26, 0x96	; 150
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c3 e7       	ldi	r28, 0x73	; 115
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__do_global_ctors+0x16>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	01 09       	sbc	r16, r1
     114:	80 2f       	mov	r24, r16
     116:	fe 01       	movw	r30, r28
     118:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__tablejump2__>
     11c:	c2 37       	cpi	r28, 0x72	; 114
     11e:	d1 07       	cpc	r29, r17
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	08 07       	cpc	r16, r24
     124:	a9 f7       	brne	.-22     	; 0x110 <__do_global_ctors+0xa>
     126:	03 d0       	rcall	.+6      	; 0x12e <main>
     128:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <main>:

#include "RobotDriver.h"

int main(void)
{
	initUART0();
     12e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_Z9initUART0v>
	initUART3();
     132:	0e 94 ed 0a 	call	0x15da	; 0x15da <_Z9initUART3v>
	JOYSTICK_INITIALIZE();
     136:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_Z9initUART2v>
	init_master();
     13a:	03 d6       	rcall	.+3078   	; 0xd42 <_Z11init_masterv>
	rack_init();
     13c:	5b d1       	rcall	.+694    	; 0x3f4 <_Z9rack_initv>
     13e:	78 94       	sei
	sei();
     140:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <auto_mode>
    while (1) 
    {
		if(auto_mode)
     144:	88 23       	and	r24, r24
     146:	11 f0       	breq	.+4      	; 0x14c <main+0x1e>
			operate_master_auto();
     148:	6d d6       	rcall	.+3290   	; 0xe24 <_Z19operate_master_autov>
     14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0x22>
     14c:	0e 94 b9 08 	call	0x1172	; 0x1172 <_Z21operate_master_manualv>
		else
			operate_master_manual();
     150:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <send_time>
			
		if (send_time)
     154:	88 23       	and	r24, r24
     156:	a1 f3       	breq	.-24     	; 0x140 <main+0x12>
		{
			Send_data_to_Slave();
     158:	06 d6       	rcall	.+3084   	; 0xd66 <_Z18Send_data_to_Slavev>
     15a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <send_time>
			send_time = false;
     15e:	f0 cf       	rjmp	.-32     	; 0x140 <main+0x12>

00000160 <_ZN3PID7Set_PidEfff>:
     160:	cf 92       	push	r12


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	fc 01       	movw	r30, r24
	kp = kP;
     16e:	40 83       	st	Z, r20
     170:	51 83       	std	Z+1, r21	; 0x01
     172:	62 83       	std	Z+2, r22	; 0x02
     174:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     176:	04 83       	std	Z+4, r16	; 0x04
     178:	15 83       	std	Z+5, r17	; 0x05
     17a:	26 83       	std	Z+6, r18	; 0x06
     17c:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     17e:	c0 86       	std	Z+8, r12	; 0x08
     180:	d1 86       	std	Z+9, r13	; 0x09
     182:	e2 86       	std	Z+10, r14	; 0x0a
     184:	f3 86       	std	Z+11, r15	; 0x0b
}
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	df 90       	pop	r13
     190:	cf 90       	pop	r12
     192:	08 95       	ret

00000194 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     194:	8f 92       	push	r8
     196:	9f 92       	push	r9
     198:	af 92       	push	r10
     19a:	bf 92       	push	r11
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
     1aa:	7b 01       	movw	r14, r22
	error = sp - input;
     1ac:	6c 85       	ldd	r22, Y+12	; 0x0c
     1ae:	7d 85       	ldd	r23, Y+13	; 0x0d
     1b0:	8b 01       	movw	r16, r22
     1b2:	0e 19       	sub	r16, r14
     1b4:	1f 09       	sbc	r17, r15
     1b6:	1f 87       	std	Y+15, r17	; 0x0f
     1b8:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     1ba:	8a 89       	ldd	r24, Y+18	; 0x12
     1bc:	9b 89       	ldd	r25, Y+19	; 0x13
     1be:	80 0f       	add	r24, r16
     1c0:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     1c2:	8e 37       	cpi	r24, 0x7E	; 126
     1c4:	91 05       	cpc	r25, r1
     1c6:	2c f0       	brlt	.+10     	; 0x1d2 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     1c8:	8d e7       	ldi	r24, 0x7D	; 125
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	9b 8b       	std	Y+19, r25	; 0x13
     1ce:	8a 8b       	std	Y+18, r24	; 0x12
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     1d2:	83 38       	cpi	r24, 0x83	; 131
     1d4:	2f ef       	ldi	r18, 0xFF	; 255
     1d6:	92 07       	cpc	r25, r18
     1d8:	1c f0       	brlt	.+6      	; 0x1e0 <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     1da:	9b 8b       	std	Y+19, r25	; 0x13
     1dc:	8a 8b       	std	Y+18, r24	; 0x12
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     1e0:	83 e8       	ldi	r24, 0x83	; 131
     1e2:	9f ef       	ldi	r25, 0xFF	; 255
     1e4:	9b 8b       	std	Y+19, r25	; 0x13
     1e6:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     1e8:	6a 89       	ldd	r22, Y+18	; 0x12
     1ea:	7b 89       	ldd	r23, Y+19	; 0x13
     1ec:	07 2e       	mov	r0, r23
     1ee:	00 0c       	add	r0, r0
     1f0:	88 0b       	sbc	r24, r24
     1f2:	99 0b       	sbc	r25, r25
     1f4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     1f8:	2c 81       	ldd	r18, Y+4	; 0x04
     1fa:	3d 81       	ldd	r19, Y+5	; 0x05
     1fc:	4e 81       	ldd	r20, Y+6	; 0x06
     1fe:	5f 81       	ldd	r21, Y+7	; 0x07
     200:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     204:	4b 01       	movw	r8, r22
     206:	5c 01       	movw	r10, r24
     208:	b8 01       	movw	r22, r16
     20a:	11 0f       	add	r17, r17
     20c:	88 0b       	sbc	r24, r24
     20e:	99 0b       	sbc	r25, r25
     210:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     214:	28 81       	ld	r18, Y
     216:	39 81       	ldd	r19, Y+1	; 0x01
     218:	4a 81       	ldd	r20, Y+2	; 0x02
     21a:	5b 81       	ldd	r21, Y+3	; 0x03
     21c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     220:	9b 01       	movw	r18, r22
     222:	ac 01       	movw	r20, r24
     224:	c5 01       	movw	r24, r10
     226:	b4 01       	movw	r22, r8
     228:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3>
     22c:	4b 01       	movw	r8, r22
     22e:	5c 01       	movw	r10, r24
     230:	88 89       	ldd	r24, Y+16	; 0x10
     232:	99 89       	ldd	r25, Y+17	; 0x11
     234:	b7 01       	movw	r22, r14
     236:	68 1b       	sub	r22, r24
     238:	79 0b       	sbc	r23, r25
     23a:	07 2e       	mov	r0, r23
     23c:	00 0c       	add	r0, r0
     23e:	88 0b       	sbc	r24, r24
     240:	99 0b       	sbc	r25, r25
     242:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     246:	28 85       	ldd	r18, Y+8	; 0x08
     248:	39 85       	ldd	r19, Y+9	; 0x09
     24a:	4a 85       	ldd	r20, Y+10	; 0x0a
     24c:	5b 85       	ldd	r21, Y+11	; 0x0b
     24e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     252:	9b 01       	movw	r18, r22
     254:	ac 01       	movw	r20, r24
     256:	c5 01       	movw	r24, r10
     258:	b4 01       	movw	r22, r8
     25a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__subsf3>
     25e:	2c 89       	ldd	r18, Y+20	; 0x14
     260:	3d 89       	ldd	r19, Y+21	; 0x15
     262:	4e 89       	ldd	r20, Y+22	; 0x16
     264:	5f 89       	ldd	r21, Y+23	; 0x17
     266:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3>
     26a:	6c 8b       	std	Y+20, r22	; 0x14
     26c:	7d 8b       	std	Y+21, r23	; 0x15
     26e:	8e 8b       	std	Y+22, r24	; 0x16
     270:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     272:	f9 8a       	std	Y+17, r15	; 0x11
     274:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	ef 90       	pop	r14
     282:	bf 90       	pop	r11
     284:	af 90       	pop	r10
     286:	9f 90       	pop	r9
     288:	8f 90       	pop	r8
     28a:	08 95       	ret

0000028c <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
     28c:	8f 92       	push	r8
     28e:	9f 92       	push	r9
     290:	af 92       	push	r10
     292:	bf 92       	push	r11
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	ec 01       	movw	r28, r24
     2a2:	7b 01       	movw	r14, r22
	error = sp - input;
     2a4:	6c 85       	ldd	r22, Y+12	; 0x0c
     2a6:	7d 85       	ldd	r23, Y+13	; 0x0d
     2a8:	8b 01       	movw	r16, r22
     2aa:	0e 19       	sub	r16, r14
     2ac:	1f 09       	sbc	r17, r15
     2ae:	1f 87       	std	Y+15, r17	; 0x0f
     2b0:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     2b2:	8a 89       	ldd	r24, Y+18	; 0x12
     2b4:	9b 89       	ldd	r25, Y+19	; 0x13
     2b6:	80 0f       	add	r24, r16
     2b8:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     2ba:	8e 37       	cpi	r24, 0x7E	; 126
     2bc:	91 05       	cpc	r25, r1
     2be:	2c f0       	brlt	.+10     	; 0x2ca <_ZN3PID13angle_ComputeEi+0x3e>
	errorsum = 125;
     2c0:	8d e7       	ldi	r24, 0x7D	; 125
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9b 8b       	std	Y+19, r25	; 0x13
     2c6:	8a 8b       	std	Y+18, r24	; 0x12
     2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <_ZN3PID13angle_ComputeEi+0x54>
	else if (errorsum < -125)
     2ca:	83 38       	cpi	r24, 0x83	; 131
     2cc:	2f ef       	ldi	r18, 0xFF	; 255
     2ce:	92 07       	cpc	r25, r18
     2d0:	1c f0       	brlt	.+6      	; 0x2d8 <_ZN3PID13angle_ComputeEi+0x4c>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     2d2:	9b 8b       	std	Y+19, r25	; 0x13
     2d4:	8a 8b       	std	Y+18, r24	; 0x12
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <_ZN3PID13angle_ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
     2d8:	83 e8       	ldi	r24, 0x83	; 131
     2da:	9f ef       	ldi	r25, 0xFF	; 255
     2dc:	9b 8b       	std	Y+19, r25	; 0x13
     2de:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
     2e0:	6a 89       	ldd	r22, Y+18	; 0x12
     2e2:	7b 89       	ldd	r23, Y+19	; 0x13
     2e4:	07 2e       	mov	r0, r23
     2e6:	00 0c       	add	r0, r0
     2e8:	88 0b       	sbc	r24, r24
     2ea:	99 0b       	sbc	r25, r25
     2ec:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     2f0:	2c 81       	ldd	r18, Y+4	; 0x04
     2f2:	3d 81       	ldd	r19, Y+5	; 0x05
     2f4:	4e 81       	ldd	r20, Y+6	; 0x06
     2f6:	5f 81       	ldd	r21, Y+7	; 0x07
     2f8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     2fc:	4b 01       	movw	r8, r22
     2fe:	5c 01       	movw	r10, r24
     300:	b8 01       	movw	r22, r16
     302:	11 0f       	add	r17, r17
     304:	88 0b       	sbc	r24, r24
     306:	99 0b       	sbc	r25, r25
     308:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     30c:	28 81       	ld	r18, Y
     30e:	39 81       	ldd	r19, Y+1	; 0x01
     310:	4a 81       	ldd	r20, Y+2	; 0x02
     312:	5b 81       	ldd	r21, Y+3	; 0x03
     314:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     318:	9b 01       	movw	r18, r22
     31a:	ac 01       	movw	r20, r24
     31c:	c5 01       	movw	r24, r10
     31e:	b4 01       	movw	r22, r8
     320:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3>
     324:	4b 01       	movw	r8, r22
     326:	5c 01       	movw	r10, r24
     328:	88 89       	ldd	r24, Y+16	; 0x10
     32a:	99 89       	ldd	r25, Y+17	; 0x11
     32c:	b7 01       	movw	r22, r14
     32e:	68 1b       	sub	r22, r24
     330:	79 0b       	sbc	r23, r25
     332:	07 2e       	mov	r0, r23
     334:	00 0c       	add	r0, r0
     336:	88 0b       	sbc	r24, r24
     338:	99 0b       	sbc	r25, r25
     33a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__floatsisf>
     33e:	28 85       	ldd	r18, Y+8	; 0x08
     340:	39 85       	ldd	r19, Y+9	; 0x09
     342:	4a 85       	ldd	r20, Y+10	; 0x0a
     344:	5b 85       	ldd	r21, Y+11	; 0x0b
     346:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__mulsf3>
     34a:	9b 01       	movw	r18, r22
     34c:	ac 01       	movw	r20, r24
     34e:	c5 01       	movw	r24, r10
     350:	b4 01       	movw	r22, r8
     352:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__subsf3>
     356:	6c 8b       	std	Y+20, r22	; 0x14
     358:	7d 8b       	std	Y+21, r23	; 0x15
     35a:	8e 8b       	std	Y+22, r24	; 0x16
     35c:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     35e:	f9 8a       	std	Y+17, r15	; 0x11
     360:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	ff 90       	pop	r15
     36c:	ef 90       	pop	r14
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	9f 90       	pop	r9
     374:	8f 90       	pop	r8
     376:	08 95       	ret

00000378 <_Z21initialise_timeperiodv>:

//initialize global timer

void initialise_timeperiod()
{
	TCCR2B |= (1<<CS22);
     378:	e1 eb       	ldi	r30, 0xB1	; 177
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	84 60       	ori	r24, 0x04	; 4
     380:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
     382:	e0 e7       	ldi	r30, 0x70	; 112
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	81 60       	ori	r24, 0x01	; 1
     38a:	80 83       	st	Z, r24
	TCNT2 = 0;
     38c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     390:	08 95       	ret

00000392 <_Z20close_all_pneumaticsv>:
	//UART0TransmitString("\n\r");
}

void close_all_pneumatics()
{
	RACK_GRIP_OPEN();
     392:	10 98       	cbi	0x02, 0	; 2
	RACK_LIFT_CLOSE();
     394:	14 98       	cbi	0x02, 4	; 2
	SHUTTCOCK_GRIP_CLOSE();
     396:	12 98       	cbi	0x02, 2	; 2
	SHUTTCOCK_PASS_CLOSE();
     398:	47 98       	cbi	0x08, 7	; 8
     39a:	08 95       	ret

0000039c <_Z21initialize_pneumaticsv>:
}

void initialize_pneumatics()
{
	OUTPUT(RACK_GRAB);
     39c:	08 9a       	sbi	0x01, 0	; 1
	OUTPUT(LIFT_RACK);
     39e:	0c 9a       	sbi	0x01, 4	; 1
	OUTPUT(SC_PASS);
     3a0:	3f 9a       	sbi	0x07, 7	; 7
	OUTPUT(SC_GRIPPER);
     3a2:	0a 9a       	sbi	0x01, 2	; 1
	close_all_pneumatics();
     3a4:	f6 cf       	rjmp	.-20     	; 0x392 <_Z20close_all_pneumaticsv>
     3a6:	08 95       	ret

000003a8 <_Z16enable_proximityv>:
}

void enable_proximity()
{
	cli();
     3a8:	f8 94       	cli
	EIMSK |= (1<<PROXIMITY_INT);		//setting INT pin
     3aa:	ed 9a       	sbi	0x1d, 5	; 29
	EICRB |= (1<<PROXIMITY_ISC1);	    //falling edge
     3ac:	ea e6       	ldi	r30, 0x6A	; 106
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	88 60       	ori	r24, 0x08	; 8
     3b4:	80 83       	st	Z, r24
	EIFR |= (1<<PROXIMITY_INTF);	    //clear int flag
     3b6:	e5 9a       	sbi	0x1c, 5	; 28
	sei();
     3b8:	78 94       	sei
     3ba:	08 95       	ret

000003bc <_Z17disable_proximityv>:
}

void disable_proximity()
{
	EIFR |= (1<<PROXIMITY_INTF);
     3bc:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK &= ~(1<<PROXIMITY_INT);		
     3be:	ed 98       	cbi	0x1d, 5	; 29
     3c0:	08 95       	ret

000003c2 <_Z17enable_golden_eyev>:
}

void enable_golden_eye()
{
	cli();
     3c2:	f8 94       	cli
	EIMSK |= (1<<GOLDENEYE_INT);						//setting INT pin
     3c4:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA |= ((1<<GOLDENEYE_ISC1)|(1<<GOLDENEYE_ISC0));	//rising  edge
     3c6:	e9 e6       	ldi	r30, 0x69	; 105
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	80 63       	ori	r24, 0x30	; 48
     3ce:	80 83       	st	Z, r24
	EIFR |= (1<<GOLDENEYE_INTF);						//clear int flag
     3d0:	e2 9a       	sbi	0x1c, 2	; 28
	sei();
     3d2:	78 94       	sei
     3d4:	08 95       	ret

000003d6 <_Z18disable_golden_eyev>:
}

void disable_golden_eye()
{
	EIFR |= (1<<GOLDENEYE_INTF);
     3d6:	e2 9a       	sbi	0x1c, 2	; 28
	EIMSK &= ~(1<<GOLDENEYE_INT);
     3d8:	ea 98       	cbi	0x1d, 2	; 29
     3da:	08 95       	ret

000003dc <_Z6millisv>:
//calculate the time from begining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     3dc:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
     3de:	f8 94       	cli
	m = timer2_millis;
     3e0:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <timer2_millis>
     3e4:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <timer2_millis+0x1>
     3e8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer2_millis+0x2>
     3ec:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer2_millis+0x3>
	SREG = oldSREG;
     3f0:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
     3f2:	08 95       	ret

000003f4 <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
	
	Geneva_Start = false;
     400:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Geneva_Start>
	auto_move_rack = false;
     404:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
	stop_rack_initial = false;
     408:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <stop_rack_initial>
	stop_rack_final = false;
     40c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <stop_rack_final>
	throw_rack = false;
     410:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <throw_rack>
	rack_throw_auto = false;
     414:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_throw_auto>
	pneumatic_geneva_start = false;
     418:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <pneumatic_geneva_start>
	inside_robot = true;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <inside_robot>
    pass_the_shuttcock = false;
     422:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	pid_compute_flag = false;
     426:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pid_compute_flag>
					
	
	proximity_on_flag = false;
     42a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <proximity_on_flag>
	Goldeneye_on_flag = false;
     42e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <Goldeneye_on_flag>
	
	pneumatic_geneva_time = 0;
     432:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <pneumatic_geneva_time>
     436:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <pneumatic_geneva_time+0x1>
     43a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <pneumatic_geneva_time+0x2>
     43e:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <pneumatic_geneva_time+0x3>
	send_time = false;
     442:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <send_time>
	
	
	
	RackMotor.Initialise(1);
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	8e e6       	ldi	r24, 0x6E	; 110
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	e6 d2       	rcall	.+1484   	; 0xa1a <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	8d e6       	ldi	r24, 0x6D	; 109
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	e2 d2       	rcall	.+1476   	; 0xa1a <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	80 e6       	ldi	r24, 0x60	; 96
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	3d d2       	rcall	.+1146   	; 0x8d8 <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	83 e5       	ldi	r24, 0x53	; 83
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	39 d2       	rcall	.+1138   	; 0x8d8 <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LTSWITCH_RACK_HOME);
     466:	24 98       	cbi	0x04, 4	; 4
	INPUT(LTSWITCH_RACK_FINAL);
     468:	e1 e0       	ldi	r30, 0x01	; 1
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	80 81       	ld	r24, Z
     46e:	8f 7b       	andi	r24, 0xBF	; 191
     470:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_FINAL);
     472:	e2 e0       	ldi	r30, 0x02	; 2
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	80 81       	ld	r24, Z
     478:	80 64       	ori	r24, 0x40	; 64
	SET(LTSWITCH_RACK_HOME);
     47a:	80 83       	st	Z, r24
	
	initialize_pneumatics();
     47c:	2c 9a       	sbi	0x05, 4	; 5
     47e:	8e df       	rcall	.-228    	; 0x39c <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     480:	1c 9b       	sbis	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     482:	07 c0       	rjmp	.+14     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     484:	62 e3       	ldi	r22, 0x32	; 50
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	8e e6       	ldi	r24, 0x6E	; 110
     48a:	92 e0       	ldi	r25, 0x02	; 2
	SET(LTSWITCH_RACK_HOME);
	
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     48c:	9b d2       	rcall	.+1334   	; 0x9c4 <_ZN10Rack_Motor11SetOcrValueEi>
     48e:	1c 99       	sbic	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	Rack_home_position = true;  // true rack home-position -- initial position and false rack position -- final position
     490:	f9 cf       	rjmp	.-14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Rack_home_position>
	
	previous_time = millis();
     498:	a1 df       	rcall	.-190    	; 0x3dc <_Z6millisv>
     49a:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <previous_time>
     49e:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <previous_time+0x1>
     4a2:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <previous_time+0x2>
     4a6:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <previous_time+0x3>
	
	
	RackEncoder.angle =0;
     4aa:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0x9>
     4ae:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <RackEncoder+0xa>
     4b2:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <RackEncoder+0xb>
     4b6:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <RackEncoder+0xc>
	
	angle_pid.Set_Pid(47.29,0.139,40.30);	//47.29 0.139  29.30
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f3 e3       	ldi	r31, 0x33	; 51
     4be:	cf 2e       	mov	r12, r31
     4c0:	dc 2c       	mov	r13, r12
     4c2:	f1 e2       	ldi	r31, 0x21	; 33
     4c4:	ef 2e       	mov	r14, r31
     4c6:	f2 e4       	ldi	r31, 0x42	; 66
     4c8:	ff 2e       	mov	r15, r31
     4ca:	f0 2d       	mov	r31, r0
     4cc:	04 e0       	ldi	r16, 0x04	; 4
     4ce:	16 e5       	ldi	r17, 0x56	; 86
     4d0:	2e e0       	ldi	r18, 0x0E	; 14
     4d2:	3e e3       	ldi	r19, 0x3E	; 62
     4d4:	46 ef       	ldi	r20, 0xF6	; 246
     4d6:	58 e2       	ldi	r21, 0x28	; 40
     4d8:	6d e3       	ldi	r22, 0x3D	; 61
     4da:	72 e4       	ldi	r23, 0x42	; 66
     4dc:	8b e2       	ldi	r24, 0x2B	; 43
     4de:	92 e0       	ldi	r25, 0x02	; 2
     4e0:	3f de       	rcall	.-898    	; 0x160 <_ZN3PID7Set_PidEfff>
	rack_motor_pid.Set_Pid(3.08,0,9.89);	//3.08 0 9.89
     4e2:	0f 2e       	mov	r0, r31
     4e4:	f1 e7       	ldi	r31, 0x71	; 113
     4e6:	cf 2e       	mov	r12, r31
     4e8:	fd e3       	ldi	r31, 0x3D	; 61
     4ea:	df 2e       	mov	r13, r31
     4ec:	fe e1       	ldi	r31, 0x1E	; 30
     4ee:	ef 2e       	mov	r14, r31
     4f0:	f1 e4       	ldi	r31, 0x41	; 65
     4f2:	ff 2e       	mov	r15, r31
     4f4:	f0 2d       	mov	r31, r0
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
     4fa:	98 01       	movw	r18, r16
     4fc:	48 eb       	ldi	r20, 0xB8	; 184
     4fe:	5e e1       	ldi	r21, 0x1E	; 30
     500:	65 e4       	ldi	r22, 0x45	; 69
     502:	70 e4       	ldi	r23, 0x40	; 64
     504:	83 e1       	ldi	r24, 0x13	; 19
     506:	92 e0       	ldi	r25, 0x02	; 2
	
	//Setting the proximity pins
	INPUT(PROXIMITY_PIN);
     508:	2b de       	rcall	.-938    	; 0x160 <_ZN3PID7Set_PidEfff>
	SET(PROXIMITY_PIN);
     50a:	6d 98       	cbi	0x0d, 5	; 13
	
	//setting the golden rack drop proximity pin
	INPUT(GOLDENEYE_PIN);
     50c:	75 9a       	sbi	0x0e, 5	; 14
	SET(GOLDENEYE_PIN);
     50e:	52 98       	cbi	0x0a, 2	; 10
	

	
	initialise_timeperiod();
     510:	5a 9a       	sbi	0x0b, 2	; 11
     512:	32 df       	rcall	.-412    	; 0x378 <_Z21initialise_timeperiodv>
}
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	08 95       	ret

00000522 <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && stop_rack_initial)	//if reached home position
     522:	1c 99       	sbic	0x03, 4	; 3
     524:	04 c0       	rjmp	.+8      	; 0x52e <_Z16rack_limit_checkv+0xc>
     526:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <stop_rack_initial>
     52a:	81 11       	cpse	r24, r1
     52c:	0d c0       	rjmp	.+26     	; 0x548 <_Z16rack_limit_checkv+0x26>
		//open rack gripper when reached to home position
		throw_rack = true;
		previous_time = millis();
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && stop_rack_final)		//if reached final position
     52e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     532:	86 fd       	sbrc	r24, 6
     534:	32 c0       	rjmp	.+100    	; 0x59a <_Z16rack_limit_checkv+0x78>
     536:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <stop_rack_final>
     53a:	81 11       	cpse	r24, r1
     53c:	22 c0       	rjmp	.+68     	; 0x582 <_Z16rack_limit_checkv+0x60>
     53e:	08 95       	ret
		auto_move_rack = false;
		stop_rack_final = false;
		
		if (rack_throw_auto)
		{
			RACK_LIFT_CLOSE();
     540:	14 98       	cbi	0x02, 4	; 2
			rack_throw_auto = false;
     542:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_throw_auto>
		}
	}
	//UART0TransmitData(RackEncoder.angle);
	//UART0TransmitString("\n\r");
}
     546:	08 95       	ret
void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && stop_rack_initial)	//if reached home position
	{
		RackEncoder.angle = 0;
     548:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0x9>
     54c:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <RackEncoder+0xa>
     550:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <RackEncoder+0xb>
     554:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <RackEncoder+0xc>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     558:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
     55c:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     560:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
		stop_rack_initial = false;
     564:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <stop_rack_initial>
		
		//open rack gripper when reached to home position
		throw_rack = true;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <throw_rack>
		previous_time = millis();
     56e:	36 df       	rcall	.-404    	; 0x3dc <_Z6millisv>
     570:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <previous_time>
     574:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <previous_time+0x1>
     578:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <previous_time+0x2>
     57c:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <previous_time+0x3>
     580:	d6 cf       	rjmp	.-84     	; 0x52e <_Z16rack_limit_checkv+0xc>
     582:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
     586:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
	
	if(!READ(LTSWITCH_RACK_FINAL) && stop_rack_final)		//if reached final position
	{
		
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     58a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
		stop_rack_final = false;
     58e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <stop_rack_final>
		
		if (rack_throw_auto)
     592:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
     596:	81 11       	cpse	r24, r1
     598:	d3 cf       	rjmp	.-90     	; 0x540 <_Z16rack_limit_checkv+0x1e>
     59a:	08 95       	ret

0000059c <__vector_15>:



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
	timer2_millis += 1;
     5ae:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timer2_millis>
     5b2:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timer2_millis+0x1>
     5b6:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timer2_millis+0x2>
     5ba:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timer2_millis+0x3>
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	a1 1d       	adc	r26, r1
     5c2:	b1 1d       	adc	r27, r1
     5c4:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer2_millis>
     5c8:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timer2_millis+0x1>
     5cc:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timer2_millis+0x2>
     5d0:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timer2_millis+0x3>
	timer2_fract += 3;
     5d4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5d8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     5dc:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     5e0:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     5e4:	03 96       	adiw	r24, 0x03	; 3
     5e6:	a1 1d       	adc	r26, r1
     5e8:	b1 1d       	adc	r27, r1
     5ea:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer2_fract>
     5ee:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer2_fract+0x1>
     5f2:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer2_fract+0x2>
     5f6:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer2_fract+0x3>
	if (timer2_fract >= 125) {
     5fa:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5fe:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     602:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     606:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     60a:	8d 37       	cpi	r24, 0x7D	; 125
     60c:	91 05       	cpc	r25, r1
     60e:	a1 05       	cpc	r26, r1
     610:	b1 05       	cpc	r27, r1
     612:	38 f1       	brcs	.+78     	; 0x662 <__vector_15+0xc6>
		timer2_fract -= 125;
     614:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     618:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     61c:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     620:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     624:	8d 57       	subi	r24, 0x7D	; 125
     626:	91 09       	sbc	r25, r1
     628:	a1 09       	sbc	r26, r1
     62a:	b1 09       	sbc	r27, r1
     62c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer2_fract>
     630:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer2_fract+0x1>
     634:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer2_fract+0x2>
     638:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer2_fract+0x3>
		timer2_millis += 1;
     63c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timer2_millis>
     640:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timer2_millis+0x1>
     644:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timer2_millis+0x2>
     648:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timer2_millis+0x3>
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	a1 1d       	adc	r26, r1
     650:	b1 1d       	adc	r27, r1
     652:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer2_millis>
     656:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timer2_millis+0x1>
     65a:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timer2_millis+0x2>
     65e:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timer2_millis+0x3>
	}
}
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <__vector_2>:

//Rack motor using veitnamese motor
ISR(INT_VECTR)
{
     674:	1f 92       	push	r1
     676:	0f 92       	push	r0
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	0f 92       	push	r0
     67c:	11 24       	eor	r1, r1
     67e:	0b b6       	in	r0, 0x3b	; 59
     680:	0f 92       	push	r0
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
	if(bit_is_clear(ENCODERR_CHAPORTPIN,ENCODERR_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     68e:	95 99       	sbic	0x12, 5	; 18
     690:	19 c0       	rjmp	.+50     	; 0x6c4 <__vector_2+0x50>
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
     692:	e0 e6       	ldi	r30, 0x60	; 96
     694:	f2 e0       	ldi	r31, 0x02	; 2
     696:	85 81       	ldd	r24, Z+5	; 0x05
     698:	96 81       	ldd	r25, Z+6	; 0x06
     69a:	a7 81       	ldd	r26, Z+7	; 0x07
     69c:	b0 85       	ldd	r27, Z+8	; 0x08
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	a1 09       	sbc	r26, r1
     6a2:	b1 09       	sbc	r27, r1
     6a4:	85 83       	std	Z+5, r24	; 0x05
     6a6:	96 83       	std	Z+6, r25	; 0x06
     6a8:	a7 83       	std	Z+7, r26	; 0x07
     6aa:	b0 87       	std	Z+8, r27	; 0x08
	{
		RackEncoder.dcrCount();
		RackEncoder.angle--;
     6ac:	81 85       	ldd	r24, Z+9	; 0x09
     6ae:	92 85       	ldd	r25, Z+10	; 0x0a
     6b0:	a3 85       	ldd	r26, Z+11	; 0x0b
     6b2:	b4 85       	ldd	r27, Z+12	; 0x0c
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	a1 09       	sbc	r26, r1
     6b8:	b1 09       	sbc	r27, r1
     6ba:	81 87       	std	Z+9, r24	; 0x09
     6bc:	92 87       	std	Z+10, r25	; 0x0a
     6be:	a3 87       	std	Z+11, r26	; 0x0b
     6c0:	b4 87       	std	Z+12, r27	; 0x0c
     6c2:	18 c0       	rjmp	.+48     	; 0x6f4 <__vector_2+0x80>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     6c4:	e0 e6       	ldi	r30, 0x60	; 96
     6c6:	f2 e0       	ldi	r31, 0x02	; 2
     6c8:	85 81       	ldd	r24, Z+5	; 0x05
     6ca:	96 81       	ldd	r25, Z+6	; 0x06
     6cc:	a7 81       	ldd	r26, Z+7	; 0x07
     6ce:	b0 85       	ldd	r27, Z+8	; 0x08
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
     6d6:	85 83       	std	Z+5, r24	; 0x05
     6d8:	96 83       	std	Z+6, r25	; 0x06
     6da:	a7 83       	std	Z+7, r26	; 0x07
     6dc:	b0 87       	std	Z+8, r27	; 0x08
	}
	else
	{
		RackEncoder.incCount();
		RackEncoder.angle++;
     6de:	81 85       	ldd	r24, Z+9	; 0x09
     6e0:	92 85       	ldd	r25, Z+10	; 0x0a
     6e2:	a3 85       	ldd	r26, Z+11	; 0x0b
     6e4:	b4 85       	ldd	r27, Z+12	; 0x0c
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	a1 1d       	adc	r26, r1
     6ea:	b1 1d       	adc	r27, r1
     6ec:	81 87       	std	Z+9, r24	; 0x09
     6ee:	92 87       	std	Z+10, r25	; 0x0a
     6f0:	a3 87       	std	Z+11, r26	; 0x0b
     6f2:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     6f4:	ff 91       	pop	r31
     6f6:	ef 91       	pop	r30
     6f8:	bf 91       	pop	r27
     6fa:	af 91       	pop	r26
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	0f 90       	pop	r0
     702:	0b be       	out	0x3b, r0	; 59
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti

0000070e <__vector_1>:

//geneva motor cytron

ISR(INT_VECTG)
{
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
	if(bit_is_clear(ENCODERG_CHAPORTPIN,ENCODERG_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     728:	63 99       	sbic	0x0c, 3	; 12
     72a:	0e c0       	rjmp	.+28     	; 0x748 <__vector_1+0x3a>
	{
		GenevaEncoder.angle++;
     72c:	e3 e5       	ldi	r30, 0x53	; 83
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	81 85       	ldd	r24, Z+9	; 0x09
     732:	92 85       	ldd	r25, Z+10	; 0x0a
     734:	a3 85       	ldd	r26, Z+11	; 0x0b
     736:	b4 85       	ldd	r27, Z+12	; 0x0c
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	a1 1d       	adc	r26, r1
     73c:	b1 1d       	adc	r27, r1
     73e:	81 87       	std	Z+9, r24	; 0x09
     740:	92 87       	std	Z+10, r25	; 0x0a
     742:	a3 87       	std	Z+11, r26	; 0x0b
     744:	b4 87       	std	Z+12, r27	; 0x0c
     746:	0d c0       	rjmp	.+26     	; 0x762 <__vector_1+0x54>
	}
	else
	{
		GenevaEncoder.angle--;
     748:	e3 e5       	ldi	r30, 0x53	; 83
     74a:	f2 e0       	ldi	r31, 0x02	; 2
     74c:	81 85       	ldd	r24, Z+9	; 0x09
     74e:	92 85       	ldd	r25, Z+10	; 0x0a
     750:	a3 85       	ldd	r26, Z+11	; 0x0b
     752:	b4 85       	ldd	r27, Z+12	; 0x0c
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	a1 09       	sbc	r26, r1
     758:	b1 09       	sbc	r27, r1
     75a:	81 87       	std	Z+9, r24	; 0x09
     75c:	92 87       	std	Z+10, r25	; 0x0a
     75e:	a3 87       	std	Z+11, r26	; 0x0b
     760:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	0f 90       	pop	r0
     770:	0b be       	out	0x3b, r0	; 59
     772:	0f 90       	pop	r0
     774:	0f be       	out	0x3f, r0	; 63
     776:	0f 90       	pop	r0
     778:	1f 90       	pop	r1
     77a:	18 95       	reti

0000077c <__vector_42>:


ISR(TIMER4_COMPA_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	0b b6       	in	r0, 0x3b	; 59
     788:	0f 92       	push	r0
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
	pid_compute_flag = true;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pid_compute_flag>
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;}; //keep in timer compare match
     79e:	e0 e6       	ldi	r30, 0x60	; 96
     7a0:	f2 e0       	ldi	r31, 0x02	; 2
     7a2:	45 81       	ldd	r20, Z+5	; 0x05
     7a4:	56 81       	ldd	r21, Z+6	; 0x06
     7a6:	67 81       	ldd	r22, Z+7	; 0x07
     7a8:	70 85       	ldd	r23, Z+8	; 0x08
     7aa:	41 83       	std	Z+1, r20	; 0x01
     7ac:	52 83       	std	Z+2, r21	; 0x02
     7ae:	63 83       	std	Z+3, r22	; 0x03
     7b0:	74 83       	std	Z+4, r23	; 0x04
     7b2:	15 82       	std	Z+5, r1	; 0x05
     7b4:	16 82       	std	Z+6, r1	; 0x06
     7b6:	17 82       	std	Z+7, r1	; 0x07
     7b8:	10 86       	std	Z+8, r1	; 0x08
	RackEncoder.Calc_Speed();
	send_time = true;
     7ba:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <send_time>
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	0f 90       	pop	r0
     7ce:	0b be       	out	0x3b, r0	; 59
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	volatile long int angle;
	
	Rack_Encoder():speed(0),pprcount(0),angle(0){};
     7da:	e0 e6       	ldi	r30, 0x60	; 96
     7dc:	f2 e0       	ldi	r31, 0x02	; 2
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	13 82       	std	Z+3, r1	; 0x03
     7e4:	14 82       	std	Z+4, r1	; 0x04
     7e6:	15 82       	std	Z+5, r1	; 0x05
     7e8:	16 82       	std	Z+6, r1	; 0x06
     7ea:	17 82       	std	Z+7, r1	; 0x07
     7ec:	10 86       	std	Z+8, r1	; 0x08
     7ee:	11 86       	std	Z+9, r1	; 0x09
     7f0:	12 86       	std	Z+10, r1	; 0x0a
     7f2:	13 86       	std	Z+11, r1	; 0x0b
     7f4:	14 86       	std	Z+12, r1	; 0x0c
     7f6:	e3 e5       	ldi	r30, 0x53	; 83
     7f8:	f2 e0       	ldi	r31, 0x02	; 2
     7fa:	11 82       	std	Z+1, r1	; 0x01
     7fc:	12 82       	std	Z+2, r1	; 0x02
     7fe:	13 82       	std	Z+3, r1	; 0x03
     800:	14 82       	std	Z+4, r1	; 0x04
     802:	15 82       	std	Z+5, r1	; 0x05
     804:	16 82       	std	Z+6, r1	; 0x06
     806:	17 82       	std	Z+7, r1	; 0x07
     808:	10 86       	std	Z+8, r1	; 0x08
     80a:	11 86       	std	Z+9, r1	; 0x09
     80c:	12 86       	std	Z+10, r1	; 0x0a
     80e:	13 86       	std	Z+11, r1	; 0x0b
     810:	14 86       	std	Z+12, r1	; 0x0c
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     812:	eb e2       	ldi	r30, 0x2B	; 43
     814:	f2 e0       	ldi	r31, 0x02	; 2
     816:	10 82       	st	Z, r1
     818:	11 82       	std	Z+1, r1	; 0x01
     81a:	12 82       	std	Z+2, r1	; 0x02
     81c:	13 82       	std	Z+3, r1	; 0x03
     81e:	14 82       	std	Z+4, r1	; 0x04
     820:	15 82       	std	Z+5, r1	; 0x05
     822:	16 82       	std	Z+6, r1	; 0x06
     824:	17 82       	std	Z+7, r1	; 0x07
     826:	10 86       	std	Z+8, r1	; 0x08
     828:	11 86       	std	Z+9, r1	; 0x09
     82a:	12 86       	std	Z+10, r1	; 0x0a
     82c:	13 86       	std	Z+11, r1	; 0x0b
     82e:	15 86       	std	Z+13, r1	; 0x0d
     830:	14 86       	std	Z+12, r1	; 0x0c
     832:	17 86       	std	Z+15, r1	; 0x0f
     834:	16 86       	std	Z+14, r1	; 0x0e
     836:	11 8a       	std	Z+17, r1	; 0x11
     838:	10 8a       	std	Z+16, r1	; 0x10
     83a:	13 8a       	std	Z+19, r1	; 0x13
     83c:	12 8a       	std	Z+18, r1	; 0x12
     83e:	e3 e1       	ldi	r30, 0x13	; 19
     840:	f2 e0       	ldi	r31, 0x02	; 2
     842:	10 82       	st	Z, r1
     844:	11 82       	std	Z+1, r1	; 0x01
     846:	12 82       	std	Z+2, r1	; 0x02
     848:	13 82       	std	Z+3, r1	; 0x03
     84a:	14 82       	std	Z+4, r1	; 0x04
     84c:	15 82       	std	Z+5, r1	; 0x05
     84e:	16 82       	std	Z+6, r1	; 0x06
     850:	17 82       	std	Z+7, r1	; 0x07
     852:	10 86       	std	Z+8, r1	; 0x08
     854:	11 86       	std	Z+9, r1	; 0x09
     856:	12 86       	std	Z+10, r1	; 0x0a
     858:	13 86       	std	Z+11, r1	; 0x0b
     85a:	15 86       	std	Z+13, r1	; 0x0d
     85c:	14 86       	std	Z+12, r1	; 0x0c
     85e:	17 86       	std	Z+15, r1	; 0x0f
     860:	16 86       	std	Z+14, r1	; 0x0e
     862:	11 8a       	std	Z+17, r1	; 0x11
     864:	10 8a       	std	Z+16, r1	; 0x10
     866:	13 8a       	std	Z+19, r1	; 0x13
     868:	12 8a       	std	Z+18, r1	; 0x12
     86a:	08 95       	ret

0000086c <_ZN12Rack_Encoder11Init_TimersEv>:
}

void Rack_Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     86c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     870:	81 11       	cpse	r24, r1
     872:	17 c0       	rjmp	.+46     	; 0x8a2 <_ZN12Rack_Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     874:	e1 ea       	ldi	r30, 0xA1	; 161
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	8b 60       	ori	r24, 0x0B	; 11
     87c:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     87e:	e2 e7       	ldi	r30, 0x72	; 114
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	82 60       	ori	r24, 0x02	; 2
     886:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     888:	88 e8       	ldi	r24, 0x88	; 136
     88a:	93 e1       	ldi	r25, 0x13	; 19
     88c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     890:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     894:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     898:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     8a2:	08 95       	ret

000008a4 <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
     8a4:	78 94       	sei
	if (no==1)
     8a6:	fc 01       	movw	r30, r24
     8a8:	20 81       	ld	r18, Z
     8aa:	21 30       	cpi	r18, 0x01	; 1
     8ac:	49 f4       	brne	.+18     	; 0x8c0 <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODERR_INT);
     8ae:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INTR_ISC1);	//falling edge
     8b0:	e9 e6       	ldi	r30, 0x69	; 105
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	20 81       	ld	r18, Z
     8b6:	28 60       	ori	r18, 0x08	; 8
     8b8:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERR_INT);		//setting INT pin
     8ba:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INTR_INTF);	    //clear int flag
     8bc:	e1 9a       	sbi	0x1c, 1	; 28
     8be:	0a c0       	rjmp	.+20     	; 0x8d4 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	}
	else if (no==2)
     8c0:	22 30       	cpi	r18, 0x02	; 2
     8c2:	41 f4       	brne	.+16     	; 0x8d4 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODERG_INT);
     8c4:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INTG_ISC1);	//falling edge
     8c6:	e9 e6       	ldi	r30, 0x69	; 105
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	20 81       	ld	r18, Z
     8cc:	22 60       	ori	r18, 0x02	; 2
     8ce:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERG_INT);		//setting INT pin
     8d0:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INTG_INTF);	    //clear int flag
     8d2:	e0 9a       	sbi	0x1c, 0	; 28
	}
	Init_Timers();
     8d4:	cb cf       	rjmp	.-106    	; 0x86c <_ZN12Rack_Encoder11Init_TimersEv>
     8d6:	08 95       	ret

000008d8 <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
     8d8:	fc 01       	movw	r30, r24
     8da:	60 83       	st	Z, r22
	if(no==1)
     8dc:	61 30       	cpi	r22, 0x01	; 1
     8de:	29 f4       	brne	.+10     	; 0x8ea <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODERR_CHANNELA);
     8e0:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODERR_CHANNELB);
     8e2:	9d 98       	cbi	0x13, 5	; 19
		SET(ENCODERR_CHANNELA);
     8e4:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODERR_CHANNELB);
     8e6:	a5 9a       	sbi	0x14, 5	; 20
     8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
     8ea:	62 30       	cpi	r22, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODERG_CHANNELA);
     8ee:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODERG_CHANNELB);
     8f0:	6b 98       	cbi	0x0d, 3	; 13
		SET(ENCODERG_CHANNELA);
     8f2:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODERG_CHANNELB);
     8f4:	73 9a       	sbi	0x0e, 3	; 14
	}
	Init_Interrupts();
     8f6:	d6 cf       	rjmp	.-84     	; 0x8a4 <_ZN12Rack_Encoder15Init_InterruptsEv>
     8f8:	08 95       	ret

000008fa <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	c1 f4       	brne	.+48     	; 0x932 <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
     902:	0b 9a       	sbi	0x01, 3	; 1
		OUTPUT(DD_B5);
     904:	09 9a       	sbi	0x01, 1	; 1

		OUTPUT(DD_PWM5);
     906:	ea e0       	ldi	r30, 0x0A	; 10
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	80 81       	ld	r24, Z
     90c:	80 62       	ori	r24, 0x20	; 32
     90e:	80 83       	st	Z, r24

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
     910:	e0 e2       	ldi	r30, 0x20	; 32
     912:	f1 e0       	ldi	r31, 0x01	; 1
     914:	80 81       	ld	r24, Z
     916:	8a 60       	ori	r24, 0x0A	; 10
     918:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
     91a:	e1 e2       	ldi	r30, 0x21	; 33
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	80 81       	ld	r24, Z
     920:	8a 61       	ori	r24, 0x1A	; 26
     922:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
     924:	89 ef       	ldi	r24, 0xF9	; 249
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     92c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     930:	08 95       	ret
	}
	else if(num==2)
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	b9 f4       	brne	.+46     	; 0x964 <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
     936:	0f 9a       	sbi	0x01, 7	; 1
		OUTPUT(DD_B6);
     938:	0d 9a       	sbi	0x01, 5	; 1

		OUTPUT(DD_PWM6);
     93a:	ea e0       	ldi	r30, 0x0A	; 10
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	80 81       	ld	r24, Z
     940:	80 61       	ori	r24, 0x10	; 16
     942:	80 83       	st	Z, r24

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
     944:	e0 e2       	ldi	r30, 0x20	; 32
     946:	f1 e0       	ldi	r31, 0x01	; 1
     948:	80 81       	ld	r24, Z
     94a:	82 62       	ori	r24, 0x22	; 34
     94c:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
     94e:	e1 e2       	ldi	r30, 0x21	; 33
     950:	f1 e0       	ldi	r31, 0x01	; 1
     952:	80 81       	ld	r24, Z
     954:	8a 61       	ori	r24, 0x1A	; 26
     956:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
     958:	89 ef       	ldi	r24, 0xF9	; 249
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     960:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     964:	08 95       	ret

00000966 <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	19 f0       	breq	.+6      	; 0x974 <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	21 f0       	breq	.+8      	; 0x97a <_ZN10Rack_Motor19SetForwardDirectionEv+0x14>
     972:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
     974:	13 9a       	sbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     976:	11 98       	cbi	0x02, 1	; 2
		break;
     978:	08 95       	ret
		case 2:
		SET		(DD_F6);
     97a:	17 9a       	sbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     97c:	15 98       	cbi	0x02, 5	; 2
     97e:	08 95       	ret

00000980 <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
     980:	fc 01       	movw	r30, r24
     982:	80 81       	ld	r24, Z
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	19 f0       	breq	.+6      	; 0x98e <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f0       	breq	.+8      	; 0x994 <_ZN10Rack_Motor19SetReverseDirectionEv+0x14>
     98c:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     98e:	13 98       	cbi	0x02, 3	; 2
		SET		(DD_B5);
     990:	11 9a       	sbi	0x02, 1	; 2
		break;
     992:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     994:	17 98       	cbi	0x02, 7	; 2
		SET		(DD_B6);
     996:	15 9a       	sbi	0x02, 5	; 2
     998:	08 95       	ret

0000099a <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
     99a:	fc 01       	movw	r30, r24
     99c:	80 81       	ld	r24, Z
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <_ZN10Rack_Motor9StopMotorEv+0xe>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <_ZN10Rack_Motor9StopMotorEv+0x1c>
     9a6:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     9a8:	13 98       	cbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     9aa:	11 98       	cbi	0x02, 1	; 2

		PWM_OCR5 = 0;
     9ac:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     9b0:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     9b4:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     9b6:	17 98       	cbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     9b8:	15 98       	cbi	0x02, 5	; 2

		PWM_OCR6 = 0;
     9ba:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9be:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     9c2:	08 95       	ret

000009c4 <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	8c 01       	movw	r16, r24
     9ce:	eb 01       	movw	r28, r22
  if (Ocr > 0)
     9d0:	1c 16       	cp	r1, r28
     9d2:	1d 06       	cpc	r1, r29
     9d4:	0c f4       	brge	.+2      	; 0x9d8 <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
     9d6:	c7 df       	rcall	.-114    	; 0x966 <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
     9d8:	dd 23       	and	r29, r29
     9da:	2c f4       	brge	.+10     	; 0x9e6 <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
     9dc:	d1 95       	neg	r29
     9de:	c1 95       	neg	r28
     9e0:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
     9e2:	c8 01       	movw	r24, r16
     9e4:	cd df       	rcall	.-102    	; 0x980 <_ZN10Rack_Motor19SetReverseDirectionEv>
     9e6:	ca 3f       	cpi	r28, 0xFA	; 250
     9e8:	d1 05       	cpc	r29, r1
     9ea:	14 f0       	brlt	.+4      	; 0x9f0 <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
     9ec:	c9 ef       	ldi	r28, 0xF9	; 249
     9ee:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
     9f0:	f8 01       	movw	r30, r16
     9f2:	80 81       	ld	r24, Z
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	19 f0       	breq	.+6      	; 0x9fe <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
     9f8:	82 30       	cpi	r24, 0x02	; 2
     9fa:	31 f0       	breq	.+12     	; 0xa08 <_ZN10Rack_Motor11SetOcrValueEi+0x44>
     9fc:	09 c0       	rjmp	.+18     	; 0xa10 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
     9fe:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     a02:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
     a08:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     a0c:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		break;
	}
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	08 95       	ret

00000a1a <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
	num = no;
     a20:	68 83       	st	Y, r22
	InitPWM();
     a22:	6b df       	rcall	.-298    	; 0x8fa <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
     a24:	ce 01       	movw	r24, r28
     a26:	b9 df       	rcall	.-142    	; 0x99a <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	ce 01       	movw	r24, r28
     a2e:	ca df       	rcall	.-108    	; 0x9c4 <_ZN10Rack_Motor11SetOcrValueEi>

}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_Z14reset_automodev>:
}

void disable_linetracker_interrupt()
{
	EIMSK &= ~(1<<JUNCTION_INT);
	EIFR |= (1<<JUNCTION_INTF);
     a36:	e3 e8       	ldi	r30, 0x83	; 131
     a38:	f2 e0       	ldi	r31, 0x02	; 2
     a3a:	82 e3       	ldi	r24, 0x32	; 50
     a3c:	80 83       	st	Z, r24
     a3e:	81 83       	std	Z+1, r24	; 0x01
     a40:	82 83       	std	Z+2, r24	; 0x02
     a42:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <slave_work_category>
     a46:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <rack_picktime>
     a4a:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <rack_picktime+0x1>
     a4e:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <rack_picktime+0x2>
     a52:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <rack_picktime+0x3>
     a56:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <rack_throw_time>
     a5a:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <rack_throw_time+0x1>
     a5e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <rack_throw_time+0x2>
     a62:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rack_throw_time+0x3>
     a66:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <search_auto>
     a6a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rack_pickup>
     a6e:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <golden_rack_throw>
     a72:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <open_the_grip>
     a76:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <reset_auto>
     a7a:	08 95       	ret

00000a7c <_Z17operation_of_rackv>:
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RackEncoder+0x9>
     a84:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <RackEncoder+0xa>
     a88:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <RackEncoder+0xb>
     a8c:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <RackEncoder+0xc>
     a90:	87 3a       	cpi	r24, 0xA7	; 167
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	af 4f       	sbci	r26, 0xFF	; 255
     a96:	bf 4f       	sbci	r27, 0xFF	; 255
     a98:	0c f0       	brlt	.+2      	; 0xa9c <_Z17operation_of_rackv+0x20>
     a9a:	ff c0       	rjmp	.+510    	; 0xc9a <_Z17operation_of_rackv+0x21e>
     a9c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     aa0:	81 11       	cpse	r24, r1
     aa2:	0a c1       	rjmp	.+532    	; 0xcb8 <_Z17operation_of_rackv+0x23c>
     aa4:	1b c1       	rjmp	.+566    	; 0xcdc <_Z17operation_of_rackv+0x260>
     aa6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     aaa:	88 23       	and	r24, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <_Z17operation_of_rackv+0x34>
     aae:	0a c1       	rjmp	.+532    	; 0xcc4 <_Z17operation_of_rackv+0x248>
     ab0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Geneva_Start>
     ab4:	88 23       	and	r24, r24
     ab6:	09 f4       	brne	.+2      	; 0xaba <_Z17operation_of_rackv+0x3e>
     ab8:	5e c0       	rjmp	.+188    	; 0xb76 <_Z17operation_of_rackv+0xfa>
     aba:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <GenevaEncoder+0x9>
     abe:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <GenevaEncoder+0xa>
     ac2:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <GenevaEncoder+0xb>
     ac6:	b0 91 5f 02 	lds	r27, 0x025F	; 0x80025f <GenevaEncoder+0xc>
     aca:	88 36       	cpi	r24, 0x68	; 104
     acc:	91 40       	sbci	r25, 0x01	; 1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	54 f1       	brlt	.+84     	; 0xb28 <_Z17operation_of_rackv+0xac>
     ad4:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <angle_pid+0xe>
     ad8:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <angle_pid+0xf>
     adc:	77 23       	and	r23, r23
     ade:	1c f4       	brge	.+6      	; 0xae6 <_Z17operation_of_rackv+0x6a>
     ae0:	71 95       	neg	r23
     ae2:	61 95       	neg	r22
     ae4:	71 09       	sbc	r23, r1
     ae6:	07 2e       	mov	r0, r23
     ae8:	00 0c       	add	r0, r0
     aea:	88 0b       	sbc	r24, r24
     aec:	99 0b       	sbc	r25, r25
     aee:	02 d7       	rcall	.+3588   	; 0x18f4 <__floatsisf>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e4       	ldi	r20, 0x40	; 64
     af6:	50 e4       	ldi	r21, 0x40	; 64
     af8:	5e d6       	rcall	.+3260   	; 0x17b6 <__cmpsf2>
     afa:	18 16       	cp	r1, r24
     afc:	ac f0       	brlt	.+42     	; 0xb28 <_Z17operation_of_rackv+0xac>
     afe:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <GenevaEncoder+0x9>
     b02:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <GenevaEncoder+0xa>
     b06:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <GenevaEncoder+0xb>
     b0a:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <GenevaEncoder+0xc>
     b0e:	eb e2       	ldi	r30, 0x2B	; 43
     b10:	f2 e0       	ldi	r31, 0x02	; 2
     b12:	15 86       	std	Z+13, r1	; 0x0d
     b14:	14 86       	std	Z+12, r1	; 0x0c
     b16:	13 8a       	std	Z+19, r1	; 0x13
     b18:	12 8a       	std	Z+18, r1	; 0x12
     b1a:	14 8a       	std	Z+20, r1	; 0x14
     b1c:	15 8a       	std	Z+21, r1	; 0x15
     b1e:	16 8a       	std	Z+22, r1	; 0x16
     b20:	17 8a       	std	Z+23, r1	; 0x17
     b22:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Geneva_Start>
     b26:	27 c0       	rjmp	.+78     	; 0xb76 <_Z17operation_of_rackv+0xfa>
     b28:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
     b2c:	88 23       	and	r24, r24
     b2e:	71 f0       	breq	.+28     	; 0xb4c <_Z17operation_of_rackv+0xd0>
     b30:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <GenevaEncoder+0x9>
     b34:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <GenevaEncoder+0xa>
     b38:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <GenevaEncoder+0xb>
     b3c:	b0 91 5f 02 	lds	r27, 0x025F	; 0x80025f <GenevaEncoder+0xc>
     b40:	88 3c       	cpi	r24, 0xC8	; 200
     b42:	91 05       	cpc	r25, r1
     b44:	a1 05       	cpc	r26, r1
     b46:	b1 05       	cpc	r27, r1
     b48:	0c f0       	brlt	.+2      	; 0xb4c <_Z17operation_of_rackv+0xd0>
     b4a:	c2 c0       	rjmp	.+388    	; 0xcd0 <_Z17operation_of_rackv+0x254>
     b4c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <GenevaEncoder+0x9>
     b50:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <GenevaEncoder+0xa>
     b54:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <GenevaEncoder+0xb>
     b58:	b0 91 5f 02 	lds	r27, 0x025F	; 0x80025f <GenevaEncoder+0xc>
     b5c:	88 37       	cpi	r24, 0x78	; 120
     b5e:	91 05       	cpc	r25, r1
     b60:	a1 05       	cpc	r26, r1
     b62:	b1 05       	cpc	r27, r1
     b64:	44 f0       	brlt	.+16     	; 0xb76 <_Z17operation_of_rackv+0xfa>
     b66:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <pneumatic_geneva_start>
     b6a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pid_compute_flag>
     b6e:	88 23       	and	r24, r24
     b70:	09 f4       	brne	.+2      	; 0xb74 <_Z17operation_of_rackv+0xf8>
     b72:	42 c0       	rjmp	.+132    	; 0xbf8 <_Z17operation_of_rackv+0x17c>
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <_Z17operation_of_rackv+0x102>
     b76:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pid_compute_flag>
     b7a:	88 23       	and	r24, r24
     b7c:	e1 f0       	breq	.+56     	; 0xbb6 <_Z17operation_of_rackv+0x13a>
     b7e:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <GenevaEncoder+0x9>
     b82:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <GenevaEncoder+0xa>
     b86:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <GenevaEncoder+0xb>
     b8a:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <GenevaEncoder+0xc>
     b8e:	8b e2       	ldi	r24, 0x2B	; 43
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	7c db       	rcall	.-2312   	; 0x28c <_ZN3PID13angle_ComputeEi>
     b94:	7c d6       	rcall	.+3320   	; 0x188e <__fixsfsi>
     b96:	8d e6       	ldi	r24, 0x6D	; 109
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	14 df       	rcall	.-472    	; 0x9c4 <_ZN10Rack_Motor11SetOcrValueEi>
     b9c:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <RackEncoder+0x1>
     ba0:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <RackEncoder+0x2>
     ba4:	83 e1       	ldi	r24, 0x13	; 19
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	f5 da       	rcall	.-2582   	; 0x194 <_ZN3PID7ComputeEi>
     baa:	71 d6       	rcall	.+3298   	; 0x188e <__fixsfsi>
     bac:	8e e6       	ldi	r24, 0x6E	; 110
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	09 df       	rcall	.-494    	; 0x9c4 <_ZN10Rack_Motor11SetOcrValueEi>
     bb2:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pid_compute_flag>
     bb6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <pneumatic_geneva_start>
     bba:	88 23       	and	r24, r24
     bbc:	e9 f0       	breq	.+58     	; 0xbf8 <_Z17operation_of_rackv+0x17c>
     bbe:	0e dc       	rcall	.-2020   	; 0x3dc <_Z6millisv>
     bc0:	00 91 4b 02 	lds	r16, 0x024B	; 0x80024b <pneumatic_geneva_time>
     bc4:	10 91 4c 02 	lds	r17, 0x024C	; 0x80024c <pneumatic_geneva_time+0x1>
     bc8:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <pneumatic_geneva_time+0x2>
     bcc:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <pneumatic_geneva_time+0x3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	80 1b       	sub	r24, r16
     bd6:	91 0b       	sbc	r25, r17
     bd8:	a2 0b       	sbc	r26, r18
     bda:	b3 0b       	sbc	r27, r19
     bdc:	8d 3b       	cpi	r24, 0xBD	; 189
     bde:	92 40       	sbci	r25, 0x02	; 2
     be0:	a1 05       	cpc	r26, r1
     be2:	b1 05       	cpc	r27, r1
     be4:	48 f0       	brcs	.+18     	; 0xbf8 <_Z17operation_of_rackv+0x17c>
     be6:	88 e6       	ldi	r24, 0x68	; 104
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
     bee:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
     bf8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     bfc:	88 23       	and	r24, r24
     bfe:	c9 f0       	breq	.+50     	; 0xc32 <_Z17operation_of_rackv+0x1b6>
     c00:	ed db       	rcall	.-2086   	; 0x3dc <_Z6millisv>
     c02:	00 91 47 02 	lds	r16, 0x0247	; 0x800247 <passing_time>
     c06:	10 91 48 02 	lds	r17, 0x0248	; 0x800248 <passing_time+0x1>
     c0a:	20 91 49 02 	lds	r18, 0x0249	; 0x800249 <passing_time+0x2>
     c0e:	30 91 4a 02 	lds	r19, 0x024A	; 0x80024a <passing_time+0x3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	80 1b       	sub	r24, r16
     c18:	91 0b       	sbc	r25, r17
     c1a:	a2 0b       	sbc	r26, r18
     c1c:	b3 0b       	sbc	r27, r19
     c1e:	8d 32       	cpi	r24, 0x2D	; 45
     c20:	91 40       	sbci	r25, 0x01	; 1
     c22:	a1 05       	cpc	r26, r1
     c24:	b1 05       	cpc	r27, r1
     c26:	28 f0       	brcs	.+10     	; 0xc32 <_Z17operation_of_rackv+0x1b6>
     c28:	88 b1       	in	r24, 0x08	; 8
     c2a:	80 58       	subi	r24, 0x80	; 128
     c2c:	88 b9       	out	0x08, r24	; 8
     c2e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
     c32:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <throw_rack>
     c36:	88 23       	and	r24, r24
     c38:	09 f4       	brne	.+2      	; 0xc3c <_Z17operation_of_rackv+0x1c0>
     c3a:	5e c0       	rjmp	.+188    	; 0xcf8 <_Z17operation_of_rackv+0x27c>
     c3c:	cf db       	rcall	.-2146   	; 0x3dc <_Z6millisv>
     c3e:	00 91 4f 02 	lds	r16, 0x024F	; 0x80024f <previous_time>
     c42:	10 91 50 02 	lds	r17, 0x0250	; 0x800250 <previous_time+0x1>
     c46:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <previous_time+0x2>
     c4a:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <previous_time+0x3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	80 1b       	sub	r24, r16
     c54:	91 0b       	sbc	r25, r17
     c56:	a2 0b       	sbc	r26, r18
     c58:	b3 0b       	sbc	r27, r19
     c5a:	8c 32       	cpi	r24, 0x2C	; 44
     c5c:	91 40       	sbci	r25, 0x01	; 1
     c5e:	a1 05       	cpc	r26, r1
     c60:	b1 05       	cpc	r27, r1
     c62:	08 f4       	brcc	.+2      	; 0xc66 <_Z17operation_of_rackv+0x1ea>
     c64:	49 c0       	rjmp	.+146    	; 0xcf8 <_Z17operation_of_rackv+0x27c>
     c66:	10 98       	cbi	0x02, 0	; 2
     c68:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <throw_rack>
     c6c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <_Z17operation_of_rackv+0x1fa>
     c74:	41 c0       	rjmp	.+130    	; 0xcf8 <_Z17operation_of_rackv+0x27c>
     c76:	8d ef       	ldi	r24, 0xFD	; 253
     c78:	9f ef       	ldi	r25, 0xFF	; 255
     c7a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     c7e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
     c88:	28 e6       	ldi	r18, 0x68	; 104
     c8a:	31 e0       	ldi	r19, 0x01	; 1
     c8c:	30 93 38 02 	sts	0x0238, r19	; 0x800238 <angle_pid+0xd>
     c90:	20 93 37 02 	sts	0x0237, r18	; 0x800237 <angle_pid+0xc>
     c94:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
     c98:	2f c0       	rjmp	.+94     	; 0xcf8 <_Z17operation_of_rackv+0x27c>
     c9a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RackEncoder+0x9>
     c9e:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <RackEncoder+0xa>
     ca2:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <RackEncoder+0xb>
     ca6:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <RackEncoder+0xc>
     caa:	86 3a       	cpi	r24, 0xA6	; 166
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	af 4f       	sbci	r26, 0xFF	; 255
     cb0:	bf 4f       	sbci	r27, 0xFF	; 255
     cb2:	0c f0       	brlt	.+2      	; 0xcb6 <_Z17operation_of_rackv+0x23a>
     cb4:	f8 ce       	rjmp	.-528    	; 0xaa6 <_Z17operation_of_rackv+0x2a>
     cb6:	fc ce       	rjmp	.-520    	; 0xab0 <_Z17operation_of_rackv+0x34>
     cb8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <Rack_home_position>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <stop_rack_final>
     cc2:	f6 ce       	rjmp	.-532    	; 0xab0 <_Z17operation_of_rackv+0x34>
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Rack_home_position>
     cca:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <stop_rack_initial>
     cce:	f0 ce       	rjmp	.-544    	; 0xab0 <_Z17operation_of_rackv+0x34>
     cd0:	47 98       	cbi	0x08, 7	; 8
     cd2:	12 98       	cbi	0x02, 2	; 2
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <inside_robot>
     cda:	38 cf       	rjmp	.-400    	; 0xb4c <_Z17operation_of_rackv+0xd0>
     cdc:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RackEncoder+0x9>
     ce0:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <RackEncoder+0xa>
     ce4:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <RackEncoder+0xb>
     ce8:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <RackEncoder+0xc>
     cec:	86 3a       	cpi	r24, 0xA6	; 166
     cee:	9f 4f       	sbci	r25, 0xFF	; 255
     cf0:	af 4f       	sbci	r26, 0xFF	; 255
     cf2:	bf 4f       	sbci	r27, 0xFF	; 255
     cf4:	3c f7       	brge	.-50     	; 0xcc4 <_Z17operation_of_rackv+0x248>
     cf6:	dc ce       	rjmp	.-584    	; 0xab0 <_Z17operation_of_rackv+0x34>
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	08 95       	ret

00000cfe <_Z18init_timer_rampingv>:
     cfe:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <rampupflag_start>
     d02:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <timer_count>
     d06:	84 b5       	in	r24, 0x24	; 36
     d08:	82 60       	ori	r24, 0x02	; 2
     d0a:	84 bd       	out	0x24, r24	; 36
     d0c:	85 b5       	in	r24, 0x25	; 37
     d0e:	85 60       	ori	r24, 0x05	; 5
     d10:	85 bd       	out	0x25, r24	; 37
     d12:	ee e6       	ldi	r30, 0x6E	; 110
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	82 60       	ori	r24, 0x02	; 2
     d1a:	80 83       	st	Z, r24
     d1c:	16 bc       	out	0x26, r1	; 38
     d1e:	8b e9       	ldi	r24, 0x9B	; 155
     d20:	87 bd       	out	0x27, r24	; 39
     d22:	08 95       	ret

00000d24 <_Z14init_LedStripsv>:
     d24:	98 9a       	sbi	0x13, 0	; 19
     d26:	3e 9a       	sbi	0x07, 6	; 7
     d28:	3c 9a       	sbi	0x07, 4	; 7
     d2a:	9a 9a       	sbi	0x13, 2	; 19
     d2c:	38 9a       	sbi	0x07, 0	; 7
     d2e:	3a 9a       	sbi	0x07, 2	; 7
     d30:	99 9a       	sbi	0x13, 1	; 19
     d32:	a0 98       	cbi	0x14, 0	; 20
     d34:	46 98       	cbi	0x08, 6	; 8
     d36:	44 98       	cbi	0x08, 4	; 8
     d38:	a2 98       	cbi	0x14, 2	; 20
     d3a:	40 98       	cbi	0x08, 0	; 8
     d3c:	42 98       	cbi	0x08, 2	; 8
     d3e:	a1 98       	cbi	0x14, 1	; 20
     d40:	08 95       	ret

00000d42 <_Z11init_masterv>:
     d42:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <LtState>
     d46:	89 e0       	ldi	r24, 0x09	; 9
     d48:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <robot_rpm>
     d4c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <auto_mode>
     d50:	6c 98       	cbi	0x0d, 4	; 13
     d52:	74 9a       	sbi	0x0e, 4	; 14
     d54:	ea e0       	ldi	r30, 0x0A	; 10
     d56:	f1 e0       	ldi	r31, 0x01	; 1
     d58:	80 81       	ld	r24, Z
     d5a:	84 60       	ori	r24, 0x04	; 4
     d5c:	80 83       	st	Z, r24
     d5e:	6b de       	rcall	.-810    	; 0xa36 <_Z14reset_automodev>
     d60:	ce df       	rcall	.-100    	; 0xcfe <_Z18init_timer_rampingv>
     d62:	e0 cf       	rjmp	.-64     	; 0xd24 <_Z14init_LedStripsv>
     d64:	08 95       	ret

00000d66 <_Z18Send_data_to_Slavev>:
}

/*****************************************Function to send data to slave***************************/

void Send_data_to_Slave()
{
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
	if(auto_mode)
     d6a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <auto_mode>
     d6e:	88 23       	and	r24, r24
     d70:	71 f0       	breq	.+28     	; 0xd8e <_Z18Send_data_to_Slavev+0x28>
	{
		UART3Transmit(START_BYTE_AUTO);
     d72:	8e ef       	ldi	r24, 0xFE	; 254
     d74:	40 d4       	rcall	.+2176   	; 0x15f6 <_Z13UART3Transmith>
		UART3Transmit(slave_work_category);
     d76:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <slave_work_category>
     d7a:	3d d4       	rcall	.+2170   	; 0x15f6 <_Z13UART3Transmith>
		UART3Transmit(FenceState);
     d7c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <FenceState>
     d80:	3a d4       	rcall	.+2164   	; 0x15f6 <_Z13UART3Transmith>
		UART3Transmit(LtState);
     d82:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     d86:	37 d4       	rcall	.+2158   	; 0x15f6 <_Z13UART3Transmith>
     d88:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <slave_work_category>
		slave_work_category = static_position;
     d8c:	0e c0       	rjmp	.+28     	; 0xdaa <_Z18Send_data_to_Slavev+0x44>
	}
	else
	{
		UART3Transmit(START_BYTE_MANUAL);
     d8e:	8d ef       	ldi	r24, 0xFD	; 253
     d90:	32 d4       	rcall	.+2148   	; 0x15f6 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[0]);
     d92:	c3 e8       	ldi	r28, 0x83	; 131
     d94:	d2 e0       	ldi	r29, 0x02	; 2
     d96:	88 81       	ld	r24, Y
		UART3Transmit(velocity_robot[1]);
     d98:	2e d4       	rcall	.+2140   	; 0x15f6 <_Z13UART3Transmith>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	2c d4       	rcall	.+2136   	; 0x15f6 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[2]);
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	2a d4       	rcall	.+2132   	; 0x15f6 <_Z13UART3Transmith>
     da2:	82 e3       	ldi	r24, 0x32	; 50
		velocity_robot[0] = RESETDATA_JOYSTICK;
     da4:	88 83       	st	Y, r24
     da6:	89 83       	std	Y+1, r24	; 0x01
		velocity_robot[1] = RESETDATA_JOYSTICK;
     da8:	8a 83       	std	Y+2, r24	; 0x02
		velocity_robot[2] = RESETDATA_JOYSTICK;
     daa:	df 91       	pop	r29
	}

	
}
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <_Z17orientation_checkv>:
     db0:	1e 9b       	sbis	0x03, 6	; 3

void orientation_check()
{
		//limit_switch 1
		if(READ(LTSWITCH_ORIENT_1))
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <_Z17orientation_checkv+0x12>
		{
			LtState &= ~(1<<0);
     db4:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <LtState>
			CLEAR(LT1_LED);
     dbe:	44 98       	cbi	0x08, 4	; 8
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <_Z17orientation_checkv+0x1e>
		}
		else
		{
			LtState |= (1<<0);
     dc2:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <LtState>
			SET(LT1_LED);
     dcc:	44 9a       	sbi	0x08, 4	; 8
		}
		
		//limit_Switch 2
		if(READ(LTSWITCH_ORIENT_2))
     dce:	1f 9b       	sbis	0x03, 7	; 3
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <_Z17orientation_checkv+0x30>
		{
			LtState &= ~(1<<1);
     dd2:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     dd6:	8d 7f       	andi	r24, 0xFD	; 253
     dd8:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <LtState>
			CLEAR(LT2_LED);
     ddc:	a1 98       	cbi	0x14, 1	; 20
     dde:	06 c0       	rjmp	.+12     	; 0xdec <_Z17orientation_checkv+0x3c>
		}
		else
		{
			LtState |= (1<<1);
     de0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <LtState>
			SET(LT2_LED);
     dea:	a1 9a       	sbi	0x14, 1	; 20
		}
		
		//limit_Switch 3
		if (READ(LTSWITCH_ORIENT_3))
     dec:	1d 9b       	sbis	0x03, 5	; 3
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <_Z17orientation_checkv+0x4e>
		{
			LtState &= ~(1<<2);
     df0:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     df4:	8b 7f       	andi	r24, 0xFB	; 251
     df6:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <LtState>
			CLEAR(LT3_LED);
     dfa:	40 98       	cbi	0x08, 0	; 8
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <_Z17orientation_checkv+0x5a>
		}
		else
		{
			LtState |= (1<<2);
     dfe:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <LtState>
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <LtState>
			SET(LT3_LED);
     e08:	40 9a       	sbi	0x08, 0	; 8
		}
		
		//fence limit switches
		if(!READ(LTSWITCH_FENCE_1) && !READ(LTSWITCH_FENCE_2))
     e0a:	4b 99       	sbic	0x09, 3	; 9
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <_Z17orientation_checkv+0x6e>
     e0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     e12:	85 fd       	sbrc	r24, 5
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <_Z17orientation_checkv+0x6e>
			FenceState = 2;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <FenceState>
     e1c:	08 95       	ret
		else 
			FenceState = 0;
     e1e:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <FenceState>
     e22:	08 95       	ret

00000e24 <_Z19operate_master_autov>:
	open_the_grip = false;
	reset_auto = false;
}

void operate_master_auto()
{
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
	reset_auto = true;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <reset_auto>
	SET(AUTO_LED_STRIP);
     e2e:	a0 9a       	sbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     e30:	46 98       	cbi	0x08, 6	; 8
	
	//toggling manual and automatic mode
	if(GAMEBUTTONA == START_BUTTON)
     e32:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <rcvdata>
     e36:	80 34       	cpi	r24, 0x40	; 64
     e38:	29 f4       	brne	.+10     	; 0xe44 <_Z19operate_master_autov+0x20>
	{
		auto_mode = false;
     e3a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <auto_mode>
		GAMEBUTTONA = 0;
     e3e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
     e42:	8c c0       	rjmp	.+280    	; 0xf5c <_Z19operate_master_autov+0x138>
	}
	//Automatic-- zone navigation
	else if(GAMEBUTTONA == BUTTON_A)
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	99 f4       	brne	.+38     	; 0xe6e <_Z19operate_master_autov+0x4a>
	{
		if(Rack_home_position)
     e48:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     e4c:	88 23       	and	r24, r24
     e4e:	49 f0       	breq	.+18     	; 0xe62 <_Z19operate_master_autov+0x3e>
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     e50:	8d ef       	ldi	r24, 0xFD	; 253
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     e58:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		}
		slave_work_category = Rack_load;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		GAMEBUTTONA = 0;
     e68:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
     e6c:	77 c0       	rjmp	.+238    	; 0xf5c <_Z19operate_master_autov+0x138>
	}
	else if(GAMEBUTTONA == BUTTON_B)
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	99 f4       	brne	.+38     	; 0xe98 <_Z19operate_master_autov+0x74>
	{
		if(Rack_home_position)
     e72:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     e76:	88 23       	and	r24, r24
     e78:	49 f0       	breq	.+18     	; 0xe8c <_Z19operate_master_autov+0x68>
     e7a:	8d ef       	ldi	r24, 0xFD	; 253
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
     e7e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     e82:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		}
		slave_work_category = Load1;
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		GAMEBUTTONA = 0;
     e92:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
     e96:	62 c0       	rjmp	.+196    	; 0xf5c <_Z19operate_master_autov+0x138>
	}
	else if (GAMEBUTTONA == BUTTON_X)
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	99 f4       	brne	.+38     	; 0xec2 <_Z19operate_master_autov+0x9e>
	{
		if(Rack_home_position)
     e9c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     ea0:	88 23       	and	r24, r24
     ea2:	49 f0       	breq	.+18     	; 0xeb6 <_Z19operate_master_autov+0x92>
     ea4:	8d ef       	ldi	r24, 0xFD	; 253
     ea6:	9f ef       	ldi	r25, 0xFF	; 255
     ea8:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     eac:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		}
		slave_work_category = Load2;
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		GAMEBUTTONA = 0;
     ebc:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
     ec0:	4d c0       	rjmp	.+154    	; 0xf5c <_Z19operate_master_autov+0x138>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	a1 f4       	brne	.+40     	; 0xeee <_Z19operate_master_autov+0xca>
	{
		SET(GOLDEN_LED);
     ec6:	42 9a       	sbi	0x08, 2	; 8
		if(Rack_home_position)
     ec8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     ecc:	88 23       	and	r24, r24
     ece:	49 f0       	breq	.+18     	; 0xee2 <_Z19operate_master_autov+0xbe>
     ed0:	8d ef       	ldi	r24, 0xFD	; 253
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     ed8:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		}
		slave_work_category = Golden_Rack;
     ee2:	89 e0       	ldi	r24, 0x09	; 9
     ee4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		GAMEBUTTONA = 0;
     ee8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
     eec:	37 c0       	rjmp	.+110    	; 0xf5c <_Z19operate_master_autov+0x138>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)
     eee:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_edata>
     ef2:	91 11       	cpse	r25, r1
     ef4:	33 c0       	rjmp	.+102    	; 0xf5c <_Z19operate_master_autov+0x138>
     ef6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rack_throw_auto>
     efa:	91 11       	cpse	r25, r1
     efc:	2f c0       	rjmp	.+94     	; 0xf5c <_Z19operate_master_autov+0x138>
     efe:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pneumatic_geneva_start>
     f02:	91 11       	cpse	r25, r1
     f04:	2b c0       	rjmp	.+86     	; 0xf5c <_Z19operate_master_autov+0x138>
     f06:	80 32       	cpi	r24, 0x20	; 32
     f08:	49 f5       	brne	.+82     	; 0xf5c <_Z19operate_master_autov+0x138>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
     f0a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <inside_robot>
     f0e:	88 23       	and	r24, r24
     f10:	89 f0       	breq	.+34     	; 0xf34 <_Z19operate_master_autov+0x110>
		{
			pneumatic_geneva_start = true;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     f18:	61 da       	rcall	.-2878   	; 0x3dc <_Z6millisv>
     f1a:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <pneumatic_geneva_time>
     f1e:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <pneumatic_geneva_time+0x1>
     f22:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <pneumatic_geneva_time+0x2>
     f26:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     f2a:	92 b1       	in	r25, 0x02	; 2
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	89 27       	eor	r24, r25
     f30:	82 b9       	out	0x02, r24	; 2
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <_Z19operate_master_autov+0x112>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     f34:	12 98       	cbi	0x02, 2	; 2
		}
		
		pass_the_shuttcock = true;
     f36:	11 e0       	ldi	r17, 0x01	; 1
     f38:	10 93 00 02 	sts	0x0200, r17	; 0x800200 <_edata>
		passing_time = millis();
     f3c:	4f da       	rcall	.-2914   	; 0x3dc <_Z6millisv>
     f3e:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <passing_time>
     f42:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <passing_time+0x1>
     f46:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <passing_time+0x2>
     f4a:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <passing_time+0x3>
		inside_robot = (1^inside_robot);
     f4e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <inside_robot>
     f52:	18 27       	eor	r17, r24
     f54:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <inside_robot>
		GAMEBUTTONA = 0;
     f58:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
	}

	
	if (GAMEBUTTONB == LEFT_BUTTON)
     f5c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <rcvdata+0x1>
     f60:	80 32       	cpi	r24, 0x20	; 32
     f62:	31 f4       	brne	.+12     	; 0xf70 <_Z19operate_master_autov+0x14c>
	{
		slave_work_category = Search_automaticrobot;
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		GAMEBUTTONB = 0;
     f6a:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <rcvdata+0x1>
     f6e:	1e c0       	rjmp	.+60     	; 0xfac <_Z19operate_master_autov+0x188>
	}	
	else if(GAMEBUTTONB == UP)
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	21 f4       	brne	.+8      	; 0xf7c <_Z19operate_master_autov+0x158>
	{
		slave_work_category = up_rob;
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
     f7a:	18 c0       	rjmp	.+48     	; 0xfac <_Z19operate_master_autov+0x188>
	}	
	else if(GAMEBUTTONB == DOWN)
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	21 f4       	brne	.+8      	; 0xf88 <_Z19operate_master_autov+0x164>
	{
		slave_work_category = down_rob;
     f80:	86 e0       	ldi	r24, 0x06	; 6
     f82:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
     f86:	12 c0       	rjmp	.+36     	; 0xfac <_Z19operate_master_autov+0x188>
	}
	else if(GAMEBUTTONB == RIGHT)
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	21 f4       	brne	.+8      	; 0xf94 <_Z19operate_master_autov+0x170>
	{
		slave_work_category = right_rob;
     f8c:	87 e0       	ldi	r24, 0x07	; 7
     f8e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
     f92:	0c c0       	rjmp	.+24     	; 0xfac <_Z19operate_master_autov+0x188>
	}
	else if(GAMEBUTTONB == LEFT)
     f94:	88 30       	cpi	r24, 0x08	; 8
     f96:	19 f4       	brne	.+6      	; 0xf9e <_Z19operate_master_autov+0x17a>
	{
		slave_work_category = left_rob;
     f98:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <_Z19operate_master_autov+0x188>
	}
	else if(GAMEBUTTONB == BACK_BUTTON)
     f9e:	80 34       	cpi	r24, 0x40	; 64
     fa0:	29 f4       	brne	.+10     	; 0xfac <_Z19operate_master_autov+0x188>
	{
		slave_work_category = Stop_Search;
     fa2:	8d e0       	ldi	r24, 0x0D	; 13
     fa4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		GAMEBUTTONB = 0;
     fa8:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <rcvdata+0x1>
	}
	
	
	//if reached rack loading zone
	if(SLAVE_DATA == Rack_zone)
     fac:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <rcv_value_slave>
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	a9 f4       	brne	.+42     	; 0xfde <_Z19operate_master_autov+0x1ba>
	{
		rack_throw_auto = true;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
     fba:	47 9a       	sbi	0x08, 7	; 8
		RACK_GRIP_CLOSE();
     fbc:	10 9a       	sbi	0x02, 0	; 2
		rack_pickup = true;
     fbe:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <rack_pickup>
		rack_picktime = millis();
     fc2:	0c da       	rcall	.-3048   	; 0x3dc <_Z6millisv>
     fc4:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <rack_picktime>
     fc8:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <rack_picktime+0x1>
     fcc:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <rack_picktime+0x2>
     fd0:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <rack_picktime+0x3>
		CLEAR(RACK_DETECT_LED);
		disable_proximity();
     fd4:	a2 98       	cbi	0x14, 2	; 20
     fd6:	f2 d9       	rcall	.-3100   	; 0x3bc <_Z17disable_proximityv>
		SLAVE_DATA = 0;
     fd8:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcv_value_slave>
     fdc:	58 c0       	rjmp	.+176    	; 0x108e <_Z19operate_master_autov+0x26a>
	}
	else if(SLAVE_DATA == Golden_zone)
     fde:	85 30       	cpi	r24, 0x05	; 5
	{
		RACK_GRIP_CLOSE();
     fe0:	91 f4       	brne	.+36     	; 0x1006 <_Z19operate_master_autov+0x1e2>
		CLEAR(RACK_DETECT_LED);
     fe2:	10 9a       	sbi	0x02, 0	; 2
		disable_proximity();
     fe4:	a2 98       	cbi	0x14, 2	; 20
		rack_pickup = true;
     fe6:	ea d9       	rcall	.-3116   	; 0x3bc <_Z17disable_proximityv>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <rack_pickup>
		rack_picktime = millis();
     fee:	f6 d9       	rcall	.-3092   	; 0x3dc <_Z6millisv>
     ff0:	60 93 75 02 	sts	0x0275, r22	; 0x800275 <rack_picktime>
     ff4:	70 93 76 02 	sts	0x0276, r23	; 0x800276 <rack_picktime+0x1>
     ff8:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <rack_picktime+0x2>
     ffc:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <rack_picktime+0x3>
		SLAVE_DATA = 0;
    1000:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcv_value_slave>
    1004:	44 c0       	rjmp	.+136    	; 0x108e <_Z19operate_master_autov+0x26a>
	}
	else if(!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && SLAVE_DATA == Give_shutcock)
    1006:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_edata>
    100a:	91 11       	cpse	r25, r1
    100c:	34 c0       	rjmp	.+104    	; 0x1076 <_Z19operate_master_autov+0x252>
    100e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rack_throw_auto>
    1012:	91 11       	cpse	r25, r1
    1014:	30 c0       	rjmp	.+96     	; 0x1076 <_Z19operate_master_autov+0x252>
    1016:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pneumatic_geneva_start>
    101a:	91 11       	cpse	r25, r1
    101c:	2c c0       	rjmp	.+88     	; 0x1076 <_Z19operate_master_autov+0x252>
    101e:	8a 30       	cpi	r24, 0x0A	; 10
    1020:	51 f5       	brne	.+84     	; 0x1076 <_Z19operate_master_autov+0x252>
	{
		if(inside_robot)
    1022:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <inside_robot>
    1026:	88 23       	and	r24, r24
		{
			pneumatic_geneva_start = true;
    1028:	89 f0       	breq	.+34     	; 0x104c <_Z19operate_master_autov+0x228>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
    1030:	d5 d9       	rcall	.-3158   	; 0x3dc <_Z6millisv>
    1032:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <pneumatic_geneva_time>
    1036:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <pneumatic_geneva_time+0x1>
    103a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <pneumatic_geneva_time+0x2>
    103e:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
    1042:	92 b1       	in	r25, 0x02	; 2
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	89 27       	eor	r24, r25
    1048:	82 b9       	out	0x02, r24	; 2
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    104a:	01 c0       	rjmp	.+2      	; 0x104e <_Z19operate_master_autov+0x22a>
		}
		
		pass_the_shuttcock = true;
    104c:	12 98       	cbi	0x02, 2	; 2
    104e:	11 e0       	ldi	r17, 0x01	; 1
    1050:	10 93 00 02 	sts	0x0200, r17	; 0x800200 <_edata>
		passing_time = millis();
    1054:	c3 d9       	rcall	.-3194   	; 0x3dc <_Z6millisv>
    1056:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <passing_time>
    105a:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <passing_time+0x1>
    105e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <passing_time+0x2>
    1062:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <passing_time+0x3>
		inside_robot = (1^inside_robot);
    1066:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <inside_robot>
    106a:	18 27       	eor	r17, r24
    106c:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <inside_robot>
		SLAVE_DATA = 0;
    1070:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcv_value_slave>
	}
	else if(SLAVE_DATA == enable_prox)
    1074:	0c c0       	rjmp	.+24     	; 0x108e <_Z19operate_master_autov+0x26a>
	{
		enable_proximity();	
    1076:	8b 30       	cpi	r24, 0x0B	; 11
    1078:	29 f4       	brne	.+10     	; 0x1084 <_Z19operate_master_autov+0x260>
		SET(RACK_DETECT_LED);	
    107a:	96 d9       	rcall	.-3284   	; 0x3a8 <_Z16enable_proximityv>
		SLAVE_DATA = 0;
    107c:	a2 9a       	sbi	0x14, 2	; 20
    107e:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcv_value_slave>
	}
	else if(SLAVE_DATA == enable_gldprox)
    1082:	05 c0       	rjmp	.+10     	; 0x108e <_Z19operate_master_autov+0x26a>
	{
		enable_golden_eye();
    1084:	8c 30       	cpi	r24, 0x0C	; 12
    1086:	19 f4       	brne	.+6      	; 0x108e <_Z19operate_master_autov+0x26a>
		SLAVE_DATA = 0;
    1088:	9c d9       	rcall	.-3272   	; 0x3c2 <_Z17enable_golden_eyev>
    108a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcv_value_slave>
	}
	
	
	if(rack_pickup && (millis()-rack_picktime) >= 500)
    108e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <rack_pickup>
    1092:	88 23       	and	r24, r24
    1094:	79 f1       	breq	.+94     	; 0x10f4 <_Z19operate_master_autov+0x2d0>
    1096:	a2 d9       	rcall	.-3260   	; 0x3dc <_Z6millisv>
    1098:	00 91 75 02 	lds	r16, 0x0275	; 0x800275 <rack_picktime>
    109c:	10 91 76 02 	lds	r17, 0x0276	; 0x800276 <rack_picktime+0x1>
    10a0:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <rack_picktime+0x2>
    10a4:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <rack_picktime+0x3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	80 1b       	sub	r24, r16
    10ae:	91 0b       	sbc	r25, r17
    10b0:	a2 0b       	sbc	r26, r18
    10b2:	b3 0b       	sbc	r27, r19
    10b4:	84 3f       	cpi	r24, 0xF4	; 244
    10b6:	91 40       	sbci	r25, 0x01	; 1
    10b8:	a1 05       	cpc	r26, r1
    10ba:	b1 05       	cpc	r27, r1
    10bc:	d8 f0       	brcs	.+54     	; 0x10f4 <_Z19operate_master_autov+0x2d0>
	{
		RACK_LIFT_OPEN();
    10be:	14 9a       	sbi	0x02, 4	; 2
		rack_pickup = false;
    10c0:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rack_pickup>
		
		if(rack_throw_auto)
    10c4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
    10c8:	88 23       	and	r24, r24
    10ca:	89 f0       	breq	.+34     	; 0x10ee <_Z19operate_master_autov+0x2ca>
		{
			if(!Rack_home_position)
    10cc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
    10d0:	81 11       	cpse	r24, r1
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <_Z19operate_master_autov+0x2c2>
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    10dc:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
			{
				rack_motor_pid.Set_SP(RACK_COUNT);
				auto_move_rack = true;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
			}
			slave_work_category = Load1;
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <_Z19operate_master_autov+0x2d0>
		}
		else
		{
			slave_work_category = Golden_Rack;
    10ee:	89 e0       	ldi	r24, 0x09	; 9
    10f0:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
		}
		
	}
	
	//if not rack auto move stop rack motor
	if(!auto_move_rack)
    10f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
    10f8:	81 11       	cpse	r24, r1
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <_Z19operate_master_autov+0x2e0>
    10fc:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
    1100:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(0);
		
	if(golden_rack_throw)
    1104:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <golden_rack_throw>
    1108:	88 23       	and	r24, r24
	{
		open_the_grip = true;
    110a:	71 f0       	breq	.+28     	; 0x1128 <_Z19operate_master_autov+0x304>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <open_the_grip>
		rack_throw_time = millis();
    1112:	64 d9       	rcall	.-3384   	; 0x3dc <_Z6millisv>
    1114:	60 93 71 02 	sts	0x0271, r22	; 0x800271 <rack_throw_time>
    1118:	70 93 72 02 	sts	0x0272, r23	; 0x800272 <rack_throw_time+0x1>
    111c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <rack_throw_time+0x2>
    1120:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <rack_throw_time+0x3>
		golden_rack_throw = false;
    1124:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <golden_rack_throw>
	}
	
	if(open_the_grip && (millis()-rack_throw_time) >= 500)
    1128:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <open_the_grip>
    112c:	88 23       	and	r24, r24
    112e:	d9 f0       	breq	.+54     	; 0x1166 <_Z19operate_master_autov+0x342>
    1130:	55 d9       	rcall	.-3414   	; 0x3dc <_Z6millisv>
    1132:	00 91 71 02 	lds	r16, 0x0271	; 0x800271 <rack_throw_time>
    1136:	10 91 72 02 	lds	r17, 0x0272	; 0x800272 <rack_throw_time+0x1>
    113a:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <rack_throw_time+0x2>
    113e:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <rack_throw_time+0x3>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	80 1b       	sub	r24, r16
    1148:	91 0b       	sbc	r25, r17
    114a:	a2 0b       	sbc	r26, r18
    114c:	b3 0b       	sbc	r27, r19
    114e:	84 3f       	cpi	r24, 0xF4	; 244
    1150:	91 40       	sbci	r25, 0x01	; 1
	{
		RACK_GRIP_OPEN();
    1152:	a1 05       	cpc	r26, r1
		CLEAR(GOLDEN_LED);
    1154:	b1 05       	cpc	r27, r1
		slave_work_category = Go_after_throw;
    1156:	38 f0       	brcs	.+14     	; 0x1166 <_Z19operate_master_autov+0x342>
    1158:	10 98       	cbi	0x02, 0	; 2
    115a:	42 98       	cbi	0x08, 2	; 8
		open_the_grip = false;
    115c:	8e e0       	ldi	r24, 0x0E	; 14
    115e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <slave_work_category>
	}
		
	operation_of_rack();
    1162:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <open_the_grip>
	rack_limit_check();
    1166:	8a dc       	rcall	.-1772   	; 0xa7c <_Z17operation_of_rackv>
	orientation_check();
    1168:	dc d9       	rcall	.-3144   	; 0x522 <_Z16rack_limit_checkv>
    116a:	22 de       	rcall	.-956    	; 0xdb0 <_Z17orientation_checkv>
}
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <_Z21operate_master_manualv>:


void operate_master_manual()
{
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
	/**********************************************GAMEBUTTONB_SECTION*********************************/
	SET(MANUAL_LED_STRIP);
    117a:	46 9a       	sbi	0x08, 6	; 8
	CLEAR(AUTO_LED_STRIP);
    117c:	a0 98       	cbi	0x14, 0	; 20
	
	if(reset_auto)
    117e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <reset_auto>
    1182:	81 11       	cpse	r24, r1
		reset_automode();	
    1184:	58 dc       	rcall	.-1872   	; 0xa36 <_Z14reset_automodev>
	
	if (GAMEBUTTONB == RIGHT)
    1186:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <rcvdata+0x1>
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	51 f4       	brne	.+20     	; 0x11a2 <_Z21operate_master_manualv+0x30>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    118e:	e3 e8       	ldi	r30, 0x83	; 131
    1190:	f2 e0       	ldi	r31, 0x02	; 2
    1192:	92 e3       	ldi	r25, 0x32	; 50
    1194:	90 83       	st	Z, r25
		velocity_robot[1] = RESETDATA_JOYSTICK + robot_rpm;
    1196:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <robot_rpm>
    119a:	8e 5c       	subi	r24, 0xCE	; 206
    119c:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    119e:	92 83       	std	Z+2, r25	; 0x02
    11a0:	25 c0       	rjmp	.+74     	; 0x11ec <_Z21operate_master_manualv+0x7a>
	}
	else if (GAMEBUTTONB == LEFT)
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	59 f4       	brne	.+22     	; 0x11bc <_Z21operate_master_manualv+0x4a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    11a6:	e3 e8       	ldi	r30, 0x83	; 131
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	82 e3       	ldi	r24, 0x32	; 50
    11ac:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK - robot_rpm;
    11ae:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <robot_rpm>
    11b2:	28 2f       	mov	r18, r24
    11b4:	29 1b       	sub	r18, r25
    11b6:	21 83       	std	Z+1, r18	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    11b8:	82 83       	std	Z+2, r24	; 0x02
    11ba:	18 c0       	rjmp	.+48     	; 0x11ec <_Z21operate_master_manualv+0x7a>
	}
	else if (GAMEBUTTONB == UP)
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	51 f4       	brne	.+20     	; 0x11d4 <_Z21operate_master_manualv+0x62>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK + robot_rpm;
    11c0:	e3 e8       	ldi	r30, 0x83	; 131
    11c2:	f2 e0       	ldi	r31, 0x02	; 2
    11c4:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <robot_rpm>
    11c8:	8e 5c       	subi	r24, 0xCE	; 206
    11ca:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
    11cc:	82 e3       	ldi	r24, 0x32	; 50
    11ce:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    11d0:	82 83       	std	Z+2, r24	; 0x02
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <_Z21operate_master_manualv+0x7a>
		
	}
	else if (GAMEBUTTONB == DOWN)
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	51 f4       	brne	.+20     	; 0x11ec <_Z21operate_master_manualv+0x7a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK - robot_rpm;
    11d8:	e3 e8       	ldi	r30, 0x83	; 131
    11da:	f2 e0       	ldi	r31, 0x02	; 2
    11dc:	82 e3       	ldi	r24, 0x32	; 50
    11de:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <robot_rpm>
    11e2:	68 2f       	mov	r22, r24
    11e4:	69 1b       	sub	r22, r25
    11e6:	60 83       	st	Z, r22
		velocity_robot[1] = RESETDATA_JOYSTICK;
    11e8:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    11ea:	82 83       	std	Z+2, r24	; 0x02
	}
	
	
	/**********************************************************************GAMEBUTTONA_SECTION****************************/
	if(GAMEBUTTONA == START_BUTTON)
    11ec:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <rcvdata>
    11f0:	80 34       	cpi	r24, 0x40	; 64
    11f2:	31 f4       	brne	.+12     	; 0x1200 <_Z21operate_master_manualv+0x8e>
	{
		auto_mode = true;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <auto_mode>
		GAMEBUTTONA = 0;
    11fa:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
    11fe:	8e c0       	rjmp	.+284    	; 0x131c <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_A)
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	31 f4       	brne	.+12     	; 0x1210 <_Z21operate_master_manualv+0x9e>
	{
		RACK_GRIP_TOGGLE();
    1204:	92 b1       	in	r25, 0x02	; 2
    1206:	89 27       	eor	r24, r25
    1208:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    120a:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
    120e:	86 c0       	rjmp	.+268    	; 0x131c <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	59 f4       	brne	.+22     	; 0x122a <_Z21operate_master_manualv+0xb8>
    1214:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Rack_home_position>
    1218:	91 11       	cpse	r25, r1
    121a:	49 c0       	rjmp	.+146    	; 0x12ae <_Z21operate_master_manualv+0x13c>
	{
		RACK_LIFT_TOGGLE();
    121c:	92 b1       	in	r25, 0x02	; 2
    121e:	80 e1       	ldi	r24, 0x10	; 16
    1220:	89 27       	eor	r24, r25
    1222:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    1224:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
    1228:	79 c0       	rjmp	.+242    	; 0x131c <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_X)
    122a:	84 30       	cpi	r24, 0x04	; 4
    122c:	b9 f4       	brne	.+46     	; 0x125c <_Z21operate_master_manualv+0xea>
	{
		auto_move_rack = true;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		if(Rack_home_position)
    1234:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
    1238:	88 23       	and	r24, r24
    123a:	39 f0       	breq	.+14     	; 0x124a <_Z21operate_master_manualv+0xd8>
    123c:	8d ef       	ldi	r24, 0xFD	; 253
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1244:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <_Z21operate_master_manualv+0xe4>
    124a:	83 e0       	ldi	r24, 0x03	; 3
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1252:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		}
		else
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		GAMEBUTTONA = 0;
    1256:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
    125a:	71 c0       	rjmp	.+226    	; 0x133e <_Z21operate_master_manualv+0x1cc>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	61 f4       	brne	.+24     	; 0x1278 <_Z21operate_master_manualv+0x106>
    1260:	88 e6       	ldi	r24, 0x68	; 104
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
    1268:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
		GAMEBUTTONA = 0;
    1272:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
    1276:	52 c0       	rjmp	.+164    	; 0x131c <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
    1278:	80 31       	cpi	r24, 0x10	; 16
    127a:	c9 f4       	brne	.+50     	; 0x12ae <_Z21operate_master_manualv+0x13c>
    127c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Rack_home_position>
    1280:	91 11       	cpse	r25, r1
    1282:	15 c0       	rjmp	.+42     	; 0x12ae <_Z21operate_master_manualv+0x13c>
	{
		rack_throw_auto = true;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
    128a:	47 9a       	sbi	0x08, 7	; 8
		RACK_LIFT_OPEN();
    128c:	14 9a       	sbi	0x02, 4	; 2
		if(!Rack_home_position)
    128e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
    1292:	81 11       	cpse	r24, r1
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <_Z21operate_master_manualv+0x136>
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    129e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
			auto_move_rack = true;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		}
		GAMEBUTTONA = 0;
    12a8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>
    12ac:	37 c0       	rjmp	.+110    	; 0x131c <_Z21operate_master_manualv+0x1aa>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	
    12ae:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <_edata>
    12b2:	91 11       	cpse	r25, r1
    12b4:	33 c0       	rjmp	.+102    	; 0x131c <_Z21operate_master_manualv+0x1aa>
    12b6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rack_throw_auto>
    12ba:	91 11       	cpse	r25, r1
    12bc:	2f c0       	rjmp	.+94     	; 0x131c <_Z21operate_master_manualv+0x1aa>
    12be:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pneumatic_geneva_start>
    12c2:	91 11       	cpse	r25, r1
    12c4:	2b c0       	rjmp	.+86     	; 0x131c <_Z21operate_master_manualv+0x1aa>
    12c6:	80 32       	cpi	r24, 0x20	; 32
    12c8:	49 f5       	brne	.+82     	; 0x131c <_Z21operate_master_manualv+0x1aa>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
    12ca:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <inside_robot>
    12ce:	88 23       	and	r24, r24
    12d0:	89 f0       	breq	.+34     	; 0x12f4 <_Z21operate_master_manualv+0x182>
		{
			pneumatic_geneva_start = true;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
    12d8:	81 d8       	rcall	.-3838   	; 0x3dc <_Z6millisv>
    12da:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <pneumatic_geneva_time>
    12de:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <pneumatic_geneva_time+0x1>
    12e2:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <pneumatic_geneva_time+0x2>
    12e6:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
    12ea:	92 b1       	in	r25, 0x02	; 2
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	89 27       	eor	r24, r25
    12f0:	82 b9       	out	0x02, r24	; 2
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <_Z21operate_master_manualv+0x184>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    12f4:	12 98       	cbi	0x02, 2	; 2
		}
		
		pass_the_shuttcock = true;
    12f6:	c1 e0       	ldi	r28, 0x01	; 1
    12f8:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <_edata>
		passing_time = millis();
    12fc:	6f d8       	rcall	.-3874   	; 0x3dc <_Z6millisv>
    12fe:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <passing_time>
    1302:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <passing_time+0x1>
    1306:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <passing_time+0x2>
    130a:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <passing_time+0x3>
		inside_robot = (1^inside_robot);
    130e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <inside_robot>
    1312:	c8 27       	eor	r28, r24
    1314:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <inside_robot>
		GAMEBUTTONA = 0;
    1318:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata>

	
	

	/**************************************************Rack Operation******************************************************/
	if (!auto_move_rack)
    131c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
    1320:	81 11       	cpse	r24, r1
    1322:	0d c0       	rjmp	.+26     	; 0x133e <_Z21operate_master_manualv+0x1cc>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
    1324:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <rcvdata+0x2>
    1328:	85 31       	cpi	r24, 0x15	; 21
    132a:	08 f4       	brcc	.+2      	; 0x132e <_Z21operate_master_manualv+0x1bc>
    132c:	ae c0       	rjmp	.+348    	; 0x148a <_Z21operate_master_manualv+0x318>
    132e:	1c 99       	sbic	0x03, 4	; 3
    1330:	a5 c0       	rjmp	.+330    	; 0x147c <_Z21operate_master_manualv+0x30a>
    1332:	ab c0       	rjmp	.+342    	; 0x148a <_Z21operate_master_manualv+0x318>
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 && READ(LTSWITCH_RACK_FINAL))
    1334:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1338:	86 fd       	sbrc	r24, 6
    133a:	ad c0       	rjmp	.+346    	; 0x1496 <_Z21operate_master_manualv+0x324>
    133c:	b3 c0       	rjmp	.+358    	; 0x14a4 <_Z21operate_master_manualv+0x332>
		else
			rack_motor_pid.Set_SP(0);
	}
	
	/*********************************************************************Move using joystick analog stick********************************************/
	if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
    133e:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <rcvdata+0x5>
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 01       	movw	r18, r24
    1346:	22 53       	subi	r18, 0x32	; 50
    1348:	31 09       	sbc	r19, r1
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	24 f4       	brge	.+8      	; 0x1358 <_Z21operate_master_manualv+0x1e6>
    1350:	26 30       	cpi	r18, 0x06	; 6
    1352:	31 05       	cpc	r19, r1
    1354:	44 f0       	brlt	.+16     	; 0x1366 <_Z21operate_master_manualv+0x1f4>
    1356:	32 c0       	rjmp	.+100    	; 0x13bc <_Z21operate_master_manualv+0x24a>
    1358:	42 e3       	ldi	r20, 0x32	; 50
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	fa 01       	movw	r30, r20
    135e:	e8 1b       	sub	r30, r24
    1360:	f9 0b       	sbc	r31, r25
    1362:	36 97       	sbiw	r30, 0x06	; 6
    1364:	5c f5       	brge	.+86     	; 0x13bc <_Z21operate_master_manualv+0x24a>
    1366:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <rcvdata+0x4>
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	ac 01       	movw	r20, r24
    136e:	42 53       	subi	r20, 0x32	; 50
    1370:	51 09       	sbc	r21, r1
    1372:	14 16       	cp	r1, r20
    1374:	15 06       	cpc	r1, r21
    1376:	24 f4       	brge	.+8      	; 0x1380 <_Z21operate_master_manualv+0x20e>
    1378:	46 30       	cpi	r20, 0x06	; 6
    137a:	51 05       	cpc	r21, r1
    137c:	4c f0       	brlt	.+18     	; 0x1390 <_Z21operate_master_manualv+0x21e>
    137e:	1e c0       	rjmp	.+60     	; 0x13bc <_Z21operate_master_manualv+0x24a>
    1380:	42 e3       	ldi	r20, 0x32	; 50
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	ba 01       	movw	r22, r20
    1386:	68 1b       	sub	r22, r24
    1388:	79 0b       	sbc	r23, r25
    138a:	66 30       	cpi	r22, 0x06	; 6
    138c:	71 05       	cpc	r23, r1
    138e:	b4 f4       	brge	.+44     	; 0x13bc <_Z21operate_master_manualv+0x24a>
    1390:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <rcvdata+0x6>
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	ac 01       	movw	r20, r24
    1398:	42 53       	subi	r20, 0x32	; 50
    139a:	51 09       	sbc	r21, r1
    139c:	14 16       	cp	r1, r20
    139e:	15 06       	cpc	r1, r21
    13a0:	2c f4       	brge	.+10     	; 0x13ac <_Z21operate_master_manualv+0x23a>
    13a2:	46 30       	cpi	r20, 0x06	; 6
    13a4:	51 05       	cpc	r21, r1
    13a6:	0c f4       	brge	.+2      	; 0x13aa <_Z21operate_master_manualv+0x238>
    13a8:	63 c0       	rjmp	.+198    	; 0x1470 <_Z21operate_master_manualv+0x2fe>
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <_Z21operate_master_manualv+0x24a>
    13ac:	42 e3       	ldi	r20, 0x32	; 50
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	fa 01       	movw	r30, r20
    13b2:	e8 1b       	sub	r30, r24
    13b4:	f9 0b       	sbc	r31, r25
    13b6:	36 97       	sbiw	r30, 0x06	; 6
    13b8:	0c f4       	brge	.+2      	; 0x13bc <_Z21operate_master_manualv+0x24a>
    13ba:	5a c0       	rjmp	.+180    	; 0x1470 <_Z21operate_master_manualv+0x2fe>
	{
		rampupflag_start = true;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <rampupflag_start>
		velocity_robot[0] = (LEFTSTICKY-50)*timer_count/60.0 + 50;
    13c2:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <timer_count>
    13c6:	c3 e8       	ldi	r28, 0x83	; 131
    13c8:	d2 e0       	ldi	r29, 0x02	; 2
    13ca:	42 03       	mulsu	r20, r18
    13cc:	b0 01       	movw	r22, r0
    13ce:	43 9f       	mul	r20, r19
    13d0:	70 0d       	add	r23, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	07 2e       	mov	r0, r23
    13d6:	00 0c       	add	r0, r0
    13d8:	88 0b       	sbc	r24, r24
    13da:	99 0b       	sbc	r25, r25
    13dc:	8b d2       	rcall	.+1302   	; 0x18f4 <__floatsisf>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e7       	ldi	r20, 0x70	; 112
    13e4:	52 e4       	ldi	r21, 0x42	; 66
    13e6:	eb d1       	rcall	.+982    	; 0x17be <__divsf3>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	48 e4       	ldi	r20, 0x48	; 72
    13ee:	52 e4       	ldi	r21, 0x42	; 66
    13f0:	7e d1       	rcall	.+764    	; 0x16ee <__addsf3>
    13f2:	52 d2       	rcall	.+1188   	; 0x1898 <__fixunssfsi>
    13f4:	68 83       	st	Y, r22
		velocity_robot[1] = (LEFTSTICKX-50)*timer_count/60.0 + 50;
    13f6:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <timer_count>
    13fa:	0a e8       	ldi	r16, 0x8A	; 138
    13fc:	12 e0       	ldi	r17, 0x02	; 2
    13fe:	f8 01       	movw	r30, r16
    1400:	24 81       	ldd	r18, Z+4	; 0x04
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	22 53       	subi	r18, 0x32	; 50
    1406:	31 09       	sbc	r19, r1
    1408:	42 03       	mulsu	r20, r18
    140a:	b0 01       	movw	r22, r0
    140c:	43 9f       	mul	r20, r19
    140e:	70 0d       	add	r23, r0
    1410:	11 24       	eor	r1, r1
    1412:	07 2e       	mov	r0, r23
    1414:	00 0c       	add	r0, r0
    1416:	88 0b       	sbc	r24, r24
    1418:	99 0b       	sbc	r25, r25
    141a:	6c d2       	rcall	.+1240   	; 0x18f4 <__floatsisf>
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e7       	ldi	r20, 0x70	; 112
    1422:	52 e4       	ldi	r21, 0x42	; 66
    1424:	cc d1       	rcall	.+920    	; 0x17be <__divsf3>
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	48 e4       	ldi	r20, 0x48	; 72
    142c:	52 e4       	ldi	r21, 0x42	; 66
    142e:	5f d1       	rcall	.+702    	; 0x16ee <__addsf3>
    1430:	33 d2       	rcall	.+1126   	; 0x1898 <__fixunssfsi>
    1432:	69 83       	std	Y+1, r22	; 0x01
		velocity_robot[2] = (RIGHTSTICKX-50)*timer_count/60.0 + 50;
    1434:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <timer_count>
    1438:	f8 01       	movw	r30, r16
    143a:	26 81       	ldd	r18, Z+6	; 0x06
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	22 53       	subi	r18, 0x32	; 50
    1440:	31 09       	sbc	r19, r1
    1442:	42 03       	mulsu	r20, r18
    1444:	b0 01       	movw	r22, r0
    1446:	43 9f       	mul	r20, r19
    1448:	70 0d       	add	r23, r0
    144a:	11 24       	eor	r1, r1
    144c:	07 2e       	mov	r0, r23
    144e:	00 0c       	add	r0, r0
    1450:	88 0b       	sbc	r24, r24
    1452:	99 0b       	sbc	r25, r25
    1454:	4f d2       	rcall	.+1182   	; 0x18f4 <__floatsisf>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e7       	ldi	r20, 0x70	; 112
    145c:	52 e4       	ldi	r21, 0x42	; 66
    145e:	af d1       	rcall	.+862    	; 0x17be <__divsf3>
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	48 e4       	ldi	r20, 0x48	; 72
    1466:	52 e4       	ldi	r21, 0x42	; 66
    1468:	42 d1       	rcall	.+644    	; 0x16ee <__addsf3>
	}
	else
	rampupflag_start = false;
    146a:	16 d2       	rcall	.+1068   	; 0x1898 <__fixunssfsi>
    146c:	6a 83       	std	Y+2, r22	; 0x02
	
	operation_of_rack();
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <_Z21operate_master_manualv+0x302>
    1470:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <rampupflag_start>
	rack_limit_check();
    1474:	03 db       	rcall	.-2554   	; 0xa7c <_Z17operation_of_rackv>
	orientation_check();
    1476:	55 d8       	rcall	.-3926   	; 0x522 <_Z16rack_limit_checkv>
    1478:	9b dc       	rcall	.-1738   	; 0xdb0 <_Z17orientation_checkv>

}
    147a:	19 c0       	rjmp	.+50     	; 0x14ae <_Z21operate_master_manualv+0x33c>
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1484:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    1488:	5a cf       	rjmp	.-332    	; 0x133e <_Z21operate_master_manualv+0x1cc>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 && READ(LTSWITCH_RACK_FINAL))
    148a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <rcvdata+0x3>
    148e:	85 31       	cpi	r24, 0x15	; 21
    1490:	08 f0       	brcs	.+2      	; 0x1494 <_Z21operate_master_manualv+0x322>
    1492:	50 cf       	rjmp	.-352    	; 0x1334 <_Z21operate_master_manualv+0x1c2>
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <_Z21operate_master_manualv+0x332>
    1496:	8d ef       	ldi	r24, 0xFD	; 253
    1498:	9f ef       	ldi	r25, 0xFF	; 255
    149a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    149e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    14a2:	4d cf       	rjmp	.-358    	; 0x133e <_Z21operate_master_manualv+0x1cc>
    14a4:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
    14a8:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
    14ac:	48 cf       	rjmp	.-368    	; 0x133e <_Z21operate_master_manualv+0x1cc>
	
	operation_of_rack();
	rack_limit_check();
	orientation_check();

}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <__vector_21>:
//Global timer interrupt

/***********************************Ramping from the joystick analog button*************************************/

ISR(TIMER0_COMPA_vect)
{
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	8f 93       	push	r24
	if (rampupflag_start)
    14c4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <rampupflag_start>
    14c8:	88 23       	and	r24, r24
    14ca:	31 f0       	breq	.+12     	; 0x14d8 <__vector_21+0x20>
	timer_count++;
    14cc:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <timer_count>
    14d0:	8f 5f       	subi	r24, 0xFF	; 255
    14d2:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timer_count>
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <__vector_21+0x24>
	else
	timer_count = 0;
    14d8:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <timer_count>
	
	if (timer_count > 60)
    14dc:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <timer_count>
    14e0:	8d 33       	cpi	r24, 0x3D	; 61
    14e2:	1c f0       	brlt	.+6      	; 0x14ea <__vector_21+0x32>
	timer_count = 60;
    14e4:	8c e3       	ldi	r24, 0x3C	; 60
    14e6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timer_count>
	

}
    14ea:	8f 91       	pop	r24
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_6>:

/**********************************************************PROXIMITY_INTERRUPT***********************************************************************/
ISR(PROXIMITY_VECT)
{
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	0b b6       	in	r0, 0x3b	; 59
    1502:	0f 92       	push	r0
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
	//pcint for slave on to stop the robot
	TOGGLE(STOP_SLAVE);
    150c:	eb e0       	ldi	r30, 0x0B	; 11
    150e:	f1 e0       	ldi	r31, 0x01	; 1
    1510:	90 81       	ld	r25, Z
    1512:	84 e0       	ldi	r24, 0x04	; 4
    1514:	89 27       	eor	r24, r25
    1516:	80 83       	st	Z, r24
}
    1518:	ff 91       	pop	r31
    151a:	ef 91       	pop	r30
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	0f 90       	pop	r0
    1522:	0b be       	out	0x3b, r0	; 59
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_3>:

ISR(GOLDENEYE_VECT)
{
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	0b b6       	in	r0, 0x3b	; 59
    153a:	0f 92       	push	r0
    153c:	2f 93       	push	r18
    153e:	3f 93       	push	r19
    1540:	4f 93       	push	r20
    1542:	5f 93       	push	r21
    1544:	6f 93       	push	r22
    1546:	7f 93       	push	r23
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
	golden_rack_throw = true;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <golden_rack_throw>
	TOGGLE(STOP_SLAVE);
    155a:	eb e0       	ldi	r30, 0x0B	; 11
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	90 81       	ld	r25, Z
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	89 27       	eor	r24, r25
    1564:	80 83       	st	Z, r24
	disable_golden_eye();
    1566:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_Z18disable_golden_eyev>
}
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0b be       	out	0x3b, r0	; 59
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	0f 90       	pop	r0
    158c:	1f 90       	pop	r1
    158e:	18 95       	reti

00001590 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    1590:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1594:	87 e6       	ldi	r24, 0x67	; 103
    1596:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    159a:	88 e9       	ldi	r24, 0x98	; 152
    159c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    15a0:	86 e0       	ldi	r24, 0x06	; 6
    15a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    15a6:	08 95       	ret

000015a8 <_Z9initUART2v>:
    15a8:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZL9datacount>
    15ac:	ea e8       	ldi	r30, 0x8A	; 138
    15ae:	f2 e0       	ldi	r31, 0x02	; 2
    15b0:	10 82       	st	Z, r1
    15b2:	11 82       	std	Z+1, r1	; 0x01
    15b4:	12 82       	std	Z+2, r1	; 0x02
    15b6:	13 82       	std	Z+3, r1	; 0x03
    15b8:	82 e3       	ldi	r24, 0x32	; 50
    15ba:	84 83       	std	Z+4, r24	; 0x04
    15bc:	85 83       	std	Z+5, r24	; 0x05
    15be:	86 83       	std	Z+6, r24	; 0x06
    15c0:	87 83       	std	Z+7, r24	; 0x07
    15c2:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    15c6:	89 e1       	ldi	r24, 0x19	; 25
    15c8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    15cc:	88 e9       	ldi	r24, 0x98	; 152
    15ce:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    15d2:	86 e0       	ldi	r24, 0x06	; 6
    15d4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    15d8:	08 95       	ret

000015da <_Z9initUART3v>:
    15da:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcv_value_slave>
    15de:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    15e2:	89 e1       	ldi	r24, 0x19	; 25
    15e4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    15e8:	88 e9       	ldi	r24, 0x98	; 152
    15ea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    15ee:	86 e0       	ldi	r24, 0x06	; 6
    15f0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    15f4:	08 95       	ret

000015f6 <_Z13UART3Transmith>:
    15f6:	e0 e3       	ldi	r30, 0x30	; 48
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	90 81       	ld	r25, Z
    15fc:	95 ff       	sbrs	r25, 5
    15fe:	fd cf       	rjmp	.-6      	; 0x15fa <_Z13UART3Transmith+0x4>
    1600:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1604:	08 95       	ret

00001606 <__vector_25>:

ISR(USART0_RX_vect)
{
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	8f 93       	push	r24
	buffer=UDR0;
    1612:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1616:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <buffer>
}
    161a:	8f 91       	pop	r24
    161c:	0f 90       	pop	r0
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	0f 90       	pop	r0
    1622:	1f 90       	pop	r1
    1624:	18 95       	reti

00001626 <__vector_36>:

ISR(USART1_RX_vect)
{
    1626:	1f 92       	push	r1
    1628:	0f 92       	push	r0
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	0f 92       	push	r0
    162e:	11 24       	eor	r1, r1
    1630:	8f 93       	push	r24
	buffer1=UDR1;
    1632:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1636:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <buffer1>
	
}
    163a:	8f 91       	pop	r24
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_51>:

ISR(USART2_RX_vect)
{
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	0b b6       	in	r0, 0x3b	; 59
    1652:	0f 92       	push	r0
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
	buffer2=UDR2;
    165c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1660:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <buffer2>
		if(rcvflag)
    1664:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <rcvflag>
    1668:	99 23       	and	r25, r25
    166a:	89 f0       	breq	.+34     	; 0x168e <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    166c:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <_ZL9datacount>
    1670:	e9 2f       	mov	r30, r25
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	e6 57       	subi	r30, 0x76	; 118
    1676:	fd 4f       	sbci	r31, 0xFD	; 253
    1678:	80 83       	st	Z, r24
			datacount++;
    167a:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>7)
    167c:	98 30       	cpi	r25, 0x08	; 8
    167e:	18 f4       	brcc	.+6      	; 0x1686 <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    1680:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <_ZL9datacount>
    1684:	04 c0       	rjmp	.+8      	; 0x168e <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    1686:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <_ZL9datacount>
				rcvflag = false; 
    168a:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
    168e:	8f 37       	cpi	r24, 0x7F	; 127
    1690:	19 f4       	brne	.+6      	; 0x1698 <__vector_51+0x52>
			rcvflag=true;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <rcvflag>
		
}
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	0f 90       	pop	r0
    16a2:	0b be       	out	0x3b, r0	; 59
    16a4:	0f 90       	pop	r0
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	0f 90       	pop	r0
    16aa:	1f 90       	pop	r1
    16ac:	18 95       	reti

000016ae <__vector_54>:


ISR(USART3_RX_vect)
{
    16ae:	1f 92       	push	r1
    16b0:	0f 92       	push	r0
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	0f 92       	push	r0
    16b6:	11 24       	eor	r1, r1
    16b8:	8f 93       	push	r24
    16ba:	9f 93       	push	r25
	buffer3=UDR3;
    16bc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    16c0:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <buffer3>
	
	if(rcv_slave_flag)
    16c4:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <rcv_slave_flag>
    16c8:	99 23       	and	r25, r25
    16ca:	21 f0       	breq	.+8      	; 0x16d4 <__vector_54+0x26>
	{
		rcv_value_slave = buffer3;
    16cc:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <rcv_value_slave>
		rcv_slave_flag = false;
    16d0:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <rcv_slave_flag>
	}
	if(buffer3 == START_BYTE_MASTER)
    16d4:	8c 3f       	cpi	r24, 0xFC	; 252
    16d6:	19 f4       	brne	.+6      	; 0x16de <__vector_54+0x30>
		rcv_slave_flag = true;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <rcv_slave_flag>
}
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	0f 90       	pop	r0
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	0f 90       	pop	r0
    16e8:	1f 90       	pop	r1
    16ea:	18 95       	reti

000016ec <__subsf3>:
    16ec:	50 58       	subi	r21, 0x80	; 128

000016ee <__addsf3>:
    16ee:	bb 27       	eor	r27, r27
    16f0:	aa 27       	eor	r26, r26
    16f2:	0e d0       	rcall	.+28     	; 0x1710 <__addsf3x>
    16f4:	75 c1       	rjmp	.+746    	; 0x19e0 <__fp_round>
    16f6:	66 d1       	rcall	.+716    	; 0x19c4 <__fp_pscA>
    16f8:	30 f0       	brcs	.+12     	; 0x1706 <__addsf3+0x18>
    16fa:	6b d1       	rcall	.+726    	; 0x19d2 <__fp_pscB>
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__addsf3+0x18>
    16fe:	31 f4       	brne	.+12     	; 0x170c <__addsf3+0x1e>
    1700:	9f 3f       	cpi	r25, 0xFF	; 255
    1702:	11 f4       	brne	.+4      	; 0x1708 <__addsf3+0x1a>
    1704:	1e f4       	brtc	.+6      	; 0x170c <__addsf3+0x1e>
    1706:	5b c1       	rjmp	.+694    	; 0x19be <__fp_nan>
    1708:	0e f4       	brtc	.+2      	; 0x170c <__addsf3+0x1e>
    170a:	e0 95       	com	r30
    170c:	e7 fb       	bst	r30, 7
    170e:	51 c1       	rjmp	.+674    	; 0x19b2 <__fp_inf>

00001710 <__addsf3x>:
    1710:	e9 2f       	mov	r30, r25
    1712:	77 d1       	rcall	.+750    	; 0x1a02 <__fp_split3>
    1714:	80 f3       	brcs	.-32     	; 0x16f6 <__addsf3+0x8>
    1716:	ba 17       	cp	r27, r26
    1718:	62 07       	cpc	r22, r18
    171a:	73 07       	cpc	r23, r19
    171c:	84 07       	cpc	r24, r20
    171e:	95 07       	cpc	r25, r21
    1720:	18 f0       	brcs	.+6      	; 0x1728 <__addsf3x+0x18>
    1722:	71 f4       	brne	.+28     	; 0x1740 <__addsf3x+0x30>
    1724:	9e f5       	brtc	.+102    	; 0x178c <__addsf3x+0x7c>
    1726:	8f c1       	rjmp	.+798    	; 0x1a46 <__fp_zero>
    1728:	0e f4       	brtc	.+2      	; 0x172c <__addsf3x+0x1c>
    172a:	e0 95       	com	r30
    172c:	0b 2e       	mov	r0, r27
    172e:	ba 2f       	mov	r27, r26
    1730:	a0 2d       	mov	r26, r0
    1732:	0b 01       	movw	r0, r22
    1734:	b9 01       	movw	r22, r18
    1736:	90 01       	movw	r18, r0
    1738:	0c 01       	movw	r0, r24
    173a:	ca 01       	movw	r24, r20
    173c:	a0 01       	movw	r20, r0
    173e:	11 24       	eor	r1, r1
    1740:	ff 27       	eor	r31, r31
    1742:	59 1b       	sub	r21, r25
    1744:	99 f0       	breq	.+38     	; 0x176c <__addsf3x+0x5c>
    1746:	59 3f       	cpi	r21, 0xF9	; 249
    1748:	50 f4       	brcc	.+20     	; 0x175e <__addsf3x+0x4e>
    174a:	50 3e       	cpi	r21, 0xE0	; 224
    174c:	68 f1       	brcs	.+90     	; 0x17a8 <__addsf3x+0x98>
    174e:	1a 16       	cp	r1, r26
    1750:	f0 40       	sbci	r31, 0x00	; 0
    1752:	a2 2f       	mov	r26, r18
    1754:	23 2f       	mov	r18, r19
    1756:	34 2f       	mov	r19, r20
    1758:	44 27       	eor	r20, r20
    175a:	58 5f       	subi	r21, 0xF8	; 248
    175c:	f3 cf       	rjmp	.-26     	; 0x1744 <__addsf3x+0x34>
    175e:	46 95       	lsr	r20
    1760:	37 95       	ror	r19
    1762:	27 95       	ror	r18
    1764:	a7 95       	ror	r26
    1766:	f0 40       	sbci	r31, 0x00	; 0
    1768:	53 95       	inc	r21
    176a:	c9 f7       	brne	.-14     	; 0x175e <__addsf3x+0x4e>
    176c:	7e f4       	brtc	.+30     	; 0x178c <__addsf3x+0x7c>
    176e:	1f 16       	cp	r1, r31
    1770:	ba 0b       	sbc	r27, r26
    1772:	62 0b       	sbc	r22, r18
    1774:	73 0b       	sbc	r23, r19
    1776:	84 0b       	sbc	r24, r20
    1778:	ba f0       	brmi	.+46     	; 0x17a8 <__addsf3x+0x98>
    177a:	91 50       	subi	r25, 0x01	; 1
    177c:	a1 f0       	breq	.+40     	; 0x17a6 <__addsf3x+0x96>
    177e:	ff 0f       	add	r31, r31
    1780:	bb 1f       	adc	r27, r27
    1782:	66 1f       	adc	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	c2 f7       	brpl	.-16     	; 0x177a <__addsf3x+0x6a>
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <__addsf3x+0x98>
    178c:	ba 0f       	add	r27, r26
    178e:	62 1f       	adc	r22, r18
    1790:	73 1f       	adc	r23, r19
    1792:	84 1f       	adc	r24, r20
    1794:	48 f4       	brcc	.+18     	; 0x17a8 <__addsf3x+0x98>
    1796:	87 95       	ror	r24
    1798:	77 95       	ror	r23
    179a:	67 95       	ror	r22
    179c:	b7 95       	ror	r27
    179e:	f7 95       	ror	r31
    17a0:	9e 3f       	cpi	r25, 0xFE	; 254
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <__addsf3x+0x96>
    17a4:	b3 cf       	rjmp	.-154    	; 0x170c <__addsf3+0x1e>
    17a6:	93 95       	inc	r25
    17a8:	88 0f       	add	r24, r24
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <__addsf3x+0x9e>
    17ac:	99 27       	eor	r25, r25
    17ae:	ee 0f       	add	r30, r30
    17b0:	97 95       	ror	r25
    17b2:	87 95       	ror	r24
    17b4:	08 95       	ret

000017b6 <__cmpsf2>:
    17b6:	d9 d0       	rcall	.+434    	; 0x196a <__fp_cmp>
    17b8:	08 f4       	brcc	.+2      	; 0x17bc <__cmpsf2+0x6>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	08 95       	ret

000017be <__divsf3>:
    17be:	0c d0       	rcall	.+24     	; 0x17d8 <__divsf3x>
    17c0:	0f c1       	rjmp	.+542    	; 0x19e0 <__fp_round>
    17c2:	07 d1       	rcall	.+526    	; 0x19d2 <__fp_pscB>
    17c4:	40 f0       	brcs	.+16     	; 0x17d6 <__divsf3+0x18>
    17c6:	fe d0       	rcall	.+508    	; 0x19c4 <__fp_pscA>
    17c8:	30 f0       	brcs	.+12     	; 0x17d6 <__divsf3+0x18>
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <__divsf3+0x16>
    17cc:	5f 3f       	cpi	r21, 0xFF	; 255
    17ce:	19 f0       	breq	.+6      	; 0x17d6 <__divsf3+0x18>
    17d0:	f0 c0       	rjmp	.+480    	; 0x19b2 <__fp_inf>
    17d2:	51 11       	cpse	r21, r1
    17d4:	39 c1       	rjmp	.+626    	; 0x1a48 <__fp_szero>
    17d6:	f3 c0       	rjmp	.+486    	; 0x19be <__fp_nan>

000017d8 <__divsf3x>:
    17d8:	14 d1       	rcall	.+552    	; 0x1a02 <__fp_split3>
    17da:	98 f3       	brcs	.-26     	; 0x17c2 <__divsf3+0x4>

000017dc <__divsf3_pse>:
    17dc:	99 23       	and	r25, r25
    17de:	c9 f3       	breq	.-14     	; 0x17d2 <__divsf3+0x14>
    17e0:	55 23       	and	r21, r21
    17e2:	b1 f3       	breq	.-20     	; 0x17d0 <__divsf3+0x12>
    17e4:	95 1b       	sub	r25, r21
    17e6:	55 0b       	sbc	r21, r21
    17e8:	bb 27       	eor	r27, r27
    17ea:	aa 27       	eor	r26, r26
    17ec:	62 17       	cp	r22, r18
    17ee:	73 07       	cpc	r23, r19
    17f0:	84 07       	cpc	r24, r20
    17f2:	38 f0       	brcs	.+14     	; 0x1802 <__divsf3_pse+0x26>
    17f4:	9f 5f       	subi	r25, 0xFF	; 255
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
    17f8:	22 0f       	add	r18, r18
    17fa:	33 1f       	adc	r19, r19
    17fc:	44 1f       	adc	r20, r20
    17fe:	aa 1f       	adc	r26, r26
    1800:	a9 f3       	breq	.-22     	; 0x17ec <__divsf3_pse+0x10>
    1802:	33 d0       	rcall	.+102    	; 0x186a <__divsf3_pse+0x8e>
    1804:	0e 2e       	mov	r0, r30
    1806:	3a f0       	brmi	.+14     	; 0x1816 <__divsf3_pse+0x3a>
    1808:	e0 e8       	ldi	r30, 0x80	; 128
    180a:	30 d0       	rcall	.+96     	; 0x186c <__divsf3_pse+0x90>
    180c:	91 50       	subi	r25, 0x01	; 1
    180e:	50 40       	sbci	r21, 0x00	; 0
    1810:	e6 95       	lsr	r30
    1812:	00 1c       	adc	r0, r0
    1814:	ca f7       	brpl	.-14     	; 0x1808 <__divsf3_pse+0x2c>
    1816:	29 d0       	rcall	.+82     	; 0x186a <__divsf3_pse+0x8e>
    1818:	fe 2f       	mov	r31, r30
    181a:	27 d0       	rcall	.+78     	; 0x186a <__divsf3_pse+0x8e>
    181c:	66 0f       	add	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	bb 1f       	adc	r27, r27
    1824:	26 17       	cp	r18, r22
    1826:	37 07       	cpc	r19, r23
    1828:	48 07       	cpc	r20, r24
    182a:	ab 07       	cpc	r26, r27
    182c:	b0 e8       	ldi	r27, 0x80	; 128
    182e:	09 f0       	breq	.+2      	; 0x1832 <__divsf3_pse+0x56>
    1830:	bb 0b       	sbc	r27, r27
    1832:	80 2d       	mov	r24, r0
    1834:	bf 01       	movw	r22, r30
    1836:	ff 27       	eor	r31, r31
    1838:	93 58       	subi	r25, 0x83	; 131
    183a:	5f 4f       	sbci	r21, 0xFF	; 255
    183c:	2a f0       	brmi	.+10     	; 0x1848 <__divsf3_pse+0x6c>
    183e:	9e 3f       	cpi	r25, 0xFE	; 254
    1840:	51 05       	cpc	r21, r1
    1842:	68 f0       	brcs	.+26     	; 0x185e <__divsf3_pse+0x82>
    1844:	b6 c0       	rjmp	.+364    	; 0x19b2 <__fp_inf>
    1846:	00 c1       	rjmp	.+512    	; 0x1a48 <__fp_szero>
    1848:	5f 3f       	cpi	r21, 0xFF	; 255
    184a:	ec f3       	brlt	.-6      	; 0x1846 <__divsf3_pse+0x6a>
    184c:	98 3e       	cpi	r25, 0xE8	; 232
    184e:	dc f3       	brlt	.-10     	; 0x1846 <__divsf3_pse+0x6a>
    1850:	86 95       	lsr	r24
    1852:	77 95       	ror	r23
    1854:	67 95       	ror	r22
    1856:	b7 95       	ror	r27
    1858:	f7 95       	ror	r31
    185a:	9f 5f       	subi	r25, 0xFF	; 255
    185c:	c9 f7       	brne	.-14     	; 0x1850 <__divsf3_pse+0x74>
    185e:	88 0f       	add	r24, r24
    1860:	91 1d       	adc	r25, r1
    1862:	96 95       	lsr	r25
    1864:	87 95       	ror	r24
    1866:	97 f9       	bld	r25, 7
    1868:	08 95       	ret
    186a:	e1 e0       	ldi	r30, 0x01	; 1
    186c:	66 0f       	add	r22, r22
    186e:	77 1f       	adc	r23, r23
    1870:	88 1f       	adc	r24, r24
    1872:	bb 1f       	adc	r27, r27
    1874:	62 17       	cp	r22, r18
    1876:	73 07       	cpc	r23, r19
    1878:	84 07       	cpc	r24, r20
    187a:	ba 07       	cpc	r27, r26
    187c:	20 f0       	brcs	.+8      	; 0x1886 <__divsf3_pse+0xaa>
    187e:	62 1b       	sub	r22, r18
    1880:	73 0b       	sbc	r23, r19
    1882:	84 0b       	sbc	r24, r20
    1884:	ba 0b       	sbc	r27, r26
    1886:	ee 1f       	adc	r30, r30
    1888:	88 f7       	brcc	.-30     	; 0x186c <__divsf3_pse+0x90>
    188a:	e0 95       	com	r30
    188c:	08 95       	ret

0000188e <__fixsfsi>:
    188e:	04 d0       	rcall	.+8      	; 0x1898 <__fixunssfsi>
    1890:	68 94       	set
    1892:	b1 11       	cpse	r27, r1
    1894:	d9 c0       	rjmp	.+434    	; 0x1a48 <__fp_szero>
    1896:	08 95       	ret

00001898 <__fixunssfsi>:
    1898:	bc d0       	rcall	.+376    	; 0x1a12 <__fp_splitA>
    189a:	88 f0       	brcs	.+34     	; 0x18be <__fixunssfsi+0x26>
    189c:	9f 57       	subi	r25, 0x7F	; 127
    189e:	90 f0       	brcs	.+36     	; 0x18c4 <__fixunssfsi+0x2c>
    18a0:	b9 2f       	mov	r27, r25
    18a2:	99 27       	eor	r25, r25
    18a4:	b7 51       	subi	r27, 0x17	; 23
    18a6:	a0 f0       	brcs	.+40     	; 0x18d0 <__fixunssfsi+0x38>
    18a8:	d1 f0       	breq	.+52     	; 0x18de <__fixunssfsi+0x46>
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	1a f0       	brmi	.+6      	; 0x18ba <__fixunssfsi+0x22>
    18b4:	ba 95       	dec	r27
    18b6:	c9 f7       	brne	.-14     	; 0x18aa <__fixunssfsi+0x12>
    18b8:	12 c0       	rjmp	.+36     	; 0x18de <__fixunssfsi+0x46>
    18ba:	b1 30       	cpi	r27, 0x01	; 1
    18bc:	81 f0       	breq	.+32     	; 0x18de <__fixunssfsi+0x46>
    18be:	c3 d0       	rcall	.+390    	; 0x1a46 <__fp_zero>
    18c0:	b1 e0       	ldi	r27, 0x01	; 1
    18c2:	08 95       	ret
    18c4:	c0 c0       	rjmp	.+384    	; 0x1a46 <__fp_zero>
    18c6:	67 2f       	mov	r22, r23
    18c8:	78 2f       	mov	r23, r24
    18ca:	88 27       	eor	r24, r24
    18cc:	b8 5f       	subi	r27, 0xF8	; 248
    18ce:	39 f0       	breq	.+14     	; 0x18de <__fixunssfsi+0x46>
    18d0:	b9 3f       	cpi	r27, 0xF9	; 249
    18d2:	cc f3       	brlt	.-14     	; 0x18c6 <__fixunssfsi+0x2e>
    18d4:	86 95       	lsr	r24
    18d6:	77 95       	ror	r23
    18d8:	67 95       	ror	r22
    18da:	b3 95       	inc	r27
    18dc:	d9 f7       	brne	.-10     	; 0x18d4 <__fixunssfsi+0x3c>
    18de:	3e f4       	brtc	.+14     	; 0x18ee <__fixunssfsi+0x56>
    18e0:	90 95       	com	r25
    18e2:	80 95       	com	r24
    18e4:	70 95       	com	r23
    18e6:	61 95       	neg	r22
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	08 95       	ret

000018f0 <__floatunsisf>:
    18f0:	e8 94       	clt
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <__floatsisf+0x12>

000018f4 <__floatsisf>:
    18f4:	97 fb       	bst	r25, 7
    18f6:	3e f4       	brtc	.+14     	; 0x1906 <__floatsisf+0x12>
    18f8:	90 95       	com	r25
    18fa:	80 95       	com	r24
    18fc:	70 95       	com	r23
    18fe:	61 95       	neg	r22
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	99 23       	and	r25, r25
    1908:	a9 f0       	breq	.+42     	; 0x1934 <__floatsisf+0x40>
    190a:	f9 2f       	mov	r31, r25
    190c:	96 e9       	ldi	r25, 0x96	; 150
    190e:	bb 27       	eor	r27, r27
    1910:	93 95       	inc	r25
    1912:	f6 95       	lsr	r31
    1914:	87 95       	ror	r24
    1916:	77 95       	ror	r23
    1918:	67 95       	ror	r22
    191a:	b7 95       	ror	r27
    191c:	f1 11       	cpse	r31, r1
    191e:	f8 cf       	rjmp	.-16     	; 0x1910 <__floatsisf+0x1c>
    1920:	fa f4       	brpl	.+62     	; 0x1960 <__floatsisf+0x6c>
    1922:	bb 0f       	add	r27, r27
    1924:	11 f4       	brne	.+4      	; 0x192a <__floatsisf+0x36>
    1926:	60 ff       	sbrs	r22, 0
    1928:	1b c0       	rjmp	.+54     	; 0x1960 <__floatsisf+0x6c>
    192a:	6f 5f       	subi	r22, 0xFF	; 255
    192c:	7f 4f       	sbci	r23, 0xFF	; 255
    192e:	8f 4f       	sbci	r24, 0xFF	; 255
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	16 c0       	rjmp	.+44     	; 0x1960 <__floatsisf+0x6c>
    1934:	88 23       	and	r24, r24
    1936:	11 f0       	breq	.+4      	; 0x193c <__floatsisf+0x48>
    1938:	96 e9       	ldi	r25, 0x96	; 150
    193a:	11 c0       	rjmp	.+34     	; 0x195e <__floatsisf+0x6a>
    193c:	77 23       	and	r23, r23
    193e:	21 f0       	breq	.+8      	; 0x1948 <__floatsisf+0x54>
    1940:	9e e8       	ldi	r25, 0x8E	; 142
    1942:	87 2f       	mov	r24, r23
    1944:	76 2f       	mov	r23, r22
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <__floatsisf+0x5e>
    1948:	66 23       	and	r22, r22
    194a:	71 f0       	breq	.+28     	; 0x1968 <__floatsisf+0x74>
    194c:	96 e8       	ldi	r25, 0x86	; 134
    194e:	86 2f       	mov	r24, r22
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	2a f0       	brmi	.+10     	; 0x1960 <__floatsisf+0x6c>
    1956:	9a 95       	dec	r25
    1958:	66 0f       	add	r22, r22
    195a:	77 1f       	adc	r23, r23
    195c:	88 1f       	adc	r24, r24
    195e:	da f7       	brpl	.-10     	; 0x1956 <__floatsisf+0x62>
    1960:	88 0f       	add	r24, r24
    1962:	96 95       	lsr	r25
    1964:	87 95       	ror	r24
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret

0000196a <__fp_cmp>:
    196a:	99 0f       	add	r25, r25
    196c:	00 08       	sbc	r0, r0
    196e:	55 0f       	add	r21, r21
    1970:	aa 0b       	sbc	r26, r26
    1972:	e0 e8       	ldi	r30, 0x80	; 128
    1974:	fe ef       	ldi	r31, 0xFE	; 254
    1976:	16 16       	cp	r1, r22
    1978:	17 06       	cpc	r1, r23
    197a:	e8 07       	cpc	r30, r24
    197c:	f9 07       	cpc	r31, r25
    197e:	c0 f0       	brcs	.+48     	; 0x19b0 <__fp_cmp+0x46>
    1980:	12 16       	cp	r1, r18
    1982:	13 06       	cpc	r1, r19
    1984:	e4 07       	cpc	r30, r20
    1986:	f5 07       	cpc	r31, r21
    1988:	98 f0       	brcs	.+38     	; 0x19b0 <__fp_cmp+0x46>
    198a:	62 1b       	sub	r22, r18
    198c:	73 0b       	sbc	r23, r19
    198e:	84 0b       	sbc	r24, r20
    1990:	95 0b       	sbc	r25, r21
    1992:	39 f4       	brne	.+14     	; 0x19a2 <__fp_cmp+0x38>
    1994:	0a 26       	eor	r0, r26
    1996:	61 f0       	breq	.+24     	; 0x19b0 <__fp_cmp+0x46>
    1998:	23 2b       	or	r18, r19
    199a:	24 2b       	or	r18, r20
    199c:	25 2b       	or	r18, r21
    199e:	21 f4       	brne	.+8      	; 0x19a8 <__fp_cmp+0x3e>
    19a0:	08 95       	ret
    19a2:	0a 26       	eor	r0, r26
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <__fp_cmp+0x3e>
    19a6:	a1 40       	sbci	r26, 0x01	; 1
    19a8:	a6 95       	lsr	r26
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	81 1d       	adc	r24, r1
    19ae:	81 1d       	adc	r24, r1
    19b0:	08 95       	ret

000019b2 <__fp_inf>:
    19b2:	97 f9       	bld	r25, 7
    19b4:	9f 67       	ori	r25, 0x7F	; 127
    19b6:	80 e8       	ldi	r24, 0x80	; 128
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	08 95       	ret

000019be <__fp_nan>:
    19be:	9f ef       	ldi	r25, 0xFF	; 255
    19c0:	80 ec       	ldi	r24, 0xC0	; 192
    19c2:	08 95       	ret

000019c4 <__fp_pscA>:
    19c4:	00 24       	eor	r0, r0
    19c6:	0a 94       	dec	r0
    19c8:	16 16       	cp	r1, r22
    19ca:	17 06       	cpc	r1, r23
    19cc:	18 06       	cpc	r1, r24
    19ce:	09 06       	cpc	r0, r25
    19d0:	08 95       	ret

000019d2 <__fp_pscB>:
    19d2:	00 24       	eor	r0, r0
    19d4:	0a 94       	dec	r0
    19d6:	12 16       	cp	r1, r18
    19d8:	13 06       	cpc	r1, r19
    19da:	14 06       	cpc	r1, r20
    19dc:	05 06       	cpc	r0, r21
    19de:	08 95       	ret

000019e0 <__fp_round>:
    19e0:	09 2e       	mov	r0, r25
    19e2:	03 94       	inc	r0
    19e4:	00 0c       	add	r0, r0
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__fp_round+0xc>
    19e8:	88 23       	and	r24, r24
    19ea:	52 f0       	brmi	.+20     	; 0x1a00 <__fp_round+0x20>
    19ec:	bb 0f       	add	r27, r27
    19ee:	40 f4       	brcc	.+16     	; 0x1a00 <__fp_round+0x20>
    19f0:	bf 2b       	or	r27, r31
    19f2:	11 f4       	brne	.+4      	; 0x19f8 <__fp_round+0x18>
    19f4:	60 ff       	sbrs	r22, 0
    19f6:	04 c0       	rjmp	.+8      	; 0x1a00 <__fp_round+0x20>
    19f8:	6f 5f       	subi	r22, 0xFF	; 255
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	8f 4f       	sbci	r24, 0xFF	; 255
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	08 95       	ret

00001a02 <__fp_split3>:
    1a02:	57 fd       	sbrc	r21, 7
    1a04:	90 58       	subi	r25, 0x80	; 128
    1a06:	44 0f       	add	r20, r20
    1a08:	55 1f       	adc	r21, r21
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <__fp_splitA+0x10>
    1a0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0e:	71 f0       	breq	.+28     	; 0x1a2c <__fp_splitA+0x1a>
    1a10:	47 95       	ror	r20

00001a12 <__fp_splitA>:
    1a12:	88 0f       	add	r24, r24
    1a14:	97 fb       	bst	r25, 7
    1a16:	99 1f       	adc	r25, r25
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <__fp_splitA+0x20>
    1a1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1c:	79 f0       	breq	.+30     	; 0x1a3c <__fp_splitA+0x2a>
    1a1e:	87 95       	ror	r24
    1a20:	08 95       	ret
    1a22:	12 16       	cp	r1, r18
    1a24:	13 06       	cpc	r1, r19
    1a26:	14 06       	cpc	r1, r20
    1a28:	55 1f       	adc	r21, r21
    1a2a:	f2 cf       	rjmp	.-28     	; 0x1a10 <__fp_split3+0xe>
    1a2c:	46 95       	lsr	r20
    1a2e:	f1 df       	rcall	.-30     	; 0x1a12 <__fp_splitA>
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <__fp_splitA+0x30>
    1a32:	16 16       	cp	r1, r22
    1a34:	17 06       	cpc	r1, r23
    1a36:	18 06       	cpc	r1, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	f1 cf       	rjmp	.-30     	; 0x1a1e <__fp_splitA+0xc>
    1a3c:	86 95       	lsr	r24
    1a3e:	71 05       	cpc	r23, r1
    1a40:	61 05       	cpc	r22, r1
    1a42:	08 94       	sec
    1a44:	08 95       	ret

00001a46 <__fp_zero>:
    1a46:	e8 94       	clt

00001a48 <__fp_szero>:
    1a48:	bb 27       	eor	r27, r27
    1a4a:	66 27       	eor	r22, r22
    1a4c:	77 27       	eor	r23, r23
    1a4e:	cb 01       	movw	r24, r22
    1a50:	97 f9       	bld	r25, 7
    1a52:	08 95       	ret

00001a54 <__mulsf3>:
    1a54:	0b d0       	rcall	.+22     	; 0x1a6c <__mulsf3x>
    1a56:	c4 cf       	rjmp	.-120    	; 0x19e0 <__fp_round>
    1a58:	b5 df       	rcall	.-150    	; 0x19c4 <__fp_pscA>
    1a5a:	28 f0       	brcs	.+10     	; 0x1a66 <__mulsf3+0x12>
    1a5c:	ba df       	rcall	.-140    	; 0x19d2 <__fp_pscB>
    1a5e:	18 f0       	brcs	.+6      	; 0x1a66 <__mulsf3+0x12>
    1a60:	95 23       	and	r25, r21
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <__mulsf3+0x12>
    1a64:	a6 cf       	rjmp	.-180    	; 0x19b2 <__fp_inf>
    1a66:	ab cf       	rjmp	.-170    	; 0x19be <__fp_nan>
    1a68:	11 24       	eor	r1, r1
    1a6a:	ee cf       	rjmp	.-36     	; 0x1a48 <__fp_szero>

00001a6c <__mulsf3x>:
    1a6c:	ca df       	rcall	.-108    	; 0x1a02 <__fp_split3>
    1a6e:	a0 f3       	brcs	.-24     	; 0x1a58 <__mulsf3+0x4>

00001a70 <__mulsf3_pse>:
    1a70:	95 9f       	mul	r25, r21
    1a72:	d1 f3       	breq	.-12     	; 0x1a68 <__mulsf3+0x14>
    1a74:	95 0f       	add	r25, r21
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	55 1f       	adc	r21, r21
    1a7a:	62 9f       	mul	r22, r18
    1a7c:	f0 01       	movw	r30, r0
    1a7e:	72 9f       	mul	r23, r18
    1a80:	bb 27       	eor	r27, r27
    1a82:	f0 0d       	add	r31, r0
    1a84:	b1 1d       	adc	r27, r1
    1a86:	63 9f       	mul	r22, r19
    1a88:	aa 27       	eor	r26, r26
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	b1 1d       	adc	r27, r1
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	64 9f       	mul	r22, r20
    1a92:	66 27       	eor	r22, r22
    1a94:	b0 0d       	add	r27, r0
    1a96:	a1 1d       	adc	r26, r1
    1a98:	66 1f       	adc	r22, r22
    1a9a:	82 9f       	mul	r24, r18
    1a9c:	22 27       	eor	r18, r18
    1a9e:	b0 0d       	add	r27, r0
    1aa0:	a1 1d       	adc	r26, r1
    1aa2:	62 1f       	adc	r22, r18
    1aa4:	73 9f       	mul	r23, r19
    1aa6:	b0 0d       	add	r27, r0
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	62 1f       	adc	r22, r18
    1aac:	83 9f       	mul	r24, r19
    1aae:	a0 0d       	add	r26, r0
    1ab0:	61 1d       	adc	r22, r1
    1ab2:	22 1f       	adc	r18, r18
    1ab4:	74 9f       	mul	r23, r20
    1ab6:	33 27       	eor	r19, r19
    1ab8:	a0 0d       	add	r26, r0
    1aba:	61 1d       	adc	r22, r1
    1abc:	23 1f       	adc	r18, r19
    1abe:	84 9f       	mul	r24, r20
    1ac0:	60 0d       	add	r22, r0
    1ac2:	21 1d       	adc	r18, r1
    1ac4:	82 2f       	mov	r24, r18
    1ac6:	76 2f       	mov	r23, r22
    1ac8:	6a 2f       	mov	r22, r26
    1aca:	11 24       	eor	r1, r1
    1acc:	9f 57       	subi	r25, 0x7F	; 127
    1ace:	50 40       	sbci	r21, 0x00	; 0
    1ad0:	8a f0       	brmi	.+34     	; 0x1af4 <__mulsf3_pse+0x84>
    1ad2:	e1 f0       	breq	.+56     	; 0x1b0c <__mulsf3_pse+0x9c>
    1ad4:	88 23       	and	r24, r24
    1ad6:	4a f0       	brmi	.+18     	; 0x1aea <__mulsf3_pse+0x7a>
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	bb 1f       	adc	r27, r27
    1ade:	66 1f       	adc	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	91 50       	subi	r25, 0x01	; 1
    1ae6:	50 40       	sbci	r21, 0x00	; 0
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <__mulsf3_pse+0x64>
    1aea:	9e 3f       	cpi	r25, 0xFE	; 254
    1aec:	51 05       	cpc	r21, r1
    1aee:	70 f0       	brcs	.+28     	; 0x1b0c <__mulsf3_pse+0x9c>
    1af0:	60 cf       	rjmp	.-320    	; 0x19b2 <__fp_inf>
    1af2:	aa cf       	rjmp	.-172    	; 0x1a48 <__fp_szero>
    1af4:	5f 3f       	cpi	r21, 0xFF	; 255
    1af6:	ec f3       	brlt	.-6      	; 0x1af2 <__mulsf3_pse+0x82>
    1af8:	98 3e       	cpi	r25, 0xE8	; 232
    1afa:	dc f3       	brlt	.-10     	; 0x1af2 <__mulsf3_pse+0x82>
    1afc:	86 95       	lsr	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b7 95       	ror	r27
    1b04:	f7 95       	ror	r31
    1b06:	e7 95       	ror	r30
    1b08:	9f 5f       	subi	r25, 0xFF	; 255
    1b0a:	c1 f7       	brne	.-16     	; 0x1afc <__mulsf3_pse+0x8c>
    1b0c:	fe 2b       	or	r31, r30
    1b0e:	88 0f       	add	r24, r24
    1b10:	91 1d       	adc	r25, r1
    1b12:	96 95       	lsr	r25
    1b14:	87 95       	ror	r24
    1b16:	97 f9       	bld	r25, 7
    1b18:	08 95       	ret

00001b1a <__tablejump2__>:
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	88 1f       	adc	r24, r24
    1b20:	8b bf       	out	0x3b, r24	; 59
    1b22:	07 90       	elpm	r0, Z+
    1b24:	f6 91       	elpm	r31, Z
    1b26:	e0 2d       	mov	r30, r0
    1b28:	19 94       	eijmp

00001b2a <_exit>:
    1b2a:	f8 94       	cli

00001b2c <__stop_program>:
    1b2c:	ff cf       	rjmp	.-2      	; 0x1b2c <__stop_program>

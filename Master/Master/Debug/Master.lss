
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000016b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000163e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800200  00800200  000016b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037d7  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016da  00000000  00000000  00005163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001705  00000000  00000000  0000683d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000680  00000000  00000000  00007f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013a9  00000000  00000000  000085c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fae  00000000  00000000  0000996d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000a91b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c2       	rjmp	.+1442   	; 0x5a8 <__vector_1>
       6:	00 00       	nop
       8:	98 c2       	rjmp	.+1328   	; 0x53a <__vector_2>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
      16:	00 00       	nop
      18:	89 c0       	rjmp	.+274    	; 0x12c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c2       	rjmp	.+1060   	; 0x462 <__vector_15>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	f0 c7       	rjmp	.+4064   	; 0x1036 <__vector_21>
      56:	00 00       	nop
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_25>
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c0       	rjmp	.+158    	; 0x12c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_36>
      94:	4b c0       	rjmp	.+150    	; 0x12c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c0       	rjmp	.+146    	; 0x12c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c0       	rjmp	.+142    	; 0x12c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c0       	rjmp	.+138    	; 0x12c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c0       	rjmp	.+134    	; 0x12c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b6 c2       	rjmp	.+1388   	; 0x616 <__vector_42>
      aa:	00 00       	nop
      ac:	3f c0       	rjmp	.+126    	; 0x12c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c0       	rjmp	.+122    	; 0x12c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c0       	rjmp	.+118    	; 0x12c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c0       	rjmp	.+114    	; 0x12c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c0       	rjmp	.+110    	; 0x12c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c0       	rjmp	.+106    	; 0x12c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c0       	rjmp	.+102    	; 0x12c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c0       	rjmp	.+98     	; 0x12c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_51>
      d0:	2d c0       	rjmp	.+90     	; 0x12c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c0       	rjmp	.+86     	; 0x12c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c7 08 	jmp	0x118e	; 0x118e <__vector_54>
      dc:	27 c0       	rjmp	.+78     	; 0x12c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c0       	rjmp	.+74     	; 0x12c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	1c 03       	fmul	r17, r20

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a8 37       	cpi	r26, 0x78	; 120
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c3 e7       	ldi	r28, 0x73	; 115
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__do_global_ctors+0x16>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	01 09       	sbc	r16, r1
     114:	80 2f       	mov	r24, r16
     116:	fe 01       	movw	r30, r28
     118:	0e 94 15 0b 	call	0x162a	; 0x162a <__tablejump2__>
     11c:	c2 37       	cpi	r28, 0x72	; 114
     11e:	d1 07       	cpc	r29, r17
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	08 07       	cpc	r16, r24
     124:	a9 f7       	brne	.-22     	; 0x110 <__do_global_ctors+0xa>
     126:	03 d0       	rcall	.+6      	; 0x12e <main>
     128:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <main>:

#include "RobotDriver.h"

int main(void)
{
	initUART0();
     12e:	a2 d7       	rcall	.+3908   	; 0x1074 <_Z9initUART0v>
	initUART3();
     130:	c6 d7       	rcall	.+3980   	; 0x10be <_Z9initUART3v>
	JOYSTICK_INITIALIZE();
     132:	ac d7       	rcall	.+3928   	; 0x108c <_Z9initUART2v>
	init_master();
     134:	b3 d3       	rcall	.+1894   	; 0x89c <_Z11init_masterv>
     136:	c2 d0       	rcall	.+388    	; 0x2bc <_Z9rack_initv>
	rack_init();
     138:	78 94       	sei
     13a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <auto_mode>
	sei();
    while (1) 
    {
		if(auto_mode)
     13e:	88 23       	and	r24, r24
     140:	11 f0       	breq	.+4      	; 0x146 <main+0x18>
			operate_master_auto();
     142:	cc d6       	rcall	.+3480   	; 0xedc <_Z19operate_master_autov>
     144:	01 c0       	rjmp	.+2      	; 0x148 <main+0x1a>
     146:	42 d4       	rcall	.+2180   	; 0x9cc <_Z21operate_master_manualv>
		else
			operate_master_manual();
     148:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <send_time>
			
		if (send_time)
     14c:	88 23       	and	r24, r24
     14e:	a9 f3       	breq	.-22     	; 0x13a <main+0xc>
     150:	19 d4       	rcall	.+2098   	; 0x984 <_Z18Send_data_to_Slavev>
		{
			Send_data_to_Slave();
     152:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <send_time>
			send_time = false;
     156:	f1 cf       	rjmp	.-30     	; 0x13a <main+0xc>

00000158 <_ZN3PID7Set_PidEfff>:
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
	
	lastinput = input;
	return cv;
}
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	fc 01       	movw	r30, r24
     166:	40 83       	st	Z, r20
     168:	51 83       	std	Z+1, r21	; 0x01
     16a:	62 83       	std	Z+2, r22	; 0x02
     16c:	73 83       	std	Z+3, r23	; 0x03
     16e:	04 83       	std	Z+4, r16	; 0x04
     170:	15 83       	std	Z+5, r17	; 0x05
     172:	26 83       	std	Z+6, r18	; 0x06
     174:	37 83       	std	Z+7, r19	; 0x07
     176:	c0 86       	std	Z+8, r12	; 0x08
     178:	d1 86       	std	Z+9, r13	; 0x09
     17a:	e2 86       	std	Z+10, r14	; 0x0a
     17c:	f3 86       	std	Z+11, r15	; 0x0b
     17e:	1f 91       	pop	r17
     180:	0f 91       	pop	r16
     182:	ff 90       	pop	r15
     184:	ef 90       	pop	r14
     186:	df 90       	pop	r13
     188:	cf 90       	pop	r12
     18a:	08 95       	ret

0000018c <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
     18c:	8f 92       	push	r8
     18e:	9f 92       	push	r9
     190:	af 92       	push	r10
     192:	bf 92       	push	r11
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	ec 01       	movw	r28, r24
     1a2:	7b 01       	movw	r14, r22
	error = sp - input;
     1a4:	6c 85       	ldd	r22, Y+12	; 0x0c
     1a6:	7d 85       	ldd	r23, Y+13	; 0x0d
     1a8:	8b 01       	movw	r16, r22
     1aa:	0e 19       	sub	r16, r14
     1ac:	1f 09       	sbc	r17, r15
     1ae:	1f 87       	std	Y+15, r17	; 0x0f
     1b0:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     1b2:	8a 89       	ldd	r24, Y+18	; 0x12
     1b4:	9b 89       	ldd	r25, Y+19	; 0x13
     1b6:	80 0f       	add	r24, r16
     1b8:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     1ba:	8e 37       	cpi	r24, 0x7E	; 126
     1bc:	91 05       	cpc	r25, r1
     1be:	2c f0       	brlt	.+10     	; 0x1ca <_ZN3PID13angle_ComputeEi+0x3e>
	errorsum = 125;
     1c0:	8d e7       	ldi	r24, 0x7D	; 125
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	9b 8b       	std	Y+19, r25	; 0x13
     1c6:	8a 8b       	std	Y+18, r24	; 0x12
     1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <_ZN3PID13angle_ComputeEi+0x54>
	else if (errorsum < -125)
     1ca:	83 38       	cpi	r24, 0x83	; 131
     1cc:	2f ef       	ldi	r18, 0xFF	; 255
     1ce:	92 07       	cpc	r25, r18
     1d0:	1c f0       	brlt	.+6      	; 0x1d8 <_ZN3PID13angle_ComputeEi+0x4c>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     1d2:	9b 8b       	std	Y+19, r25	; 0x13
     1d4:	8a 8b       	std	Y+18, r24	; 0x12
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <_ZN3PID13angle_ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
     1d8:	83 e8       	ldi	r24, 0x83	; 131
     1da:	9f ef       	ldi	r25, 0xFF	; 255
     1dc:	9b 8b       	std	Y+19, r25	; 0x13
     1de:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
     1e0:	6a 89       	ldd	r22, Y+18	; 0x12
     1e2:	7b 89       	ldd	r23, Y+19	; 0x13
     1e4:	07 2e       	mov	r0, r23
     1e6:	00 0c       	add	r0, r0
     1e8:	88 0b       	sbc	r24, r24
     1ea:	99 0b       	sbc	r25, r25
     1ec:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__floatsisf>
     1f0:	2c 81       	ldd	r18, Y+4	; 0x04
     1f2:	3d 81       	ldd	r19, Y+5	; 0x05
     1f4:	4e 81       	ldd	r20, Y+6	; 0x06
     1f6:	5f 81       	ldd	r21, Y+7	; 0x07
     1f8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     1fc:	4b 01       	movw	r8, r22
     1fe:	5c 01       	movw	r10, r24
     200:	b8 01       	movw	r22, r16
     202:	11 0f       	add	r17, r17
     204:	88 0b       	sbc	r24, r24
     206:	99 0b       	sbc	r25, r25
     208:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__floatsisf>
     20c:	28 81       	ld	r18, Y
     20e:	39 81       	ldd	r19, Y+1	; 0x01
     210:	4a 81       	ldd	r20, Y+2	; 0x02
     212:	5b 81       	ldd	r21, Y+3	; 0x03
     214:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     218:	9b 01       	movw	r18, r22
     21a:	ac 01       	movw	r20, r24
     21c:	c5 01       	movw	r24, r10
     21e:	b4 01       	movw	r22, r8
     220:	c7 d7       	rcall	.+3982   	; 0x11b0 <__addsf3>
     222:	4b 01       	movw	r8, r22
     224:	5c 01       	movw	r10, r24
     226:	88 89       	ldd	r24, Y+16	; 0x10
     228:	99 89       	ldd	r25, Y+17	; 0x11
     22a:	b7 01       	movw	r22, r14
     22c:	68 1b       	sub	r22, r24
     22e:	79 0b       	sbc	r23, r25
     230:	07 2e       	mov	r0, r23
     232:	00 0c       	add	r0, r0
     234:	88 0b       	sbc	r24, r24
     236:	99 0b       	sbc	r25, r25
     238:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__floatsisf>
     23c:	28 85       	ldd	r18, Y+8	; 0x08
     23e:	39 85       	ldd	r19, Y+9	; 0x09
     240:	4a 85       	ldd	r20, Y+10	; 0x0a
     242:	5b 85       	ldd	r21, Y+11	; 0x0b
     244:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__mulsf3>
     248:	9b 01       	movw	r18, r22
     24a:	ac 01       	movw	r20, r24
     24c:	c5 01       	movw	r24, r10
     24e:	b4 01       	movw	r22, r8
     250:	ae d7       	rcall	.+3932   	; 0x11ae <__subsf3>
     252:	6c 8b       	std	Y+20, r22	; 0x14
     254:	7d 8b       	std	Y+21, r23	; 0x15
     256:	8e 8b       	std	Y+22, r24	; 0x16
     258:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     25a:	f9 8a       	std	Y+17, r15	; 0x11
     25c:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	bf 90       	pop	r11
     26c:	af 90       	pop	r10
     26e:	9f 90       	pop	r9
     270:	8f 90       	pop	r8
     272:	08 95       	ret

00000274 <_Z21initialise_timeperiodv>:

//initialize global timer

void initialise_timeperiod()
{
	TCCR2B |= (1<<CS22);
     274:	e1 eb       	ldi	r30, 0xB1	; 177
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	84 60       	ori	r24, 0x04	; 4
     27c:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
     27e:	e0 e7       	ldi	r30, 0x70	; 112
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	81 60       	ori	r24, 0x01	; 1
     286:	80 83       	st	Z, r24
	TCNT2 = 0;
     288:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     28c:	08 95       	ret

0000028e <_Z20close_all_pneumaticsv>:
	}
}

void close_all_pneumatics()
{
	RACK_GRIP_OPEN();
     28e:	10 98       	cbi	0x02, 0	; 2
	RACK_LIFT_CLOSE();
     290:	14 98       	cbi	0x02, 4	; 2
	SHUTTCOCK_GRIP_CLOSE();
     292:	47 98       	cbi	0x08, 7	; 8
	SHUTTCOCK_PASS_CLOSE();
     294:	16 98       	cbi	0x02, 6	; 2
     296:	08 95       	ret

00000298 <_Z21initialize_pneumaticsv>:
}

void initialize_pneumatics()
{
	OUTPUT(RACK_GRAB);
     298:	08 9a       	sbi	0x01, 0	; 1
	OUTPUT(LIFT_RACK);
     29a:	0c 9a       	sbi	0x01, 4	; 1
	OUTPUT(SC_PASS);
     29c:	0e 9a       	sbi	0x01, 6	; 1
	OUTPUT(SC_GRIPPER);
     29e:	3f 9a       	sbi	0x07, 7	; 7
	close_all_pneumatics();
     2a0:	f6 cf       	rjmp	.-20     	; 0x28e <_Z20close_all_pneumaticsv>
     2a2:	08 95       	ret

000002a4 <_Z6millisv>:
//calculate the time from beggining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     2a4:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
     2a6:	f8 94       	cli
	m = timer2_millis;
     2a8:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <timer2_millis>
     2ac:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <timer2_millis+0x1>
     2b0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timer2_millis+0x2>
     2b4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <timer2_millis+0x3>
	SREG = oldSREG;
     2b8:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
     2ba:	08 95       	ret

000002bc <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
	
	Geneva_Start = false;
     2c8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <Geneva_Start>
	Buttonx_pressed = false;
     2cc:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Buttonx_pressed>
	donotstop = false;
     2d0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <donotstop>
	throw_rack = false;
     2d4:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <throw_rack>
	rack_throw_auto = false;
     2d8:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_throw_auto>
	pneumatic_geneva_start = false;
     2dc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
	inside_robot = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
    pass_the_shuttcock = false;
     2e6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
	angle_pid_compute = false;
     2ea:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	
	pneumatic_geneva_time = 0;
     2ee:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <pneumatic_geneva_time>
     2f2:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <pneumatic_geneva_time+0x1>
     2f6:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <pneumatic_geneva_time+0x2>
     2fa:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <pneumatic_geneva_time+0x3>
	send_time = false;
     2fe:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <send_time>
	
	
	
	RackMotor.Initialise(1);
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	82 e5       	ldi	r24, 0x52	; 82
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	99 d2       	rcall	.+1330   	; 0x83c <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
     30a:	62 e0       	ldi	r22, 0x02	; 2
     30c:	81 e5       	ldi	r24, 0x51	; 81
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	95 d2       	rcall	.+1322   	; 0x83c <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	84 e4       	ldi	r24, 0x44	; 68
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	f0 d1       	rcall	.+992    	; 0x6fa <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
     31a:	62 e0       	ldi	r22, 0x02	; 2
     31c:	87 e3       	ldi	r24, 0x37	; 55
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	ec d1       	rcall	.+984    	; 0x6fa <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LTSWITCH_RACK_HOME);
     322:	24 98       	cbi	0x04, 4	; 4
	INPUT(LTSWITCH_RACK_FINAL);
     324:	e1 e0       	ldi	r30, 0x01	; 1
     326:	f1 e0       	ldi	r31, 0x01	; 1
     328:	80 81       	ld	r24, Z
     32a:	8f 7b       	andi	r24, 0xBF	; 191
     32c:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_FINAL);
     32e:	e2 e0       	ldi	r30, 0x02	; 2
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	80 81       	ld	r24, Z
     334:	80 64       	ori	r24, 0x40	; 64
	SET(LTSWITCH_RACK_HOME);
     336:	80 83       	st	Z, r24
	
	initialize_pneumatics();
     338:	2c 9a       	sbi	0x05, 4	; 5
     33a:	ae df       	rcall	.-164    	; 0x298 <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     33c:	1c 9b       	sbis	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     33e:	07 c0       	rjmp	.+14     	; 0x34e <_Z9rack_initv+0x92>
     340:	69 ef       	ldi	r22, 0xF9	; 249
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	82 e5       	ldi	r24, 0x52	; 82
     346:	92 e0       	ldi	r25, 0x02	; 2
	SET(LTSWITCH_RACK_HOME);
	
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     348:	4e d2       	rcall	.+1180   	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
     34a:	1c 99       	sbic	0x03, 4	; 3
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	
	
	previous_time = millis();
     34c:	f9 cf       	rjmp	.-14     	; 0x340 <_Z9rack_initv+0x84>
     34e:	aa df       	rcall	.-172    	; 0x2a4 <_Z6millisv>
     350:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <previous_time>
     354:	70 93 34 02 	sts	0x0234, r23	; 0x800234 <previous_time+0x1>
     358:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <previous_time+0x2>
     35c:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <previous_time+0x3>
	RackMotor.StopMotor();
     360:	82 e5       	ldi	r24, 0x52	; 82
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	2b d2       	rcall	.+1110   	; 0x7bc <_ZN10Rack_Motor9StopMotorEv>
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
     366:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <RackEncoder+0x5>
     36a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <RackEncoder+0x6>
     36e:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <RackEncoder+0x7>
     372:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <RackEncoder+0x8>
	RackEncoder.Set_count(0);
	Rack_home_position = true;		// true rack home-position -- initial position and false rack position -- final position
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <Rack_home_position>
	angle_pid.Set_Pid(47.29,0.139,29.30);
     37c:	0f 2e       	mov	r0, r31
     37e:	f6 e6       	ldi	r31, 0x66	; 102
     380:	cf 2e       	mov	r12, r31
     382:	dc 2c       	mov	r13, r12
     384:	fa ee       	ldi	r31, 0xEA	; 234
     386:	ef 2e       	mov	r14, r31
     388:	f1 e4       	ldi	r31, 0x41	; 65
     38a:	ff 2e       	mov	r15, r31
     38c:	f0 2d       	mov	r31, r0
     38e:	04 e0       	ldi	r16, 0x04	; 4
     390:	16 e5       	ldi	r17, 0x56	; 86
     392:	2e e0       	ldi	r18, 0x0E	; 14
     394:	3e e3       	ldi	r19, 0x3E	; 62
     396:	46 ef       	ldi	r20, 0xF6	; 246
     398:	58 e2       	ldi	r21, 0x28	; 40
     39a:	6d e3       	ldi	r22, 0x3D	; 61
     39c:	72 e4       	ldi	r23, 0x42	; 66
     39e:	82 e1       	ldi	r24, 0x12	; 18
     3a0:	92 e0       	ldi	r25, 0x02	; 2
	initialise_timeperiod();
     3a2:	da de       	rcall	.-588    	; 0x158 <_ZN3PID7Set_PidEfff>
     3a4:	67 df       	rcall	.-306    	; 0x274 <_Z21initialise_timeperiodv>
}
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && !Rack_home_position )
     3b4:	1c 99       	sbic	0x03, 4	; 3
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <_Z16rack_limit_checkv+0xc>
     3b8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Rack_home_position>
     3bc:	88 23       	and	r24, r24
     3be:	19 f1       	breq	.+70     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		RackEncoder.Set_count(0);
		Buttonx_pressed = false;
		throw_rack = true;	
		previous_time = millis();
	}
	if(READ(LTSWITCH_RACK_HOME) && throw_rack && rack_throw_auto)
     3c0:	1c 9b       	sbis	0x03, 4	; 3
     3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <_Z16rack_limit_checkv+0x20>
     3c4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <throw_rack>
     3c8:	88 23       	and	r24, r24
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <_Z16rack_limit_checkv+0x20>
     3cc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
     3d0:	81 11       	cpse	r24, r1
     3d2:	35 c0       	rjmp	.+106    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && Buttonx_pressed && donotstop  )		//reached final position
     3d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     3d8:	86 fd       	sbrc	r24, 6
     3da:	42 c0       	rjmp	.+132    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3dc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Buttonx_pressed>
     3e0:	88 23       	and	r24, r24
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <_Z16rack_limit_checkv+0x32>
     3e4:	3d c0       	rjmp	.+122    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3e6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <donotstop>
     3ea:	81 11       	cpse	r24, r1
     3ec:	2e c0       	rjmp	.+92     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3ee:	08 95       	ret
		RackMotor.StopMotor();
		Buttonx_pressed = false;
		donotstop = false;
		if (rack_throw_auto)
		{
			RACK_LIFT_CLOSE();
     3f0:	14 98       	cbi	0x02, 4	; 2
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     3f2:	88 e6       	ldi	r24, 0x68	; 104
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <angle_pid+0xd>
     3fa:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <angle_pid+0xc>
			angle_pid.Set_SP(360);
			Geneva_Start = true;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Geneva_Start>
		}
	}
}
     404:	08 95       	ret
void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && !Rack_home_position )
	{
		RackMotor.StopMotor();
     406:	82 e5       	ldi	r24, 0x52	; 82
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	d8 d1       	rcall	.+944    	; 0x7bc <_ZN10Rack_Motor9StopMotorEv>
		Rack_home_position = true;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <Rack_home_position>
     412:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <RackEncoder+0x5>
     416:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <RackEncoder+0x6>
     41a:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <RackEncoder+0x7>
     41e:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <RackEncoder+0x8>
		RackEncoder.Set_count(0);
		Buttonx_pressed = false;
     422:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Buttonx_pressed>
		throw_rack = true;	
     426:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <throw_rack>
		previous_time = millis();
     42a:	3c df       	rcall	.-392    	; 0x2a4 <_Z6millisv>
     42c:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <previous_time>
     430:	70 93 34 02 	sts	0x0234, r23	; 0x800234 <previous_time+0x1>
     434:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <previous_time+0x2>
     438:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <previous_time+0x3>
     43c:	c1 cf       	rjmp	.-126    	; 0x3c0 <_Z16rack_limit_checkv+0xc>
	}
	if(READ(LTSWITCH_RACK_HOME) && throw_rack && rack_throw_auto)
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     43e:	69 ef       	ldi	r22, 0xF9	; 249
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	82 e5       	ldi	r24, 0x52	; 82
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	cf d1       	rcall	.+926    	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
     448:	c5 cf       	rjmp	.-118    	; 0x3d4 <_Z16rack_limit_checkv+0x20>
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && Buttonx_pressed && donotstop  )		//reached final position
	{
		RackMotor.StopMotor();
     44a:	82 e5       	ldi	r24, 0x52	; 82
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	b6 d1       	rcall	.+876    	; 0x7bc <_ZN10Rack_Motor9StopMotorEv>
     450:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <Buttonx_pressed>
		Buttonx_pressed = false;
     454:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <donotstop>
		donotstop = false;
     458:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
		if (rack_throw_auto)
     45c:	81 11       	cpse	r24, r1
     45e:	c8 cf       	rjmp	.-112    	; 0x3f0 <_Z16rack_limit_checkv+0x3c>
     460:	08 95       	ret

00000462 <__vector_15>:
     462:	1f 92       	push	r1



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
     464:	0f 92       	push	r0
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	8f 93       	push	r24
     46e:	9f 93       	push	r25
     470:	af 93       	push	r26
     472:	bf 93       	push	r27
	timer2_millis += 1;
     474:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer2_millis>
     478:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer2_millis+0x1>
     47c:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer2_millis+0x2>
     480:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer2_millis+0x3>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	a1 1d       	adc	r26, r1
     488:	b1 1d       	adc	r27, r1
     48a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timer2_millis>
     48e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timer2_millis+0x1>
     492:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <timer2_millis+0x2>
     496:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <timer2_millis+0x3>
	timer2_fract += 3;
     49a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer2_fract>
     49e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer2_fract+0x1>
     4a2:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer2_fract+0x2>
     4a6:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer2_fract+0x3>
     4aa:	03 96       	adiw	r24, 0x03	; 3
     4ac:	a1 1d       	adc	r26, r1
     4ae:	b1 1d       	adc	r27, r1
     4b0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer2_fract>
     4b4:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <timer2_fract+0x1>
     4b8:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <timer2_fract+0x2>
     4bc:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <timer2_fract+0x3>
	if (timer2_fract >= 125) {
     4c0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer2_fract>
     4c4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer2_fract+0x1>
     4c8:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer2_fract+0x2>
     4cc:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer2_fract+0x3>
     4d0:	8d 37       	cpi	r24, 0x7D	; 125
     4d2:	91 05       	cpc	r25, r1
     4d4:	a1 05       	cpc	r26, r1
     4d6:	b1 05       	cpc	r27, r1
     4d8:	38 f1       	brcs	.+78     	; 0x528 <__vector_15+0xc6>
		timer2_fract -= 125;
     4da:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer2_fract>
     4de:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <timer2_fract+0x1>
     4e2:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <timer2_fract+0x2>
     4e6:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <timer2_fract+0x3>
     4ea:	8d 57       	subi	r24, 0x7D	; 125
     4ec:	91 09       	sbc	r25, r1
     4ee:	a1 09       	sbc	r26, r1
     4f0:	b1 09       	sbc	r27, r1
     4f2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer2_fract>
     4f6:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <timer2_fract+0x1>
     4fa:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <timer2_fract+0x2>
     4fe:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <timer2_fract+0x3>
		timer2_millis += 1;
     502:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timer2_millis>
     506:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timer2_millis+0x1>
     50a:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <timer2_millis+0x2>
     50e:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <timer2_millis+0x3>
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	a1 1d       	adc	r26, r1
     516:	b1 1d       	adc	r27, r1
     518:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timer2_millis>
     51c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timer2_millis+0x1>
     520:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <timer2_millis+0x2>
     524:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <timer2_millis+0x3>
	}
}
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	0f 90       	pop	r0
     532:	0f be       	out	0x3f, r0	; 63
     534:	0f 90       	pop	r0
     536:	1f 90       	pop	r1
     538:	18 95       	reti

0000053a <__vector_2>:

ISR(INT_VECTR)
{
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	0b b6       	in	r0, 0x3b	; 59
     546:	0f 92       	push	r0
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	ef 93       	push	r30
     552:	ff 93       	push	r31
	if(bit_is_clear(ENCODERR_CHAPORTPIN,ENCODERR_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     554:	95 99       	sbic	0x12, 5	; 18
     556:	0e c0       	rjmp	.+28     	; 0x574 <__vector_2+0x3a>
	void Init_Interrupts();
	void Init_Timers();
	inline void Calc_Speed();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     558:	e4 e4       	ldi	r30, 0x44	; 68
     55a:	f2 e0       	ldi	r31, 0x02	; 2
     55c:	85 81       	ldd	r24, Z+5	; 0x05
     55e:	96 81       	ldd	r25, Z+6	; 0x06
     560:	a7 81       	ldd	r26, Z+7	; 0x07
     562:	b0 85       	ldd	r27, Z+8	; 0x08
     564:	01 96       	adiw	r24, 0x01	; 1
     566:	a1 1d       	adc	r26, r1
     568:	b1 1d       	adc	r27, r1
     56a:	85 83       	std	Z+5, r24	; 0x05
     56c:	96 83       	std	Z+6, r25	; 0x06
     56e:	a7 83       	std	Z+7, r26	; 0x07
     570:	b0 87       	std	Z+8, r27	; 0x08
     572:	0d c0       	rjmp	.+26     	; 0x58e <__vector_2+0x54>
	inline void dcrCount(){pprcount--;};
     574:	e4 e4       	ldi	r30, 0x44	; 68
     576:	f2 e0       	ldi	r31, 0x02	; 2
     578:	85 81       	ldd	r24, Z+5	; 0x05
     57a:	96 81       	ldd	r25, Z+6	; 0x06
     57c:	a7 81       	ldd	r26, Z+7	; 0x07
     57e:	b0 85       	ldd	r27, Z+8	; 0x08
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	a1 09       	sbc	r26, r1
     584:	b1 09       	sbc	r27, r1
     586:	85 83       	std	Z+5, r24	; 0x05
     588:	96 83       	std	Z+6, r25	; 0x06
     58a:	a7 83       	std	Z+7, r26	; 0x07
     58c:	b0 87       	std	Z+8, r27	; 0x08
		RackEncoder.incCount();
	}
	else
	RackEncoder.dcrCount();
	
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	0f 90       	pop	r0
     59c:	0b be       	out	0x3b, r0	; 59
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <__vector_1>:

ISR(INT_VECTG)
{
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	0b b6       	in	r0, 0x3b	; 59
     5b4:	0f 92       	push	r0
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
	if(bit_is_clear(ENCODERG_CHAPORTPIN,ENCODERG_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     5c2:	63 99       	sbic	0x0c, 3	; 12
     5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <__vector_1+0x3a>
	{
		GenevaEncoder.angle++;
     5c6:	e7 e3       	ldi	r30, 0x37	; 55
     5c8:	f2 e0       	ldi	r31, 0x02	; 2
     5ca:	81 85       	ldd	r24, Z+9	; 0x09
     5cc:	92 85       	ldd	r25, Z+10	; 0x0a
     5ce:	a3 85       	ldd	r26, Z+11	; 0x0b
     5d0:	b4 85       	ldd	r27, Z+12	; 0x0c
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	81 87       	std	Z+9, r24	; 0x09
     5da:	92 87       	std	Z+10, r25	; 0x0a
     5dc:	a3 87       	std	Z+11, r26	; 0x0b
     5de:	b4 87       	std	Z+12, r27	; 0x0c
     5e0:	0d c0       	rjmp	.+26     	; 0x5fc <__vector_1+0x54>
		
	}
	else
	{
		GenevaEncoder.angle--;
     5e2:	e7 e3       	ldi	r30, 0x37	; 55
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	81 85       	ldd	r24, Z+9	; 0x09
     5e8:	92 85       	ldd	r25, Z+10	; 0x0a
     5ea:	a3 85       	ldd	r26, Z+11	; 0x0b
     5ec:	b4 85       	ldd	r27, Z+12	; 0x0c
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	a1 09       	sbc	r26, r1
     5f2:	b1 09       	sbc	r27, r1
     5f4:	81 87       	std	Z+9, r24	; 0x09
     5f6:	92 87       	std	Z+10, r25	; 0x0a
     5f8:	a3 87       	std	Z+11, r26	; 0x0b
     5fa:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     5fc:	ff 91       	pop	r31
     5fe:	ef 91       	pop	r30
     600:	bf 91       	pop	r27
     602:	af 91       	pop	r26
     604:	9f 91       	pop	r25
     606:	8f 91       	pop	r24
     608:	0f 90       	pop	r0
     60a:	0b be       	out	0x3b, r0	; 59
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <__vector_42>:


ISR(TIMER4_COMPA_vect)
{
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	0f 92       	push	r0
     61e:	11 24       	eor	r1, r1
     620:	8f 93       	push	r24
	angle_pid_compute = true;
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	send_time = true;
     628:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <send_time>
}
     62c:	8f 91       	pop	r24
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	long int angle;
	
	Rack_Encoder():speed(0),pprcount(0){};
     638:	e4 e4       	ldi	r30, 0x44	; 68
     63a:	f2 e0       	ldi	r31, 0x02	; 2
     63c:	11 82       	std	Z+1, r1	; 0x01
     63e:	12 82       	std	Z+2, r1	; 0x02
     640:	13 82       	std	Z+3, r1	; 0x03
     642:	14 82       	std	Z+4, r1	; 0x04
     644:	15 82       	std	Z+5, r1	; 0x05
     646:	16 82       	std	Z+6, r1	; 0x06
     648:	17 82       	std	Z+7, r1	; 0x07
     64a:	10 86       	std	Z+8, r1	; 0x08
     64c:	e7 e3       	ldi	r30, 0x37	; 55
     64e:	f2 e0       	ldi	r31, 0x02	; 2
     650:	11 82       	std	Z+1, r1	; 0x01
     652:	12 82       	std	Z+2, r1	; 0x02
     654:	13 82       	std	Z+3, r1	; 0x03
     656:	14 82       	std	Z+4, r1	; 0x04
     658:	15 82       	std	Z+5, r1	; 0x05
     65a:	16 82       	std	Z+6, r1	; 0x06
     65c:	17 82       	std	Z+7, r1	; 0x07
     65e:	10 86       	std	Z+8, r1	; 0x08
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     660:	e2 e1       	ldi	r30, 0x12	; 18
     662:	f2 e0       	ldi	r31, 0x02	; 2
     664:	10 82       	st	Z, r1
     666:	11 82       	std	Z+1, r1	; 0x01
     668:	12 82       	std	Z+2, r1	; 0x02
     66a:	13 82       	std	Z+3, r1	; 0x03
     66c:	14 82       	std	Z+4, r1	; 0x04
     66e:	15 82       	std	Z+5, r1	; 0x05
     670:	16 82       	std	Z+6, r1	; 0x06
     672:	17 82       	std	Z+7, r1	; 0x07
     674:	10 86       	std	Z+8, r1	; 0x08
     676:	11 86       	std	Z+9, r1	; 0x09
     678:	12 86       	std	Z+10, r1	; 0x0a
     67a:	13 86       	std	Z+11, r1	; 0x0b
     67c:	15 86       	std	Z+13, r1	; 0x0d
     67e:	14 86       	std	Z+12, r1	; 0x0c
     680:	17 86       	std	Z+15, r1	; 0x0f
     682:	16 86       	std	Z+14, r1	; 0x0e
     684:	11 8a       	std	Z+17, r1	; 0x11
     686:	10 8a       	std	Z+16, r1	; 0x10
     688:	13 8a       	std	Z+19, r1	; 0x13
     68a:	12 8a       	std	Z+18, r1	; 0x12
     68c:	08 95       	ret

0000068e <_ZN12Rack_Encoder11Init_TimersEv>:
}

void Rack_Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     68e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     692:	81 11       	cpse	r24, r1
     694:	17 c0       	rjmp	.+46     	; 0x6c4 <_ZN12Rack_Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     696:	e1 ea       	ldi	r30, 0xA1	; 161
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8b 60       	ori	r24, 0x0B	; 11
     69e:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     6a0:	e2 e7       	ldi	r30, 0x72	; 114
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     6aa:	88 e8       	ldi	r24, 0x88	; 136
     6ac:	93 e1       	ldi	r25, 0x13	; 19
     6ae:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     6b2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     6b6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     6ba:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     6c4:	08 95       	ret

000006c6 <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
     6c6:	78 94       	sei
	if (no==1)
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 81       	ld	r18, Z
     6cc:	21 30       	cpi	r18, 0x01	; 1
     6ce:	49 f4       	brne	.+18     	; 0x6e2 <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODERR_INT);
     6d0:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INTR_ISC1);	//falling edge
     6d2:	e9 e6       	ldi	r30, 0x69	; 105
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	20 81       	ld	r18, Z
     6d8:	28 60       	ori	r18, 0x08	; 8
     6da:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERR_INT);		//setting INT pin
     6dc:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INTR_INTF);	    //clear int flag
     6de:	e1 9a       	sbi	0x1c, 1	; 28
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	}
	else if (no==2)
     6e2:	22 30       	cpi	r18, 0x02	; 2
     6e4:	41 f4       	brne	.+16     	; 0x6f6 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODERG_INT);
     6e6:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INTG_ISC1);	//falling edge
     6e8:	e9 e6       	ldi	r30, 0x69	; 105
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	20 81       	ld	r18, Z
     6ee:	22 60       	ori	r18, 0x02	; 2
     6f0:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERG_INT);		//setting INT pin
     6f2:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INTG_INTF);	    //clear int flag
     6f4:	e0 9a       	sbi	0x1c, 0	; 28
	}
	Init_Timers();
     6f6:	cb cf       	rjmp	.-106    	; 0x68e <_ZN12Rack_Encoder11Init_TimersEv>
     6f8:	08 95       	ret

000006fa <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
     6fa:	fc 01       	movw	r30, r24
     6fc:	60 83       	st	Z, r22
	if(no==1)
     6fe:	61 30       	cpi	r22, 0x01	; 1
     700:	29 f4       	brne	.+10     	; 0x70c <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODERR_CHANNELA);
     702:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODERR_CHANNELB);
     704:	9d 98       	cbi	0x13, 5	; 19
		SET(ENCODERR_CHANNELA);
     706:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODERR_CHANNELB);
     708:	a5 9a       	sbi	0x14, 5	; 20
     70a:	06 c0       	rjmp	.+12     	; 0x718 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
     70c:	62 30       	cpi	r22, 0x02	; 2
     70e:	21 f4       	brne	.+8      	; 0x718 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODERG_CHANNELA);
     710:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODERG_CHANNELB);
     712:	6b 98       	cbi	0x0d, 3	; 13
		SET(ENCODERG_CHANNELA);
     714:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODERG_CHANNELB);
     716:	73 9a       	sbi	0x0e, 3	; 14
	}
	Init_Interrupts();
     718:	d6 cf       	rjmp	.-84     	; 0x6c6 <_ZN12Rack_Encoder15Init_InterruptsEv>
     71a:	08 95       	ret

0000071c <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	c1 f4       	brne	.+48     	; 0x754 <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
     724:	0b 9a       	sbi	0x01, 3	; 1
		OUTPUT(DD_B5);
     726:	09 9a       	sbi	0x01, 1	; 1

		OUTPUT(DD_PWM5);
     728:	ea e0       	ldi	r30, 0x0A	; 10
     72a:	f1 e0       	ldi	r31, 0x01	; 1
     72c:	80 81       	ld	r24, Z
     72e:	80 62       	ori	r24, 0x20	; 32
     730:	80 83       	st	Z, r24

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
     732:	e0 e2       	ldi	r30, 0x20	; 32
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	80 81       	ld	r24, Z
     738:	8a 60       	ori	r24, 0x0A	; 10
     73a:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
     73c:	e1 e2       	ldi	r30, 0x21	; 33
     73e:	f1 e0       	ldi	r31, 0x01	; 1
     740:	80 81       	ld	r24, Z
     742:	8a 61       	ori	r24, 0x1A	; 26
     744:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
     746:	89 ef       	ldi	r24, 0xF9	; 249
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     74e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     752:	08 95       	ret
	}
	else if(num==2)
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	b9 f4       	brne	.+46     	; 0x786 <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
     758:	0f 9a       	sbi	0x01, 7	; 1
		OUTPUT(DD_B6);
     75a:	0d 9a       	sbi	0x01, 5	; 1

		OUTPUT(DD_PWM6);
     75c:	ea e0       	ldi	r30, 0x0A	; 10
     75e:	f1 e0       	ldi	r31, 0x01	; 1
     760:	80 81       	ld	r24, Z
     762:	80 61       	ori	r24, 0x10	; 16
     764:	80 83       	st	Z, r24

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
     766:	e0 e2       	ldi	r30, 0x20	; 32
     768:	f1 e0       	ldi	r31, 0x01	; 1
     76a:	80 81       	ld	r24, Z
     76c:	82 62       	ori	r24, 0x22	; 34
     76e:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
     770:	e1 e2       	ldi	r30, 0x21	; 33
     772:	f1 e0       	ldi	r31, 0x01	; 1
     774:	80 81       	ld	r24, Z
     776:	8a 61       	ori	r24, 0x1A	; 26
     778:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
     77a:	89 ef       	ldi	r24, 0xF9	; 249
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     782:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     786:	08 95       	ret

00000788 <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
     788:	fc 01       	movw	r30, r24
     78a:	80 81       	ld	r24, Z
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	19 f0       	breq	.+6      	; 0x796 <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	21 f0       	breq	.+8      	; 0x79c <_ZN10Rack_Motor19SetForwardDirectionEv+0x14>
     794:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
     796:	13 9a       	sbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     798:	11 98       	cbi	0x02, 1	; 2
		break;
     79a:	08 95       	ret
		case 2:
		SET		(DD_F6);
     79c:	17 9a       	sbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     79e:	15 98       	cbi	0x02, 5	; 2
     7a0:	08 95       	ret

000007a2 <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
     7a2:	fc 01       	movw	r30, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	81 30       	cpi	r24, 0x01	; 1
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	21 f0       	breq	.+8      	; 0x7b6 <_ZN10Rack_Motor19SetReverseDirectionEv+0x14>
     7ae:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     7b0:	13 98       	cbi	0x02, 3	; 2
		SET		(DD_B5);
     7b2:	11 9a       	sbi	0x02, 1	; 2
		break;
     7b4:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     7b6:	17 98       	cbi	0x02, 7	; 2
		SET		(DD_B6);
     7b8:	15 9a       	sbi	0x02, 5	; 2
     7ba:	08 95       	ret

000007bc <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	19 f0       	breq	.+6      	; 0x7ca <_ZN10Rack_Motor9StopMotorEv+0xe>
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	41 f0       	breq	.+16     	; 0x7d8 <_ZN10Rack_Motor9StopMotorEv+0x1c>
     7c8:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     7ca:	13 98       	cbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     7cc:	11 98       	cbi	0x02, 1	; 2

		PWM_OCR5 = 0;
     7ce:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     7d2:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     7d6:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     7d8:	17 98       	cbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     7da:	15 98       	cbi	0x02, 5	; 2

		PWM_OCR6 = 0;
     7dc:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     7e0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     7e4:	08 95       	ret

000007e6 <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	8c 01       	movw	r16, r24
     7f0:	eb 01       	movw	r28, r22
  if (Ocr > 0)
     7f2:	1c 16       	cp	r1, r28
     7f4:	1d 06       	cpc	r1, r29
     7f6:	0c f4       	brge	.+2      	; 0x7fa <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
     7f8:	c7 df       	rcall	.-114    	; 0x788 <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
     7fa:	dd 23       	and	r29, r29
     7fc:	2c f4       	brge	.+10     	; 0x808 <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
     7fe:	d1 95       	neg	r29
     800:	c1 95       	neg	r28
     802:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
     804:	c8 01       	movw	r24, r16
     806:	cd df       	rcall	.-102    	; 0x7a2 <_ZN10Rack_Motor19SetReverseDirectionEv>
     808:	ca 3f       	cpi	r28, 0xFA	; 250
     80a:	d1 05       	cpc	r29, r1
     80c:	14 f0       	brlt	.+4      	; 0x812 <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
     80e:	c9 ef       	ldi	r28, 0xF9	; 249
     810:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
     812:	f8 01       	movw	r30, r16
     814:	80 81       	ld	r24, Z
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	19 f0       	breq	.+6      	; 0x820 <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	31 f0       	breq	.+12     	; 0x82a <_ZN10Rack_Motor11SetOcrValueEi+0x44>
     81e:	09 c0       	rjmp	.+18     	; 0x832 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
     820:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     824:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     828:	04 c0       	rjmp	.+8      	; 0x832 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
     82a:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     82e:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		break;
	}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	08 95       	ret

0000083c <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	ec 01       	movw	r28, r24
	num = no;
     842:	68 83       	st	Y, r22
	InitPWM();
     844:	6b df       	rcall	.-298    	; 0x71c <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
     846:	ce 01       	movw	r24, r28
     848:	b9 df       	rcall	.-142    	; 0x7bc <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	ce 01       	movw	r24, r28
     850:	ca df       	rcall	.-108    	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>

}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <_Z18init_timer_rampingv>:

//Timer for ramping interrupt in 10ms
//Global timer
void init_timer_ramping()
{
	rampupflag_start = false;
     858:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <rampupflag_start>
	timer_count = 0;
     85c:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <timer_count>
	TCCR0A |= (1<<WGM01);
     860:	84 b5       	in	r24, 0x24	; 36
     862:	82 60       	ori	r24, 0x02	; 2
     864:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	//1024 prescaler CTC mode
     866:	85 b5       	in	r24, 0x25	; 37
     868:	85 60       	ori	r24, 0x05	; 5
     86a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
     86c:	ee e6       	ldi	r30, 0x6E	; 110
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	82 60       	ori	r24, 0x02	; 2
     874:	80 83       	st	Z, r24
	TCNT0 = 0;
     876:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;
     878:	8b e9       	ldi	r24, 0x9B	; 155
     87a:	87 bd       	out	0x27, r24	; 39
     87c:	08 95       	ret

0000087e <_Z14init_LedStripsv>:
}

/****************************************Initialise the master ***************************************/
void init_LedStrips()
{
	OUTPUT(AUTO_LED_STRIP);
     87e:	98 9a       	sbi	0x13, 0	; 19
	OUTPUT(MANUAL_LED_STRIP);
     880:	3c 9a       	sbi	0x07, 4	; 7
	OUTPUT(LED_2);
     882:	99 9a       	sbi	0x13, 1	; 19
	OUTPUT(LED_3);
     884:	9a 9a       	sbi	0x13, 2	; 19
	OUTPUT(LED_4);
     886:	38 9a       	sbi	0x07, 0	; 7
	OUTPUT(LED_5);
     888:	3a 9a       	sbi	0x07, 2	; 7
	OUTPUT(LED_7);
     88a:	3e 9a       	sbi	0x07, 6	; 7
	
	CLEAR(AUTO_LED_STRIP);
     88c:	a0 98       	cbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     88e:	44 98       	cbi	0x08, 4	; 8
	CLEAR(LED_2);
     890:	a1 98       	cbi	0x14, 1	; 20
	CLEAR(LED_3);
     892:	a2 98       	cbi	0x14, 2	; 20
	CLEAR(LED_4);
     894:	40 98       	cbi	0x08, 0	; 8
	CLEAR(LED_5);
     896:	42 98       	cbi	0x08, 2	; 8
	CLEAR(LED_7);
     898:	46 98       	cbi	0x08, 6	; 8
     89a:	08 95       	ret

0000089c <_Z11init_masterv>:
	
}

void init_master()
{
	velocity_robot[0] = RESETDATA_JOYSTICK;
     89c:	e7 e6       	ldi	r30, 0x67	; 103
     89e:	f2 e0       	ldi	r31, 0x02	; 2
     8a0:	82 e3       	ldi	r24, 0x32	; 50
     8a2:	80 83       	st	Z, r24
	velocity_robot[1] = RESETDATA_JOYSTICK;
     8a4:	81 83       	std	Z+1, r24	; 0x01
	velocity_robot[2] = RESETDATA_JOYSTICK;
     8a6:	82 83       	std	Z+2, r24	; 0x02
	slave_work_category = 0;
     8a8:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <slave_work_category>
	set_current_location = staticZone;
     8ac:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <set_current_location>
	line_tracker_data = 0;
     8b0:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <line_tracker_data+0x1>
     8b4:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <line_tracker_data>
	robot_rpm = 9;		// vary from 0 to 100 contains negative number below 50
     8b8:	89 e0       	ldi	r24, 0x09	; 9
     8ba:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <robot_rpm>
	auto_mode = false;
     8be:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <auto_mode>
	
	limit12_found = false;
     8c2:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <limit12_found>
	lt_switch12_on = false;
     8c6:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <lt_switch12_on>
	lt_switch3_on = false;
     8ca:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <lt_switch3_on>
	lt_switch_check = false;
     8ce:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <lt_switch_check>
	orientation_time = 0;
     8d2:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <orientation_time>
     8d6:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <orientation_time+0x1>
     8da:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <orientation_time+0x2>
     8de:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <orientation_time+0x3>
	init_timer_ramping();
     8e2:	ba df       	rcall	.-140    	; 0x858 <_Z18init_timer_rampingv>
	init_LedStrips();
     8e4:	cc cf       	rjmp	.-104    	; 0x87e <_Z14init_LedStripsv>
     8e6:	08 95       	ret

000008e8 <_Z20Get_linetracker_datav>:
     8e8:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <line_tracker_data+0x1>

/**************************************************Get line tracker data and send the value from 10 to 80 or 0 if not found*************************/

char Get_linetracker_data()
{
	line_tracker_data = 0;
     8ec:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <line_tracker_data>
	total_on_sensor = 0;
     8f0:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <total_on_sensor>
	for(counter_i=0; counter_i < 8; counter_i++)
     8f4:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <counter_i>
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	50 e0       	ldi	r21, 0x00	; 0
	{
		val = READ2(F,counter_i);
     8fc:	6f b1       	in	r22, 0x0f	; 15
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	ca 01       	movw	r24, r20
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	02 c0       	rjmp	.+4      	; 0x90a <_Z20Get_linetracker_datav+0x22>
     906:	75 95       	asr	r23
     908:	67 95       	ror	r22
     90a:	8a 95       	dec	r24
     90c:	e2 f7       	brpl	.-8      	; 0x906 <_Z20Get_linetracker_datav+0x1e>
     90e:	61 70       	andi	r22, 0x01	; 1
     910:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <val>
		line_tracker_data += (val*(counter_i+1)*10);
     914:	86 2f       	mov	r24, r22
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	84 9f       	mul	r24, r20
     91a:	90 01       	movw	r18, r0
     91c:	85 9f       	mul	r24, r21
     91e:	30 0d       	add	r19, r0
     920:	94 9f       	mul	r25, r20
     922:	30 0d       	add	r19, r0
     924:	11 24       	eor	r1, r1
     926:	c9 01       	movw	r24, r18
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	22 0f       	add	r18, r18
     92e:	33 1f       	adc	r19, r19
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	22 0f       	add	r18, r18
     936:	33 1f       	adc	r19, r19
     938:	28 0f       	add	r18, r24
     93a:	39 1f       	adc	r19, r25
     93c:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <line_tracker_data>
     940:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <line_tracker_data+0x1>
     944:	28 0f       	add	r18, r24
     946:	39 1f       	adc	r19, r25
     948:	30 93 64 02 	sts	0x0264, r19	; 0x800264 <line_tracker_data+0x1>
     94c:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <line_tracker_data>
		total_on_sensor += val;
     950:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <total_on_sensor>
     954:	69 0f       	add	r22, r25
     956:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <total_on_sensor>

char Get_linetracker_data()
{
	line_tracker_data = 0;
	total_on_sensor = 0;
	for(counter_i=0; counter_i < 8; counter_i++)
     95a:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <counter_i>
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	49 30       	cpi	r20, 0x09	; 9
     964:	51 05       	cpc	r21, r1
     966:	51 f6       	brne	.-108    	; 0x8fc <_Z20Get_linetracker_datav+0x14>
	{
		val = READ2(F,counter_i);
		line_tracker_data += (val*(counter_i+1)*10);
		total_on_sensor += val;
	}
	total_on_sensor = (total_on_sensor == 0)?1:total_on_sensor;
     968:	61 11       	cpse	r22, r1
     96a:	01 c0       	rjmp	.+2      	; 0x96e <_Z20Get_linetracker_datav+0x86>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <total_on_sensor>
	line_tracker_data = line_tracker_data/total_on_sensor;
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	c9 01       	movw	r24, r18
     976:	32 d6       	rcall	.+3172   	; 0x15dc <__divmodhi4>
     978:	86 2f       	mov	r24, r22
     97a:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <line_tracker_data>
     97e:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <line_tracker_data+0x1>
	return line_tracker_data;
}
     982:	08 95       	ret

00000984 <_Z18Send_data_to_Slavev>:

/*****************************************Function to send data to slave***************************/

void Send_data_to_Slave()
{
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
	if(auto_mode)
     988:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <auto_mode>
     98c:	88 23       	and	r24, r24
     98e:	69 f0       	breq	.+26     	; 0x9aa <_Z18Send_data_to_Slavev+0x26>
	{
		UART3Transmit(START_BYTE_AUTO);
     990:	8e ef       	ldi	r24, 0xFE	; 254
     992:	a1 d3       	rcall	.+1858   	; 0x10d6 <_Z13UART3Transmith>
		UART3Transmit(slave_work_category);
     994:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <slave_work_category>
		UART3Transmit(Get_linetracker_data());
     998:	9e d3       	rcall	.+1852   	; 0x10d6 <_Z13UART3Transmith>
     99a:	a6 df       	rcall	.-180    	; 0x8e8 <_Z20Get_linetracker_datav>
     99c:	9c d3       	rcall	.+1848   	; 0x10d6 <_Z13UART3Transmith>
		UART3Transmit(set_current_location);
     99e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <set_current_location>
     9a2:	99 d3       	rcall	.+1842   	; 0x10d6 <_Z13UART3Transmith>
		slave_work_category = 0;
     9a4:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <slave_work_category>
     9a8:	0e c0       	rjmp	.+28     	; 0x9c6 <_Z18Send_data_to_Slavev+0x42>
	}
	else
	{
		UART3Transmit(START_BYTE_MANUAL);
     9aa:	8d ef       	ldi	r24, 0xFD	; 253
     9ac:	94 d3       	rcall	.+1832   	; 0x10d6 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[0]);
     9ae:	c7 e6       	ldi	r28, 0x67	; 103
     9b0:	d2 e0       	ldi	r29, 0x02	; 2
     9b2:	88 81       	ld	r24, Y
     9b4:	90 d3       	rcall	.+1824   	; 0x10d6 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[1]);
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	8e d3       	rcall	.+1820   	; 0x10d6 <_Z13UART3Transmith>
     9ba:	8a 81       	ldd	r24, Y+2	; 0x02
		UART3Transmit(velocity_robot[2]);
     9bc:	8c d3       	rcall	.+1816   	; 0x10d6 <_Z13UART3Transmith>
     9be:	82 e3       	ldi	r24, 0x32	; 50
     9c0:	88 83       	st	Y, r24
		velocity_robot[0] = RESETDATA_JOYSTICK;
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	8a 83       	std	Y+2, r24	; 0x02
		velocity_robot[1] = RESETDATA_JOYSTICK;
     9c6:	df 91       	pop	r29
		velocity_robot[2] = RESETDATA_JOYSTICK;
     9c8:	cf 91       	pop	r28
	}

	
}
     9ca:	08 95       	ret

000009cc <_Z21operate_master_manualv>:
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17

void operate_master_manual()
{
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
	/**********************************************GAMEBUTTONB_SECTION*********************************/
	
	
	if (GAMEBUTTONB == RIGHT)
     9d4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <rcvdata+0x1>
     9d8:	82 30       	cpi	r24, 0x02	; 2
     9da:	51 f4       	brne	.+20     	; 0x9f0 <_Z21operate_master_manualv+0x24>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
     9dc:	e7 e6       	ldi	r30, 0x67	; 103
     9de:	f2 e0       	ldi	r31, 0x02	; 2
     9e0:	92 e3       	ldi	r25, 0x32	; 50
     9e2:	90 83       	st	Z, r25
		velocity_robot[1] = RESETDATA_JOYSTICK + robot_rpm;
     9e4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <robot_rpm>
     9e8:	8e 5c       	subi	r24, 0xCE	; 206
     9ea:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
     9ec:	92 83       	std	Z+2, r25	; 0x02
     9ee:	2b c0       	rjmp	.+86     	; 0xa46 <_Z21operate_master_manualv+0x7a>
	}
	else if (GAMEBUTTONB == LEFT)
     9f0:	88 30       	cpi	r24, 0x08	; 8
     9f2:	59 f4       	brne	.+22     	; 0xa0a <_Z21operate_master_manualv+0x3e>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
     9f4:	e7 e6       	ldi	r30, 0x67	; 103
     9f6:	f2 e0       	ldi	r31, 0x02	; 2
     9f8:	82 e3       	ldi	r24, 0x32	; 50
     9fa:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK - robot_rpm;
     9fc:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <robot_rpm>
     a00:	28 2f       	mov	r18, r24
     a02:	29 1b       	sub	r18, r25
     a04:	21 83       	std	Z+1, r18	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
     a06:	82 83       	std	Z+2, r24	; 0x02
     a08:	1e c0       	rjmp	.+60     	; 0xa46 <_Z21operate_master_manualv+0x7a>
	}
	else if (GAMEBUTTONB == UP)
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	51 f4       	brne	.+20     	; 0xa22 <_Z21operate_master_manualv+0x56>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK + robot_rpm;
     a0e:	e7 e6       	ldi	r30, 0x67	; 103
     a10:	f2 e0       	ldi	r31, 0x02	; 2
     a12:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <robot_rpm>
     a16:	8e 5c       	subi	r24, 0xCE	; 206
     a18:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
     a1a:	82 e3       	ldi	r24, 0x32	; 50
     a1c:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
     a1e:	82 83       	std	Z+2, r24	; 0x02
     a20:	12 c0       	rjmp	.+36     	; 0xa46 <_Z21operate_master_manualv+0x7a>
		//front_drive = true;
		
	}
	else if (GAMEBUTTONB == DOWN)
     a22:	84 30       	cpi	r24, 0x04	; 4
     a24:	59 f4       	brne	.+22     	; 0xa3c <_Z21operate_master_manualv+0x70>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK - robot_rpm;
     a26:	e7 e6       	ldi	r30, 0x67	; 103
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	82 e3       	ldi	r24, 0x32	; 50
     a2c:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <robot_rpm>
     a30:	68 2f       	mov	r22, r24
     a32:	69 1b       	sub	r22, r25
     a34:	60 83       	st	Z, r22
		velocity_robot[1] = RESETDATA_JOYSTICK;
     a36:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
     a38:	82 83       	std	Z+2, r24	; 0x02
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <_Z21operate_master_manualv+0x7a>
		//back_drive = true;
	}
	else if (GAMEBUTTONB == LEFT_BUTTON)
     a3c:	80 32       	cpi	r24, 0x20	; 32
     a3e:	19 f4       	brne	.+6      	; 0xa46 <_Z21operate_master_manualv+0x7a>
	{
		SHUTTCOCK_GRIP_CLOSE();
     a40:	47 98       	cbi	0x08, 7	; 8
		GAMEBUTTONB = 0;
     a42:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <rcvdata+0x1>
	}
	
	
	/**********************************************************************GAMEBUTTONA_SECTION****************************/
	if(GAMEBUTTONA == START_BUTTON)
     a46:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <rcvdata>
     a4a:	80 34       	cpi	r24, 0x40	; 64
     a4c:	31 f4       	brne	.+12     	; 0xa5a <_Z21operate_master_manualv+0x8e>
	{
		auto_mode = true;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <auto_mode>
		GAMEBUTTONA = 0;
     a54:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     a58:	85 c0       	rjmp	.+266    	; 0xb64 <_Z21operate_master_manualv+0x198>
	}
	else if (GAMEBUTTONA == BUTTON_A)
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	31 f4       	brne	.+12     	; 0xa6a <_Z21operate_master_manualv+0x9e>
	{
		RACK_GRIP_TOGGLE();
     a5e:	92 b1       	in	r25, 0x02	; 2
     a60:	89 27       	eor	r24, r25
     a62:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
     a64:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     a68:	7d c0       	rjmp	.+250    	; 0xb64 <_Z21operate_master_manualv+0x198>
	}
	else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	59 f4       	brne	.+22     	; 0xa84 <_Z21operate_master_manualv+0xb8>
     a6e:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <Rack_home_position>
     a72:	91 11       	cpse	r25, r1
     a74:	41 c0       	rjmp	.+130    	; 0xaf8 <_Z21operate_master_manualv+0x12c>
	{
		RACK_LIFT_TOGGLE();
     a76:	92 b1       	in	r25, 0x02	; 2
     a78:	80 e1       	ldi	r24, 0x10	; 16
     a7a:	89 27       	eor	r24, r25
     a7c:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
     a7e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     a82:	70 c0       	rjmp	.+224    	; 0xb64 <_Z21operate_master_manualv+0x198>
	}
	else if (GAMEBUTTONA == BUTTON_X)
     a84:	84 30       	cpi	r24, 0x04	; 4
     a86:	a9 f4       	brne	.+42     	; 0xab2 <_Z21operate_master_manualv+0xe6>
	{
		Buttonx_pressed = true;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Buttonx_pressed>
		if(Rack_home_position)
     a8e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Rack_home_position>
     a92:	88 23       	and	r24, r24
     a94:	31 f0       	breq	.+12     	; 0xaa2 <_Z21operate_master_manualv+0xd6>
		{
			RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     a96:	67 e0       	ldi	r22, 0x07	; 7
     a98:	7f ef       	ldi	r23, 0xFF	; 255
     a9a:	82 e5       	ldi	r24, 0x52	; 82
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	a3 de       	rcall	.-698    	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <_Z21operate_master_manualv+0xe0>
		}
		else
		{
			RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     aa2:	69 ef       	ldi	r22, 0xF9	; 249
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	82 e5       	ldi	r24, 0x52	; 82
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	9d de       	rcall	.-710    	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
		}
		GAMEBUTTONA = 0;
     aac:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     ab0:	59 c0       	rjmp	.+178    	; 0xb64 <_Z21operate_master_manualv+0x198>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     ab2:	88 30       	cpi	r24, 0x08	; 8
     ab4:	61 f4       	brne	.+24     	; 0xace <_Z21operate_master_manualv+0x102>
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     ab6:	88 e6       	ldi	r24, 0x68	; 104
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <angle_pid+0xd>
     abe:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <angle_pid+0xc>
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Geneva_Start>
		GAMEBUTTONA = 0;
     ac8:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     acc:	4b c0       	rjmp	.+150    	; 0xb64 <_Z21operate_master_manualv+0x198>
	}
	else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
     ace:	80 31       	cpi	r24, 0x10	; 16
     ad0:	99 f4       	brne	.+38     	; 0xaf8 <_Z21operate_master_manualv+0x12c>
     ad2:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <Rack_home_position>
     ad6:	91 11       	cpse	r25, r1
     ad8:	0f c0       	rjmp	.+30     	; 0xaf8 <_Z21operate_master_manualv+0x12c>
	{
		Buttonx_pressed = true;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Buttonx_pressed>
		rack_throw_auto = true;
     ae0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
     ae4:	16 9a       	sbi	0x02, 6	; 2
		RACK_LIFT_OPEN();
     ae6:	14 9a       	sbi	0x02, 4	; 2
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     ae8:	69 ef       	ldi	r22, 0xF9	; 249
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	82 e5       	ldi	r24, 0x52	; 82
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	7a de       	rcall	.-780    	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
		GAMEBUTTONA = 0;
     af2:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     af6:	36 c0       	rjmp	.+108    	; 0xb64 <_Z21operate_master_manualv+0x198>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
     af8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
     afc:	91 11       	cpse	r25, r1
     afe:	32 c0       	rjmp	.+100    	; 0xb64 <_Z21operate_master_manualv+0x198>
     b00:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <rack_throw_auto>
     b04:	91 11       	cpse	r25, r1
     b06:	2e c0       	rjmp	.+92     	; 0xb64 <_Z21operate_master_manualv+0x198>
     b08:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
     b0c:	91 11       	cpse	r25, r1
     b0e:	2a c0       	rjmp	.+84     	; 0xb64 <_Z21operate_master_manualv+0x198>
     b10:	80 32       	cpi	r24, 0x20	; 32
     b12:	41 f5       	brne	.+80     	; 0xb64 <_Z21operate_master_manualv+0x198>
	{
		if(inside_robot)
     b14:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     b18:	88 23       	and	r24, r24
     b1a:	81 f0       	breq	.+32     	; 0xb3c <_Z21operate_master_manualv+0x170>
		{
			pneumatic_geneva_start = true;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     b22:	c0 db       	rcall	.-2176   	; 0x2a4 <_Z6millisv>
     b24:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <pneumatic_geneva_time>
     b28:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <pneumatic_geneva_time+0x1>
     b2c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <pneumatic_geneva_time+0x2>
     b30:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     b34:	88 b1       	in	r24, 0x08	; 8
     b36:	80 58       	subi	r24, 0x80	; 128
     b38:	88 b9       	out	0x08, r24	; 8
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <_Z21operate_master_manualv+0x172>
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
		}
		
		pass_the_shuttcock = true;
     b3c:	47 98       	cbi	0x08, 7	; 8
     b3e:	c1 e0       	ldi	r28, 0x01	; 1
     b40:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     b44:	af db       	rcall	.-2210   	; 0x2a4 <_Z6millisv>
     b46:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <passing_time>
     b4a:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <passing_time+0x1>
     b4e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <passing_time+0x2>
     b52:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <passing_time+0x3>
		inside_robot = (1^inside_robot);
     b56:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     b5a:	c8 27       	eor	r28, r24
     b5c:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
     b60:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>

	
	

	/**************************************************Rack Operation******************************************************/
	if (!Buttonx_pressed)
     b64:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <Buttonx_pressed>
     b68:	81 11       	cpse	r24, r1
     b6a:	11 c0       	rjmp	.+34     	; 0xb8e <_Z21operate_master_manualv+0x1c2>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
     b6c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <rcvdata+0x2>
     b70:	85 31       	cpi	r24, 0x15	; 21
     b72:	08 f4       	brcc	.+2      	; 0xb76 <_Z21operate_master_manualv+0x1aa>
     b74:	a2 c1       	rjmp	.+836    	; 0xeba <_Z21operate_master_manualv+0x4ee>
     b76:	1c 99       	sbic	0x03, 4	; 3
     b78:	9a c1       	rjmp	.+820    	; 0xeae <_Z21operate_master_manualv+0x4e2>
		{
			RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
		}
		else if (LEFTTRIGGER > 20 )
		{
			RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     b7a:	9f c1       	rjmp	.+830    	; 0xeba <_Z21operate_master_manualv+0x4ee>
     b7c:	67 e0       	ldi	r22, 0x07	; 7
     b7e:	7f ef       	ldi	r23, 0xFF	; 255
     b80:	82 e5       	ldi	r24, 0x52	; 82
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	30 de       	rcall	.-928    	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
		}
		else
		RackMotor.StopMotor();
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <_Z21operate_master_manualv+0x1c2>
     b88:	82 e5       	ldi	r24, 0x52	; 82
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	17 de       	rcall	.-978    	; 0x7bc <_ZN10Rack_Motor9StopMotorEv>
	inline void Calc_Speed();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
     b8e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <RackEncoder+0x5>
     b92:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <RackEncoder+0x6>
     b96:	a0 91 4b 02 	lds	r26, 0x024B	; 0x80024b <RackEncoder+0x7>
     b9a:	b0 91 4c 02 	lds	r27, 0x024C	; 0x80024c <RackEncoder+0x8>
	}
	

	if (RackEncoder.Get_count() <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where somewhere
     b9e:	8d 39       	cpi	r24, 0x9D	; 157
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	24 f4       	brge	.+8      	; 0xbac <_Z21operate_master_manualv+0x1e0>
     ba4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Rack_home_position>
     ba8:	81 11       	cpse	r24, r1
     baa:	8d c1       	rjmp	.+794    	; 0xec6 <_Z21operate_master_manualv+0x4fa>
	}
	

	
	/*********************************************************************Move using joystick analog stick********************************************/
	 if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
     bac:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <rcvdata+0x5>
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 01       	movw	r18, r24
     bb4:	22 53       	subi	r18, 0x32	; 50
     bb6:	31 09       	sbc	r19, r1
     bb8:	12 16       	cp	r1, r18
     bba:	13 06       	cpc	r1, r19
     bbc:	24 f4       	brge	.+8      	; 0xbc6 <_Z21operate_master_manualv+0x1fa>
     bbe:	26 30       	cpi	r18, 0x06	; 6
     bc0:	31 05       	cpc	r19, r1
     bc2:	94 f5       	brge	.+100    	; 0xc28 <_Z21operate_master_manualv+0x25c>
     bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <_Z21operate_master_manualv+0x208>
     bc6:	42 e3       	ldi	r20, 0x32	; 50
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	fa 01       	movw	r30, r20
     bcc:	e8 1b       	sub	r30, r24
     bce:	f9 0b       	sbc	r31, r25
     bd0:	36 97       	sbiw	r30, 0x06	; 6
     bd2:	54 f5       	brge	.+84     	; 0xc28 <_Z21operate_master_manualv+0x25c>
     bd4:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <rcvdata+0x4>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	ac 01       	movw	r20, r24
     bdc:	42 53       	subi	r20, 0x32	; 50
     bde:	51 09       	sbc	r21, r1
     be0:	14 16       	cp	r1, r20
     be2:	15 06       	cpc	r1, r21
     be4:	24 f4       	brge	.+8      	; 0xbee <_Z21operate_master_manualv+0x222>
     be6:	46 30       	cpi	r20, 0x06	; 6
     be8:	51 05       	cpc	r21, r1
     bea:	f4 f4       	brge	.+60     	; 0xc28 <_Z21operate_master_manualv+0x25c>
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <_Z21operate_master_manualv+0x232>
     bee:	42 e3       	ldi	r20, 0x32	; 50
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	ba 01       	movw	r22, r20
     bf4:	68 1b       	sub	r22, r24
     bf6:	79 0b       	sbc	r23, r25
     bf8:	66 30       	cpi	r22, 0x06	; 6
     bfa:	71 05       	cpc	r23, r1
     bfc:	ac f4       	brge	.+42     	; 0xc28 <_Z21operate_master_manualv+0x25c>
     bfe:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <rcvdata+0x6>
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	ac 01       	movw	r20, r24
     c06:	42 53       	subi	r20, 0x32	; 50
     c08:	51 09       	sbc	r21, r1
     c0a:	14 16       	cp	r1, r20
     c0c:	15 06       	cpc	r1, r21
     c0e:	24 f4       	brge	.+8      	; 0xc18 <_Z21operate_master_manualv+0x24c>
     c10:	46 30       	cpi	r20, 0x06	; 6
     c12:	51 05       	cpc	r21, r1
     c14:	4c f4       	brge	.+18     	; 0xc28 <_Z21operate_master_manualv+0x25c>
     c16:	62 c0       	rjmp	.+196    	; 0xcdc <_Z21operate_master_manualv+0x310>
     c18:	42 e3       	ldi	r20, 0x32	; 50
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	fa 01       	movw	r30, r20
     c1e:	e8 1b       	sub	r30, r24
     c20:	f9 0b       	sbc	r31, r25
     c22:	36 97       	sbiw	r30, 0x06	; 6
     c24:	0c f4       	brge	.+2      	; 0xc28 <_Z21operate_master_manualv+0x25c>
     c26:	5a c0       	rjmp	.+180    	; 0xcdc <_Z21operate_master_manualv+0x310>
	 {
		rampupflag_start = true; 
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <rampupflag_start>
		velocity_robot[0] = (LEFTSTICKY-50)*timer_count/60.0 + 50;
     c2e:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <timer_count>
     c32:	c7 e6       	ldi	r28, 0x67	; 103
     c34:	d2 e0       	ldi	r29, 0x02	; 2
     c36:	42 03       	mulsu	r20, r18
     c38:	b0 01       	movw	r22, r0
     c3a:	43 9f       	mul	r20, r19
     c3c:	70 0d       	add	r23, r0
     c3e:	11 24       	eor	r1, r1
     c40:	07 2e       	mov	r0, r23
     c42:	00 0c       	add	r0, r0
     c44:	88 0b       	sbc	r24, r24
     c46:	99 0b       	sbc	r25, r25
     c48:	b6 d3       	rcall	.+1900   	; 0x13b6 <__floatsisf>
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e7       	ldi	r20, 0x70	; 112
     c50:	52 e4       	ldi	r21, 0x42	; 66
     c52:	16 d3       	rcall	.+1580   	; 0x1280 <__divsf3>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	48 e4       	ldi	r20, 0x48	; 72
     c5a:	52 e4       	ldi	r21, 0x42	; 66
     c5c:	a9 d2       	rcall	.+1362   	; 0x11b0 <__addsf3>
     c5e:	7d d3       	rcall	.+1786   	; 0x135a <__fixunssfsi>
     c60:	68 83       	st	Y, r22
		velocity_robot[1] = (LEFTSTICKX-50)*timer_count/60.0 + 50;
     c62:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <timer_count>
     c66:	0c e6       	ldi	r16, 0x6C	; 108
     c68:	12 e0       	ldi	r17, 0x02	; 2
     c6a:	f8 01       	movw	r30, r16
     c6c:	24 81       	ldd	r18, Z+4	; 0x04
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	22 53       	subi	r18, 0x32	; 50
     c72:	31 09       	sbc	r19, r1
     c74:	42 03       	mulsu	r20, r18
     c76:	b0 01       	movw	r22, r0
     c78:	43 9f       	mul	r20, r19
     c7a:	70 0d       	add	r23, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	07 2e       	mov	r0, r23
     c80:	00 0c       	add	r0, r0
     c82:	88 0b       	sbc	r24, r24
     c84:	99 0b       	sbc	r25, r25
     c86:	97 d3       	rcall	.+1838   	; 0x13b6 <__floatsisf>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e7       	ldi	r20, 0x70	; 112
     c8e:	52 e4       	ldi	r21, 0x42	; 66
     c90:	f7 d2       	rcall	.+1518   	; 0x1280 <__divsf3>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	48 e4       	ldi	r20, 0x48	; 72
     c98:	52 e4       	ldi	r21, 0x42	; 66
     c9a:	8a d2       	rcall	.+1300   	; 0x11b0 <__addsf3>
     c9c:	5e d3       	rcall	.+1724   	; 0x135a <__fixunssfsi>
     c9e:	69 83       	std	Y+1, r22	; 0x01
		velocity_robot[2] = (RIGHTSTICKX-50)*timer_count/60.0 + 50;
     ca0:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <timer_count>
     ca4:	f8 01       	movw	r30, r16
     ca6:	26 81       	ldd	r18, Z+6	; 0x06
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	22 53       	subi	r18, 0x32	; 50
     cac:	31 09       	sbc	r19, r1
     cae:	42 03       	mulsu	r20, r18
     cb0:	b0 01       	movw	r22, r0
     cb2:	43 9f       	mul	r20, r19
     cb4:	70 0d       	add	r23, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	07 2e       	mov	r0, r23
     cba:	00 0c       	add	r0, r0
     cbc:	88 0b       	sbc	r24, r24
     cbe:	99 0b       	sbc	r25, r25
     cc0:	7a d3       	rcall	.+1780   	; 0x13b6 <__floatsisf>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	40 e7       	ldi	r20, 0x70	; 112
     cc8:	52 e4       	ldi	r21, 0x42	; 66
     cca:	da d2       	rcall	.+1460   	; 0x1280 <__divsf3>
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	48 e4       	ldi	r20, 0x48	; 72
     cd2:	52 e4       	ldi	r21, 0x42	; 66
     cd4:	6d d2       	rcall	.+1242   	; 0x11b0 <__addsf3>
     cd6:	41 d3       	rcall	.+1666   	; 0x135a <__fixunssfsi>
     cd8:	6a 83       	std	Y+2, r22	; 0x02
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <_Z21operate_master_manualv+0x314>
	 }
	else 
		rampupflag_start = false;
     cdc:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <rampupflag_start>
	
	
	/*******************************************Geneva operation*********************************************/
	
	if (Geneva_Start && GenevaEncoder.angle >= 360 && angle_pid.Get_Error() <= 3)
     ce0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Geneva_Start>
     ce4:	88 23       	and	r24, r24
     ce6:	09 f4       	brne	.+2      	; 0xcea <_Z21operate_master_manualv+0x31e>
     ce8:	51 c0       	rjmp	.+162    	; 0xd8c <_Z21operate_master_manualv+0x3c0>
     cea:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <GenevaEncoder+0x9>
     cee:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <GenevaEncoder+0xa>
     cf2:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <GenevaEncoder+0xb>
     cf6:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <GenevaEncoder+0xc>
     cfa:	88 36       	cpi	r24, 0x68	; 104
     cfc:	91 40       	sbci	r25, 0x01	; 1
     cfe:	a1 05       	cpc	r26, r1
     d00:	b1 05       	cpc	r27, r1
     d02:	ac f1       	brlt	.+106    	; 0xd6e <_Z21operate_master_manualv+0x3a2>
     d04:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <angle_pid+0xe>
     d08:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <angle_pid+0xf>
     d0c:	77 23       	and	r23, r23
     d0e:	1c f4       	brge	.+6      	; 0xd16 <_Z21operate_master_manualv+0x34a>
     d10:	71 95       	neg	r23
     d12:	61 95       	neg	r22
     d14:	71 09       	sbc	r23, r1
     d16:	07 2e       	mov	r0, r23
     d18:	00 0c       	add	r0, r0
     d1a:	88 0b       	sbc	r24, r24
     d1c:	99 0b       	sbc	r25, r25
     d1e:	4b d3       	rcall	.+1686   	; 0x13b6 <__floatsisf>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e4       	ldi	r20, 0x40	; 64
     d26:	50 e4       	ldi	r21, 0x40	; 64
     d28:	a7 d2       	rcall	.+1358   	; 0x1278 <__cmpsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	04 f1       	brlt	.+64     	; 0xd6e <_Z21operate_master_manualv+0x3a2>
     d2e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
	{
		if(rack_throw_auto)
     d32:	88 23       	and	r24, r24
     d34:	39 f0       	breq	.+14     	; 0xd44 <_Z21operate_master_manualv+0x378>
     d36:	16 98       	cbi	0x02, 6	; 2
		{
			SHUTTCOCK_PASS_CLOSE();
     d38:	47 98       	cbi	0x08, 7	; 8
			SHUTTCOCK_GRIP_CLOSE();
     d3a:	81 e0       	ldi	r24, 0x01	; 1
			inside_robot = true;
     d3c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
     d40:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_throw_auto>
			rack_throw_auto = false;
     d44:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <GenevaEncoder+0x9>
		}
		GenevaEncoder.angle = 0;
     d48:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <GenevaEncoder+0xa>
     d4c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <GenevaEncoder+0xb>
     d50:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <GenevaEncoder+0xc>
     d54:	e2 e1       	ldi	r30, 0x12	; 18
     d56:	f2 e0       	ldi	r31, 0x02	; 2
     d58:	15 86       	std	Z+13, r1	; 0x0d
     d5a:	14 86       	std	Z+12, r1	; 0x0c
     d5c:	13 8a       	std	Z+19, r1	; 0x13
		inline float Get_I(){return ki;};
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
     d5e:	12 8a       	std	Z+18, r1	; 0x12
     d60:	14 8a       	std	Z+20, r1	; 0x14
		inline void  reset_output(){cv = 0;};
     d62:	15 8a       	std	Z+21, r1	; 0x15
     d64:	16 8a       	std	Z+22, r1	; 0x16
     d66:	17 8a       	std	Z+23, r1	; 0x17
     d68:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <Geneva_Start>
		angle_pid.Set_SP(0);
		angle_pid.reset_iterm();
		angle_pid.reset_output();
		Geneva_Start = false;
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <_Z21operate_master_manualv+0x3c0>
     d6e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <GenevaEncoder+0x9>
	}
	
	if (Geneva_Start && GenevaEncoder.angle >= 100)
     d72:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <GenevaEncoder+0xa>
     d76:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <GenevaEncoder+0xb>
     d7a:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <GenevaEncoder+0xc>
     d7e:	84 36       	cpi	r24, 0x64	; 100
     d80:	91 05       	cpc	r25, r1
     d82:	a1 05       	cpc	r26, r1
	{
		//stop geneva
		pneumatic_geneva_start = false;
     d84:	b1 05       	cpc	r27, r1
     d86:	14 f0       	brlt	.+4      	; 0xd8c <_Z21operate_master_manualv+0x3c0>
	}
	
	if (angle_pid_compute)
     d88:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
     d8c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
	{
		GenevaMotor.SetOcrValue(angle_pid.angle_Compute(GenevaEncoder.angle));
     d90:	88 23       	and	r24, r24
     d92:	69 f0       	breq	.+26     	; 0xdae <_Z21operate_master_manualv+0x3e2>
     d94:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <GenevaEncoder+0x9>
     d98:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <GenevaEncoder+0xa>
     d9c:	82 e1       	ldi	r24, 0x12	; 18
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	f5 d9       	rcall	.-3094   	; 0x18c <_ZN3PID13angle_ComputeEi>
     da2:	d6 d2       	rcall	.+1452   	; 0x1350 <__fixsfsi>
     da4:	81 e5       	ldi	r24, 0x51	; 81
     da6:	92 e0       	ldi	r25, 0x02	; 2
     da8:	1e dd       	rcall	.-1476   	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
		angle_pid_compute = false;
     daa:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	}
	
	/*************************************************Delay operation*****************************************/
	
	if (rack_throw_auto && Rack_home_position && (millis()-previous_time)>700)
     dae:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_throw_auto>
     db2:	88 23       	and	r24, r24
     db4:	01 f1       	breq	.+64     	; 0xdf6 <_Z21operate_master_manualv+0x42a>
     db6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Rack_home_position>
     dba:	88 23       	and	r24, r24
     dbc:	e1 f0       	breq	.+56     	; 0xdf6 <_Z21operate_master_manualv+0x42a>
     dbe:	72 da       	rcall	.-2844   	; 0x2a4 <_Z6millisv>
     dc0:	00 91 33 02 	lds	r16, 0x0233	; 0x800233 <previous_time>
     dc4:	10 91 34 02 	lds	r17, 0x0234	; 0x800234 <previous_time+0x1>
     dc8:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <previous_time+0x2>
     dcc:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <previous_time+0x3>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	80 1b       	sub	r24, r16
     dd6:	91 0b       	sbc	r25, r17
     dd8:	a2 0b       	sbc	r26, r18
     dda:	b3 0b       	sbc	r27, r19
     ddc:	8d 3b       	cpi	r24, 0xBD	; 189
     dde:	92 40       	sbci	r25, 0x02	; 2
     de0:	a1 05       	cpc	r26, r1
     de2:	b1 05       	cpc	r27, r1
	{
		RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     de4:	40 f0       	brcs	.+16     	; 0xdf6 <_Z21operate_master_manualv+0x42a>
     de6:	67 e0       	ldi	r22, 0x07	; 7
     de8:	7f ef       	ldi	r23, 0xFF	; 255
     dea:	82 e5       	ldi	r24, 0x52	; 82
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	fb dc       	rcall	.-1546   	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
		Buttonx_pressed = true;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <Buttonx_pressed>
	}
	
	
	if(pneumatic_geneva_start && (millis()-pneumatic_geneva_time) > 700)
     df6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pneumatic_geneva_start>
     dfa:	88 23       	and	r24, r24
     dfc:	e9 f0       	breq	.+58     	; 0xe38 <_Z21operate_master_manualv+0x46c>
     dfe:	52 da       	rcall	.-2908   	; 0x2a4 <_Z6millisv>
     e00:	00 91 2f 02 	lds	r16, 0x022F	; 0x80022f <pneumatic_geneva_time>
     e04:	10 91 30 02 	lds	r17, 0x0230	; 0x800230 <pneumatic_geneva_time+0x1>
     e08:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <pneumatic_geneva_time+0x2>
     e0c:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <pneumatic_geneva_time+0x3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	80 1b       	sub	r24, r16
     e16:	91 0b       	sbc	r25, r17
     e18:	a2 0b       	sbc	r26, r18
     e1a:	b3 0b       	sbc	r27, r19
     e1c:	8d 3b       	cpi	r24, 0xBD	; 189
     e1e:	92 40       	sbci	r25, 0x02	; 2
     e20:	a1 05       	cpc	r26, r1
     e22:	b1 05       	cpc	r27, r1
     e24:	48 f0       	brcs	.+18     	; 0xe38 <_Z21operate_master_manualv+0x46c>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     e26:	88 e6       	ldi	r24, 0x68	; 104
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <angle_pid+0xd>
     e2e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <angle_pid+0xc>
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Geneva_Start>
	}
	
	if (pass_the_shuttcock && (millis()-passing_time) > 300)
     e38:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pass_the_shuttcock>
     e3c:	88 23       	and	r24, r24
     e3e:	d1 f0       	breq	.+52     	; 0xe74 <_Z21operate_master_manualv+0x4a8>
     e40:	31 da       	rcall	.-2974   	; 0x2a4 <_Z6millisv>
     e42:	00 91 2b 02 	lds	r16, 0x022B	; 0x80022b <passing_time>
     e46:	10 91 2c 02 	lds	r17, 0x022C	; 0x80022c <passing_time+0x1>
     e4a:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <passing_time+0x2>
     e4e:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <passing_time+0x3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	80 1b       	sub	r24, r16
     e58:	91 0b       	sbc	r25, r17
     e5a:	a2 0b       	sbc	r26, r18
     e5c:	b3 0b       	sbc	r27, r19
     e5e:	8d 32       	cpi	r24, 0x2D	; 45
     e60:	91 40       	sbci	r25, 0x01	; 1
     e62:	a1 05       	cpc	r26, r1
     e64:	b1 05       	cpc	r27, r1
     e66:	30 f0       	brcs	.+12     	; 0xe74 <_Z21operate_master_manualv+0x4a8>
	{
		SHUTTCOCK_PASS_TOGGLE();
     e68:	92 b1       	in	r25, 0x02	; 2
     e6a:	80 e4       	ldi	r24, 0x40	; 64
     e6c:	89 27       	eor	r24, r25
     e6e:	82 b9       	out	0x02, r24	; 2
		pass_the_shuttcock = false;
     e70:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
	}
	
	if(throw_rack && (millis()-previous_time) >= 700)
     e74:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <throw_rack>
     e78:	88 23       	and	r24, r24
     e7a:	b9 f0       	breq	.+46     	; 0xeaa <_Z21operate_master_manualv+0x4de>
     e7c:	13 da       	rcall	.-3034   	; 0x2a4 <_Z6millisv>
     e7e:	00 91 33 02 	lds	r16, 0x0233	; 0x800233 <previous_time>
     e82:	10 91 34 02 	lds	r17, 0x0234	; 0x800234 <previous_time+0x1>
     e86:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <previous_time+0x2>
     e8a:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <previous_time+0x3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	80 1b       	sub	r24, r16
     e94:	91 0b       	sbc	r25, r17
     e96:	a2 0b       	sbc	r26, r18
     e98:	b3 0b       	sbc	r27, r19
     e9a:	8c 3b       	cpi	r24, 0xBC	; 188
     e9c:	92 40       	sbci	r25, 0x02	; 2
     e9e:	a1 05       	cpc	r26, r1
     ea0:	b1 05       	cpc	r27, r1
	{
		RACK_GRIP_OPEN();
     ea2:	18 f0       	brcs	.+6      	; 0xeaa <_Z21operate_master_manualv+0x4de>
		throw_rack = false;
     ea4:	10 98       	cbi	0x02, 0	; 2
     ea6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <throw_rack>
	}
	

	
	rack_limit_check();
     eaa:	84 da       	rcall	.-2808   	; 0x3b4 <_Z16rack_limit_checkv>

}
     eac:	12 c0       	rjmp	.+36     	; 0xed2 <_Z21operate_master_manualv+0x506>
	/**************************************************Rack Operation******************************************************/
	if (!Buttonx_pressed)
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
		{
			RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     eae:	69 ef       	ldi	r22, 0xF9	; 249
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	82 e5       	ldi	r24, 0x52	; 82
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	97 dc       	rcall	.-1746   	; 0x7e6 <_ZN10Rack_Motor11SetOcrValueEi>
     eb8:	6a ce       	rjmp	.-812    	; 0xb8e <_Z21operate_master_manualv+0x1c2>
     eba:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <rcvdata+0x3>
		}
		else if (LEFTTRIGGER > 20 )
     ebe:	85 31       	cpi	r24, 0x15	; 21
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <_Z21operate_master_manualv+0x4f8>
     ec2:	5c ce       	rjmp	.-840    	; 0xb7c <_Z21operate_master_manualv+0x1b0>
     ec4:	61 ce       	rjmp	.-830    	; 0xb88 <_Z21operate_master_manualv+0x1bc>
     ec6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <Rack_home_position>
	}
	

	if (RackEncoder.Get_count() <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where somewhere
	{
		Rack_home_position = false;
     eca:	81 e0       	ldi	r24, 0x01	; 1
		donotstop = true;
     ecc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <donotstop>
     ed0:	6d ce       	rjmp	.-806    	; 0xbac <_Z21operate_master_manualv+0x1e0>
     ed2:	df 91       	pop	r29
	

	
	rack_limit_check();

}
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <_Z19operate_master_autov>:
     edc:	0f 93       	push	r16

void operate_master_auto()
{
     ede:	1f 93       	push	r17
	
	if(GAMEBUTTONA == START_BUTTON)
     ee0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <rcvdata>
     ee4:	80 34       	cpi	r24, 0x40	; 64
     ee6:	29 f4       	brne	.+10     	; 0xef2 <_Z19operate_master_autov+0x16>
	{
		auto_mode = false;
     ee8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <auto_mode>
		GAMEBUTTONA = 0;
     eec:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     ef0:	29 c0       	rjmp	.+82     	; 0xf44 <_Z19operate_master_autov+0x68>
	}
	else if(GAMEBUTTONA == BUTTON_A)
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	29 f4       	brne	.+10     	; 0xf00 <_Z19operate_master_autov+0x24>
	{
		slave_work_category = Rack_load;
     ef6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
		GAMEBUTTONA = 0;
     efa:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     efe:	22 c0       	rjmp	.+68     	; 0xf44 <_Z19operate_master_autov+0x68>
	}
	else if(GAMEBUTTONA == BUTTON_B)
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	29 f4       	brne	.+10     	; 0xf0e <_Z19operate_master_autov+0x32>
	{
		slave_work_category = Load1;
     f04:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
		GAMEBUTTONA = 0;
     f08:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     f0c:	1b c0       	rjmp	.+54     	; 0xf44 <_Z19operate_master_autov+0x68>
	}	
	else if (GAMEBUTTONA == BUTTON_X)
     f0e:	84 30       	cpi	r24, 0x04	; 4
     f10:	31 f4       	brne	.+12     	; 0xf1e <_Z19operate_master_autov+0x42>
	{
		slave_work_category = Load2;
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
		GAMEBUTTONA = 0;
     f18:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <_Z19operate_master_autov+0x68>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	31 f4       	brne	.+12     	; 0xf2e <_Z19operate_master_autov+0x52>
	{
		slave_work_category = Golden_Rack;
     f22:	85 e0       	ldi	r24, 0x05	; 5
     f24:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
		GAMEBUTTONA = 0;
     f28:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     f2c:	0b c0       	rjmp	.+22     	; 0xf44 <_Z19operate_master_autov+0x68>
	}
	else if (GAMEBUTTONA == RIGHT_BUTTON)
     f2e:	80 32       	cpi	r24, 0x20	; 32
     f30:	49 f4       	brne	.+18     	; 0xf44 <_Z19operate_master_autov+0x68>
	{
		slave_work_category = Search_automaticrobot;
     f32:	84 e0       	ldi	r24, 0x04	; 4
     f34:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
		lt_switch_check = true;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <lt_switch_check>
		GAMEBUTTONA = 0;
     f3e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <rcvdata>
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <_Z19operate_master_autov+0x72>
	}
	
	if(lt_switch_check)
     f44:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <lt_switch_check>
     f48:	88 23       	and	r24, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_Z19operate_master_autov+0x72>
     f4c:	71 c0       	rjmp	.+226    	; 0x1030 <_Z19operate_master_autov+0x154>
	{
		if(!limit12_found)
     f4e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <limit12_found>
     f52:	81 11       	cpse	r24, r1
     f54:	27 c0       	rjmp	.+78     	; 0xfa4 <_Z19operate_master_autov+0xc8>
		{
			if(!lt_switch12_on && !READ(LTSWITCH_ORIENT_1) && !READ(LTSWITCH_ORIENT_2))
     f56:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <lt_switch12_on>
     f5a:	81 11       	cpse	r24, r1
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <_Z19operate_master_autov+0x8c>
     f5e:	1e 99       	sbic	0x03, 6	; 3
     f60:	67 c0       	rjmp	.+206    	; 0x1030 <_Z19operate_master_autov+0x154>
     f62:	1f 9b       	sbis	0x03, 7	; 3
     f64:	44 c0       	rjmp	.+136    	; 0xfee <_Z19operate_master_autov+0x112>
     f66:	64 c0       	rjmp	.+200    	; 0x1030 <_Z19operate_master_autov+0x154>
			{
				lt_switch12_on = true;
				orientation_time = millis();
			}
			if (lt_switch12_on && millis()-orientation_time >= 500)
     f68:	9d d9       	rcall	.-3270   	; 0x2a4 <_Z6millisv>
     f6a:	00 91 5d 02 	lds	r16, 0x025D	; 0x80025d <orientation_time>
     f6e:	10 91 5e 02 	lds	r17, 0x025E	; 0x80025e <orientation_time+0x1>
     f72:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <orientation_time+0x2>
     f76:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <orientation_time+0x3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	80 1b       	sub	r24, r16
     f80:	91 0b       	sbc	r25, r17
     f82:	a2 0b       	sbc	r26, r18
     f84:	b3 0b       	sbc	r27, r19
     f86:	84 3f       	cpi	r24, 0xF4	; 244
     f88:	91 40       	sbci	r25, 0x01	; 1
     f8a:	a1 05       	cpc	r26, r1
     f8c:	b1 05       	cpc	r27, r1
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <_Z19operate_master_autov+0xb6>
     f90:	4f c0       	rjmp	.+158    	; 0x1030 <_Z19operate_master_autov+0x154>
			{
				slave_work_category = lt12_found;
     f92:	86 e0       	ldi	r24, 0x06	; 6
     f94:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
				lt_switch12_on = false;
     f98:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <lt_switch12_on>
				limit12_found = true;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <limit12_found>
     fa2:	46 c0       	rjmp	.+140    	; 0x1030 <_Z19operate_master_autov+0x154>
			}
		}
		else
		{
			if(!lt_switch3_on && !READ(LTSWITCH_ORIENT_3))
     fa4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lt_switch3_on>
     fa8:	81 11       	cpse	r24, r1
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <_Z19operate_master_autov+0xd6>
     fac:	1d 9b       	sbis	0x03, 5	; 3
     fae:	30 c0       	rjmp	.+96     	; 0x1010 <_Z19operate_master_autov+0x134>
			{
				lt_switch3_on  = true;
				orientation_time = millis();
			}
			if(lt_switch3_on && millis() - orientation_time >= 500)
     fb0:	3f c0       	rjmp	.+126    	; 0x1030 <_Z19operate_master_autov+0x154>
     fb2:	78 d9       	rcall	.-3344   	; 0x2a4 <_Z6millisv>
     fb4:	00 91 5d 02 	lds	r16, 0x025D	; 0x80025d <orientation_time>
     fb8:	10 91 5e 02 	lds	r17, 0x025E	; 0x80025e <orientation_time+0x1>
     fbc:	20 91 5f 02 	lds	r18, 0x025F	; 0x80025f <orientation_time+0x2>
     fc0:	30 91 60 02 	lds	r19, 0x0260	; 0x800260 <orientation_time+0x3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	80 1b       	sub	r24, r16
     fca:	91 0b       	sbc	r25, r17
     fcc:	a2 0b       	sbc	r26, r18
     fce:	b3 0b       	sbc	r27, r19
     fd0:	84 3f       	cpi	r24, 0xF4	; 244
     fd2:	91 40       	sbci	r25, 0x01	; 1
     fd4:	a1 05       	cpc	r26, r1
     fd6:	b1 05       	cpc	r27, r1
     fd8:	58 f1       	brcs	.+86     	; 0x1030 <_Z19operate_master_autov+0x154>
			{
				slave_work_category = lt3_found;
     fda:	87 e0       	ldi	r24, 0x07	; 7
     fdc:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <slave_work_category>
				lt_switch3_on = false;
     fe0:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <lt_switch3_on>
				limit12_found = false;
     fe4:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <limit12_found>
				lt_switch_check = false;
     fe8:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <lt_switch_check>
			}
		}
	}

}
     fec:	21 c0       	rjmp	.+66     	; 0x1030 <_Z19operate_master_autov+0x154>
	{
		if(!limit12_found)
		{
			if(!lt_switch12_on && !READ(LTSWITCH_ORIENT_1) && !READ(LTSWITCH_ORIENT_2))
			{
				lt_switch12_on = true;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <lt_switch12_on>
				orientation_time = millis();
     ff4:	57 d9       	rcall	.-3410   	; 0x2a4 <_Z6millisv>
     ff6:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <orientation_time>
     ffa:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <orientation_time+0x1>
     ffe:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <orientation_time+0x2>
    1002:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <orientation_time+0x3>
			}
			if (lt_switch12_on && millis()-orientation_time >= 500)
    1006:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <lt_switch12_on>
    100a:	88 23       	and	r24, r24
    100c:	89 f0       	breq	.+34     	; 0x1030 <_Z19operate_master_autov+0x154>
    100e:	ac cf       	rjmp	.-168    	; 0xf68 <_Z19operate_master_autov+0x8c>
		}
		else
		{
			if(!lt_switch3_on && !READ(LTSWITCH_ORIENT_3))
			{
				lt_switch3_on  = true;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <lt_switch3_on>
				orientation_time = millis();
    1016:	46 d9       	rcall	.-3444   	; 0x2a4 <_Z6millisv>
    1018:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <orientation_time>
    101c:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <orientation_time+0x1>
    1020:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <orientation_time+0x2>
    1024:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <orientation_time+0x3>
			}
			if(lt_switch3_on && millis() - orientation_time >= 500)
    1028:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <lt_switch3_on>
    102c:	81 11       	cpse	r24, r1
    102e:	c1 cf       	rjmp	.-126    	; 0xfb2 <_Z19operate_master_autov+0xd6>
				lt_switch_check = false;
			}
		}
	}

}
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <__vector_21>:
//Global timer interrupt

/***********************************Ramping from the joystick analog button*************************************/

ISR(TIMER0_COMPA_vect)
{
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	8f 93       	push	r24
	if (rampupflag_start)
    1042:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <rampupflag_start>
    1046:	88 23       	and	r24, r24
    1048:	31 f0       	breq	.+12     	; 0x1056 <__vector_21+0x20>
	timer_count++;
    104a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <timer_count>
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <timer_count>
    1054:	02 c0       	rjmp	.+4      	; 0x105a <__vector_21+0x24>
	else
	timer_count = 0;
    1056:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <timer_count>
	
	if (timer_count > 60)
    105a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <timer_count>
    105e:	8d 33       	cpi	r24, 0x3D	; 61
    1060:	1c f0       	brlt	.+6      	; 0x1068 <__vector_21+0x32>
	timer_count = 60;
    1062:	8c e3       	ldi	r24, 0x3C	; 60
    1064:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <timer_count>
	

    1068:	8f 91       	pop	r24
    106a:	0f 90       	pop	r0
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	0f 90       	pop	r0
    1070:	1f 90       	pop	r1
    1072:	18 95       	reti

00001074 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    1074:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1078:	87 e6       	ldi	r24, 0x67	; 103
    107a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    107e:	88 e9       	ldi	r24, 0x98	; 152
    1080:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1084:	86 e0       	ldi	r24, 0x06	; 6
    1086:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    108a:	08 95       	ret

0000108c <_Z9initUART2v>:
    108c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_ZL9datacount>
    1090:	ec e6       	ldi	r30, 0x6C	; 108
    1092:	f2 e0       	ldi	r31, 0x02	; 2
    1094:	10 82       	st	Z, r1
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	12 82       	std	Z+2, r1	; 0x02
    109a:	13 82       	std	Z+3, r1	; 0x03
    109c:	82 e3       	ldi	r24, 0x32	; 50
    109e:	84 83       	std	Z+4, r24	; 0x04
    10a0:	85 83       	std	Z+5, r24	; 0x05
    10a2:	86 83       	std	Z+6, r24	; 0x06
    10a4:	87 83       	std	Z+7, r24	; 0x07
    10a6:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    10aa:	89 e1       	ldi	r24, 0x19	; 25
    10ac:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    10b0:	88 e9       	ldi	r24, 0x98	; 152
    10b2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    10bc:	08 95       	ret

000010be <_Z9initUART3v>:
    10be:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    10c2:	89 e1       	ldi	r24, 0x19	; 25
    10c4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    10c8:	88 e9       	ldi	r24, 0x98	; 152
    10ca:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    10ce:	86 e0       	ldi	r24, 0x06	; 6
    10d0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    10d4:	08 95       	ret

000010d6 <_Z13UART3Transmith>:
    10d6:	e0 e3       	ldi	r30, 0x30	; 48
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	90 81       	ld	r25, Z
    10dc:	95 ff       	sbrs	r25, 5
    10de:	fd cf       	rjmp	.-6      	; 0x10da <_Z13UART3Transmith+0x4>
    10e0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    10e4:	08 95       	ret

000010e6 <__vector_25>:

ISR(USART0_RX_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	8f 93       	push	r24
	buffer=UDR0;
    10f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    10f6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <buffer>
}
    10fa:	8f 91       	pop	r24
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <__vector_36>:

ISR(USART1_RX_vect)
{
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	8f 93       	push	r24
	buffer1=UDR1;
    1112:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1116:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <buffer1>
	
}
    111a:	8f 91       	pop	r24
    111c:	0f 90       	pop	r0
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	0f 90       	pop	r0
    1122:	1f 90       	pop	r1
    1124:	18 95       	reti

00001126 <__vector_51>:

ISR(USART2_RX_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
	buffer2=UDR2;
    113c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1140:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <buffer2>
		if(rcvflag)
    1144:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <rcvflag>
    1148:	99 23       	and	r25, r25
    114a:	89 f0       	breq	.+34     	; 0x116e <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    114c:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <_ZL9datacount>
    1150:	e9 2f       	mov	r30, r25
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	e4 59       	subi	r30, 0x94	; 148
    1156:	fd 4f       	sbci	r31, 0xFD	; 253
    1158:	80 83       	st	Z, r24
			datacount++;
    115a:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>7)
    115c:	98 30       	cpi	r25, 0x08	; 8
    115e:	18 f4       	brcc	.+6      	; 0x1166 <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    1160:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <_ZL9datacount>
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    1166:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <_ZL9datacount>
				rcvflag = false; 
    116a:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
    116e:	8f 37       	cpi	r24, 0x7F	; 127
    1170:	19 f4       	brne	.+6      	; 0x1178 <__vector_51+0x52>
		rcvflag=true;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <rcvflag>
		
}
    1178:	ff 91       	pop	r31
    117a:	ef 91       	pop	r30
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	0f 90       	pop	r0
    1182:	0b be       	out	0x3b, r0	; 59
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <__vector_54>:


ISR(USART3_RX_vect)
{
    118e:	1f 92       	push	r1
    1190:	0f 92       	push	r0
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	0f 92       	push	r0
    1196:	11 24       	eor	r1, r1
    1198:	8f 93       	push	r24
	buffer3=UDR3;
    119a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    119e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <buffer3>
}
    11a2:	8f 91       	pop	r24
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	0f 90       	pop	r0
    11aa:	1f 90       	pop	r1
    11ac:	18 95       	reti

000011ae <__subsf3>:
    11ae:	50 58       	subi	r21, 0x80	; 128

000011b0 <__addsf3>:
    11b0:	bb 27       	eor	r27, r27
    11b2:	aa 27       	eor	r26, r26
    11b4:	0e d0       	rcall	.+28     	; 0x11d2 <__addsf3x>
    11b6:	75 c1       	rjmp	.+746    	; 0x14a2 <__fp_round>
    11b8:	66 d1       	rcall	.+716    	; 0x1486 <__fp_pscA>
    11ba:	30 f0       	brcs	.+12     	; 0x11c8 <__addsf3+0x18>
    11bc:	6b d1       	rcall	.+726    	; 0x1494 <__fp_pscB>
    11be:	20 f0       	brcs	.+8      	; 0x11c8 <__addsf3+0x18>
    11c0:	31 f4       	brne	.+12     	; 0x11ce <__addsf3+0x1e>
    11c2:	9f 3f       	cpi	r25, 0xFF	; 255
    11c4:	11 f4       	brne	.+4      	; 0x11ca <__addsf3+0x1a>
    11c6:	1e f4       	brtc	.+6      	; 0x11ce <__addsf3+0x1e>
    11c8:	5b c1       	rjmp	.+694    	; 0x1480 <__fp_nan>
    11ca:	0e f4       	brtc	.+2      	; 0x11ce <__addsf3+0x1e>
    11cc:	e0 95       	com	r30
    11ce:	e7 fb       	bst	r30, 7
    11d0:	51 c1       	rjmp	.+674    	; 0x1474 <__fp_inf>

000011d2 <__addsf3x>:
    11d2:	e9 2f       	mov	r30, r25
    11d4:	77 d1       	rcall	.+750    	; 0x14c4 <__fp_split3>
    11d6:	80 f3       	brcs	.-32     	; 0x11b8 <__addsf3+0x8>
    11d8:	ba 17       	cp	r27, r26
    11da:	62 07       	cpc	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	95 07       	cpc	r25, r21
    11e2:	18 f0       	brcs	.+6      	; 0x11ea <__addsf3x+0x18>
    11e4:	71 f4       	brne	.+28     	; 0x1202 <__addsf3x+0x30>
    11e6:	9e f5       	brtc	.+102    	; 0x124e <__addsf3x+0x7c>
    11e8:	8f c1       	rjmp	.+798    	; 0x1508 <__fp_zero>
    11ea:	0e f4       	brtc	.+2      	; 0x11ee <__addsf3x+0x1c>
    11ec:	e0 95       	com	r30
    11ee:	0b 2e       	mov	r0, r27
    11f0:	ba 2f       	mov	r27, r26
    11f2:	a0 2d       	mov	r26, r0
    11f4:	0b 01       	movw	r0, r22
    11f6:	b9 01       	movw	r22, r18
    11f8:	90 01       	movw	r18, r0
    11fa:	0c 01       	movw	r0, r24
    11fc:	ca 01       	movw	r24, r20
    11fe:	a0 01       	movw	r20, r0
    1200:	11 24       	eor	r1, r1
    1202:	ff 27       	eor	r31, r31
    1204:	59 1b       	sub	r21, r25
    1206:	99 f0       	breq	.+38     	; 0x122e <__addsf3x+0x5c>
    1208:	59 3f       	cpi	r21, 0xF9	; 249
    120a:	50 f4       	brcc	.+20     	; 0x1220 <__addsf3x+0x4e>
    120c:	50 3e       	cpi	r21, 0xE0	; 224
    120e:	68 f1       	brcs	.+90     	; 0x126a <__addsf3x+0x98>
    1210:	1a 16       	cp	r1, r26
    1212:	f0 40       	sbci	r31, 0x00	; 0
    1214:	a2 2f       	mov	r26, r18
    1216:	23 2f       	mov	r18, r19
    1218:	34 2f       	mov	r19, r20
    121a:	44 27       	eor	r20, r20
    121c:	58 5f       	subi	r21, 0xF8	; 248
    121e:	f3 cf       	rjmp	.-26     	; 0x1206 <__addsf3x+0x34>
    1220:	46 95       	lsr	r20
    1222:	37 95       	ror	r19
    1224:	27 95       	ror	r18
    1226:	a7 95       	ror	r26
    1228:	f0 40       	sbci	r31, 0x00	; 0
    122a:	53 95       	inc	r21
    122c:	c9 f7       	brne	.-14     	; 0x1220 <__addsf3x+0x4e>
    122e:	7e f4       	brtc	.+30     	; 0x124e <__addsf3x+0x7c>
    1230:	1f 16       	cp	r1, r31
    1232:	ba 0b       	sbc	r27, r26
    1234:	62 0b       	sbc	r22, r18
    1236:	73 0b       	sbc	r23, r19
    1238:	84 0b       	sbc	r24, r20
    123a:	ba f0       	brmi	.+46     	; 0x126a <__addsf3x+0x98>
    123c:	91 50       	subi	r25, 0x01	; 1
    123e:	a1 f0       	breq	.+40     	; 0x1268 <__addsf3x+0x96>
    1240:	ff 0f       	add	r31, r31
    1242:	bb 1f       	adc	r27, r27
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	c2 f7       	brpl	.-16     	; 0x123c <__addsf3x+0x6a>
    124c:	0e c0       	rjmp	.+28     	; 0x126a <__addsf3x+0x98>
    124e:	ba 0f       	add	r27, r26
    1250:	62 1f       	adc	r22, r18
    1252:	73 1f       	adc	r23, r19
    1254:	84 1f       	adc	r24, r20
    1256:	48 f4       	brcc	.+18     	; 0x126a <__addsf3x+0x98>
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	b7 95       	ror	r27
    1260:	f7 95       	ror	r31
    1262:	9e 3f       	cpi	r25, 0xFE	; 254
    1264:	08 f0       	brcs	.+2      	; 0x1268 <__addsf3x+0x96>
    1266:	b3 cf       	rjmp	.-154    	; 0x11ce <__addsf3+0x1e>
    1268:	93 95       	inc	r25
    126a:	88 0f       	add	r24, r24
    126c:	08 f0       	brcs	.+2      	; 0x1270 <__addsf3x+0x9e>
    126e:	99 27       	eor	r25, r25
    1270:	ee 0f       	add	r30, r30
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	08 95       	ret

00001278 <__cmpsf2>:
    1278:	d9 d0       	rcall	.+434    	; 0x142c <__fp_cmp>
    127a:	08 f4       	brcc	.+2      	; 0x127e <__cmpsf2+0x6>
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	08 95       	ret

00001280 <__divsf3>:
    1280:	0c d0       	rcall	.+24     	; 0x129a <__divsf3x>
    1282:	0f c1       	rjmp	.+542    	; 0x14a2 <__fp_round>
    1284:	07 d1       	rcall	.+526    	; 0x1494 <__fp_pscB>
    1286:	40 f0       	brcs	.+16     	; 0x1298 <__divsf3+0x18>
    1288:	fe d0       	rcall	.+508    	; 0x1486 <__fp_pscA>
    128a:	30 f0       	brcs	.+12     	; 0x1298 <__divsf3+0x18>
    128c:	21 f4       	brne	.+8      	; 0x1296 <__divsf3+0x16>
    128e:	5f 3f       	cpi	r21, 0xFF	; 255
    1290:	19 f0       	breq	.+6      	; 0x1298 <__divsf3+0x18>
    1292:	f0 c0       	rjmp	.+480    	; 0x1474 <__fp_inf>
    1294:	51 11       	cpse	r21, r1
    1296:	39 c1       	rjmp	.+626    	; 0x150a <__fp_szero>
    1298:	f3 c0       	rjmp	.+486    	; 0x1480 <__fp_nan>

0000129a <__divsf3x>:
    129a:	14 d1       	rcall	.+552    	; 0x14c4 <__fp_split3>
    129c:	98 f3       	brcs	.-26     	; 0x1284 <__divsf3+0x4>

0000129e <__divsf3_pse>:
    129e:	99 23       	and	r25, r25
    12a0:	c9 f3       	breq	.-14     	; 0x1294 <__divsf3+0x14>
    12a2:	55 23       	and	r21, r21
    12a4:	b1 f3       	breq	.-20     	; 0x1292 <__divsf3+0x12>
    12a6:	95 1b       	sub	r25, r21
    12a8:	55 0b       	sbc	r21, r21
    12aa:	bb 27       	eor	r27, r27
    12ac:	aa 27       	eor	r26, r26
    12ae:	62 17       	cp	r22, r18
    12b0:	73 07       	cpc	r23, r19
    12b2:	84 07       	cpc	r24, r20
    12b4:	38 f0       	brcs	.+14     	; 0x12c4 <__divsf3_pse+0x26>
    12b6:	9f 5f       	subi	r25, 0xFF	; 255
    12b8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	44 1f       	adc	r20, r20
    12c0:	aa 1f       	adc	r26, r26
    12c2:	a9 f3       	breq	.-22     	; 0x12ae <__divsf3_pse+0x10>
    12c4:	33 d0       	rcall	.+102    	; 0x132c <__divsf3_pse+0x8e>
    12c6:	0e 2e       	mov	r0, r30
    12c8:	3a f0       	brmi	.+14     	; 0x12d8 <__divsf3_pse+0x3a>
    12ca:	e0 e8       	ldi	r30, 0x80	; 128
    12cc:	30 d0       	rcall	.+96     	; 0x132e <__divsf3_pse+0x90>
    12ce:	91 50       	subi	r25, 0x01	; 1
    12d0:	50 40       	sbci	r21, 0x00	; 0
    12d2:	e6 95       	lsr	r30
    12d4:	00 1c       	adc	r0, r0
    12d6:	ca f7       	brpl	.-14     	; 0x12ca <__divsf3_pse+0x2c>
    12d8:	29 d0       	rcall	.+82     	; 0x132c <__divsf3_pse+0x8e>
    12da:	fe 2f       	mov	r31, r30
    12dc:	27 d0       	rcall	.+78     	; 0x132c <__divsf3_pse+0x8e>
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	bb 1f       	adc	r27, r27
    12e6:	26 17       	cp	r18, r22
    12e8:	37 07       	cpc	r19, r23
    12ea:	48 07       	cpc	r20, r24
    12ec:	ab 07       	cpc	r26, r27
    12ee:	b0 e8       	ldi	r27, 0x80	; 128
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__divsf3_pse+0x56>
    12f2:	bb 0b       	sbc	r27, r27
    12f4:	80 2d       	mov	r24, r0
    12f6:	bf 01       	movw	r22, r30
    12f8:	ff 27       	eor	r31, r31
    12fa:	93 58       	subi	r25, 0x83	; 131
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	2a f0       	brmi	.+10     	; 0x130a <__divsf3_pse+0x6c>
    1300:	9e 3f       	cpi	r25, 0xFE	; 254
    1302:	51 05       	cpc	r21, r1
    1304:	68 f0       	brcs	.+26     	; 0x1320 <__divsf3_pse+0x82>
    1306:	b6 c0       	rjmp	.+364    	; 0x1474 <__fp_inf>
    1308:	00 c1       	rjmp	.+512    	; 0x150a <__fp_szero>
    130a:	5f 3f       	cpi	r21, 0xFF	; 255
    130c:	ec f3       	brlt	.-6      	; 0x1308 <__divsf3_pse+0x6a>
    130e:	98 3e       	cpi	r25, 0xE8	; 232
    1310:	dc f3       	brlt	.-10     	; 0x1308 <__divsf3_pse+0x6a>
    1312:	86 95       	lsr	r24
    1314:	77 95       	ror	r23
    1316:	67 95       	ror	r22
    1318:	b7 95       	ror	r27
    131a:	f7 95       	ror	r31
    131c:	9f 5f       	subi	r25, 0xFF	; 255
    131e:	c9 f7       	brne	.-14     	; 0x1312 <__divsf3_pse+0x74>
    1320:	88 0f       	add	r24, r24
    1322:	91 1d       	adc	r25, r1
    1324:	96 95       	lsr	r25
    1326:	87 95       	ror	r24
    1328:	97 f9       	bld	r25, 7
    132a:	08 95       	ret
    132c:	e1 e0       	ldi	r30, 0x01	; 1
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	bb 1f       	adc	r27, r27
    1336:	62 17       	cp	r22, r18
    1338:	73 07       	cpc	r23, r19
    133a:	84 07       	cpc	r24, r20
    133c:	ba 07       	cpc	r27, r26
    133e:	20 f0       	brcs	.+8      	; 0x1348 <__divsf3_pse+0xaa>
    1340:	62 1b       	sub	r22, r18
    1342:	73 0b       	sbc	r23, r19
    1344:	84 0b       	sbc	r24, r20
    1346:	ba 0b       	sbc	r27, r26
    1348:	ee 1f       	adc	r30, r30
    134a:	88 f7       	brcc	.-30     	; 0x132e <__divsf3_pse+0x90>
    134c:	e0 95       	com	r30
    134e:	08 95       	ret

00001350 <__fixsfsi>:
    1350:	04 d0       	rcall	.+8      	; 0x135a <__fixunssfsi>
    1352:	68 94       	set
    1354:	b1 11       	cpse	r27, r1
    1356:	d9 c0       	rjmp	.+434    	; 0x150a <__fp_szero>
    1358:	08 95       	ret

0000135a <__fixunssfsi>:
    135a:	bc d0       	rcall	.+376    	; 0x14d4 <__fp_splitA>
    135c:	88 f0       	brcs	.+34     	; 0x1380 <__fixunssfsi+0x26>
    135e:	9f 57       	subi	r25, 0x7F	; 127
    1360:	90 f0       	brcs	.+36     	; 0x1386 <__fixunssfsi+0x2c>
    1362:	b9 2f       	mov	r27, r25
    1364:	99 27       	eor	r25, r25
    1366:	b7 51       	subi	r27, 0x17	; 23
    1368:	a0 f0       	brcs	.+40     	; 0x1392 <__fixunssfsi+0x38>
    136a:	d1 f0       	breq	.+52     	; 0x13a0 <__fixunssfsi+0x46>
    136c:	66 0f       	add	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	1a f0       	brmi	.+6      	; 0x137c <__fixunssfsi+0x22>
    1376:	ba 95       	dec	r27
    1378:	c9 f7       	brne	.-14     	; 0x136c <__fixunssfsi+0x12>
    137a:	12 c0       	rjmp	.+36     	; 0x13a0 <__fixunssfsi+0x46>
    137c:	b1 30       	cpi	r27, 0x01	; 1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <__fixunssfsi+0x46>
    1380:	c3 d0       	rcall	.+390    	; 0x1508 <__fp_zero>
    1382:	b1 e0       	ldi	r27, 0x01	; 1
    1384:	08 95       	ret
    1386:	c0 c0       	rjmp	.+384    	; 0x1508 <__fp_zero>
    1388:	67 2f       	mov	r22, r23
    138a:	78 2f       	mov	r23, r24
    138c:	88 27       	eor	r24, r24
    138e:	b8 5f       	subi	r27, 0xF8	; 248
    1390:	39 f0       	breq	.+14     	; 0x13a0 <__fixunssfsi+0x46>
    1392:	b9 3f       	cpi	r27, 0xF9	; 249
    1394:	cc f3       	brlt	.-14     	; 0x1388 <__fixunssfsi+0x2e>
    1396:	86 95       	lsr	r24
    1398:	77 95       	ror	r23
    139a:	67 95       	ror	r22
    139c:	b3 95       	inc	r27
    139e:	d9 f7       	brne	.-10     	; 0x1396 <__fixunssfsi+0x3c>
    13a0:	3e f4       	brtc	.+14     	; 0x13b0 <__fixunssfsi+0x56>
    13a2:	90 95       	com	r25
    13a4:	80 95       	com	r24
    13a6:	70 95       	com	r23
    13a8:	61 95       	neg	r22
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	8f 4f       	sbci	r24, 0xFF	; 255
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	08 95       	ret

000013b2 <__floatunsisf>:
    13b2:	e8 94       	clt
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <__floatsisf+0x12>

000013b6 <__floatsisf>:
    13b6:	97 fb       	bst	r25, 7
    13b8:	3e f4       	brtc	.+14     	; 0x13c8 <__floatsisf+0x12>
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	99 23       	and	r25, r25
    13ca:	a9 f0       	breq	.+42     	; 0x13f6 <__floatsisf+0x40>
    13cc:	f9 2f       	mov	r31, r25
    13ce:	96 e9       	ldi	r25, 0x96	; 150
    13d0:	bb 27       	eor	r27, r27
    13d2:	93 95       	inc	r25
    13d4:	f6 95       	lsr	r31
    13d6:	87 95       	ror	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	b7 95       	ror	r27
    13de:	f1 11       	cpse	r31, r1
    13e0:	f8 cf       	rjmp	.-16     	; 0x13d2 <__floatsisf+0x1c>
    13e2:	fa f4       	brpl	.+62     	; 0x1422 <__floatsisf+0x6c>
    13e4:	bb 0f       	add	r27, r27
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__floatsisf+0x36>
    13e8:	60 ff       	sbrs	r22, 0
    13ea:	1b c0       	rjmp	.+54     	; 0x1422 <__floatsisf+0x6c>
    13ec:	6f 5f       	subi	r22, 0xFF	; 255
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	16 c0       	rjmp	.+44     	; 0x1422 <__floatsisf+0x6c>
    13f6:	88 23       	and	r24, r24
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__floatsisf+0x48>
    13fa:	96 e9       	ldi	r25, 0x96	; 150
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <__floatsisf+0x6a>
    13fe:	77 23       	and	r23, r23
    1400:	21 f0       	breq	.+8      	; 0x140a <__floatsisf+0x54>
    1402:	9e e8       	ldi	r25, 0x8E	; 142
    1404:	87 2f       	mov	r24, r23
    1406:	76 2f       	mov	r23, r22
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <__floatsisf+0x5e>
    140a:	66 23       	and	r22, r22
    140c:	71 f0       	breq	.+28     	; 0x142a <__floatsisf+0x74>
    140e:	96 e8       	ldi	r25, 0x86	; 134
    1410:	86 2f       	mov	r24, r22
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	2a f0       	brmi	.+10     	; 0x1422 <__floatsisf+0x6c>
    1418:	9a 95       	dec	r25
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	da f7       	brpl	.-10     	; 0x1418 <__floatsisf+0x62>
    1422:	88 0f       	add	r24, r24
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	97 f9       	bld	r25, 7
    142a:	08 95       	ret

0000142c <__fp_cmp>:
    142c:	99 0f       	add	r25, r25
    142e:	00 08       	sbc	r0, r0
    1430:	55 0f       	add	r21, r21
    1432:	aa 0b       	sbc	r26, r26
    1434:	e0 e8       	ldi	r30, 0x80	; 128
    1436:	fe ef       	ldi	r31, 0xFE	; 254
    1438:	16 16       	cp	r1, r22
    143a:	17 06       	cpc	r1, r23
    143c:	e8 07       	cpc	r30, r24
    143e:	f9 07       	cpc	r31, r25
    1440:	c0 f0       	brcs	.+48     	; 0x1472 <__fp_cmp+0x46>
    1442:	12 16       	cp	r1, r18
    1444:	13 06       	cpc	r1, r19
    1446:	e4 07       	cpc	r30, r20
    1448:	f5 07       	cpc	r31, r21
    144a:	98 f0       	brcs	.+38     	; 0x1472 <__fp_cmp+0x46>
    144c:	62 1b       	sub	r22, r18
    144e:	73 0b       	sbc	r23, r19
    1450:	84 0b       	sbc	r24, r20
    1452:	95 0b       	sbc	r25, r21
    1454:	39 f4       	brne	.+14     	; 0x1464 <__fp_cmp+0x38>
    1456:	0a 26       	eor	r0, r26
    1458:	61 f0       	breq	.+24     	; 0x1472 <__fp_cmp+0x46>
    145a:	23 2b       	or	r18, r19
    145c:	24 2b       	or	r18, r20
    145e:	25 2b       	or	r18, r21
    1460:	21 f4       	brne	.+8      	; 0x146a <__fp_cmp+0x3e>
    1462:	08 95       	ret
    1464:	0a 26       	eor	r0, r26
    1466:	09 f4       	brne	.+2      	; 0x146a <__fp_cmp+0x3e>
    1468:	a1 40       	sbci	r26, 0x01	; 1
    146a:	a6 95       	lsr	r26
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	81 1d       	adc	r24, r1
    1470:	81 1d       	adc	r24, r1
    1472:	08 95       	ret

00001474 <__fp_inf>:
    1474:	97 f9       	bld	r25, 7
    1476:	9f 67       	ori	r25, 0x7F	; 127
    1478:	80 e8       	ldi	r24, 0x80	; 128
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	08 95       	ret

00001480 <__fp_nan>:
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	80 ec       	ldi	r24, 0xC0	; 192
    1484:	08 95       	ret

00001486 <__fp_pscA>:
    1486:	00 24       	eor	r0, r0
    1488:	0a 94       	dec	r0
    148a:	16 16       	cp	r1, r22
    148c:	17 06       	cpc	r1, r23
    148e:	18 06       	cpc	r1, r24
    1490:	09 06       	cpc	r0, r25
    1492:	08 95       	ret

00001494 <__fp_pscB>:
    1494:	00 24       	eor	r0, r0
    1496:	0a 94       	dec	r0
    1498:	12 16       	cp	r1, r18
    149a:	13 06       	cpc	r1, r19
    149c:	14 06       	cpc	r1, r20
    149e:	05 06       	cpc	r0, r21
    14a0:	08 95       	ret

000014a2 <__fp_round>:
    14a2:	09 2e       	mov	r0, r25
    14a4:	03 94       	inc	r0
    14a6:	00 0c       	add	r0, r0
    14a8:	11 f4       	brne	.+4      	; 0x14ae <__fp_round+0xc>
    14aa:	88 23       	and	r24, r24
    14ac:	52 f0       	brmi	.+20     	; 0x14c2 <__fp_round+0x20>
    14ae:	bb 0f       	add	r27, r27
    14b0:	40 f4       	brcc	.+16     	; 0x14c2 <__fp_round+0x20>
    14b2:	bf 2b       	or	r27, r31
    14b4:	11 f4       	brne	.+4      	; 0x14ba <__fp_round+0x18>
    14b6:	60 ff       	sbrs	r22, 0
    14b8:	04 c0       	rjmp	.+8      	; 0x14c2 <__fp_round+0x20>
    14ba:	6f 5f       	subi	r22, 0xFF	; 255
    14bc:	7f 4f       	sbci	r23, 0xFF	; 255
    14be:	8f 4f       	sbci	r24, 0xFF	; 255
    14c0:	9f 4f       	sbci	r25, 0xFF	; 255
    14c2:	08 95       	ret

000014c4 <__fp_split3>:
    14c4:	57 fd       	sbrc	r21, 7
    14c6:	90 58       	subi	r25, 0x80	; 128
    14c8:	44 0f       	add	r20, r20
    14ca:	55 1f       	adc	r21, r21
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <__fp_splitA+0x10>
    14ce:	5f 3f       	cpi	r21, 0xFF	; 255
    14d0:	71 f0       	breq	.+28     	; 0x14ee <__fp_splitA+0x1a>
    14d2:	47 95       	ror	r20

000014d4 <__fp_splitA>:
    14d4:	88 0f       	add	r24, r24
    14d6:	97 fb       	bst	r25, 7
    14d8:	99 1f       	adc	r25, r25
    14da:	61 f0       	breq	.+24     	; 0x14f4 <__fp_splitA+0x20>
    14dc:	9f 3f       	cpi	r25, 0xFF	; 255
    14de:	79 f0       	breq	.+30     	; 0x14fe <__fp_splitA+0x2a>
    14e0:	87 95       	ror	r24
    14e2:	08 95       	ret
    14e4:	12 16       	cp	r1, r18
    14e6:	13 06       	cpc	r1, r19
    14e8:	14 06       	cpc	r1, r20
    14ea:	55 1f       	adc	r21, r21
    14ec:	f2 cf       	rjmp	.-28     	; 0x14d2 <__fp_split3+0xe>
    14ee:	46 95       	lsr	r20
    14f0:	f1 df       	rcall	.-30     	; 0x14d4 <__fp_splitA>
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <__fp_splitA+0x30>
    14f4:	16 16       	cp	r1, r22
    14f6:	17 06       	cpc	r1, r23
    14f8:	18 06       	cpc	r1, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	f1 cf       	rjmp	.-30     	; 0x14e0 <__fp_splitA+0xc>
    14fe:	86 95       	lsr	r24
    1500:	71 05       	cpc	r23, r1
    1502:	61 05       	cpc	r22, r1
    1504:	08 94       	sec
    1506:	08 95       	ret

00001508 <__fp_zero>:
    1508:	e8 94       	clt

0000150a <__fp_szero>:
    150a:	bb 27       	eor	r27, r27
    150c:	66 27       	eor	r22, r22
    150e:	77 27       	eor	r23, r23
    1510:	cb 01       	movw	r24, r22
    1512:	97 f9       	bld	r25, 7
    1514:	08 95       	ret

00001516 <__mulsf3>:
    1516:	0b d0       	rcall	.+22     	; 0x152e <__mulsf3x>
    1518:	c4 cf       	rjmp	.-120    	; 0x14a2 <__fp_round>
    151a:	b5 df       	rcall	.-150    	; 0x1486 <__fp_pscA>
    151c:	28 f0       	brcs	.+10     	; 0x1528 <__mulsf3+0x12>
    151e:	ba df       	rcall	.-140    	; 0x1494 <__fp_pscB>
    1520:	18 f0       	brcs	.+6      	; 0x1528 <__mulsf3+0x12>
    1522:	95 23       	and	r25, r21
    1524:	09 f0       	breq	.+2      	; 0x1528 <__mulsf3+0x12>
    1526:	a6 cf       	rjmp	.-180    	; 0x1474 <__fp_inf>
    1528:	ab cf       	rjmp	.-170    	; 0x1480 <__fp_nan>
    152a:	11 24       	eor	r1, r1
    152c:	ee cf       	rjmp	.-36     	; 0x150a <__fp_szero>

0000152e <__mulsf3x>:
    152e:	ca df       	rcall	.-108    	; 0x14c4 <__fp_split3>
    1530:	a0 f3       	brcs	.-24     	; 0x151a <__mulsf3+0x4>

00001532 <__mulsf3_pse>:
    1532:	95 9f       	mul	r25, r21
    1534:	d1 f3       	breq	.-12     	; 0x152a <__mulsf3+0x14>
    1536:	95 0f       	add	r25, r21
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	55 1f       	adc	r21, r21
    153c:	62 9f       	mul	r22, r18
    153e:	f0 01       	movw	r30, r0
    1540:	72 9f       	mul	r23, r18
    1542:	bb 27       	eor	r27, r27
    1544:	f0 0d       	add	r31, r0
    1546:	b1 1d       	adc	r27, r1
    1548:	63 9f       	mul	r22, r19
    154a:	aa 27       	eor	r26, r26
    154c:	f0 0d       	add	r31, r0
    154e:	b1 1d       	adc	r27, r1
    1550:	aa 1f       	adc	r26, r26
    1552:	64 9f       	mul	r22, r20
    1554:	66 27       	eor	r22, r22
    1556:	b0 0d       	add	r27, r0
    1558:	a1 1d       	adc	r26, r1
    155a:	66 1f       	adc	r22, r22
    155c:	82 9f       	mul	r24, r18
    155e:	22 27       	eor	r18, r18
    1560:	b0 0d       	add	r27, r0
    1562:	a1 1d       	adc	r26, r1
    1564:	62 1f       	adc	r22, r18
    1566:	73 9f       	mul	r23, r19
    1568:	b0 0d       	add	r27, r0
    156a:	a1 1d       	adc	r26, r1
    156c:	62 1f       	adc	r22, r18
    156e:	83 9f       	mul	r24, r19
    1570:	a0 0d       	add	r26, r0
    1572:	61 1d       	adc	r22, r1
    1574:	22 1f       	adc	r18, r18
    1576:	74 9f       	mul	r23, r20
    1578:	33 27       	eor	r19, r19
    157a:	a0 0d       	add	r26, r0
    157c:	61 1d       	adc	r22, r1
    157e:	23 1f       	adc	r18, r19
    1580:	84 9f       	mul	r24, r20
    1582:	60 0d       	add	r22, r0
    1584:	21 1d       	adc	r18, r1
    1586:	82 2f       	mov	r24, r18
    1588:	76 2f       	mov	r23, r22
    158a:	6a 2f       	mov	r22, r26
    158c:	11 24       	eor	r1, r1
    158e:	9f 57       	subi	r25, 0x7F	; 127
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	8a f0       	brmi	.+34     	; 0x15b6 <__mulsf3_pse+0x84>
    1594:	e1 f0       	breq	.+56     	; 0x15ce <__mulsf3_pse+0x9c>
    1596:	88 23       	and	r24, r24
    1598:	4a f0       	brmi	.+18     	; 0x15ac <__mulsf3_pse+0x7a>
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	bb 1f       	adc	r27, r27
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	91 50       	subi	r25, 0x01	; 1
    15a8:	50 40       	sbci	r21, 0x00	; 0
    15aa:	a9 f7       	brne	.-22     	; 0x1596 <__mulsf3_pse+0x64>
    15ac:	9e 3f       	cpi	r25, 0xFE	; 254
    15ae:	51 05       	cpc	r21, r1
    15b0:	70 f0       	brcs	.+28     	; 0x15ce <__mulsf3_pse+0x9c>
    15b2:	60 cf       	rjmp	.-320    	; 0x1474 <__fp_inf>
    15b4:	aa cf       	rjmp	.-172    	; 0x150a <__fp_szero>
    15b6:	5f 3f       	cpi	r21, 0xFF	; 255
    15b8:	ec f3       	brlt	.-6      	; 0x15b4 <__mulsf3_pse+0x82>
    15ba:	98 3e       	cpi	r25, 0xE8	; 232
    15bc:	dc f3       	brlt	.-10     	; 0x15b4 <__mulsf3_pse+0x82>
    15be:	86 95       	lsr	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	f7 95       	ror	r31
    15c8:	e7 95       	ror	r30
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
    15cc:	c1 f7       	brne	.-16     	; 0x15be <__mulsf3_pse+0x8c>
    15ce:	fe 2b       	or	r31, r30
    15d0:	88 0f       	add	r24, r24
    15d2:	91 1d       	adc	r25, r1
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	97 f9       	bld	r25, 7
    15da:	08 95       	ret

000015dc <__divmodhi4>:
    15dc:	97 fb       	bst	r25, 7
    15de:	07 2e       	mov	r0, r23
    15e0:	16 f4       	brtc	.+4      	; 0x15e6 <__divmodhi4+0xa>
    15e2:	00 94       	com	r0
    15e4:	06 d0       	rcall	.+12     	; 0x15f2 <__divmodhi4_neg1>
    15e6:	77 fd       	sbrc	r23, 7
    15e8:	08 d0       	rcall	.+16     	; 0x15fa <__divmodhi4_neg2>
    15ea:	0b d0       	rcall	.+22     	; 0x1602 <__udivmodhi4>
    15ec:	07 fc       	sbrc	r0, 7
    15ee:	05 d0       	rcall	.+10     	; 0x15fa <__divmodhi4_neg2>
    15f0:	3e f4       	brtc	.+14     	; 0x1600 <__divmodhi4_exit>

000015f2 <__divmodhi4_neg1>:
    15f2:	90 95       	com	r25
    15f4:	81 95       	neg	r24
    15f6:	9f 4f       	sbci	r25, 0xFF	; 255
    15f8:	08 95       	ret

000015fa <__divmodhi4_neg2>:
    15fa:	70 95       	com	r23
    15fc:	61 95       	neg	r22
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001600 <__divmodhi4_exit>:
    1600:	08 95       	ret

00001602 <__udivmodhi4>:
    1602:	aa 1b       	sub	r26, r26
    1604:	bb 1b       	sub	r27, r27
    1606:	51 e1       	ldi	r21, 0x11	; 17
    1608:	07 c0       	rjmp	.+14     	; 0x1618 <__udivmodhi4_ep>

0000160a <__udivmodhi4_loop>:
    160a:	aa 1f       	adc	r26, r26
    160c:	bb 1f       	adc	r27, r27
    160e:	a6 17       	cp	r26, r22
    1610:	b7 07       	cpc	r27, r23
    1612:	10 f0       	brcs	.+4      	; 0x1618 <__udivmodhi4_ep>
    1614:	a6 1b       	sub	r26, r22
    1616:	b7 0b       	sbc	r27, r23

00001618 <__udivmodhi4_ep>:
    1618:	88 1f       	adc	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	5a 95       	dec	r21
    161e:	a9 f7       	brne	.-22     	; 0x160a <__udivmodhi4_loop>
    1620:	80 95       	com	r24
    1622:	90 95       	com	r25
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	08 95       	ret

0000162a <__tablejump2__>:
    162a:	ee 0f       	add	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	88 1f       	adc	r24, r24
    1630:	8b bf       	out	0x3b, r24	; 59
    1632:	07 90       	elpm	r0, Z+
    1634:	f6 91       	elpm	r31, Z
    1636:	e0 2d       	mov	r30, r0
    1638:	19 94       	eijmp

0000163a <_exit>:
    163a:	f8 94       	cli

0000163c <__stop_program>:
    163c:	ff cf       	rjmp	.-2      	; 0x163c <__stop_program>

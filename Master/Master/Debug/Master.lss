
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800200  00800200  00001aa4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ad4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a73  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016f0  00000000  00000000  0000582f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000199e  00000000  00000000  00006f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  000088c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001518  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d7  00000000  00000000  0000a54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000b723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	79 c3       	rjmp	.+1778   	; 0x6f8 <__vector_1>
       6:	00 00       	nop
       8:	2a c3       	rjmp	.+1620   	; 0x65e <__vector_2>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_5>
      18:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_6>
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a4 c2       	rjmp	.+1352   	; 0x586 <__vector_15>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_21>
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <__vector_25>
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c0       	rjmp	.+158    	; 0x12c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_36>
      94:	4b c0       	rjmp	.+150    	; 0x12c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c0       	rjmp	.+146    	; 0x12c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c0       	rjmp	.+142    	; 0x12c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c0       	rjmp	.+138    	; 0x12c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c0       	rjmp	.+134    	; 0x12c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5e c3       	rjmp	.+1724   	; 0x766 <__vector_42>
      aa:	00 00       	nop
      ac:	3f c0       	rjmp	.+126    	; 0x12c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c0       	rjmp	.+122    	; 0x12c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c0       	rjmp	.+118    	; 0x12c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c0       	rjmp	.+114    	; 0x12c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c0       	rjmp	.+110    	; 0x12c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c0       	rjmp	.+106    	; 0x12c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c0       	rjmp	.+102    	; 0x12c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c0       	rjmp	.+98     	; 0x12c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_51>
      d0:	2d c0       	rjmp	.+90     	; 0x12c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c0       	rjmp	.+86     	; 0x12c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_54>
      dc:	27 c0       	rjmp	.+78     	; 0x12c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c0       	rjmp	.+74     	; 0x12c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	e2 03       	fmuls	r22, r18

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	af 38       	cpi	r26, 0x8F	; 143
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c3 e7       	ldi	r28, 0x73	; 115
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__do_global_ctors+0x16>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	01 09       	sbc	r16, r1
     114:	80 2f       	mov	r24, r16
     116:	fe 01       	movw	r30, r28
     118:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__tablejump2__>
     11c:	c2 37       	cpi	r28, 0x72	; 114
     11e:	d1 07       	cpc	r29, r17
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	08 07       	cpc	r16, r24
     124:	a9 f7       	brne	.-22     	; 0x110 <__do_global_ctors+0xa>
     126:	03 d0       	rcall	.+6      	; 0x12e <main>
     128:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <main>:

#include "RobotDriver.h"

int main(void)
{
	initUART0();
     12e:	0e 94 22 0a 	call	0x1444	; 0x1444 <_Z9initUART0v>
	initUART3();
     132:	0e 94 47 0a 	call	0x148e	; 0x148e <_Z9initUART3v>
	JOYSTICK_INITIALIZE();
     136:	0e 94 2e 0a 	call	0x145c	; 0x145c <_Z9initUART2v>
	init_master();
     13a:	b8 d5       	rcall	.+2928   	; 0xcac <_Z11init_masterv>
	rack_init();
     13c:	4b d1       	rcall	.+662    	; 0x3d4 <_Z9rack_initv>
     13e:	78 94       	sei
	sei();
     140:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <auto_mode>
    while (1) 
    {
		if(auto_mode)
     144:	88 23       	and	r24, r24
     146:	11 f0       	breq	.+4      	; 0x14c <main+0x1e>
			operate_master_auto();
     148:	7c d6       	rcall	.+3320   	; 0xe42 <_Z19operate_master_autov>
     14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0x20>
		else
			operate_master_manual();
     14c:	91 d7       	rcall	.+3874   	; 0x1070 <_Z21operate_master_manualv>
     14e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <send_time>
			
		if (send_time)
     152:	88 23       	and	r24, r24
     154:	a9 f3       	breq	.-22     	; 0x140 <main+0x12>
		{
			Send_data_to_Slave();
     156:	23 d6       	rcall	.+3142   	; 0xd9e <_Z18Send_data_to_Slavev>
     158:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <send_time>
			send_time = false;
     15c:	f1 cf       	rjmp	.-30     	; 0x140 <main+0x12>

0000015e <_ZN3PID7Set_PidEfff>:
     15e:	cf 92       	push	r12


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	fc 01       	movw	r30, r24
	kp = kP;
     16c:	40 83       	st	Z, r20
     16e:	51 83       	std	Z+1, r21	; 0x01
     170:	62 83       	std	Z+2, r22	; 0x02
     172:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     174:	04 83       	std	Z+4, r16	; 0x04
     176:	15 83       	std	Z+5, r17	; 0x05
     178:	26 83       	std	Z+6, r18	; 0x06
     17a:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     17c:	c0 86       	std	Z+8, r12	; 0x08
     17e:	d1 86       	std	Z+9, r13	; 0x09
     180:	e2 86       	std	Z+10, r14	; 0x0a
     182:	f3 86       	std	Z+11, r15	; 0x0b
}
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	cf 90       	pop	r12
     190:	08 95       	ret

00000192 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     192:	8f 92       	push	r8
     194:	9f 92       	push	r9
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	ec 01       	movw	r28, r24
     1a8:	7b 01       	movw	r14, r22
	error = sp - input;
     1aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     1ac:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ae:	8b 01       	movw	r16, r22
     1b0:	0e 19       	sub	r16, r14
     1b2:	1f 09       	sbc	r17, r15
     1b4:	1f 87       	std	Y+15, r17	; 0x0f
     1b6:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     1b8:	8a 89       	ldd	r24, Y+18	; 0x12
     1ba:	9b 89       	ldd	r25, Y+19	; 0x13
     1bc:	80 0f       	add	r24, r16
     1be:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     1c0:	8e 37       	cpi	r24, 0x7E	; 126
     1c2:	91 05       	cpc	r25, r1
     1c4:	2c f0       	brlt	.+10     	; 0x1d0 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     1c6:	8d e7       	ldi	r24, 0x7D	; 125
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	9b 8b       	std	Y+19, r25	; 0x13
     1cc:	8a 8b       	std	Y+18, r24	; 0x12
     1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     1d0:	83 38       	cpi	r24, 0x83	; 131
     1d2:	2f ef       	ldi	r18, 0xFF	; 255
     1d4:	92 07       	cpc	r25, r18
     1d6:	1c f0       	brlt	.+6      	; 0x1de <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     1d8:	9b 8b       	std	Y+19, r25	; 0x13
     1da:	8a 8b       	std	Y+18, r24	; 0x12
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     1de:	83 e8       	ldi	r24, 0x83	; 131
     1e0:	9f ef       	ldi	r25, 0xFF	; 255
     1e2:	9b 8b       	std	Y+19, r25	; 0x13
     1e4:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     1e6:	6a 89       	ldd	r22, Y+18	; 0x12
     1e8:	7b 89       	ldd	r23, Y+19	; 0x13
     1ea:	07 2e       	mov	r0, r23
     1ec:	00 0c       	add	r0, r0
     1ee:	88 0b       	sbc	r24, r24
     1f0:	99 0b       	sbc	r25, r25
     1f2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__floatsisf>
     1f6:	2c 81       	ldd	r18, Y+4	; 0x04
     1f8:	3d 81       	ldd	r19, Y+5	; 0x05
     1fa:	4e 81       	ldd	r20, Y+6	; 0x06
     1fc:	5f 81       	ldd	r21, Y+7	; 0x07
     1fe:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     202:	4b 01       	movw	r8, r22
     204:	5c 01       	movw	r10, r24
     206:	b8 01       	movw	r22, r16
     208:	11 0f       	add	r17, r17
     20a:	88 0b       	sbc	r24, r24
     20c:	99 0b       	sbc	r25, r25
     20e:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__floatsisf>
     212:	28 81       	ld	r18, Y
     214:	39 81       	ldd	r19, Y+1	; 0x01
     216:	4a 81       	ldd	r20, Y+2	; 0x02
     218:	5b 81       	ldd	r21, Y+3	; 0x03
     21a:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     21e:	9b 01       	movw	r18, r22
     220:	ac 01       	movw	r20, r24
     222:	c5 01       	movw	r24, r10
     224:	b4 01       	movw	r22, r8
     226:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     22a:	4b 01       	movw	r8, r22
     22c:	5c 01       	movw	r10, r24
     22e:	88 89       	ldd	r24, Y+16	; 0x10
     230:	99 89       	ldd	r25, Y+17	; 0x11
     232:	b7 01       	movw	r22, r14
     234:	68 1b       	sub	r22, r24
     236:	79 0b       	sbc	r23, r25
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__floatsisf>
     244:	28 85       	ldd	r18, Y+8	; 0x08
     246:	39 85       	ldd	r19, Y+9	; 0x09
     248:	4a 85       	ldd	r20, Y+10	; 0x0a
     24a:	5b 85       	ldd	r21, Y+11	; 0x0b
     24c:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     250:	9b 01       	movw	r18, r22
     252:	ac 01       	movw	r20, r24
     254:	c5 01       	movw	r24, r10
     256:	b4 01       	movw	r22, r8
     258:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     25c:	2c 89       	ldd	r18, Y+20	; 0x14
     25e:	3d 89       	ldd	r19, Y+21	; 0x15
     260:	4e 89       	ldd	r20, Y+22	; 0x16
     262:	5f 89       	ldd	r21, Y+23	; 0x17
     264:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     268:	6c 8b       	std	Y+20, r22	; 0x14
     26a:	7d 8b       	std	Y+21, r23	; 0x15
     26c:	8e 8b       	std	Y+22, r24	; 0x16
     26e:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     270:	f9 8a       	std	Y+17, r15	; 0x11
     272:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	9f 90       	pop	r9
     286:	8f 90       	pop	r8
     288:	08 95       	ret

0000028a <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	af 92       	push	r10
     290:	bf 92       	push	r11
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
     2a0:	7b 01       	movw	r14, r22
	error = sp - input;
     2a2:	6c 85       	ldd	r22, Y+12	; 0x0c
     2a4:	7d 85       	ldd	r23, Y+13	; 0x0d
     2a6:	8b 01       	movw	r16, r22
     2a8:	0e 19       	sub	r16, r14
     2aa:	1f 09       	sbc	r17, r15
     2ac:	1f 87       	std	Y+15, r17	; 0x0f
     2ae:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     2b0:	8a 89       	ldd	r24, Y+18	; 0x12
     2b2:	9b 89       	ldd	r25, Y+19	; 0x13
     2b4:	80 0f       	add	r24, r16
     2b6:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     2b8:	8e 37       	cpi	r24, 0x7E	; 126
     2ba:	91 05       	cpc	r25, r1
     2bc:	2c f0       	brlt	.+10     	; 0x2c8 <_ZN3PID13angle_ComputeEi+0x3e>
	errorsum = 125;
     2be:	8d e7       	ldi	r24, 0x7D	; 125
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	9b 8b       	std	Y+19, r25	; 0x13
     2c4:	8a 8b       	std	Y+18, r24	; 0x12
     2c6:	0b c0       	rjmp	.+22     	; 0x2de <_ZN3PID13angle_ComputeEi+0x54>
	else if (errorsum < -125)
     2c8:	83 38       	cpi	r24, 0x83	; 131
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	92 07       	cpc	r25, r18
     2ce:	1c f0       	brlt	.+6      	; 0x2d6 <_ZN3PID13angle_ComputeEi+0x4c>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     2d0:	9b 8b       	std	Y+19, r25	; 0x13
     2d2:	8a 8b       	std	Y+18, r24	; 0x12
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <_ZN3PID13angle_ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
     2d6:	83 e8       	ldi	r24, 0x83	; 131
     2d8:	9f ef       	ldi	r25, 0xFF	; 255
     2da:	9b 8b       	std	Y+19, r25	; 0x13
     2dc:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
     2de:	6a 89       	ldd	r22, Y+18	; 0x12
     2e0:	7b 89       	ldd	r23, Y+19	; 0x13
     2e2:	07 2e       	mov	r0, r23
     2e4:	00 0c       	add	r0, r0
     2e6:	88 0b       	sbc	r24, r24
     2e8:	99 0b       	sbc	r25, r25
     2ea:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__floatsisf>
     2ee:	2c 81       	ldd	r18, Y+4	; 0x04
     2f0:	3d 81       	ldd	r19, Y+5	; 0x05
     2f2:	4e 81       	ldd	r20, Y+6	; 0x06
     2f4:	5f 81       	ldd	r21, Y+7	; 0x07
     2f6:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     2fa:	4b 01       	movw	r8, r22
     2fc:	5c 01       	movw	r10, r24
     2fe:	b8 01       	movw	r22, r16
     300:	11 0f       	add	r17, r17
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__floatsisf>
     30a:	28 81       	ld	r18, Y
     30c:	39 81       	ldd	r19, Y+1	; 0x01
     30e:	4a 81       	ldd	r20, Y+2	; 0x02
     310:	5b 81       	ldd	r21, Y+3	; 0x03
     312:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     316:	9b 01       	movw	r18, r22
     318:	ac 01       	movw	r20, r24
     31a:	c5 01       	movw	r24, r10
     31c:	b4 01       	movw	r22, r8
     31e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__addsf3>
     322:	4b 01       	movw	r8, r22
     324:	5c 01       	movw	r10, r24
     326:	88 89       	ldd	r24, Y+16	; 0x10
     328:	99 89       	ldd	r25, Y+17	; 0x11
     32a:	b7 01       	movw	r22, r14
     32c:	68 1b       	sub	r22, r24
     32e:	79 0b       	sbc	r23, r25
     330:	07 2e       	mov	r0, r23
     332:	00 0c       	add	r0, r0
     334:	88 0b       	sbc	r24, r24
     336:	99 0b       	sbc	r25, r25
     338:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__floatsisf>
     33c:	28 85       	ldd	r18, Y+8	; 0x08
     33e:	39 85       	ldd	r19, Y+9	; 0x09
     340:	4a 85       	ldd	r20, Y+10	; 0x0a
     342:	5b 85       	ldd	r21, Y+11	; 0x0b
     344:	0e 94 84 0c 	call	0x1908	; 0x1908 <__mulsf3>
     348:	9b 01       	movw	r18, r22
     34a:	ac 01       	movw	r20, r24
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__subsf3>
     354:	6c 8b       	std	Y+20, r22	; 0x14
     356:	7d 8b       	std	Y+21, r23	; 0x15
     358:	8e 8b       	std	Y+22, r24	; 0x16
     35a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     35c:	f9 8a       	std	Y+17, r15	; 0x11
     35e:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	bf 90       	pop	r11
     36e:	af 90       	pop	r10
     370:	9f 90       	pop	r9
     372:	8f 90       	pop	r8
     374:	08 95       	ret

00000376 <_Z21initialise_timeperiodv>:

//initialize global timer

void initialise_timeperiod()
{
	TCCR2B |= (1<<CS22);
     376:	e1 eb       	ldi	r30, 0xB1	; 177
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
     380:	e0 e7       	ldi	r30, 0x70	; 112
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	81 60       	ori	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
	TCNT2 = 0;
     38a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     38e:	08 95       	ret

00000390 <_Z20close_all_pneumaticsv>:
	
}

void close_all_pneumatics()
{
	RACK_GRIP_OPEN();
     390:	10 98       	cbi	0x02, 0	; 2
	RACK_LIFT_CLOSE();
     392:	14 98       	cbi	0x02, 4	; 2
	SHUTTCOCK_GRIP_CLOSE();
     394:	47 98       	cbi	0x08, 7	; 8
	SHUTTCOCK_PASS_CLOSE();
     396:	16 98       	cbi	0x02, 6	; 2
     398:	08 95       	ret

0000039a <_Z21initialize_pneumaticsv>:
}

void initialize_pneumatics()
{
	OUTPUT(RACK_GRAB);
     39a:	08 9a       	sbi	0x01, 0	; 1
	OUTPUT(LIFT_RACK);
     39c:	0c 9a       	sbi	0x01, 4	; 1
	OUTPUT(SC_PASS);
     39e:	0e 9a       	sbi	0x01, 6	; 1
	OUTPUT(SC_GRIPPER);
     3a0:	3f 9a       	sbi	0x07, 7	; 7
	close_all_pneumatics();
     3a2:	f6 cf       	rjmp	.-20     	; 0x390 <_Z20close_all_pneumaticsv>
     3a4:	08 95       	ret

000003a6 <_Z16enable_proximityv>:
}

void enable_proximity()
{
	EICRB |= (1<<PROXIMITY_ISC1);	//falling edge
     3a6:	ea e6       	ldi	r30, 0x6A	; 106
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	80 83       	st	Z, r24
	EIMSK |= (1<<PROXIMITY_INT);		//setting INT pin
     3b0:	ed 9a       	sbi	0x1d, 5	; 29
	EIFR |= (1<<PROXIMITY_INTF);	    //clear int flag
     3b2:	e5 9a       	sbi	0x1c, 5	; 28
     3b4:	08 95       	ret

000003b6 <_Z17disable_proximityv>:
}

void disable_proximity()
{
	EIMSK &= ~(1<<PROXIMITY_INT);		//setting INT pin
     3b6:	ed 98       	cbi	0x1d, 5	; 29
	EIFR |= (1<<PROXIMITY_INTF);	    //clear int flag
     3b8:	e5 9a       	sbi	0x1c, 5	; 28
     3ba:	08 95       	ret

000003bc <_Z6millisv>:
//calculate the time from begining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     3bc:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
     3be:	f8 94       	cli
	m = timer2_millis;
     3c0:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <timer2_millis>
     3c4:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <timer2_millis+0x1>
     3c8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer2_millis+0x2>
     3cc:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer2_millis+0x3>
	SREG = oldSREG;
     3d0:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
     3d2:	08 95       	ret

000003d4 <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
     3d4:	cf 92       	push	r12
     3d6:	df 92       	push	r13
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
	
	Geneva_Start = false;
     3e0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Geneva_Start>
	auto_move_rack = false;
     3e4:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
	donotstop = false;
     3e8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <donotstop>
	throw_rack = false;
     3ec:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <throw_rack>
	rack_throw_auto = false;
     3f0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rack_throw_auto>
	pneumatic_geneva_start = false;
     3f4:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
	inside_robot = true;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
    pass_the_shuttcock = false;
     3fe:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
	pid_compute_flag = false;
     402:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	
	pneumatic_geneva_time = 0;
     406:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pneumatic_geneva_time>
     40a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pneumatic_geneva_time+0x1>
     40e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <pneumatic_geneva_time+0x2>
     412:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <pneumatic_geneva_time+0x3>
	send_time = false;
     416:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <send_time>
	
	
	
	RackMotor.Initialise(1);
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	8b e6       	ldi	r24, 0x6B	; 107
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	f1 d2       	rcall	.+1506   	; 0xa04 <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
     422:	62 e0       	ldi	r22, 0x02	; 2
     424:	8a e6       	ldi	r24, 0x6A	; 106
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	ed d2       	rcall	.+1498   	; 0xa04 <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	8d e5       	ldi	r24, 0x5D	; 93
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	48 d2       	rcall	.+1168   	; 0x8c2 <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
     432:	62 e0       	ldi	r22, 0x02	; 2
     434:	80 e5       	ldi	r24, 0x50	; 80
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	44 d2       	rcall	.+1160   	; 0x8c2 <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LTSWITCH_RACK_HOME);
     43a:	24 98       	cbi	0x04, 4	; 4
	INPUT(LTSWITCH_RACK_FINAL);
     43c:	e1 e0       	ldi	r30, 0x01	; 1
     43e:	f1 e0       	ldi	r31, 0x01	; 1
     440:	80 81       	ld	r24, Z
     442:	8f 7b       	andi	r24, 0xBF	; 191
     444:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_FINAL);
     446:	e2 e0       	ldi	r30, 0x02	; 2
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	80 81       	ld	r24, Z
     44c:	80 64       	ori	r24, 0x40	; 64
	SET(LTSWITCH_RACK_HOME);
     44e:	80 83       	st	Z, r24
	
	initialize_pneumatics();
     450:	2c 9a       	sbi	0x05, 4	; 5
     452:	a3 df       	rcall	.-186    	; 0x39a <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     454:	1c 9b       	sbis	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     456:	07 c0       	rjmp	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     458:	69 ef       	ldi	r22, 0xF9	; 249
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	8b e6       	ldi	r24, 0x6B	; 107
     45e:	92 e0       	ldi	r25, 0x02	; 2
	SET(LTSWITCH_RACK_HOME);
	
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     460:	a6 d2       	rcall	.+1356   	; 0x9ae <_ZN10Rack_Motor11SetOcrValueEi>
     462:	1c 99       	sbic	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	previous_time = millis();
     464:	f9 cf       	rjmp	.-14     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     466:	aa df       	rcall	.-172    	; 0x3bc <_Z6millisv>
     468:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <previous_time>
     46c:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <previous_time+0x1>
     470:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <previous_time+0x2>
     474:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <previous_time+0x3>
	
	RackMotor.StopMotor();
     478:	8b e6       	ldi	r24, 0x6B	; 107
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	83 d2       	rcall	.+1286   	; 0x984 <_ZN10Rack_Motor9StopMotorEv>
	
	RackEncoder.angle =0;
     47e:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <RackEncoder+0x9>
     482:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <RackEncoder+0xa>
     486:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <RackEncoder+0xb>
     48a:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0xc>
	
	Rack_home_position = true;		// true rack home-position -- initial position and false rack position -- final position
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Rack_home_position>
	angle_pid.Set_Pid(47.29,0.139,29.30);
     494:	0f 2e       	mov	r0, r31
     496:	f6 e6       	ldi	r31, 0x66	; 102
     498:	cf 2e       	mov	r12, r31
     49a:	dc 2c       	mov	r13, r12
     49c:	fa ee       	ldi	r31, 0xEA	; 234
     49e:	ef 2e       	mov	r14, r31
     4a0:	f1 e4       	ldi	r31, 0x41	; 65
     4a2:	ff 2e       	mov	r15, r31
     4a4:	f0 2d       	mov	r31, r0
     4a6:	04 e0       	ldi	r16, 0x04	; 4
     4a8:	16 e5       	ldi	r17, 0x56	; 86
     4aa:	2e e0       	ldi	r18, 0x0E	; 14
     4ac:	3e e3       	ldi	r19, 0x3E	; 62
     4ae:	46 ef       	ldi	r20, 0xF6	; 246
     4b0:	58 e2       	ldi	r21, 0x28	; 40
     4b2:	6d e3       	ldi	r22, 0x3D	; 61
     4b4:	72 e4       	ldi	r23, 0x42	; 66
     4b6:	8b e2       	ldi	r24, 0x2B	; 43
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	51 de       	rcall	.-862    	; 0x15e <_ZN3PID7Set_PidEfff>
	rack_motor_pid.Set_Pid(10.67,0,6.89);
     4bc:	0f 2e       	mov	r0, r31
     4be:	f1 ee       	ldi	r31, 0xE1	; 225
     4c0:	cf 2e       	mov	r12, r31
     4c2:	fa e7       	ldi	r31, 0x7A	; 122
     4c4:	df 2e       	mov	r13, r31
     4c6:	fc ed       	ldi	r31, 0xDC	; 220
     4c8:	ef 2e       	mov	r14, r31
     4ca:	f0 e4       	ldi	r31, 0x40	; 64
     4cc:	ff 2e       	mov	r15, r31
     4ce:	f0 2d       	mov	r31, r0
     4d0:	00 e0       	ldi	r16, 0x00	; 0
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	98 01       	movw	r18, r16
     4d6:	42 e5       	ldi	r20, 0x52	; 82
     4d8:	58 eb       	ldi	r21, 0xB8	; 184
     4da:	6a e2       	ldi	r22, 0x2A	; 42
     4dc:	71 e4       	ldi	r23, 0x41	; 65
     4de:	83 e1       	ldi	r24, 0x13	; 19
     4e0:	92 e0       	ldi	r25, 0x02	; 2
	
	//Setting the proximity pins
	INPUT(PROXIMITY_PIN);
     4e2:	3d de       	rcall	.-902    	; 0x15e <_ZN3PID7Set_PidEfff>
	SET(PROXIMITY_PIN);
     4e4:	6d 98       	cbi	0x0d, 5	; 13
	
	initialise_timeperiod();
     4e6:	75 9a       	sbi	0x0e, 5	; 14
     4e8:	46 df       	rcall	.-372    	; 0x376 <_Z21initialise_timeperiodv>
}
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	08 95       	ret

000004f8 <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && !Rack_home_position )	//if reached home position
     4f8:	1c 99       	sbic	0x03, 4	; 3
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <_Z16rack_limit_checkv+0xc>
     4fc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     500:	88 23       	and	r24, r24
     502:	89 f0       	breq	.+34     	; 0x526 <_Z16rack_limit_checkv+0x2e>
		auto_move_rack = false;
		throw_rack = true;
		previous_time = millis();
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && auto_move_rack && donotstop  )		//reached final position
     504:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     508:	86 fd       	sbrc	r24, 6
     50a:	3c c0       	rjmp	.+120    	; 0x584 <_Z16rack_limit_checkv+0x8c>
     50c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
     510:	88 23       	and	r24, r24
     512:	c1 f1       	breq	.+112    	; 0x584 <_Z16rack_limit_checkv+0x8c>
     514:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <donotstop>
     518:	81 11       	cpse	r24, r1
     51a:	25 c0       	rjmp	.+74     	; 0x566 <_Z16rack_limit_checkv+0x6e>
     51c:	08 95       	ret
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
		donotstop = false;
		if (rack_throw_auto)
		{
			RACK_LIFT_CLOSE();
     51e:	14 98       	cbi	0x02, 4	; 2
			rack_throw_auto = false;
     520:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rack_throw_auto>
		}
	}
	
}
     524:	08 95       	ret
void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && !Rack_home_position )	//if reached home position
	{
		RackMotor.StopMotor();
     526:	8b e6       	ldi	r24, 0x6B	; 107
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	2c d2       	rcall	.+1112   	; 0x984 <_ZN10Rack_Motor9StopMotorEv>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     52c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
     530:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(0);
		Rack_home_position = true;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Rack_home_position>
		RackEncoder.angle = 0;
     53a:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <RackEncoder+0x9>
     53e:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <RackEncoder+0xa>
     542:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <RackEncoder+0xb>
     546:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0xc>
		auto_move_rack = false;
     54a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
		throw_rack = true;
     54e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <throw_rack>
		previous_time = millis();
     552:	34 df       	rcall	.-408    	; 0x3bc <_Z6millisv>
     554:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <previous_time>
     558:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <previous_time+0x1>
     55c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <previous_time+0x2>
     560:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <previous_time+0x3>
     564:	cf cf       	rjmp	.-98     	; 0x504 <_Z16rack_limit_checkv+0xc>
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && auto_move_rack && donotstop  )		//reached final position
	{
		RackMotor.StopMotor();
     566:	8b e6       	ldi	r24, 0x6B	; 107
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0c d2       	rcall	.+1048   	; 0x984 <_ZN10Rack_Motor9StopMotorEv>
     56c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
     570:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     574:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
		donotstop = false;
     578:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <donotstop>
		if (rack_throw_auto)
     57c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     580:	81 11       	cpse	r24, r1
     582:	cd cf       	rjmp	.-102    	; 0x51e <_Z16rack_limit_checkv+0x26>
     584:	08 95       	ret

00000586 <__vector_15>:



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
	timer2_millis += 1;
     598:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timer2_millis>
     59c:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timer2_millis+0x1>
     5a0:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timer2_millis+0x2>
     5a4:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timer2_millis+0x3>
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	a1 1d       	adc	r26, r1
     5ac:	b1 1d       	adc	r27, r1
     5ae:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer2_millis>
     5b2:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timer2_millis+0x1>
     5b6:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timer2_millis+0x2>
     5ba:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timer2_millis+0x3>
	timer2_fract += 3;
     5be:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5c2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     5c6:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     5ca:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     5ce:	03 96       	adiw	r24, 0x03	; 3
     5d0:	a1 1d       	adc	r26, r1
     5d2:	b1 1d       	adc	r27, r1
     5d4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer2_fract>
     5d8:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer2_fract+0x1>
     5dc:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer2_fract+0x2>
     5e0:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer2_fract+0x3>
	if (timer2_fract >= 125) {
     5e4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5e8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     5ec:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     5f0:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     5f4:	8d 37       	cpi	r24, 0x7D	; 125
     5f6:	91 05       	cpc	r25, r1
     5f8:	a1 05       	cpc	r26, r1
     5fa:	b1 05       	cpc	r27, r1
     5fc:	38 f1       	brcs	.+78     	; 0x64c <__vector_15+0xc6>
		timer2_fract -= 125;
     5fe:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     602:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     606:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     60a:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     60e:	8d 57       	subi	r24, 0x7D	; 125
     610:	91 09       	sbc	r25, r1
     612:	a1 09       	sbc	r26, r1
     614:	b1 09       	sbc	r27, r1
     616:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer2_fract>
     61a:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer2_fract+0x1>
     61e:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer2_fract+0x2>
     622:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer2_fract+0x3>
		timer2_millis += 1;
     626:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timer2_millis>
     62a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timer2_millis+0x1>
     62e:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timer2_millis+0x2>
     632:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timer2_millis+0x3>
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	a1 1d       	adc	r26, r1
     63a:	b1 1d       	adc	r27, r1
     63c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer2_millis>
     640:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timer2_millis+0x1>
     644:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timer2_millis+0x2>
     648:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timer2_millis+0x3>
	}
}
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	0f 90       	pop	r0
     656:	0f be       	out	0x3f, r0	; 63
     658:	0f 90       	pop	r0
     65a:	1f 90       	pop	r1
     65c:	18 95       	reti

0000065e <__vector_2>:

ISR(INT_VECTR)
{
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
	if(bit_is_clear(ENCODERR_CHAPORTPIN,ENCODERR_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     678:	95 99       	sbic	0x12, 5	; 18
     67a:	19 c0       	rjmp	.+50     	; 0x6ae <__vector_2+0x50>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     67c:	ed e5       	ldi	r30, 0x5D	; 93
     67e:	f2 e0       	ldi	r31, 0x02	; 2
     680:	85 81       	ldd	r24, Z+5	; 0x05
     682:	96 81       	ldd	r25, Z+6	; 0x06
     684:	a7 81       	ldd	r26, Z+7	; 0x07
     686:	b0 85       	ldd	r27, Z+8	; 0x08
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	a1 1d       	adc	r26, r1
     68c:	b1 1d       	adc	r27, r1
     68e:	85 83       	std	Z+5, r24	; 0x05
     690:	96 83       	std	Z+6, r25	; 0x06
     692:	a7 83       	std	Z+7, r26	; 0x07
     694:	b0 87       	std	Z+8, r27	; 0x08
	{
		RackEncoder.incCount();
		RackEncoder.angle++;
     696:	81 85       	ldd	r24, Z+9	; 0x09
     698:	92 85       	ldd	r25, Z+10	; 0x0a
     69a:	a3 85       	ldd	r26, Z+11	; 0x0b
     69c:	b4 85       	ldd	r27, Z+12	; 0x0c
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	a1 1d       	adc	r26, r1
     6a2:	b1 1d       	adc	r27, r1
     6a4:	81 87       	std	Z+9, r24	; 0x09
     6a6:	92 87       	std	Z+10, r25	; 0x0a
     6a8:	a3 87       	std	Z+11, r26	; 0x0b
     6aa:	b4 87       	std	Z+12, r27	; 0x0c
     6ac:	18 c0       	rjmp	.+48     	; 0x6de <__vector_2+0x80>
	inline void dcrCount(){pprcount--;};
     6ae:	ed e5       	ldi	r30, 0x5D	; 93
     6b0:	f2 e0       	ldi	r31, 0x02	; 2
     6b2:	85 81       	ldd	r24, Z+5	; 0x05
     6b4:	96 81       	ldd	r25, Z+6	; 0x06
     6b6:	a7 81       	ldd	r26, Z+7	; 0x07
     6b8:	b0 85       	ldd	r27, Z+8	; 0x08
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	a1 09       	sbc	r26, r1
     6be:	b1 09       	sbc	r27, r1
     6c0:	85 83       	std	Z+5, r24	; 0x05
     6c2:	96 83       	std	Z+6, r25	; 0x06
     6c4:	a7 83       	std	Z+7, r26	; 0x07
     6c6:	b0 87       	std	Z+8, r27	; 0x08
	}
	else
	{
		RackEncoder.dcrCount();
		RackEncoder.angle--;
     6c8:	81 85       	ldd	r24, Z+9	; 0x09
     6ca:	92 85       	ldd	r25, Z+10	; 0x0a
     6cc:	a3 85       	ldd	r26, Z+11	; 0x0b
     6ce:	b4 85       	ldd	r27, Z+12	; 0x0c
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	a1 09       	sbc	r26, r1
     6d4:	b1 09       	sbc	r27, r1
     6d6:	81 87       	std	Z+9, r24	; 0x09
     6d8:	92 87       	std	Z+10, r25	; 0x0a
     6da:	a3 87       	std	Z+11, r26	; 0x0b
     6dc:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	bf 91       	pop	r27
     6e4:	af 91       	pop	r26
     6e6:	9f 91       	pop	r25
     6e8:	8f 91       	pop	r24
     6ea:	0f 90       	pop	r0
     6ec:	0b be       	out	0x3b, r0	; 59
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <__vector_1>:

ISR(INT_VECTG)
{
     6f8:	1f 92       	push	r1
     6fa:	0f 92       	push	r0
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	0b b6       	in	r0, 0x3b	; 59
     704:	0f 92       	push	r0
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	if(bit_is_clear(ENCODERG_CHAPORTPIN,ENCODERG_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     712:	63 99       	sbic	0x0c, 3	; 12
     714:	0e c0       	rjmp	.+28     	; 0x732 <__vector_1+0x3a>
	{
		GenevaEncoder.angle++;
     716:	e0 e5       	ldi	r30, 0x50	; 80
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	81 85       	ldd	r24, Z+9	; 0x09
     71c:	92 85       	ldd	r25, Z+10	; 0x0a
     71e:	a3 85       	ldd	r26, Z+11	; 0x0b
     720:	b4 85       	ldd	r27, Z+12	; 0x0c
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	a1 1d       	adc	r26, r1
     726:	b1 1d       	adc	r27, r1
     728:	81 87       	std	Z+9, r24	; 0x09
     72a:	92 87       	std	Z+10, r25	; 0x0a
     72c:	a3 87       	std	Z+11, r26	; 0x0b
     72e:	b4 87       	std	Z+12, r27	; 0x0c
     730:	0d c0       	rjmp	.+26     	; 0x74c <__vector_1+0x54>
		
	}
	else
	{
		GenevaEncoder.angle--;
     732:	e0 e5       	ldi	r30, 0x50	; 80
     734:	f2 e0       	ldi	r31, 0x02	; 2
     736:	81 85       	ldd	r24, Z+9	; 0x09
     738:	92 85       	ldd	r25, Z+10	; 0x0a
     73a:	a3 85       	ldd	r26, Z+11	; 0x0b
     73c:	b4 85       	ldd	r27, Z+12	; 0x0c
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	a1 09       	sbc	r26, r1
     742:	b1 09       	sbc	r27, r1
     744:	81 87       	std	Z+9, r24	; 0x09
     746:	92 87       	std	Z+10, r25	; 0x0a
     748:	a3 87       	std	Z+11, r26	; 0x0b
     74a:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     74c:	ff 91       	pop	r31
     74e:	ef 91       	pop	r30
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <__vector_42>:


ISR(TIMER4_COMPA_vect)
{
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	0b b6       	in	r0, 0x3b	; 59
     772:	0f 92       	push	r0
     774:	4f 93       	push	r20
     776:	5f 93       	push	r21
     778:	6f 93       	push	r22
     77a:	7f 93       	push	r23
     77c:	8f 93       	push	r24
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	pid_compute_flag = true;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;}; //keep in timer compare match
     788:	ed e5       	ldi	r30, 0x5D	; 93
     78a:	f2 e0       	ldi	r31, 0x02	; 2
     78c:	45 81       	ldd	r20, Z+5	; 0x05
     78e:	56 81       	ldd	r21, Z+6	; 0x06
     790:	67 81       	ldd	r22, Z+7	; 0x07
     792:	70 85       	ldd	r23, Z+8	; 0x08
     794:	41 83       	std	Z+1, r20	; 0x01
     796:	52 83       	std	Z+2, r21	; 0x02
     798:	63 83       	std	Z+3, r22	; 0x03
     79a:	74 83       	std	Z+4, r23	; 0x04
     79c:	15 82       	std	Z+5, r1	; 0x05
     79e:	16 82       	std	Z+6, r1	; 0x06
     7a0:	17 82       	std	Z+7, r1	; 0x07
     7a2:	10 86       	std	Z+8, r1	; 0x08
	RackEncoder.Calc_Speed();
	send_time = true;
     7a4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <send_time>
}
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	8f 91       	pop	r24
     7ae:	7f 91       	pop	r23
     7b0:	6f 91       	pop	r22
     7b2:	5f 91       	pop	r21
     7b4:	4f 91       	pop	r20
     7b6:	0f 90       	pop	r0
     7b8:	0b be       	out	0x3b, r0	; 59
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	long int angle;
	
	Rack_Encoder():speed(0),pprcount(0),angle(0){};
     7c4:	ed e5       	ldi	r30, 0x5D	; 93
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	12 82       	std	Z+2, r1	; 0x02
     7cc:	13 82       	std	Z+3, r1	; 0x03
     7ce:	14 82       	std	Z+4, r1	; 0x04
     7d0:	15 82       	std	Z+5, r1	; 0x05
     7d2:	16 82       	std	Z+6, r1	; 0x06
     7d4:	17 82       	std	Z+7, r1	; 0x07
     7d6:	10 86       	std	Z+8, r1	; 0x08
     7d8:	11 86       	std	Z+9, r1	; 0x09
     7da:	12 86       	std	Z+10, r1	; 0x0a
     7dc:	13 86       	std	Z+11, r1	; 0x0b
     7de:	14 86       	std	Z+12, r1	; 0x0c
     7e0:	e0 e5       	ldi	r30, 0x50	; 80
     7e2:	f2 e0       	ldi	r31, 0x02	; 2
     7e4:	11 82       	std	Z+1, r1	; 0x01
     7e6:	12 82       	std	Z+2, r1	; 0x02
     7e8:	13 82       	std	Z+3, r1	; 0x03
     7ea:	14 82       	std	Z+4, r1	; 0x04
     7ec:	15 82       	std	Z+5, r1	; 0x05
     7ee:	16 82       	std	Z+6, r1	; 0x06
     7f0:	17 82       	std	Z+7, r1	; 0x07
     7f2:	10 86       	std	Z+8, r1	; 0x08
     7f4:	11 86       	std	Z+9, r1	; 0x09
     7f6:	12 86       	std	Z+10, r1	; 0x0a
     7f8:	13 86       	std	Z+11, r1	; 0x0b
     7fa:	14 86       	std	Z+12, r1	; 0x0c
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     7fc:	eb e2       	ldi	r30, 0x2B	; 43
     7fe:	f2 e0       	ldi	r31, 0x02	; 2
     800:	10 82       	st	Z, r1
     802:	11 82       	std	Z+1, r1	; 0x01
     804:	12 82       	std	Z+2, r1	; 0x02
     806:	13 82       	std	Z+3, r1	; 0x03
     808:	14 82       	std	Z+4, r1	; 0x04
     80a:	15 82       	std	Z+5, r1	; 0x05
     80c:	16 82       	std	Z+6, r1	; 0x06
     80e:	17 82       	std	Z+7, r1	; 0x07
     810:	10 86       	std	Z+8, r1	; 0x08
     812:	11 86       	std	Z+9, r1	; 0x09
     814:	12 86       	std	Z+10, r1	; 0x0a
     816:	13 86       	std	Z+11, r1	; 0x0b
     818:	15 86       	std	Z+13, r1	; 0x0d
     81a:	14 86       	std	Z+12, r1	; 0x0c
     81c:	17 86       	std	Z+15, r1	; 0x0f
     81e:	16 86       	std	Z+14, r1	; 0x0e
     820:	11 8a       	std	Z+17, r1	; 0x11
     822:	10 8a       	std	Z+16, r1	; 0x10
     824:	13 8a       	std	Z+19, r1	; 0x13
     826:	12 8a       	std	Z+18, r1	; 0x12
     828:	e3 e1       	ldi	r30, 0x13	; 19
     82a:	f2 e0       	ldi	r31, 0x02	; 2
     82c:	10 82       	st	Z, r1
     82e:	11 82       	std	Z+1, r1	; 0x01
     830:	12 82       	std	Z+2, r1	; 0x02
     832:	13 82       	std	Z+3, r1	; 0x03
     834:	14 82       	std	Z+4, r1	; 0x04
     836:	15 82       	std	Z+5, r1	; 0x05
     838:	16 82       	std	Z+6, r1	; 0x06
     83a:	17 82       	std	Z+7, r1	; 0x07
     83c:	10 86       	std	Z+8, r1	; 0x08
     83e:	11 86       	std	Z+9, r1	; 0x09
     840:	12 86       	std	Z+10, r1	; 0x0a
     842:	13 86       	std	Z+11, r1	; 0x0b
     844:	15 86       	std	Z+13, r1	; 0x0d
     846:	14 86       	std	Z+12, r1	; 0x0c
     848:	17 86       	std	Z+15, r1	; 0x0f
     84a:	16 86       	std	Z+14, r1	; 0x0e
     84c:	11 8a       	std	Z+17, r1	; 0x11
     84e:	10 8a       	std	Z+16, r1	; 0x10
     850:	13 8a       	std	Z+19, r1	; 0x13
     852:	12 8a       	std	Z+18, r1	; 0x12
     854:	08 95       	ret

00000856 <_ZN12Rack_Encoder11Init_TimersEv>:
}

void Rack_Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     856:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     85a:	81 11       	cpse	r24, r1
     85c:	17 c0       	rjmp	.+46     	; 0x88c <_ZN12Rack_Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     85e:	e1 ea       	ldi	r30, 0xA1	; 161
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	8b 60       	ori	r24, 0x0B	; 11
     866:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     868:	e2 e7       	ldi	r30, 0x72	; 114
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	82 60       	ori	r24, 0x02	; 2
     870:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     872:	88 e8       	ldi	r24, 0x88	; 136
     874:	93 e1       	ldi	r25, 0x13	; 19
     876:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     87a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     87e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     882:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     88c:	08 95       	ret

0000088e <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
     88e:	78 94       	sei
	if (no==1)
     890:	fc 01       	movw	r30, r24
     892:	20 81       	ld	r18, Z
     894:	21 30       	cpi	r18, 0x01	; 1
     896:	49 f4       	brne	.+18     	; 0x8aa <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODERR_INT);
     898:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INTR_ISC1);	//falling edge
     89a:	e9 e6       	ldi	r30, 0x69	; 105
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	20 81       	ld	r18, Z
     8a0:	28 60       	ori	r18, 0x08	; 8
     8a2:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERR_INT);		//setting INT pin
     8a4:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INTR_INTF);	    //clear int flag
     8a6:	e1 9a       	sbi	0x1c, 1	; 28
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	}
	else if (no==2)
     8aa:	22 30       	cpi	r18, 0x02	; 2
     8ac:	41 f4       	brne	.+16     	; 0x8be <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODERG_INT);
     8ae:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INTG_ISC1);	//falling edge
     8b0:	e9 e6       	ldi	r30, 0x69	; 105
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	20 81       	ld	r18, Z
     8b6:	22 60       	ori	r18, 0x02	; 2
     8b8:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERG_INT);		//setting INT pin
     8ba:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INTG_INTF);	    //clear int flag
     8bc:	e0 9a       	sbi	0x1c, 0	; 28
	}
	Init_Timers();
     8be:	cb cf       	rjmp	.-106    	; 0x856 <_ZN12Rack_Encoder11Init_TimersEv>
     8c0:	08 95       	ret

000008c2 <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
     8c2:	fc 01       	movw	r30, r24
     8c4:	60 83       	st	Z, r22
	if(no==1)
     8c6:	61 30       	cpi	r22, 0x01	; 1
     8c8:	29 f4       	brne	.+10     	; 0x8d4 <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODERR_CHANNELA);
     8ca:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODERR_CHANNELB);
     8cc:	9d 98       	cbi	0x13, 5	; 19
		SET(ENCODERR_CHANNELA);
     8ce:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODERR_CHANNELB);
     8d0:	a5 9a       	sbi	0x14, 5	; 20
     8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
     8d4:	62 30       	cpi	r22, 0x02	; 2
     8d6:	21 f4       	brne	.+8      	; 0x8e0 <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODERG_CHANNELA);
     8d8:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODERG_CHANNELB);
     8da:	6b 98       	cbi	0x0d, 3	; 13
		SET(ENCODERG_CHANNELA);
     8dc:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODERG_CHANNELB);
     8de:	73 9a       	sbi	0x0e, 3	; 14
	}
	Init_Interrupts();
     8e0:	d6 cf       	rjmp	.-84     	; 0x88e <_ZN12Rack_Encoder15Init_InterruptsEv>
     8e2:	08 95       	ret

000008e4 <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	c1 f4       	brne	.+48     	; 0x91c <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
     8ec:	0b 9a       	sbi	0x01, 3	; 1
		OUTPUT(DD_B5);
     8ee:	09 9a       	sbi	0x01, 1	; 1

		OUTPUT(DD_PWM5);
     8f0:	ea e0       	ldi	r30, 0x0A	; 10
     8f2:	f1 e0       	ldi	r31, 0x01	; 1
     8f4:	80 81       	ld	r24, Z
     8f6:	80 62       	ori	r24, 0x20	; 32
     8f8:	80 83       	st	Z, r24

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
     8fa:	e0 e2       	ldi	r30, 0x20	; 32
     8fc:	f1 e0       	ldi	r31, 0x01	; 1
     8fe:	80 81       	ld	r24, Z
     900:	8a 60       	ori	r24, 0x0A	; 10
     902:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
     904:	e1 e2       	ldi	r30, 0x21	; 33
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	80 81       	ld	r24, Z
     90a:	8a 61       	ori	r24, 0x1A	; 26
     90c:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
     90e:	89 ef       	ldi	r24, 0xF9	; 249
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     916:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     91a:	08 95       	ret
	}
	else if(num==2)
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	b9 f4       	brne	.+46     	; 0x94e <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
     920:	0f 9a       	sbi	0x01, 7	; 1
		OUTPUT(DD_B6);
     922:	0d 9a       	sbi	0x01, 5	; 1

		OUTPUT(DD_PWM6);
     924:	ea e0       	ldi	r30, 0x0A	; 10
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	80 81       	ld	r24, Z
     92a:	80 61       	ori	r24, 0x10	; 16
     92c:	80 83       	st	Z, r24

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
     92e:	e0 e2       	ldi	r30, 0x20	; 32
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	80 81       	ld	r24, Z
     934:	82 62       	ori	r24, 0x22	; 34
     936:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
     938:	e1 e2       	ldi	r30, 0x21	; 33
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	80 81       	ld	r24, Z
     93e:	8a 61       	ori	r24, 0x1A	; 26
     940:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
     942:	89 ef       	ldi	r24, 0xF9	; 249
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     94a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     94e:	08 95       	ret

00000950 <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	19 f0       	breq	.+6      	; 0x95e <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	21 f0       	breq	.+8      	; 0x964 <_ZN10Rack_Motor19SetForwardDirectionEv+0x14>
     95c:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
     95e:	13 9a       	sbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     960:	11 98       	cbi	0x02, 1	; 2
		break;
     962:	08 95       	ret
		case 2:
		SET		(DD_F6);
     964:	17 9a       	sbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     966:	15 98       	cbi	0x02, 5	; 2
     968:	08 95       	ret

0000096a <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
     96a:	fc 01       	movw	r30, r24
     96c:	80 81       	ld	r24, Z
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	19 f0       	breq	.+6      	; 0x978 <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	21 f0       	breq	.+8      	; 0x97e <_ZN10Rack_Motor19SetReverseDirectionEv+0x14>
     976:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     978:	13 98       	cbi	0x02, 3	; 2
		SET		(DD_B5);
     97a:	11 9a       	sbi	0x02, 1	; 2
		break;
     97c:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     97e:	17 98       	cbi	0x02, 7	; 2
		SET		(DD_B6);
     980:	15 9a       	sbi	0x02, 5	; 2
     982:	08 95       	ret

00000984 <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	19 f0       	breq	.+6      	; 0x992 <_ZN10Rack_Motor9StopMotorEv+0xe>
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	41 f0       	breq	.+16     	; 0x9a0 <_ZN10Rack_Motor9StopMotorEv+0x1c>
     990:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     992:	13 98       	cbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     994:	11 98       	cbi	0x02, 1	; 2

		PWM_OCR5 = 0;
     996:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     99a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     99e:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     9a0:	17 98       	cbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     9a2:	15 98       	cbi	0x02, 5	; 2

		PWM_OCR6 = 0;
     9a4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9a8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     9ac:	08 95       	ret

000009ae <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	8c 01       	movw	r16, r24
     9b8:	eb 01       	movw	r28, r22
  if (Ocr > 0)
     9ba:	1c 16       	cp	r1, r28
     9bc:	1d 06       	cpc	r1, r29
     9be:	0c f4       	brge	.+2      	; 0x9c2 <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
     9c0:	c7 df       	rcall	.-114    	; 0x950 <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
     9c2:	dd 23       	and	r29, r29
     9c4:	2c f4       	brge	.+10     	; 0x9d0 <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
     9c6:	d1 95       	neg	r29
     9c8:	c1 95       	neg	r28
     9ca:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
     9cc:	c8 01       	movw	r24, r16
     9ce:	cd df       	rcall	.-102    	; 0x96a <_ZN10Rack_Motor19SetReverseDirectionEv>
     9d0:	ca 3f       	cpi	r28, 0xFA	; 250
     9d2:	d1 05       	cpc	r29, r1
     9d4:	14 f0       	brlt	.+4      	; 0x9da <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
     9d6:	c9 ef       	ldi	r28, 0xF9	; 249
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
     9da:	f8 01       	movw	r30, r16
     9dc:	80 81       	ld	r24, Z
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	19 f0       	breq	.+6      	; 0x9e8 <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	31 f0       	breq	.+12     	; 0x9f2 <_ZN10Rack_Motor11SetOcrValueEi+0x44>
     9e6:	09 c0       	rjmp	.+18     	; 0x9fa <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
     9e8:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     9ec:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
     9f2:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9f6:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		break;
	}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	08 95       	ret

00000a04 <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	ec 01       	movw	r28, r24
	num = no;
     a0a:	68 83       	st	Y, r22
	InitPWM();
     a0c:	6b df       	rcall	.-298    	; 0x8e4 <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
     a0e:	ce 01       	movw	r24, r28
     a10:	b9 df       	rcall	.-142    	; 0x984 <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	ce 01       	movw	r24, r28
     a18:	ca df       	rcall	.-108    	; 0x9ae <_ZN10Rack_Motor11SetOcrValueEi>

}
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	08 95       	ret

00000a20 <_Z17operation_of_rackv>:
	orientation_check();

}

void operation_of_rack()
{			
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
		if (RackEncoder.angle <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where somewhere
     a24:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <RackEncoder+0x9>
     a28:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <RackEncoder+0xa>
     a2c:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <RackEncoder+0xb>
     a30:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <RackEncoder+0xc>
     a34:	85 3c       	cpi	r24, 0xC5	; 197
     a36:	9f 4f       	sbci	r25, 0xFF	; 255
     a38:	af 4f       	sbci	r26, 0xFF	; 255
     a3a:	bf 4f       	sbci	r27, 0xFF	; 255
     a3c:	4c f4       	brge	.+18     	; 0xa50 <_Z17operation_of_rackv+0x30>
     a3e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     a42:	88 23       	and	r24, r24
     a44:	29 f0       	breq	.+10     	; 0xa50 <_Z17operation_of_rackv+0x30>
		{
			Rack_home_position = false;
     a46:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <Rack_home_position>
			donotstop = true;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <donotstop>
		}
		
		
		/*******************************************Geneva operation*********************************************/
		
		if (Geneva_Start && GenevaEncoder.angle >= 360 && angle_pid.Get_Error() <= 3)
     a50:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Geneva_Start>
     a54:	88 23       	and	r24, r24
     a56:	09 f4       	brne	.+2      	; 0xa5a <_Z17operation_of_rackv+0x3a>
     a58:	5c c0       	rjmp	.+184    	; 0xb12 <_Z17operation_of_rackv+0xf2>
     a5a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     a5e:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     a62:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <GenevaEncoder+0xb>
     a66:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <GenevaEncoder+0xc>
     a6a:	88 36       	cpi	r24, 0x68	; 104
     a6c:	91 40       	sbci	r25, 0x01	; 1
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	54 f1       	brlt	.+84     	; 0xac8 <_Z17operation_of_rackv+0xa8>
     a74:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <angle_pid+0xe>
     a78:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <angle_pid+0xf>
     a7c:	77 23       	and	r23, r23
     a7e:	1c f4       	brge	.+6      	; 0xa86 <_Z17operation_of_rackv+0x66>
     a80:	71 95       	neg	r23
     a82:	61 95       	neg	r22
     a84:	71 09       	sbc	r23, r1
     a86:	07 2e       	mov	r0, r23
     a88:	00 0c       	add	r0, r0
     a8a:	88 0b       	sbc	r24, r24
     a8c:	99 0b       	sbc	r25, r25
     a8e:	8c d6       	rcall	.+3352   	; 0x17a8 <__floatsisf>
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e4       	ldi	r20, 0x40	; 64
     a96:	50 e4       	ldi	r21, 0x40	; 64
     a98:	e8 d5       	rcall	.+3024   	; 0x166a <__cmpsf2>
     a9a:	18 16       	cp	r1, r24
     a9c:	ac f0       	brlt	.+42     	; 0xac8 <_Z17operation_of_rackv+0xa8>
		{
			GenevaEncoder.angle = 0;
     a9e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <GenevaEncoder+0x9>
     aa2:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <GenevaEncoder+0xa>
     aa6:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <GenevaEncoder+0xb>
     aaa:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <GenevaEncoder+0xc>
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     aae:	eb e2       	ldi	r30, 0x2B	; 43
     ab0:	f2 e0       	ldi	r31, 0x02	; 2
     ab2:	15 86       	std	Z+13, r1	; 0x0d
     ab4:	14 86       	std	Z+12, r1	; 0x0c
		inline float Get_I(){return ki;};
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
     ab6:	13 8a       	std	Z+19, r1	; 0x13
     ab8:	12 8a       	std	Z+18, r1	; 0x12
		inline void  reset_output(){cv = 0;};
     aba:	14 8a       	std	Z+20, r1	; 0x14
     abc:	15 8a       	std	Z+21, r1	; 0x15
     abe:	16 8a       	std	Z+22, r1	; 0x16
     ac0:	17 8a       	std	Z+23, r1	; 0x17
			angle_pid.Set_SP(0);
			angle_pid.reset_iterm();
			angle_pid.reset_output();
			Geneva_Start = false;
     ac2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Geneva_Start>
     ac6:	25 c0       	rjmp	.+74     	; 0xb12 <_Z17operation_of_rackv+0xf2>
		}
		
		if(Geneva_Start)
		{
			if( rack_throw_auto && GenevaEncoder.angle >= 200)
     ac8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     acc:	88 23       	and	r24, r24
     ace:	91 f0       	breq	.+36     	; 0xaf4 <_Z17operation_of_rackv+0xd4>
     ad0:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     ad4:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     ad8:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <GenevaEncoder+0xb>
     adc:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <GenevaEncoder+0xc>
     ae0:	88 3c       	cpi	r24, 0xC8	; 200
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	2c f0       	brlt	.+10     	; 0xaf4 <_Z17operation_of_rackv+0xd4>
			{
				SHUTTCOCK_PASS_CLOSE();
     aea:	16 98       	cbi	0x02, 6	; 2
				SHUTTCOCK_GRIP_CLOSE();
     aec:	47 98       	cbi	0x08, 7	; 8
				inside_robot = true;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
			}
			//stop geneva
			if(GenevaEncoder.angle >= 120)
     af4:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     af8:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     afc:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <GenevaEncoder+0xb>
     b00:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <GenevaEncoder+0xc>
     b04:	88 37       	cpi	r24, 0x78	; 120
     b06:	91 05       	cpc	r25, r1
     b08:	a1 05       	cpc	r26, r1
     b0a:	b1 05       	cpc	r27, r1
     b0c:	14 f0       	brlt	.+4      	; 0xb12 <_Z17operation_of_rackv+0xf2>
				pneumatic_geneva_start = false;
     b0e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
		}

		//pid computation
		if (pid_compute_flag)
     b12:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     b16:	88 23       	and	r24, r24
     b18:	c1 f0       	breq	.+48     	; 0xb4a <_Z17operation_of_rackv+0x12a>
		{
			GenevaMotor.SetOcrValue(angle_pid.angle_Compute(GenevaEncoder.angle));
     b1a:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     b1e:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     b22:	8b e2       	ldi	r24, 0x2B	; 43
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	b1 db       	rcall	.-2206   	; 0x28a <_ZN3PID13angle_ComputeEi>
     b28:	0c d6       	rcall	.+3096   	; 0x1742 <__fixsfsi>
     b2a:	8a e6       	ldi	r24, 0x6A	; 106
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	3f df       	rcall	.-386    	; 0x9ae <_ZN10Rack_Motor11SetOcrValueEi>
			RackMotor.SetOcrValue(rack_motor_pid.Compute(RackEncoder.Get_Speed()));
     b30:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <RackEncoder+0x1>
     b34:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <RackEncoder+0x2>
     b38:	83 e1       	ldi	r24, 0x13	; 19
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	2a db       	rcall	.-2476   	; 0x192 <_ZN3PID7ComputeEi>
     b3e:	01 d6       	rcall	.+3074   	; 0x1742 <__fixsfsi>
     b40:	8b e6       	ldi	r24, 0x6B	; 107
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	34 df       	rcall	.-408    	; 0x9ae <_ZN10Rack_Motor11SetOcrValueEi>
			pid_compute_flag = false;
     b46:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
		}
		
		/*************************************************Delay operation*****************************************/
		
		if (rack_throw_auto && Rack_home_position && (millis()-previous_time)>700)
     b4a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     b4e:	88 23       	and	r24, r24
     b50:	09 f1       	breq	.+66     	; 0xb94 <_Z17operation_of_rackv+0x174>
     b52:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     b56:	88 23       	and	r24, r24
     b58:	e9 f0       	breq	.+58     	; 0xb94 <_Z17operation_of_rackv+0x174>
     b5a:	30 dc       	rcall	.-1952   	; 0x3bc <_Z6millisv>
     b5c:	00 91 4c 02 	lds	r16, 0x024C	; 0x80024c <previous_time>
     b60:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <previous_time+0x1>
     b64:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <previous_time+0x2>
     b68:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <previous_time+0x3>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	80 1b       	sub	r24, r16
     b72:	91 0b       	sbc	r25, r17
     b74:	a2 0b       	sbc	r26, r18
     b76:	b3 0b       	sbc	r27, r19
     b78:	8d 3b       	cpi	r24, 0xBD	; 189
     b7a:	92 40       	sbci	r25, 0x02	; 2
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	48 f0       	brcs	.+18     	; 0xb94 <_Z17operation_of_rackv+0x174>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     b82:	8d ef       	ldi	r24, 0xFD	; 253
     b84:	9f ef       	ldi	r25, 0xFF	; 255
     b86:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     b8a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		}
		
		
		if(pneumatic_geneva_start && (millis()-pneumatic_geneva_time) > 700)
     b94:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pneumatic_geneva_start>
     b98:	88 23       	and	r24, r24
     b9a:	e9 f0       	breq	.+58     	; 0xbd6 <_Z17operation_of_rackv+0x1b6>
     b9c:	0f dc       	rcall	.-2018   	; 0x3bc <_Z6millisv>
     b9e:	00 91 48 02 	lds	r16, 0x0248	; 0x800248 <pneumatic_geneva_time>
     ba2:	10 91 49 02 	lds	r17, 0x0249	; 0x800249 <pneumatic_geneva_time+0x1>
     ba6:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <pneumatic_geneva_time+0x2>
     baa:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <pneumatic_geneva_time+0x3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	80 1b       	sub	r24, r16
     bb4:	91 0b       	sbc	r25, r17
     bb6:	a2 0b       	sbc	r26, r18
     bb8:	b3 0b       	sbc	r27, r19
     bba:	8d 3b       	cpi	r24, 0xBD	; 189
     bbc:	92 40       	sbci	r25, 0x02	; 2
     bbe:	a1 05       	cpc	r26, r1
     bc0:	b1 05       	cpc	r27, r1
     bc2:	48 f0       	brcs	.+18     	; 0xbd6 <_Z17operation_of_rackv+0x1b6>
     bc4:	88 e6       	ldi	r24, 0x68	; 104
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
     bcc:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
		{
			angle_pid.Set_SP(360);
			Geneva_Start = true;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
		}
		
		if (pass_the_shuttcock && (millis()-passing_time) > 300)
     bd6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pass_the_shuttcock>
     bda:	88 23       	and	r24, r24
     bdc:	d1 f0       	breq	.+52     	; 0xc12 <_Z17operation_of_rackv+0x1f2>
     bde:	ee db       	rcall	.-2084   	; 0x3bc <_Z6millisv>
     be0:	00 91 44 02 	lds	r16, 0x0244	; 0x800244 <passing_time>
     be4:	10 91 45 02 	lds	r17, 0x0245	; 0x800245 <passing_time+0x1>
     be8:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <passing_time+0x2>
     bec:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <passing_time+0x3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	80 1b       	sub	r24, r16
     bf6:	91 0b       	sbc	r25, r17
     bf8:	a2 0b       	sbc	r26, r18
     bfa:	b3 0b       	sbc	r27, r19
     bfc:	8d 32       	cpi	r24, 0x2D	; 45
     bfe:	91 40       	sbci	r25, 0x01	; 1
     c00:	a1 05       	cpc	r26, r1
     c02:	b1 05       	cpc	r27, r1
		{
			SHUTTCOCK_PASS_TOGGLE();
     c04:	30 f0       	brcs	.+12     	; 0xc12 <_Z17operation_of_rackv+0x1f2>
     c06:	92 b1       	in	r25, 0x02	; 2
     c08:	80 e4       	ldi	r24, 0x40	; 64
     c0a:	89 27       	eor	r24, r25
			pass_the_shuttcock = false;
     c0c:	82 b9       	out	0x02, r24	; 2
     c0e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
		}
		
		if(throw_rack && (millis()-previous_time) >= 700)
     c12:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <throw_rack>
     c16:	88 23       	and	r24, r24
     c18:	21 f1       	breq	.+72     	; 0xc62 <_Z17operation_of_rackv+0x242>
     c1a:	d0 db       	rcall	.-2144   	; 0x3bc <_Z6millisv>
     c1c:	00 91 4c 02 	lds	r16, 0x024C	; 0x80024c <previous_time>
     c20:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <previous_time+0x1>
     c24:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <previous_time+0x2>
     c28:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <previous_time+0x3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	80 1b       	sub	r24, r16
     c32:	91 0b       	sbc	r25, r17
     c34:	a2 0b       	sbc	r26, r18
     c36:	b3 0b       	sbc	r27, r19
     c38:	8c 3b       	cpi	r24, 0xBC	; 188
     c3a:	92 40       	sbci	r25, 0x02	; 2
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	80 f0       	brcs	.+32     	; 0xc62 <_Z17operation_of_rackv+0x242>
		{
			RACK_GRIP_OPEN();
     c42:	10 98       	cbi	0x02, 0	; 2
			throw_rack = false;
     c44:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <throw_rack>
			if(rack_throw_auto)
     c48:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     c4c:	88 23       	and	r24, r24
     c4e:	49 f0       	breq	.+18     	; 0xc62 <_Z17operation_of_rackv+0x242>
     c50:	88 e6       	ldi	r24, 0x68	; 104
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
     c58:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
			{
				angle_pid.Set_SP(360);
				Geneva_Start = true;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
			}
		}
}
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <_Z18init_timer_rampingv>:

//Timer for ramping interrupt in 10ms
//Global timer
void init_timer_ramping()
{
	rampupflag_start = false;
     c68:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rampupflag_start>
	timer_count = 0;
     c6c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <timer_count>
	TCCR0A |= (1<<WGM01);
     c70:	84 b5       	in	r24, 0x24	; 36
     c72:	82 60       	ori	r24, 0x02	; 2
     c74:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	//1024 prescaler CTC mode
     c76:	85 b5       	in	r24, 0x25	; 37
     c78:	85 60       	ori	r24, 0x05	; 5
     c7a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
     c7c:	ee e6       	ldi	r30, 0x6E	; 110
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	80 83       	st	Z, r24
	TCNT0 = 0;
     c86:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;
     c88:	8b e9       	ldi	r24, 0x9B	; 155
     c8a:	87 bd       	out	0x27, r24	; 39
     c8c:	08 95       	ret

00000c8e <_Z14init_LedStripsv>:
}

/****************************************Initialise the master ***************************************/
void init_LedStrips()
{
	OUTPUT(AUTO_LED_STRIP);
     c8e:	98 9a       	sbi	0x13, 0	; 19
	OUTPUT(MANUAL_LED_STRIP);
     c90:	3e 9a       	sbi	0x07, 6	; 7
	OUTPUT(LT1_LED);
     c92:	3c 9a       	sbi	0x07, 4	; 7
	OUTPUT(LED_3);
     c94:	9a 9a       	sbi	0x13, 2	; 19
	OUTPUT(LT3_LED);
     c96:	38 9a       	sbi	0x07, 0	; 7
	OUTPUT(LED_5);
     c98:	3a 9a       	sbi	0x07, 2	; 7
	OUTPUT(LT2_LED);
     c9a:	99 9a       	sbi	0x13, 1	; 19
	
	CLEAR(AUTO_LED_STRIP);
     c9c:	a0 98       	cbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     c9e:	46 98       	cbi	0x08, 6	; 8
	CLEAR(LT1_LED);
     ca0:	44 98       	cbi	0x08, 4	; 8
	CLEAR(LED_3);
     ca2:	a2 98       	cbi	0x14, 2	; 20
	CLEAR(LT3_LED);
     ca4:	40 98       	cbi	0x08, 0	; 8
	CLEAR(LED_5);
     ca6:	42 98       	cbi	0x08, 2	; 8
	CLEAR(LT2_LED);
     ca8:	a1 98       	cbi	0x14, 1	; 20
     caa:	08 95       	ret

00000cac <_Z11init_masterv>:
	


void init_master()
{
	velocity_robot[0] = RESETDATA_JOYSTICK;
     cac:	ec e7       	ldi	r30, 0x7C	; 124
     cae:	f2 e0       	ldi	r31, 0x02	; 2
     cb0:	82 e3       	ldi	r24, 0x32	; 50
     cb2:	80 83       	st	Z, r24
	velocity_robot[1] = RESETDATA_JOYSTICK;
     cb4:	81 83       	std	Z+1, r24	; 0x01
	velocity_robot[2] = RESETDATA_JOYSTICK;
     cb6:	82 83       	std	Z+2, r24	; 0x02
	
	slave_work_category = static_position;
     cb8:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <slave_work_category>
	LtState = 0;
     cbc:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <LtState>
	line_tracker_data = 0;
     cc0:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <line_tracker_data+0x1>
     cc4:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <line_tracker_data>
	robot_rpm = 9;		// vary from 0 to 100 contains negative number below 50
     cc8:	89 e0       	ldi	r24, 0x09	; 9
     cca:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <robot_rpm>
	
	auto_mode = false;
     cce:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <auto_mode>
	rack_pickup = false;
     cd2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_pickup>
	//For line tracker pin
	DDRF = 0X00;	//Setting all the digital pin of linetracker to zero
     cd6:	10 ba       	out	0x10, r1	; 16
	INPUT(JUNCTION_PIN);
     cd8:	6c 98       	cbi	0x0d, 4	; 13
	SET(JUNCTION_PIN);
     cda:	74 9a       	sbi	0x0e, 4	; 14
	
	OUTPUT(STOP_SLAVE);
     cdc:	ea e0       	ldi	r30, 0x0A	; 10
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	80 81       	ld	r24, Z
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	80 83       	st	Z, r24
	
	init_timer_ramping();
     ce6:	c0 df       	rcall	.-128    	; 0xc68 <_Z18init_timer_rampingv>
	init_LedStrips();
     ce8:	d2 cf       	rjmp	.-92     	; 0xc8e <_Z14init_LedStripsv>
     cea:	08 95       	ret

00000cec <_Z28enable_linetracker_interruptv>:
     cec:	ea e6       	ldi	r30, 0x6A	; 106

/*************************************************************************************LineTracker Section*******************************************************/

void enable_linetracker_interrupt()
{	
	EICRB |= (1<<JUNCTION_ISC1);	//falling edge
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	80 83       	st	Z, r24
	EIMSK |= (1<<JUNCTION_INT);		//setting INT pin
     cf6:	ec 9a       	sbi	0x1d, 4	; 29
	EIFR |= (1<<JUNCTION_INTF);	    //clear int flag
     cf8:	e4 9a       	sbi	0x1c, 4	; 28
     cfa:	08 95       	ret

00000cfc <_Z29disable_linetracker_interruptv>:
}

void disable_linetracker_interrupt()
{
	EIMSK &= ~(1<<JUNCTION_INT);
     cfc:	ec 98       	cbi	0x1d, 4	; 29
	EIFR |= (1<<JUNCTION_INTF);
     cfe:	e4 9a       	sbi	0x1c, 4	; 28
     d00:	08 95       	ret

00000d02 <_Z20Get_linetracker_datav>:

/**************************************************Get line tracker data and send the value from 10 to 80 or 0 if not found*************************/

char Get_linetracker_data()
{
	line_tracker_data = 0;
     d02:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <line_tracker_data+0x1>
     d06:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <line_tracker_data>
	total_on_sensor = 0;
     d0a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <total_on_sensor>
	for(counter_i=0; counter_i < 8; counter_i++)
     d0e:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <counter_i>
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	50 e0       	ldi	r21, 0x00	; 0
	{
		val = READ2(F,counter_i);
     d16:	6f b1       	in	r22, 0x0f	; 15
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	ca 01       	movw	r24, r20
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <_Z20Get_linetracker_datav+0x22>
     d20:	75 95       	asr	r23
     d22:	67 95       	ror	r22
     d24:	8a 95       	dec	r24
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <_Z20Get_linetracker_datav+0x1e>
     d28:	61 70       	andi	r22, 0x01	; 1
     d2a:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <val>
		line_tracker_data += (val*(counter_i+1)*10);
     d2e:	86 2f       	mov	r24, r22
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	84 9f       	mul	r24, r20
     d34:	90 01       	movw	r18, r0
     d36:	85 9f       	mul	r24, r21
     d38:	30 0d       	add	r19, r0
     d3a:	94 9f       	mul	r25, r20
     d3c:	30 0d       	add	r19, r0
     d3e:	11 24       	eor	r1, r1
     d40:	c9 01       	movw	r24, r18
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	28 0f       	add	r18, r24
     d54:	39 1f       	adc	r19, r25
     d56:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <line_tracker_data>
     d5a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <line_tracker_data+0x1>
     d5e:	28 0f       	add	r18, r24
     d60:	39 1f       	adc	r19, r25
     d62:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <line_tracker_data+0x1>
     d66:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <line_tracker_data>
		total_on_sensor += val;
     d6a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <total_on_sensor>
     d6e:	69 0f       	add	r22, r25
     d70:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <total_on_sensor>

char Get_linetracker_data()
{
	line_tracker_data = 0;
	total_on_sensor = 0;
	for(counter_i=0; counter_i < 8; counter_i++)
     d74:	40 93 73 02 	sts	0x0273, r20	; 0x800273 <counter_i>
     d78:	4f 5f       	subi	r20, 0xFF	; 255
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
     d7c:	49 30       	cpi	r20, 0x09	; 9
     d7e:	51 05       	cpc	r21, r1
     d80:	51 f6       	brne	.-108    	; 0xd16 <_Z20Get_linetracker_datav+0x14>
	{
		val = READ2(F,counter_i);
		line_tracker_data += (val*(counter_i+1)*10);
		total_on_sensor += val;
	}
	total_on_sensor = (total_on_sensor == 0)?1:total_on_sensor;
     d82:	61 11       	cpse	r22, r1
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <_Z20Get_linetracker_datav+0x86>
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <total_on_sensor>
	line_tracker_data = line_tracker_data/total_on_sensor;
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	c9 01       	movw	r24, r18
     d90:	1e d6       	rcall	.+3132   	; 0x19ce <__divmodhi4>
     d92:	86 2f       	mov	r24, r22
     d94:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <line_tracker_data>
     d98:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <line_tracker_data+0x1>
	return line_tracker_data;
}
     d9c:	08 95       	ret

00000d9e <_Z18Send_data_to_Slavev>:

/*****************************************Function to send data to slave***************************/

void Send_data_to_Slave()
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
	if(auto_mode)
     da2:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <auto_mode>
     da6:	88 23       	and	r24, r24
     da8:	69 f0       	breq	.+26     	; 0xdc4 <_Z18Send_data_to_Slavev+0x26>
	{
		UART3Transmit(START_BYTE_AUTO);
     daa:	8e ef       	ldi	r24, 0xFE	; 254
     dac:	7e d3       	rcall	.+1788   	; 0x14aa <_Z13UART3Transmith>
		UART3Transmit(slave_work_category);
     dae:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <slave_work_category>
		UART3Transmit(Get_linetracker_data());
     db2:	7b d3       	rcall	.+1782   	; 0x14aa <_Z13UART3Transmith>
     db4:	a6 df       	rcall	.-180    	; 0xd02 <_Z20Get_linetracker_datav>
     db6:	79 d3       	rcall	.+1778   	; 0x14aa <_Z13UART3Transmith>
		UART3Transmit(LtState);
     db8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     dbc:	76 d3       	rcall	.+1772   	; 0x14aa <_Z13UART3Transmith>
		slave_work_category = static_position;
     dbe:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <slave_work_category>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <_Z18Send_data_to_Slavev+0x42>
	}
	else
	{
		UART3Transmit(START_BYTE_MANUAL);
     dc4:	8d ef       	ldi	r24, 0xFD	; 253
     dc6:	71 d3       	rcall	.+1762   	; 0x14aa <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[0]);
     dc8:	cc e7       	ldi	r28, 0x7C	; 124
     dca:	d2 e0       	ldi	r29, 0x02	; 2
     dcc:	88 81       	ld	r24, Y
     dce:	6d d3       	rcall	.+1754   	; 0x14aa <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[1]);
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	6b d3       	rcall	.+1750   	; 0x14aa <_Z13UART3Transmith>
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
		UART3Transmit(velocity_robot[2]);
     dd6:	69 d3       	rcall	.+1746   	; 0x14aa <_Z13UART3Transmith>
     dd8:	82 e3       	ldi	r24, 0x32	; 50
     dda:	88 83       	st	Y, r24
		velocity_robot[0] = RESETDATA_JOYSTICK;
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	8a 83       	std	Y+2, r24	; 0x02
		velocity_robot[1] = RESETDATA_JOYSTICK;
     de0:	df 91       	pop	r29
		velocity_robot[2] = RESETDATA_JOYSTICK;
     de2:	cf 91       	pop	r28
	}

	
}
     de4:	08 95       	ret

00000de6 <_Z17orientation_checkv>:
     de6:	1e 9b       	sbis	0x03, 6	; 3
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <_Z17orientation_checkv+0x12>
void orientation_check()
{
		//limit_switch 1
		if(READ(LTSWITCH_ORIENT_1))
		{
			LtState &= ~(1<<0);
     dea:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     dee:	8e 7f       	andi	r24, 0xFE	; 254
     df0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			CLEAR(LT1_LED);
     df4:	44 98       	cbi	0x08, 4	; 8
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <_Z17orientation_checkv+0x1e>
		}
		else
		{
			LtState |= (1<<0);
     df8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     dfc:	81 60       	ori	r24, 0x01	; 1
     dfe:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			SET(LT1_LED);
     e02:	44 9a       	sbi	0x08, 4	; 8
		}
		
		//limit_Switch 2
		if(READ(LTSWITCH_ORIENT_2))
     e04:	1f 9b       	sbis	0x03, 7	; 3
     e06:	07 c0       	rjmp	.+14     	; 0xe16 <_Z17orientation_checkv+0x30>
		{
			LtState &= ~(1<<1);
     e08:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     e0c:	8d 7f       	andi	r24, 0xFD	; 253
     e0e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			CLEAR(LT2_LED);
     e12:	a1 98       	cbi	0x14, 1	; 20
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <_Z17orientation_checkv+0x3c>
		}
		else
		{
			LtState |= (1<<1);
     e16:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     e1a:	82 60       	ori	r24, 0x02	; 2
     e1c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			SET(LT2_LED);
     e20:	a1 9a       	sbi	0x14, 1	; 20
		}
		
		//limit_Switch 3
		if (READ(LTSWITCH_ORIENT_3))
     e22:	1d 9b       	sbis	0x03, 5	; 3
     e24:	07 c0       	rjmp	.+14     	; 0xe34 <_Z17orientation_checkv+0x4e>
		{
			LtState &= ~(1<<2);
     e26:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     e2a:	8b 7f       	andi	r24, 0xFB	; 251
     e2c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			CLEAR(LT3_LED);
     e30:	40 98       	cbi	0x08, 0	; 8
     e32:	08 95       	ret
		}
		else
		{
			LtState |= (1<<2);
     e34:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     e38:	84 60       	ori	r24, 0x04	; 4
     e3a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			SET(LT3_LED);
     e3e:	40 9a       	sbi	0x08, 0	; 8
     e40:	08 95       	ret

00000e42 <_Z19operate_master_autov>:
	init_timer_ramping();
	init_LedStrips();
}

void operate_master_auto()
{
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
	static unsigned long rack_picktime = 0;
	
	SET(AUTO_LED_STRIP);
     e48:	a0 9a       	sbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     e4a:	46 98       	cbi	0x08, 6	; 8
	
	//toggling manual and automatic mode
	if(GAMEBUTTONA == START_BUTTON)
     e4c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <rcvdata>
     e50:	80 34       	cpi	r24, 0x40	; 64
     e52:	29 f4       	brne	.+10     	; 0xe5e <_Z19operate_master_autov+0x1c>
	{
		auto_mode = false;
     e54:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <auto_mode>
		GAMEBUTTONA = 0;
     e58:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e5c:	5d c0       	rjmp	.+186    	; 0xf18 <_Z19operate_master_autov+0xd6>
	}
	//Automatic zone navigation
	else if(GAMEBUTTONA == BUTTON_A)
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	71 f4       	brne	.+28     	; 0xe7e <_Z19operate_master_autov+0x3c>
	{
		slave_work_category = Rack_load;
     e62:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		auto_move_rack = true;
     e66:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
     e6a:	8d ef       	ldi	r24, 0xFD	; 253
     e6c:	9f ef       	ldi	r25, 0xFF	; 255
     e6e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     e72:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(-RACK_COUNT);
		enable_proximity();
     e76:	97 da       	rcall	.-2770   	; 0x3a6 <_Z16enable_proximityv>
		GAMEBUTTONA = 0;
     e78:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e7c:	4d c0       	rjmp	.+154    	; 0xf18 <_Z19operate_master_autov+0xd6>
	}
	else if(GAMEBUTTONA == BUTTON_B)
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	29 f4       	brne	.+10     	; 0xe8c <_Z19operate_master_autov+0x4a>
	{
		slave_work_category = Load1;
     e82:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONA = 0;
     e86:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e8a:	46 c0       	rjmp	.+140    	; 0xf18 <_Z19operate_master_autov+0xd6>
	}
	else if (GAMEBUTTONA == BUTTON_X)
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	31 f4       	brne	.+12     	; 0xe9c <_Z19operate_master_autov+0x5a>
	{
		slave_work_category = Load2;
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONA = 0;
     e96:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e9a:	3e c0       	rjmp	.+124    	; 0xf18 <_Z19operate_master_autov+0xd6>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     e9c:	88 30       	cpi	r24, 0x08	; 8
     e9e:	31 f4       	brne	.+12     	; 0xeac <_Z19operate_master_autov+0x6a>
	{
		slave_work_category = Golden_Rack;
     ea0:	85 e0       	ldi	r24, 0x05	; 5
     ea2:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONA = 0;
     ea6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     eaa:	36 c0       	rjmp	.+108    	; 0xf18 <_Z19operate_master_autov+0xd6>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)
     eac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
     eb0:	91 11       	cpse	r25, r1
     eb2:	32 c0       	rjmp	.+100    	; 0xf18 <_Z19operate_master_autov+0xd6>
     eb4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
     eb8:	91 11       	cpse	r25, r1
     eba:	2e c0       	rjmp	.+92     	; 0xf18 <_Z19operate_master_autov+0xd6>
     ebc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
     ec0:	91 11       	cpse	r25, r1
     ec2:	2a c0       	rjmp	.+84     	; 0xf18 <_Z19operate_master_autov+0xd6>
     ec4:	80 32       	cpi	r24, 0x20	; 32
     ec6:	41 f5       	brne	.+80     	; 0xf18 <_Z19operate_master_autov+0xd6>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
     ec8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     ecc:	88 23       	and	r24, r24
     ece:	81 f0       	breq	.+32     	; 0xef0 <_Z19operate_master_autov+0xae>
		{
			pneumatic_geneva_start = true;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     ed6:	72 da       	rcall	.-2844   	; 0x3bc <_Z6millisv>
     ed8:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pneumatic_geneva_time>
     edc:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pneumatic_geneva_time+0x1>
     ee0:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pneumatic_geneva_time+0x2>
     ee4:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     ee8:	88 b1       	in	r24, 0x08	; 8
     eea:	80 58       	subi	r24, 0x80	; 128
     eec:	88 b9       	out	0x08, r24	; 8
     eee:	01 c0       	rjmp	.+2      	; 0xef2 <_Z19operate_master_autov+0xb0>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     ef0:	47 98       	cbi	0x08, 7	; 8
		}
		
		pass_the_shuttcock = true;
     ef2:	c1 e0       	ldi	r28, 0x01	; 1
     ef4:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     ef8:	61 da       	rcall	.-2878   	; 0x3bc <_Z6millisv>
     efa:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <passing_time>
     efe:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <passing_time+0x1>
     f02:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <passing_time+0x2>
     f06:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <passing_time+0x3>
		inside_robot = (1^inside_robot);
     f0a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     f0e:	c8 27       	eor	r28, r24
     f10:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
     f14:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
	}

	
	if (GAMEBUTTONB == LEFT_BUTTON)
     f18:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rcvdata+0x1>
     f1c:	80 32       	cpi	r24, 0x20	; 32
     f1e:	29 f4       	brne	.+10     	; 0xf2a <_Z19operate_master_autov+0xe8>
	{
		slave_work_category = Search_automaticrobot;
     f20:	84 e0       	ldi	r24, 0x04	; 4
     f22:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONB = 0;
     f26:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <rcvdata+0x1>
	}		
	
	//if reached rack loading zone
	if(SLAVE_DATA == Rack_zone)
     f2a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <rcv_value_slave>
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	b1 f4       	brne	.+44     	; 0xf5e <_Z19operate_master_autov+0x11c>
	{
		auto_move_rack = true;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		rack_throw_auto = true;
     f38:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
     f3c:	16 9a       	sbi	0x02, 6	; 2
		RACK_GRIP_CLOSE();
		rack_pickup = true;
     f3e:	10 9a       	sbi	0x02, 0	; 2
     f40:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_pickup>
		rack_picktime = millis();
     f44:	3b da       	rcall	.-2954   	; 0x3bc <_Z6millisv>
     f46:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_ZZ19operate_master_autovE13rack_picktime>
     f4a:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_ZZ19operate_master_autovE13rack_picktime+0x1>
     f4e:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZ19operate_master_autovE13rack_picktime+0x2>
     f52:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_ZZ19operate_master_autovE13rack_picktime+0x3>
		disable_proximity();
     f56:	2f da       	rcall	.-2978   	; 0x3b6 <_Z17disable_proximityv>
		SLAVE_DATA = 0;
     f58:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
     f5c:	4e c0       	rjmp	.+156    	; 0xffa <_Z19operate_master_autov+0x1b8>
	}
	else if(SLAVE_DATA == Golden_zone)
     f5e:	85 30       	cpi	r24, 0x05	; 5
	{
		RACK_GRIP_CLOSE();
     f60:	81 f4       	brne	.+32     	; 0xf82 <_Z19operate_master_autov+0x140>
		rack_pickup = true;
     f62:	10 9a       	sbi	0x02, 0	; 2
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_pickup>
		rack_picktime = millis();
     f6a:	28 da       	rcall	.-2992   	; 0x3bc <_Z6millisv>
     f6c:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_ZZ19operate_master_autovE13rack_picktime>
     f70:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_ZZ19operate_master_autovE13rack_picktime+0x1>
     f74:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZ19operate_master_autovE13rack_picktime+0x2>
     f78:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_ZZ19operate_master_autovE13rack_picktime+0x3>
		SLAVE_DATA = 0;
     f7c:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
     f80:	3c c0       	rjmp	.+120    	; 0xffa <_Z19operate_master_autov+0x1b8>
	}
	else if(SLAVE_DATA == Give_shutcock)
     f82:	86 30       	cpi	r24, 0x06	; 6
     f84:	49 f5       	brne	.+82     	; 0xfd8 <_Z19operate_master_autov+0x196>
	{
		if(inside_robot)
     f86:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     f8a:	88 23       	and	r24, r24
		{
			pneumatic_geneva_start = true;
     f8c:	81 f0       	breq	.+32     	; 0xfae <_Z19operate_master_autov+0x16c>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     f94:	13 da       	rcall	.-3034   	; 0x3bc <_Z6millisv>
     f96:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pneumatic_geneva_time>
     f9a:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pneumatic_geneva_time+0x1>
     f9e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pneumatic_geneva_time+0x2>
     fa2:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     fa6:	88 b1       	in	r24, 0x08	; 8
     fa8:	80 58       	subi	r24, 0x80	; 128
     faa:	88 b9       	out	0x08, r24	; 8
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <_Z19operate_master_autov+0x16e>
		}
		
		pass_the_shuttcock = true;
     fae:	47 98       	cbi	0x08, 7	; 8
     fb0:	c1 e0       	ldi	r28, 0x01	; 1
     fb2:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     fb6:	02 da       	rcall	.-3068   	; 0x3bc <_Z6millisv>
     fb8:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <passing_time>
     fbc:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <passing_time+0x1>
     fc0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <passing_time+0x2>
     fc4:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <passing_time+0x3>
		inside_robot = (1^inside_robot);
     fc8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     fcc:	c8 27       	eor	r28, r24
     fce:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		SLAVE_DATA = 0;
     fd2:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
     fd6:	11 c0       	rjmp	.+34     	; 0xffa <_Z19operate_master_autov+0x1b8>
	}
	else if(SLAVE_DATA == Give_GoldenRack)
     fd8:	87 30       	cpi	r24, 0x07	; 7
	{
		RACK_GRIP_OPEN();
     fda:	21 f4       	brne	.+8      	; 0xfe4 <_Z19operate_master_autov+0x1a2>
		SLAVE_DATA = 0;
     fdc:	10 98       	cbi	0x02, 0	; 2
     fde:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
	}
	else if(SLAVE_DATA == enable_line)
     fe2:	0b c0       	rjmp	.+22     	; 0xffa <_Z19operate_master_autov+0x1b8>
	{
		enable_linetracker_interrupt();
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	21 f4       	brne	.+8      	; 0xff0 <_Z19operate_master_autov+0x1ae>
		SLAVE_DATA = 0;
     fe8:	81 de       	rcall	.-766    	; 0xcec <_Z28enable_linetracker_interruptv>
     fea:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
	}
	else if(SLAVE_DATA == disable_line)
     fee:	05 c0       	rjmp	.+10     	; 0xffa <_Z19operate_master_autov+0x1b8>
	{
		disable_linetracker_interrupt();
     ff0:	89 30       	cpi	r24, 0x09	; 9
     ff2:	19 f4       	brne	.+6      	; 0xffa <_Z19operate_master_autov+0x1b8>
		SLAVE_DATA = 0;
     ff4:	83 de       	rcall	.-762    	; 0xcfc <_Z29disable_linetracker_interruptv>
     ff6:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
	}
	
	//delay for rack pickup
	if(rack_pickup && (millis()-rack_picktime) >= 500)
     ffa:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_pickup>
     ffe:	88 23       	and	r24, r24
    1000:	41 f1       	breq	.+80     	; 0x1052 <_Z19operate_master_autov+0x210>
    1002:	dc d9       	rcall	.-3144   	; 0x3bc <_Z6millisv>
    1004:	00 91 6d 02 	lds	r16, 0x026D	; 0x80026d <_ZZ19operate_master_autovE13rack_picktime>
    1008:	10 91 6e 02 	lds	r17, 0x026E	; 0x80026e <_ZZ19operate_master_autovE13rack_picktime+0x1>
    100c:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <_ZZ19operate_master_autovE13rack_picktime+0x2>
    1010:	30 91 70 02 	lds	r19, 0x0270	; 0x800270 <_ZZ19operate_master_autovE13rack_picktime+0x3>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	80 1b       	sub	r24, r16
    101a:	91 0b       	sbc	r25, r17
    101c:	a2 0b       	sbc	r26, r18
    101e:	b3 0b       	sbc	r27, r19
    1020:	84 3f       	cpi	r24, 0xF4	; 244
    1022:	91 40       	sbci	r25, 0x01	; 1
    1024:	a1 05       	cpc	r26, r1
    1026:	b1 05       	cpc	r27, r1
    1028:	a0 f0       	brcs	.+40     	; 0x1052 <_Z19operate_master_autov+0x210>
	{
		RACK_LIFT_OPEN();
    102a:	14 9a       	sbi	0x02, 4	; 2
		
		if(rack_throw_auto)
    102c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
    1030:	88 23       	and	r24, r24
    1032:	61 f0       	breq	.+24     	; 0x104c <_Z19operate_master_autov+0x20a>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    103c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
			slave_work_category = Load1;
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
			rack_pickup = false;
    1046:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_pickup>
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <_Z19operate_master_autov+0x210>
		}	
		else
			slave_work_category = Golden_Rack;	
    104c:	85 e0       	ldi	r24, 0x05	; 5
	}
	
	//if not rack auto move stop rack motor
	if(!auto_move_rack)
    104e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
    1052:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
    1056:	81 11       	cpse	r24, r1
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <_Z19operate_master_autov+0x220>
    105a:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
		rack_motor_pid.Set_SP(0);
		
	operation_of_rack();
    105e:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
	rack_limit_check();
    1062:	de dc       	rcall	.-1604   	; 0xa20 <_Z17operation_of_rackv>
    1064:	49 da       	rcall	.-2926   	; 0x4f8 <_Z16rack_limit_checkv>
	orientation_check();
    1066:	bf de       	rcall	.-642    	; 0xde6 <_Z17orientation_checkv>
    1068:	cf 91       	pop	r28
}
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <_Z21operate_master_manualv>:
    1070:	0f 93       	push	r16


void operate_master_manual()
{
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
	/**********************************************GAMEBUTTONB_SECTION*********************************/
	SET(MANUAL_LED_STRIP);
    1078:	46 9a       	sbi	0x08, 6	; 8
	CLEAR(AUTO_LED_STRIP);
    107a:	a0 98       	cbi	0x14, 0	; 20
	
	if (GAMEBUTTONB == RIGHT)
    107c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rcvdata+0x1>
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	51 f4       	brne	.+20     	; 0x1098 <_Z21operate_master_manualv+0x28>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    1084:	ec e7       	ldi	r30, 0x7C	; 124
    1086:	f2 e0       	ldi	r31, 0x02	; 2
    1088:	92 e3       	ldi	r25, 0x32	; 50
    108a:	90 83       	st	Z, r25
		velocity_robot[1] = RESETDATA_JOYSTICK + robot_rpm;
    108c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <robot_rpm>
    1090:	8e 5c       	subi	r24, 0xCE	; 206
    1092:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    1094:	92 83       	std	Z+2, r25	; 0x02
    1096:	25 c0       	rjmp	.+74     	; 0x10e2 <_Z21operate_master_manualv+0x72>
	}
	else if (GAMEBUTTONB == LEFT)
    1098:	88 30       	cpi	r24, 0x08	; 8
    109a:	59 f4       	brne	.+22     	; 0x10b2 <_Z21operate_master_manualv+0x42>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    109c:	ec e7       	ldi	r30, 0x7C	; 124
    109e:	f2 e0       	ldi	r31, 0x02	; 2
    10a0:	82 e3       	ldi	r24, 0x32	; 50
    10a2:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK - robot_rpm;
    10a4:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <robot_rpm>
    10a8:	28 2f       	mov	r18, r24
    10aa:	29 1b       	sub	r18, r25
    10ac:	21 83       	std	Z+1, r18	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    10ae:	82 83       	std	Z+2, r24	; 0x02
    10b0:	18 c0       	rjmp	.+48     	; 0x10e2 <_Z21operate_master_manualv+0x72>
	}
	else if (GAMEBUTTONB == UP)
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	51 f4       	brne	.+20     	; 0x10ca <_Z21operate_master_manualv+0x5a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK + robot_rpm;
    10b6:	ec e7       	ldi	r30, 0x7C	; 124
    10b8:	f2 e0       	ldi	r31, 0x02	; 2
    10ba:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <robot_rpm>
    10be:	8e 5c       	subi	r24, 0xCE	; 206
    10c0:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
    10c2:	82 e3       	ldi	r24, 0x32	; 50
    10c4:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    10c6:	82 83       	std	Z+2, r24	; 0x02
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <_Z21operate_master_manualv+0x72>
		//front_drive = true;
		
	}
	else if (GAMEBUTTONB == DOWN)
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	51 f4       	brne	.+20     	; 0x10e2 <_Z21operate_master_manualv+0x72>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK - robot_rpm;
    10ce:	ec e7       	ldi	r30, 0x7C	; 124
    10d0:	f2 e0       	ldi	r31, 0x02	; 2
    10d2:	82 e3       	ldi	r24, 0x32	; 50
    10d4:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <robot_rpm>
    10d8:	68 2f       	mov	r22, r24
    10da:	69 1b       	sub	r22, r25
    10dc:	60 83       	st	Z, r22
		velocity_robot[1] = RESETDATA_JOYSTICK;
    10de:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    10e0:	82 83       	std	Z+2, r24	; 0x02
		//back_drive = true;
	}
	
	
	/**********************************************************************GAMEBUTTONA_SECTION****************************/
	if(GAMEBUTTONA == START_BUTTON)
    10e2:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <rcvdata>
    10e6:	80 34       	cpi	r24, 0x40	; 64
    10e8:	31 f4       	brne	.+12     	; 0x10f6 <_Z21operate_master_manualv+0x86>
	{
		auto_mode = true;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <auto_mode>
		GAMEBUTTONA = 0;
    10f0:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    10f4:	88 c0       	rjmp	.+272    	; 0x1206 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == BUTTON_A)
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	31 f4       	brne	.+12     	; 0x1106 <_Z21operate_master_manualv+0x96>
	{
		RACK_GRIP_TOGGLE();
    10fa:	92 b1       	in	r25, 0x02	; 2
    10fc:	89 27       	eor	r24, r25
    10fe:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    1100:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    1104:	80 c0       	rjmp	.+256    	; 0x1206 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	59 f4       	brne	.+22     	; 0x1120 <_Z21operate_master_manualv+0xb0>
    110a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Rack_home_position>
    110e:	91 11       	cpse	r25, r1
    1110:	44 c0       	rjmp	.+136    	; 0x119a <_Z21operate_master_manualv+0x12a>
	{
		RACK_LIFT_TOGGLE();
    1112:	92 b1       	in	r25, 0x02	; 2
    1114:	80 e1       	ldi	r24, 0x10	; 16
    1116:	89 27       	eor	r24, r25
    1118:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    111a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    111e:	73 c0       	rjmp	.+230    	; 0x1206 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == BUTTON_X)
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	b9 f4       	brne	.+46     	; 0x1152 <_Z21operate_master_manualv+0xe2>
	{
		auto_move_rack = true;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		if(Rack_home_position)
    112a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
    112e:	88 23       	and	r24, r24
    1130:	39 f0       	breq	.+14     	; 0x1140 <_Z21operate_master_manualv+0xd0>
    1132:	8d ef       	ldi	r24, 0xFD	; 253
    1134:	9f ef       	ldi	r25, 0xFF	; 255
    1136:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    113a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    113e:	06 c0       	rjmp	.+12     	; 0x114c <_Z21operate_master_manualv+0xdc>
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1148:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		}
		else
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		GAMEBUTTONA = 0;
    114c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    1150:	71 c0       	rjmp	.+226    	; 0x1234 <_Z21operate_master_manualv+0x1c4>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
    1152:	88 30       	cpi	r24, 0x08	; 8
    1154:	61 f4       	brne	.+24     	; 0x116e <_Z21operate_master_manualv+0xfe>
    1156:	88 e6       	ldi	r24, 0x68	; 104
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
    115e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
		GAMEBUTTONA = 0;
    1168:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    116c:	4c c0       	rjmp	.+152    	; 0x1206 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
    116e:	80 31       	cpi	r24, 0x10	; 16
    1170:	a1 f4       	brne	.+40     	; 0x119a <_Z21operate_master_manualv+0x12a>
    1172:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Rack_home_position>
    1176:	91 11       	cpse	r25, r1
    1178:	10 c0       	rjmp	.+32     	; 0x119a <_Z21operate_master_manualv+0x12a>
	{
		auto_move_rack = true;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		rack_throw_auto = true;
    1180:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
    1184:	16 9a       	sbi	0x02, 6	; 2
		RACK_LIFT_OPEN();
    1186:	14 9a       	sbi	0x02, 4	; 2
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1190:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(RACK_COUNT);
		GAMEBUTTONA = 0;
    1194:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    1198:	36 c0       	rjmp	.+108    	; 0x1206 <_Z21operate_master_manualv+0x196>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	
    119a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
    119e:	91 11       	cpse	r25, r1
    11a0:	32 c0       	rjmp	.+100    	; 0x1206 <_Z21operate_master_manualv+0x196>
    11a2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
    11a6:	91 11       	cpse	r25, r1
    11a8:	2e c0       	rjmp	.+92     	; 0x1206 <_Z21operate_master_manualv+0x196>
    11aa:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
    11ae:	91 11       	cpse	r25, r1
    11b0:	2a c0       	rjmp	.+84     	; 0x1206 <_Z21operate_master_manualv+0x196>
    11b2:	80 32       	cpi	r24, 0x20	; 32
    11b4:	41 f5       	brne	.+80     	; 0x1206 <_Z21operate_master_manualv+0x196>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
    11b6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    11ba:	88 23       	and	r24, r24
    11bc:	81 f0       	breq	.+32     	; 0x11de <_Z21operate_master_manualv+0x16e>
		{
			pneumatic_geneva_start = true;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
    11c4:	fb d8       	rcall	.-3594   	; 0x3bc <_Z6millisv>
    11c6:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pneumatic_geneva_time>
    11ca:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pneumatic_geneva_time+0x1>
    11ce:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pneumatic_geneva_time+0x2>
    11d2:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
    11d6:	88 b1       	in	r24, 0x08	; 8
    11d8:	80 58       	subi	r24, 0x80	; 128
    11da:	88 b9       	out	0x08, r24	; 8
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <_Z21operate_master_manualv+0x170>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    11de:	47 98       	cbi	0x08, 7	; 8
		}
		
		pass_the_shuttcock = true;
    11e0:	c1 e0       	ldi	r28, 0x01	; 1
    11e2:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
    11e6:	ea d8       	rcall	.-3628   	; 0x3bc <_Z6millisv>
    11e8:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <passing_time>
    11ec:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <passing_time+0x1>
    11f0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <passing_time+0x2>
    11f4:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <passing_time+0x3>
		inside_robot = (1^inside_robot);
    11f8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    11fc:	c8 27       	eor	r28, r24
    11fe:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
    1202:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>

	
	

	/**************************************************Rack Operation******************************************************/
	if (!auto_move_rack)
    1206:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
    120a:	81 11       	cpse	r24, r1
    120c:	13 c0       	rjmp	.+38     	; 0x1234 <_Z21operate_master_manualv+0x1c4>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
    120e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rcvdata+0x2>
    1212:	85 31       	cpi	r24, 0x15	; 21
    1214:	08 f4       	brcc	.+2      	; 0x1218 <_Z21operate_master_manualv+0x1a8>
    1216:	b4 c0       	rjmp	.+360    	; 0x1380 <_Z21operate_master_manualv+0x310>
    1218:	1c 99       	sbic	0x03, 4	; 3
    121a:	ab c0       	rjmp	.+342    	; 0x1372 <_Z21operate_master_manualv+0x302>
    121c:	b1 c0       	rjmp	.+354    	; 0x1380 <_Z21operate_master_manualv+0x310>
    121e:	8d ef       	ldi	r24, 0xFD	; 253
    1220:	9f ef       	ldi	r25, 0xFF	; 255
    1222:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1226:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <_Z21operate_master_manualv+0x1c4>
    122c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
    1230:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		else
		rack_motor_pid.Set_SP(0);
	}
	
	/*********************************************************************Move using joystick analog stick********************************************/
	if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
    1234:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <rcvdata+0x5>
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9c 01       	movw	r18, r24
    123c:	22 53       	subi	r18, 0x32	; 50
    123e:	31 09       	sbc	r19, r1
    1240:	12 16       	cp	r1, r18
    1242:	13 06       	cpc	r1, r19
    1244:	24 f4       	brge	.+8      	; 0x124e <_Z21operate_master_manualv+0x1de>
    1246:	26 30       	cpi	r18, 0x06	; 6
    1248:	31 05       	cpc	r19, r1
    124a:	44 f0       	brlt	.+16     	; 0x125c <_Z21operate_master_manualv+0x1ec>
    124c:	32 c0       	rjmp	.+100    	; 0x12b2 <_Z21operate_master_manualv+0x242>
    124e:	42 e3       	ldi	r20, 0x32	; 50
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	fa 01       	movw	r30, r20
    1254:	e8 1b       	sub	r30, r24
    1256:	f9 0b       	sbc	r31, r25
    1258:	36 97       	sbiw	r30, 0x06	; 6
    125a:	5c f5       	brge	.+86     	; 0x12b2 <_Z21operate_master_manualv+0x242>
    125c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <rcvdata+0x4>
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	ac 01       	movw	r20, r24
    1264:	42 53       	subi	r20, 0x32	; 50
    1266:	51 09       	sbc	r21, r1
    1268:	14 16       	cp	r1, r20
    126a:	15 06       	cpc	r1, r21
    126c:	24 f4       	brge	.+8      	; 0x1276 <_Z21operate_master_manualv+0x206>
    126e:	46 30       	cpi	r20, 0x06	; 6
    1270:	51 05       	cpc	r21, r1
    1272:	4c f0       	brlt	.+18     	; 0x1286 <_Z21operate_master_manualv+0x216>
    1274:	1e c0       	rjmp	.+60     	; 0x12b2 <_Z21operate_master_manualv+0x242>
    1276:	42 e3       	ldi	r20, 0x32	; 50
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	ba 01       	movw	r22, r20
    127c:	68 1b       	sub	r22, r24
    127e:	79 0b       	sbc	r23, r25
    1280:	66 30       	cpi	r22, 0x06	; 6
    1282:	71 05       	cpc	r23, r1
    1284:	b4 f4       	brge	.+44     	; 0x12b2 <_Z21operate_master_manualv+0x242>
    1286:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <rcvdata+0x6>
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	ac 01       	movw	r20, r24
    128e:	42 53       	subi	r20, 0x32	; 50
    1290:	51 09       	sbc	r21, r1
    1292:	14 16       	cp	r1, r20
    1294:	15 06       	cpc	r1, r21
    1296:	2c f4       	brge	.+10     	; 0x12a2 <_Z21operate_master_manualv+0x232>
    1298:	46 30       	cpi	r20, 0x06	; 6
    129a:	51 05       	cpc	r21, r1
    129c:	0c f4       	brge	.+2      	; 0x12a0 <_Z21operate_master_manualv+0x230>
    129e:	63 c0       	rjmp	.+198    	; 0x1366 <_Z21operate_master_manualv+0x2f6>
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <_Z21operate_master_manualv+0x242>
    12a2:	42 e3       	ldi	r20, 0x32	; 50
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	fa 01       	movw	r30, r20
    12a8:	e8 1b       	sub	r30, r24
    12aa:	f9 0b       	sbc	r31, r25
    12ac:	36 97       	sbiw	r30, 0x06	; 6
    12ae:	0c f4       	brge	.+2      	; 0x12b2 <_Z21operate_master_manualv+0x242>
    12b0:	5a c0       	rjmp	.+180    	; 0x1366 <_Z21operate_master_manualv+0x2f6>
	{
		rampupflag_start = true;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rampupflag_start>
		velocity_robot[0] = (LEFTSTICKY-50)*timer_count/60.0 + 50;
    12b8:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <timer_count>
    12bc:	cc e7       	ldi	r28, 0x7C	; 124
    12be:	d2 e0       	ldi	r29, 0x02	; 2
    12c0:	42 03       	mulsu	r20, r18
    12c2:	b0 01       	movw	r22, r0
    12c4:	43 9f       	mul	r20, r19
    12c6:	70 0d       	add	r23, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	07 2e       	mov	r0, r23
    12cc:	00 0c       	add	r0, r0
    12ce:	88 0b       	sbc	r24, r24
    12d0:	99 0b       	sbc	r25, r25
    12d2:	6a d2       	rcall	.+1236   	; 0x17a8 <__floatsisf>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e7       	ldi	r20, 0x70	; 112
    12da:	52 e4       	ldi	r21, 0x42	; 66
    12dc:	ca d1       	rcall	.+916    	; 0x1672 <__divsf3>
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	48 e4       	ldi	r20, 0x48	; 72
    12e4:	52 e4       	ldi	r21, 0x42	; 66
    12e6:	5d d1       	rcall	.+698    	; 0x15a2 <__addsf3>
    12e8:	31 d2       	rcall	.+1122   	; 0x174c <__fixunssfsi>
    12ea:	68 83       	st	Y, r22
		velocity_robot[1] = (LEFTSTICKX-50)*timer_count/60.0 + 50;
    12ec:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <timer_count>
    12f0:	03 e8       	ldi	r16, 0x83	; 131
    12f2:	12 e0       	ldi	r17, 0x02	; 2
    12f4:	f8 01       	movw	r30, r16
    12f6:	24 81       	ldd	r18, Z+4	; 0x04
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	22 53       	subi	r18, 0x32	; 50
    12fc:	31 09       	sbc	r19, r1
    12fe:	42 03       	mulsu	r20, r18
    1300:	b0 01       	movw	r22, r0
    1302:	43 9f       	mul	r20, r19
    1304:	70 0d       	add	r23, r0
    1306:	11 24       	eor	r1, r1
    1308:	07 2e       	mov	r0, r23
    130a:	00 0c       	add	r0, r0
    130c:	88 0b       	sbc	r24, r24
    130e:	99 0b       	sbc	r25, r25
    1310:	4b d2       	rcall	.+1174   	; 0x17a8 <__floatsisf>
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e7       	ldi	r20, 0x70	; 112
    1318:	52 e4       	ldi	r21, 0x42	; 66
    131a:	ab d1       	rcall	.+854    	; 0x1672 <__divsf3>
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	48 e4       	ldi	r20, 0x48	; 72
    1322:	52 e4       	ldi	r21, 0x42	; 66
    1324:	3e d1       	rcall	.+636    	; 0x15a2 <__addsf3>
    1326:	12 d2       	rcall	.+1060   	; 0x174c <__fixunssfsi>
    1328:	69 83       	std	Y+1, r22	; 0x01
		velocity_robot[2] = (RIGHTSTICKX-50)*timer_count/60.0 + 50;
    132a:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <timer_count>
    132e:	f8 01       	movw	r30, r16
    1330:	26 81       	ldd	r18, Z+6	; 0x06
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	22 53       	subi	r18, 0x32	; 50
    1336:	31 09       	sbc	r19, r1
    1338:	42 03       	mulsu	r20, r18
    133a:	b0 01       	movw	r22, r0
    133c:	43 9f       	mul	r20, r19
    133e:	70 0d       	add	r23, r0
    1340:	11 24       	eor	r1, r1
    1342:	07 2e       	mov	r0, r23
    1344:	00 0c       	add	r0, r0
    1346:	88 0b       	sbc	r24, r24
    1348:	99 0b       	sbc	r25, r25
    134a:	2e d2       	rcall	.+1116   	; 0x17a8 <__floatsisf>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e7       	ldi	r20, 0x70	; 112
    1352:	52 e4       	ldi	r21, 0x42	; 66
    1354:	8e d1       	rcall	.+796    	; 0x1672 <__divsf3>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	48 e4       	ldi	r20, 0x48	; 72
    135c:	52 e4       	ldi	r21, 0x42	; 66
    135e:	21 d1       	rcall	.+578    	; 0x15a2 <__addsf3>
	}
	else
	rampupflag_start = false;
    1360:	f5 d1       	rcall	.+1002   	; 0x174c <__fixunssfsi>
    1362:	6a 83       	std	Y+2, r22	; 0x02
	
	operation_of_rack();	
    1364:	02 c0       	rjmp	.+4      	; 0x136a <_Z21operate_master_manualv+0x2fa>
    1366:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rampupflag_start>
	rack_limit_check();
    136a:	5a db       	rcall	.-2380   	; 0xa20 <_Z17operation_of_rackv>
	orientation_check();
    136c:	c5 d8       	rcall	.-3702   	; 0x4f8 <_Z16rack_limit_checkv>
    136e:	3b dd       	rcall	.-1418   	; 0xde6 <_Z17orientation_checkv>

}
    1370:	0d c0       	rjmp	.+26     	; 0x138c <_Z21operate_master_manualv+0x31c>
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    137a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    137e:	5a cf       	rjmp	.-332    	; 0x1234 <_Z21operate_master_manualv+0x1c4>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 )
    1380:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <rcvdata+0x3>
    1384:	85 31       	cpi	r24, 0x15	; 21
    1386:	08 f0       	brcs	.+2      	; 0x138a <_Z21operate_master_manualv+0x31a>
    1388:	4a cf       	rjmp	.-364    	; 0x121e <_Z21operate_master_manualv+0x1ae>
    138a:	50 cf       	rjmp	.-352    	; 0x122c <_Z21operate_master_manualv+0x1bc>
	
	operation_of_rack();	
	rack_limit_check();
	orientation_check();

}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <__vector_21>:
//Global timer interrupt

/***********************************Ramping from the joystick analog button*************************************/

ISR(TIMER0_COMPA_vect)
{
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	8f 93       	push	r24
	if (rampupflag_start)
    13a2:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <rampupflag_start>
    13a6:	88 23       	and	r24, r24
    13a8:	31 f0       	breq	.+12     	; 0x13b6 <__vector_21+0x20>
	timer_count++;
    13aa:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <timer_count>
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <timer_count>
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <__vector_21+0x24>
	else
	timer_count = 0;
    13b6:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <timer_count>
	
	if (timer_count > 60)
    13ba:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <timer_count>
    13be:	8d 33       	cpi	r24, 0x3D	; 61
    13c0:	1c f0       	brlt	.+6      	; 0x13c8 <__vector_21+0x32>
	timer_count = 60;
    13c2:	8c e3       	ldi	r24, 0x3C	; 60
    13c4:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <timer_count>
	

}
    13c8:	8f 91       	pop	r24
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <__vector_6>:

/**********************************************************PROXIMITY_INTERRUPT***********************************************************************/
ISR(PROXIMITY_VECT)
{
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	0b b6       	in	r0, 0x3b	; 59
    13e0:	0f 92       	push	r0
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
	//pcint for slave on to stop the robot
	TOGGLE(STOP_SLAVE);
    13ea:	eb e0       	ldi	r30, 0x0B	; 11
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
    13ee:	90 81       	ld	r25, Z
    13f0:	84 e0       	ldi	r24, 0x04	; 4
    13f2:	89 27       	eor	r24, r25
    13f4:	80 83       	st	Z, r24
}
    13f6:	ff 91       	pop	r31
    13f8:	ef 91       	pop	r30
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	0f 90       	pop	r0
    1400:	0b be       	out	0x3b, r0	; 59
    1402:	0f 90       	pop	r0
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	0f 90       	pop	r0
    1408:	1f 90       	pop	r1
    140a:	18 95       	reti

0000140c <__vector_5>:

/*************************************************************Line-tracker junction interrupt****************************************************************/

ISR(JUNCTION_VECT)
{
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	0b b6       	in	r0, 0x3b	; 59
    1418:	0f 92       	push	r0
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
	//pcint for slave for junction
	TOGGLE(STOP_SLAVE);
    1422:	eb e0       	ldi	r30, 0x0B	; 11
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	90 81       	ld	r25, Z
    1428:	84 e0       	ldi	r24, 0x04	; 4
    142a:	89 27       	eor	r24, r25
    142c:	80 83       	st	Z, r24
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	0f 90       	pop	r0
    1438:	0b be       	out	0x3b, r0	; 59
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	0f 90       	pop	r0
    1440:	1f 90       	pop	r1
    1442:	18 95       	reti

00001444 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    1444:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1448:	87 e6       	ldi	r24, 0x67	; 103
    144a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    144e:	88 e9       	ldi	r24, 0x98	; 152
    1450:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1454:	86 e0       	ldi	r24, 0x06	; 6
    1456:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    145a:	08 95       	ret

0000145c <_Z9initUART2v>:
    145c:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <_ZL9datacount>
    1460:	e3 e8       	ldi	r30, 0x83	; 131
    1462:	f2 e0       	ldi	r31, 0x02	; 2
    1464:	10 82       	st	Z, r1
    1466:	11 82       	std	Z+1, r1	; 0x01
    1468:	12 82       	std	Z+2, r1	; 0x02
    146a:	13 82       	std	Z+3, r1	; 0x03
    146c:	82 e3       	ldi	r24, 0x32	; 50
    146e:	84 83       	std	Z+4, r24	; 0x04
    1470:	85 83       	std	Z+5, r24	; 0x05
    1472:	86 83       	std	Z+6, r24	; 0x06
    1474:	87 83       	std	Z+7, r24	; 0x07
    1476:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    147a:	89 e1       	ldi	r24, 0x19	; 25
    147c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    1480:	88 e9       	ldi	r24, 0x98	; 152
    1482:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    1486:	86 e0       	ldi	r24, 0x06	; 6
    1488:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    148c:	08 95       	ret

0000148e <_Z9initUART3v>:
    148e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
    1492:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    1496:	89 e1       	ldi	r24, 0x19	; 25
    1498:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    149c:	88 e9       	ldi	r24, 0x98	; 152
    149e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    14a2:	86 e0       	ldi	r24, 0x06	; 6
    14a4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    14a8:	08 95       	ret

000014aa <_Z13UART3Transmith>:
    14aa:	e0 e3       	ldi	r30, 0x30	; 48
    14ac:	f1 e0       	ldi	r31, 0x01	; 1
    14ae:	90 81       	ld	r25, Z
    14b0:	95 ff       	sbrs	r25, 5
    14b2:	fd cf       	rjmp	.-6      	; 0x14ae <_Z13UART3Transmith+0x4>
    14b4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    14b8:	08 95       	ret

000014ba <__vector_25>:

ISR(USART0_RX_vect)
{
    14ba:	1f 92       	push	r1
    14bc:	0f 92       	push	r0
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	0f 92       	push	r0
    14c2:	11 24       	eor	r1, r1
    14c4:	8f 93       	push	r24
	buffer=UDR0;
    14c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14ca:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <buffer>
}
    14ce:	8f 91       	pop	r24
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_36>:

ISR(USART1_RX_vect)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	8f 93       	push	r24
	buffer1=UDR1;
    14e6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    14ea:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <buffer1>
	
}
    14ee:	8f 91       	pop	r24
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_51>:

ISR(USART2_RX_vect)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	0b b6       	in	r0, 0x3b	; 59
    1506:	0f 92       	push	r0
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
	buffer2=UDR2;
    1510:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1514:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <buffer2>
		if(rcvflag)
    1518:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <rcvflag>
    151c:	99 23       	and	r25, r25
    151e:	89 f0       	breq	.+34     	; 0x1542 <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    1520:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <_ZL9datacount>
    1524:	e9 2f       	mov	r30, r25
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	ed 57       	subi	r30, 0x7D	; 125
    152a:	fd 4f       	sbci	r31, 0xFD	; 253
    152c:	80 83       	st	Z, r24
			datacount++;
    152e:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>7)
    1530:	98 30       	cpi	r25, 0x08	; 8
    1532:	18 f4       	brcc	.+6      	; 0x153a <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    1534:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <_ZL9datacount>
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    153a:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <_ZL9datacount>
				rcvflag = false; 
    153e:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
    1542:	8f 37       	cpi	r24, 0x7F	; 127
    1544:	19 f4       	brne	.+6      	; 0x154c <__vector_51+0x52>
			rcvflag=true;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <rcvflag>
		
}
    154c:	ff 91       	pop	r31
    154e:	ef 91       	pop	r30
    1550:	9f 91       	pop	r25
    1552:	8f 91       	pop	r24
    1554:	0f 90       	pop	r0
    1556:	0b be       	out	0x3b, r0	; 59
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <__vector_54>:


ISR(USART3_RX_vect)
{
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
	buffer3=UDR3;
    1570:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    1574:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <buffer3>
	
	if(rcv_slave_flag)
    1578:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <rcv_slave_flag>
    157c:	99 23       	and	r25, r25
    157e:	21 f0       	breq	.+8      	; 0x1588 <__vector_54+0x26>
	{
		rcv_value_slave = buffer3;
    1580:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <rcv_value_slave>
		rcv_slave_flag = false;
    1584:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <rcv_slave_flag>
	}
	if(buffer3 == START_BYTE_MASTER)
    1588:	8c 3f       	cpi	r24, 0xFC	; 252
    158a:	19 f4       	brne	.+6      	; 0x1592 <__vector_54+0x30>
		rcv_slave_flag = true;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <rcv_slave_flag>
}
    1592:	9f 91       	pop	r25
    1594:	8f 91       	pop	r24
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__subsf3>:
    15a0:	50 58       	subi	r21, 0x80	; 128

000015a2 <__addsf3>:
    15a2:	bb 27       	eor	r27, r27
    15a4:	aa 27       	eor	r26, r26
    15a6:	0e d0       	rcall	.+28     	; 0x15c4 <__addsf3x>
    15a8:	75 c1       	rjmp	.+746    	; 0x1894 <__fp_round>
    15aa:	66 d1       	rcall	.+716    	; 0x1878 <__fp_pscA>
    15ac:	30 f0       	brcs	.+12     	; 0x15ba <__addsf3+0x18>
    15ae:	6b d1       	rcall	.+726    	; 0x1886 <__fp_pscB>
    15b0:	20 f0       	brcs	.+8      	; 0x15ba <__addsf3+0x18>
    15b2:	31 f4       	brne	.+12     	; 0x15c0 <__addsf3+0x1e>
    15b4:	9f 3f       	cpi	r25, 0xFF	; 255
    15b6:	11 f4       	brne	.+4      	; 0x15bc <__addsf3+0x1a>
    15b8:	1e f4       	brtc	.+6      	; 0x15c0 <__addsf3+0x1e>
    15ba:	5b c1       	rjmp	.+694    	; 0x1872 <__fp_nan>
    15bc:	0e f4       	brtc	.+2      	; 0x15c0 <__addsf3+0x1e>
    15be:	e0 95       	com	r30
    15c0:	e7 fb       	bst	r30, 7
    15c2:	51 c1       	rjmp	.+674    	; 0x1866 <__fp_inf>

000015c4 <__addsf3x>:
    15c4:	e9 2f       	mov	r30, r25
    15c6:	77 d1       	rcall	.+750    	; 0x18b6 <__fp_split3>
    15c8:	80 f3       	brcs	.-32     	; 0x15aa <__addsf3+0x8>
    15ca:	ba 17       	cp	r27, r26
    15cc:	62 07       	cpc	r22, r18
    15ce:	73 07       	cpc	r23, r19
    15d0:	84 07       	cpc	r24, r20
    15d2:	95 07       	cpc	r25, r21
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <__addsf3x+0x18>
    15d6:	71 f4       	brne	.+28     	; 0x15f4 <__addsf3x+0x30>
    15d8:	9e f5       	brtc	.+102    	; 0x1640 <__addsf3x+0x7c>
    15da:	8f c1       	rjmp	.+798    	; 0x18fa <__fp_zero>
    15dc:	0e f4       	brtc	.+2      	; 0x15e0 <__addsf3x+0x1c>
    15de:	e0 95       	com	r30
    15e0:	0b 2e       	mov	r0, r27
    15e2:	ba 2f       	mov	r27, r26
    15e4:	a0 2d       	mov	r26, r0
    15e6:	0b 01       	movw	r0, r22
    15e8:	b9 01       	movw	r22, r18
    15ea:	90 01       	movw	r18, r0
    15ec:	0c 01       	movw	r0, r24
    15ee:	ca 01       	movw	r24, r20
    15f0:	a0 01       	movw	r20, r0
    15f2:	11 24       	eor	r1, r1
    15f4:	ff 27       	eor	r31, r31
    15f6:	59 1b       	sub	r21, r25
    15f8:	99 f0       	breq	.+38     	; 0x1620 <__addsf3x+0x5c>
    15fa:	59 3f       	cpi	r21, 0xF9	; 249
    15fc:	50 f4       	brcc	.+20     	; 0x1612 <__addsf3x+0x4e>
    15fe:	50 3e       	cpi	r21, 0xE0	; 224
    1600:	68 f1       	brcs	.+90     	; 0x165c <__addsf3x+0x98>
    1602:	1a 16       	cp	r1, r26
    1604:	f0 40       	sbci	r31, 0x00	; 0
    1606:	a2 2f       	mov	r26, r18
    1608:	23 2f       	mov	r18, r19
    160a:	34 2f       	mov	r19, r20
    160c:	44 27       	eor	r20, r20
    160e:	58 5f       	subi	r21, 0xF8	; 248
    1610:	f3 cf       	rjmp	.-26     	; 0x15f8 <__addsf3x+0x34>
    1612:	46 95       	lsr	r20
    1614:	37 95       	ror	r19
    1616:	27 95       	ror	r18
    1618:	a7 95       	ror	r26
    161a:	f0 40       	sbci	r31, 0x00	; 0
    161c:	53 95       	inc	r21
    161e:	c9 f7       	brne	.-14     	; 0x1612 <__addsf3x+0x4e>
    1620:	7e f4       	brtc	.+30     	; 0x1640 <__addsf3x+0x7c>
    1622:	1f 16       	cp	r1, r31
    1624:	ba 0b       	sbc	r27, r26
    1626:	62 0b       	sbc	r22, r18
    1628:	73 0b       	sbc	r23, r19
    162a:	84 0b       	sbc	r24, r20
    162c:	ba f0       	brmi	.+46     	; 0x165c <__addsf3x+0x98>
    162e:	91 50       	subi	r25, 0x01	; 1
    1630:	a1 f0       	breq	.+40     	; 0x165a <__addsf3x+0x96>
    1632:	ff 0f       	add	r31, r31
    1634:	bb 1f       	adc	r27, r27
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	c2 f7       	brpl	.-16     	; 0x162e <__addsf3x+0x6a>
    163e:	0e c0       	rjmp	.+28     	; 0x165c <__addsf3x+0x98>
    1640:	ba 0f       	add	r27, r26
    1642:	62 1f       	adc	r22, r18
    1644:	73 1f       	adc	r23, r19
    1646:	84 1f       	adc	r24, r20
    1648:	48 f4       	brcc	.+18     	; 0x165c <__addsf3x+0x98>
    164a:	87 95       	ror	r24
    164c:	77 95       	ror	r23
    164e:	67 95       	ror	r22
    1650:	b7 95       	ror	r27
    1652:	f7 95       	ror	r31
    1654:	9e 3f       	cpi	r25, 0xFE	; 254
    1656:	08 f0       	brcs	.+2      	; 0x165a <__addsf3x+0x96>
    1658:	b3 cf       	rjmp	.-154    	; 0x15c0 <__addsf3+0x1e>
    165a:	93 95       	inc	r25
    165c:	88 0f       	add	r24, r24
    165e:	08 f0       	brcs	.+2      	; 0x1662 <__addsf3x+0x9e>
    1660:	99 27       	eor	r25, r25
    1662:	ee 0f       	add	r30, r30
    1664:	97 95       	ror	r25
    1666:	87 95       	ror	r24
    1668:	08 95       	ret

0000166a <__cmpsf2>:
    166a:	d9 d0       	rcall	.+434    	; 0x181e <__fp_cmp>
    166c:	08 f4       	brcc	.+2      	; 0x1670 <__cmpsf2+0x6>
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	08 95       	ret

00001672 <__divsf3>:
    1672:	0c d0       	rcall	.+24     	; 0x168c <__divsf3x>
    1674:	0f c1       	rjmp	.+542    	; 0x1894 <__fp_round>
    1676:	07 d1       	rcall	.+526    	; 0x1886 <__fp_pscB>
    1678:	40 f0       	brcs	.+16     	; 0x168a <__divsf3+0x18>
    167a:	fe d0       	rcall	.+508    	; 0x1878 <__fp_pscA>
    167c:	30 f0       	brcs	.+12     	; 0x168a <__divsf3+0x18>
    167e:	21 f4       	brne	.+8      	; 0x1688 <__divsf3+0x16>
    1680:	5f 3f       	cpi	r21, 0xFF	; 255
    1682:	19 f0       	breq	.+6      	; 0x168a <__divsf3+0x18>
    1684:	f0 c0       	rjmp	.+480    	; 0x1866 <__fp_inf>
    1686:	51 11       	cpse	r21, r1
    1688:	39 c1       	rjmp	.+626    	; 0x18fc <__fp_szero>
    168a:	f3 c0       	rjmp	.+486    	; 0x1872 <__fp_nan>

0000168c <__divsf3x>:
    168c:	14 d1       	rcall	.+552    	; 0x18b6 <__fp_split3>
    168e:	98 f3       	brcs	.-26     	; 0x1676 <__divsf3+0x4>

00001690 <__divsf3_pse>:
    1690:	99 23       	and	r25, r25
    1692:	c9 f3       	breq	.-14     	; 0x1686 <__divsf3+0x14>
    1694:	55 23       	and	r21, r21
    1696:	b1 f3       	breq	.-20     	; 0x1684 <__divsf3+0x12>
    1698:	95 1b       	sub	r25, r21
    169a:	55 0b       	sbc	r21, r21
    169c:	bb 27       	eor	r27, r27
    169e:	aa 27       	eor	r26, r26
    16a0:	62 17       	cp	r22, r18
    16a2:	73 07       	cpc	r23, r19
    16a4:	84 07       	cpc	r24, r20
    16a6:	38 f0       	brcs	.+14     	; 0x16b6 <__divsf3_pse+0x26>
    16a8:	9f 5f       	subi	r25, 0xFF	; 255
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	22 0f       	add	r18, r18
    16ae:	33 1f       	adc	r19, r19
    16b0:	44 1f       	adc	r20, r20
    16b2:	aa 1f       	adc	r26, r26
    16b4:	a9 f3       	breq	.-22     	; 0x16a0 <__divsf3_pse+0x10>
    16b6:	33 d0       	rcall	.+102    	; 0x171e <__divsf3_pse+0x8e>
    16b8:	0e 2e       	mov	r0, r30
    16ba:	3a f0       	brmi	.+14     	; 0x16ca <__divsf3_pse+0x3a>
    16bc:	e0 e8       	ldi	r30, 0x80	; 128
    16be:	30 d0       	rcall	.+96     	; 0x1720 <__divsf3_pse+0x90>
    16c0:	91 50       	subi	r25, 0x01	; 1
    16c2:	50 40       	sbci	r21, 0x00	; 0
    16c4:	e6 95       	lsr	r30
    16c6:	00 1c       	adc	r0, r0
    16c8:	ca f7       	brpl	.-14     	; 0x16bc <__divsf3_pse+0x2c>
    16ca:	29 d0       	rcall	.+82     	; 0x171e <__divsf3_pse+0x8e>
    16cc:	fe 2f       	mov	r31, r30
    16ce:	27 d0       	rcall	.+78     	; 0x171e <__divsf3_pse+0x8e>
    16d0:	66 0f       	add	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	88 1f       	adc	r24, r24
    16d6:	bb 1f       	adc	r27, r27
    16d8:	26 17       	cp	r18, r22
    16da:	37 07       	cpc	r19, r23
    16dc:	48 07       	cpc	r20, r24
    16de:	ab 07       	cpc	r26, r27
    16e0:	b0 e8       	ldi	r27, 0x80	; 128
    16e2:	09 f0       	breq	.+2      	; 0x16e6 <__divsf3_pse+0x56>
    16e4:	bb 0b       	sbc	r27, r27
    16e6:	80 2d       	mov	r24, r0
    16e8:	bf 01       	movw	r22, r30
    16ea:	ff 27       	eor	r31, r31
    16ec:	93 58       	subi	r25, 0x83	; 131
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255
    16f0:	2a f0       	brmi	.+10     	; 0x16fc <__divsf3_pse+0x6c>
    16f2:	9e 3f       	cpi	r25, 0xFE	; 254
    16f4:	51 05       	cpc	r21, r1
    16f6:	68 f0       	brcs	.+26     	; 0x1712 <__divsf3_pse+0x82>
    16f8:	b6 c0       	rjmp	.+364    	; 0x1866 <__fp_inf>
    16fa:	00 c1       	rjmp	.+512    	; 0x18fc <__fp_szero>
    16fc:	5f 3f       	cpi	r21, 0xFF	; 255
    16fe:	ec f3       	brlt	.-6      	; 0x16fa <__divsf3_pse+0x6a>
    1700:	98 3e       	cpi	r25, 0xE8	; 232
    1702:	dc f3       	brlt	.-10     	; 0x16fa <__divsf3_pse+0x6a>
    1704:	86 95       	lsr	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b7 95       	ror	r27
    170c:	f7 95       	ror	r31
    170e:	9f 5f       	subi	r25, 0xFF	; 255
    1710:	c9 f7       	brne	.-14     	; 0x1704 <__divsf3_pse+0x74>
    1712:	88 0f       	add	r24, r24
    1714:	91 1d       	adc	r25, r1
    1716:	96 95       	lsr	r25
    1718:	87 95       	ror	r24
    171a:	97 f9       	bld	r25, 7
    171c:	08 95       	ret
    171e:	e1 e0       	ldi	r30, 0x01	; 1
    1720:	66 0f       	add	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	88 1f       	adc	r24, r24
    1726:	bb 1f       	adc	r27, r27
    1728:	62 17       	cp	r22, r18
    172a:	73 07       	cpc	r23, r19
    172c:	84 07       	cpc	r24, r20
    172e:	ba 07       	cpc	r27, r26
    1730:	20 f0       	brcs	.+8      	; 0x173a <__divsf3_pse+0xaa>
    1732:	62 1b       	sub	r22, r18
    1734:	73 0b       	sbc	r23, r19
    1736:	84 0b       	sbc	r24, r20
    1738:	ba 0b       	sbc	r27, r26
    173a:	ee 1f       	adc	r30, r30
    173c:	88 f7       	brcc	.-30     	; 0x1720 <__divsf3_pse+0x90>
    173e:	e0 95       	com	r30
    1740:	08 95       	ret

00001742 <__fixsfsi>:
    1742:	04 d0       	rcall	.+8      	; 0x174c <__fixunssfsi>
    1744:	68 94       	set
    1746:	b1 11       	cpse	r27, r1
    1748:	d9 c0       	rjmp	.+434    	; 0x18fc <__fp_szero>
    174a:	08 95       	ret

0000174c <__fixunssfsi>:
    174c:	bc d0       	rcall	.+376    	; 0x18c6 <__fp_splitA>
    174e:	88 f0       	brcs	.+34     	; 0x1772 <__fixunssfsi+0x26>
    1750:	9f 57       	subi	r25, 0x7F	; 127
    1752:	90 f0       	brcs	.+36     	; 0x1778 <__fixunssfsi+0x2c>
    1754:	b9 2f       	mov	r27, r25
    1756:	99 27       	eor	r25, r25
    1758:	b7 51       	subi	r27, 0x17	; 23
    175a:	a0 f0       	brcs	.+40     	; 0x1784 <__fixunssfsi+0x38>
    175c:	d1 f0       	breq	.+52     	; 0x1792 <__fixunssfsi+0x46>
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	1a f0       	brmi	.+6      	; 0x176e <__fixunssfsi+0x22>
    1768:	ba 95       	dec	r27
    176a:	c9 f7       	brne	.-14     	; 0x175e <__fixunssfsi+0x12>
    176c:	12 c0       	rjmp	.+36     	; 0x1792 <__fixunssfsi+0x46>
    176e:	b1 30       	cpi	r27, 0x01	; 1
    1770:	81 f0       	breq	.+32     	; 0x1792 <__fixunssfsi+0x46>
    1772:	c3 d0       	rcall	.+390    	; 0x18fa <__fp_zero>
    1774:	b1 e0       	ldi	r27, 0x01	; 1
    1776:	08 95       	ret
    1778:	c0 c0       	rjmp	.+384    	; 0x18fa <__fp_zero>
    177a:	67 2f       	mov	r22, r23
    177c:	78 2f       	mov	r23, r24
    177e:	88 27       	eor	r24, r24
    1780:	b8 5f       	subi	r27, 0xF8	; 248
    1782:	39 f0       	breq	.+14     	; 0x1792 <__fixunssfsi+0x46>
    1784:	b9 3f       	cpi	r27, 0xF9	; 249
    1786:	cc f3       	brlt	.-14     	; 0x177a <__fixunssfsi+0x2e>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b3 95       	inc	r27
    1790:	d9 f7       	brne	.-10     	; 0x1788 <__fixunssfsi+0x3c>
    1792:	3e f4       	brtc	.+14     	; 0x17a2 <__fixunssfsi+0x56>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	08 95       	ret

000017a4 <__floatunsisf>:
    17a4:	e8 94       	clt
    17a6:	09 c0       	rjmp	.+18     	; 0x17ba <__floatsisf+0x12>

000017a8 <__floatsisf>:
    17a8:	97 fb       	bst	r25, 7
    17aa:	3e f4       	brtc	.+14     	; 0x17ba <__floatsisf+0x12>
    17ac:	90 95       	com	r25
    17ae:	80 95       	com	r24
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	99 23       	and	r25, r25
    17bc:	a9 f0       	breq	.+42     	; 0x17e8 <__floatsisf+0x40>
    17be:	f9 2f       	mov	r31, r25
    17c0:	96 e9       	ldi	r25, 0x96	; 150
    17c2:	bb 27       	eor	r27, r27
    17c4:	93 95       	inc	r25
    17c6:	f6 95       	lsr	r31
    17c8:	87 95       	ror	r24
    17ca:	77 95       	ror	r23
    17cc:	67 95       	ror	r22
    17ce:	b7 95       	ror	r27
    17d0:	f1 11       	cpse	r31, r1
    17d2:	f8 cf       	rjmp	.-16     	; 0x17c4 <__floatsisf+0x1c>
    17d4:	fa f4       	brpl	.+62     	; 0x1814 <__floatsisf+0x6c>
    17d6:	bb 0f       	add	r27, r27
    17d8:	11 f4       	brne	.+4      	; 0x17de <__floatsisf+0x36>
    17da:	60 ff       	sbrs	r22, 0
    17dc:	1b c0       	rjmp	.+54     	; 0x1814 <__floatsisf+0x6c>
    17de:	6f 5f       	subi	r22, 0xFF	; 255
    17e0:	7f 4f       	sbci	r23, 0xFF	; 255
    17e2:	8f 4f       	sbci	r24, 0xFF	; 255
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	16 c0       	rjmp	.+44     	; 0x1814 <__floatsisf+0x6c>
    17e8:	88 23       	and	r24, r24
    17ea:	11 f0       	breq	.+4      	; 0x17f0 <__floatsisf+0x48>
    17ec:	96 e9       	ldi	r25, 0x96	; 150
    17ee:	11 c0       	rjmp	.+34     	; 0x1812 <__floatsisf+0x6a>
    17f0:	77 23       	and	r23, r23
    17f2:	21 f0       	breq	.+8      	; 0x17fc <__floatsisf+0x54>
    17f4:	9e e8       	ldi	r25, 0x8E	; 142
    17f6:	87 2f       	mov	r24, r23
    17f8:	76 2f       	mov	r23, r22
    17fa:	05 c0       	rjmp	.+10     	; 0x1806 <__floatsisf+0x5e>
    17fc:	66 23       	and	r22, r22
    17fe:	71 f0       	breq	.+28     	; 0x181c <__floatsisf+0x74>
    1800:	96 e8       	ldi	r25, 0x86	; 134
    1802:	86 2f       	mov	r24, r22
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	2a f0       	brmi	.+10     	; 0x1814 <__floatsisf+0x6c>
    180a:	9a 95       	dec	r25
    180c:	66 0f       	add	r22, r22
    180e:	77 1f       	adc	r23, r23
    1810:	88 1f       	adc	r24, r24
    1812:	da f7       	brpl	.-10     	; 0x180a <__floatsisf+0x62>
    1814:	88 0f       	add	r24, r24
    1816:	96 95       	lsr	r25
    1818:	87 95       	ror	r24
    181a:	97 f9       	bld	r25, 7
    181c:	08 95       	ret

0000181e <__fp_cmp>:
    181e:	99 0f       	add	r25, r25
    1820:	00 08       	sbc	r0, r0
    1822:	55 0f       	add	r21, r21
    1824:	aa 0b       	sbc	r26, r26
    1826:	e0 e8       	ldi	r30, 0x80	; 128
    1828:	fe ef       	ldi	r31, 0xFE	; 254
    182a:	16 16       	cp	r1, r22
    182c:	17 06       	cpc	r1, r23
    182e:	e8 07       	cpc	r30, r24
    1830:	f9 07       	cpc	r31, r25
    1832:	c0 f0       	brcs	.+48     	; 0x1864 <__fp_cmp+0x46>
    1834:	12 16       	cp	r1, r18
    1836:	13 06       	cpc	r1, r19
    1838:	e4 07       	cpc	r30, r20
    183a:	f5 07       	cpc	r31, r21
    183c:	98 f0       	brcs	.+38     	; 0x1864 <__fp_cmp+0x46>
    183e:	62 1b       	sub	r22, r18
    1840:	73 0b       	sbc	r23, r19
    1842:	84 0b       	sbc	r24, r20
    1844:	95 0b       	sbc	r25, r21
    1846:	39 f4       	brne	.+14     	; 0x1856 <__fp_cmp+0x38>
    1848:	0a 26       	eor	r0, r26
    184a:	61 f0       	breq	.+24     	; 0x1864 <__fp_cmp+0x46>
    184c:	23 2b       	or	r18, r19
    184e:	24 2b       	or	r18, r20
    1850:	25 2b       	or	r18, r21
    1852:	21 f4       	brne	.+8      	; 0x185c <__fp_cmp+0x3e>
    1854:	08 95       	ret
    1856:	0a 26       	eor	r0, r26
    1858:	09 f4       	brne	.+2      	; 0x185c <__fp_cmp+0x3e>
    185a:	a1 40       	sbci	r26, 0x01	; 1
    185c:	a6 95       	lsr	r26
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	81 1d       	adc	r24, r1
    1862:	81 1d       	adc	r24, r1
    1864:	08 95       	ret

00001866 <__fp_inf>:
    1866:	97 f9       	bld	r25, 7
    1868:	9f 67       	ori	r25, 0x7F	; 127
    186a:	80 e8       	ldi	r24, 0x80	; 128
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	08 95       	ret

00001872 <__fp_nan>:
    1872:	9f ef       	ldi	r25, 0xFF	; 255
    1874:	80 ec       	ldi	r24, 0xC0	; 192
    1876:	08 95       	ret

00001878 <__fp_pscA>:
    1878:	00 24       	eor	r0, r0
    187a:	0a 94       	dec	r0
    187c:	16 16       	cp	r1, r22
    187e:	17 06       	cpc	r1, r23
    1880:	18 06       	cpc	r1, r24
    1882:	09 06       	cpc	r0, r25
    1884:	08 95       	ret

00001886 <__fp_pscB>:
    1886:	00 24       	eor	r0, r0
    1888:	0a 94       	dec	r0
    188a:	12 16       	cp	r1, r18
    188c:	13 06       	cpc	r1, r19
    188e:	14 06       	cpc	r1, r20
    1890:	05 06       	cpc	r0, r21
    1892:	08 95       	ret

00001894 <__fp_round>:
    1894:	09 2e       	mov	r0, r25
    1896:	03 94       	inc	r0
    1898:	00 0c       	add	r0, r0
    189a:	11 f4       	brne	.+4      	; 0x18a0 <__fp_round+0xc>
    189c:	88 23       	and	r24, r24
    189e:	52 f0       	brmi	.+20     	; 0x18b4 <__fp_round+0x20>
    18a0:	bb 0f       	add	r27, r27
    18a2:	40 f4       	brcc	.+16     	; 0x18b4 <__fp_round+0x20>
    18a4:	bf 2b       	or	r27, r31
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__fp_round+0x18>
    18a8:	60 ff       	sbrs	r22, 0
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <__fp_round+0x20>
    18ac:	6f 5f       	subi	r22, 0xFF	; 255
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	08 95       	ret

000018b6 <__fp_split3>:
    18b6:	57 fd       	sbrc	r21, 7
    18b8:	90 58       	subi	r25, 0x80	; 128
    18ba:	44 0f       	add	r20, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	59 f0       	breq	.+22     	; 0x18d6 <__fp_splitA+0x10>
    18c0:	5f 3f       	cpi	r21, 0xFF	; 255
    18c2:	71 f0       	breq	.+28     	; 0x18e0 <__fp_splitA+0x1a>
    18c4:	47 95       	ror	r20

000018c6 <__fp_splitA>:
    18c6:	88 0f       	add	r24, r24
    18c8:	97 fb       	bst	r25, 7
    18ca:	99 1f       	adc	r25, r25
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <__fp_splitA+0x20>
    18ce:	9f 3f       	cpi	r25, 0xFF	; 255
    18d0:	79 f0       	breq	.+30     	; 0x18f0 <__fp_splitA+0x2a>
    18d2:	87 95       	ror	r24
    18d4:	08 95       	ret
    18d6:	12 16       	cp	r1, r18
    18d8:	13 06       	cpc	r1, r19
    18da:	14 06       	cpc	r1, r20
    18dc:	55 1f       	adc	r21, r21
    18de:	f2 cf       	rjmp	.-28     	; 0x18c4 <__fp_split3+0xe>
    18e0:	46 95       	lsr	r20
    18e2:	f1 df       	rcall	.-30     	; 0x18c6 <__fp_splitA>
    18e4:	08 c0       	rjmp	.+16     	; 0x18f6 <__fp_splitA+0x30>
    18e6:	16 16       	cp	r1, r22
    18e8:	17 06       	cpc	r1, r23
    18ea:	18 06       	cpc	r1, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	f1 cf       	rjmp	.-30     	; 0x18d2 <__fp_splitA+0xc>
    18f0:	86 95       	lsr	r24
    18f2:	71 05       	cpc	r23, r1
    18f4:	61 05       	cpc	r22, r1
    18f6:	08 94       	sec
    18f8:	08 95       	ret

000018fa <__fp_zero>:
    18fa:	e8 94       	clt

000018fc <__fp_szero>:
    18fc:	bb 27       	eor	r27, r27
    18fe:	66 27       	eor	r22, r22
    1900:	77 27       	eor	r23, r23
    1902:	cb 01       	movw	r24, r22
    1904:	97 f9       	bld	r25, 7
    1906:	08 95       	ret

00001908 <__mulsf3>:
    1908:	0b d0       	rcall	.+22     	; 0x1920 <__mulsf3x>
    190a:	c4 cf       	rjmp	.-120    	; 0x1894 <__fp_round>
    190c:	b5 df       	rcall	.-150    	; 0x1878 <__fp_pscA>
    190e:	28 f0       	brcs	.+10     	; 0x191a <__mulsf3+0x12>
    1910:	ba df       	rcall	.-140    	; 0x1886 <__fp_pscB>
    1912:	18 f0       	brcs	.+6      	; 0x191a <__mulsf3+0x12>
    1914:	95 23       	and	r25, r21
    1916:	09 f0       	breq	.+2      	; 0x191a <__mulsf3+0x12>
    1918:	a6 cf       	rjmp	.-180    	; 0x1866 <__fp_inf>
    191a:	ab cf       	rjmp	.-170    	; 0x1872 <__fp_nan>
    191c:	11 24       	eor	r1, r1
    191e:	ee cf       	rjmp	.-36     	; 0x18fc <__fp_szero>

00001920 <__mulsf3x>:
    1920:	ca df       	rcall	.-108    	; 0x18b6 <__fp_split3>
    1922:	a0 f3       	brcs	.-24     	; 0x190c <__mulsf3+0x4>

00001924 <__mulsf3_pse>:
    1924:	95 9f       	mul	r25, r21
    1926:	d1 f3       	breq	.-12     	; 0x191c <__mulsf3+0x14>
    1928:	95 0f       	add	r25, r21
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	55 1f       	adc	r21, r21
    192e:	62 9f       	mul	r22, r18
    1930:	f0 01       	movw	r30, r0
    1932:	72 9f       	mul	r23, r18
    1934:	bb 27       	eor	r27, r27
    1936:	f0 0d       	add	r31, r0
    1938:	b1 1d       	adc	r27, r1
    193a:	63 9f       	mul	r22, r19
    193c:	aa 27       	eor	r26, r26
    193e:	f0 0d       	add	r31, r0
    1940:	b1 1d       	adc	r27, r1
    1942:	aa 1f       	adc	r26, r26
    1944:	64 9f       	mul	r22, r20
    1946:	66 27       	eor	r22, r22
    1948:	b0 0d       	add	r27, r0
    194a:	a1 1d       	adc	r26, r1
    194c:	66 1f       	adc	r22, r22
    194e:	82 9f       	mul	r24, r18
    1950:	22 27       	eor	r18, r18
    1952:	b0 0d       	add	r27, r0
    1954:	a1 1d       	adc	r26, r1
    1956:	62 1f       	adc	r22, r18
    1958:	73 9f       	mul	r23, r19
    195a:	b0 0d       	add	r27, r0
    195c:	a1 1d       	adc	r26, r1
    195e:	62 1f       	adc	r22, r18
    1960:	83 9f       	mul	r24, r19
    1962:	a0 0d       	add	r26, r0
    1964:	61 1d       	adc	r22, r1
    1966:	22 1f       	adc	r18, r18
    1968:	74 9f       	mul	r23, r20
    196a:	33 27       	eor	r19, r19
    196c:	a0 0d       	add	r26, r0
    196e:	61 1d       	adc	r22, r1
    1970:	23 1f       	adc	r18, r19
    1972:	84 9f       	mul	r24, r20
    1974:	60 0d       	add	r22, r0
    1976:	21 1d       	adc	r18, r1
    1978:	82 2f       	mov	r24, r18
    197a:	76 2f       	mov	r23, r22
    197c:	6a 2f       	mov	r22, r26
    197e:	11 24       	eor	r1, r1
    1980:	9f 57       	subi	r25, 0x7F	; 127
    1982:	50 40       	sbci	r21, 0x00	; 0
    1984:	8a f0       	brmi	.+34     	; 0x19a8 <__mulsf3_pse+0x84>
    1986:	e1 f0       	breq	.+56     	; 0x19c0 <__mulsf3_pse+0x9c>
    1988:	88 23       	and	r24, r24
    198a:	4a f0       	brmi	.+18     	; 0x199e <__mulsf3_pse+0x7a>
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	bb 1f       	adc	r27, r27
    1992:	66 1f       	adc	r22, r22
    1994:	77 1f       	adc	r23, r23
    1996:	88 1f       	adc	r24, r24
    1998:	91 50       	subi	r25, 0x01	; 1
    199a:	50 40       	sbci	r21, 0x00	; 0
    199c:	a9 f7       	brne	.-22     	; 0x1988 <__mulsf3_pse+0x64>
    199e:	9e 3f       	cpi	r25, 0xFE	; 254
    19a0:	51 05       	cpc	r21, r1
    19a2:	70 f0       	brcs	.+28     	; 0x19c0 <__mulsf3_pse+0x9c>
    19a4:	60 cf       	rjmp	.-320    	; 0x1866 <__fp_inf>
    19a6:	aa cf       	rjmp	.-172    	; 0x18fc <__fp_szero>
    19a8:	5f 3f       	cpi	r21, 0xFF	; 255
    19aa:	ec f3       	brlt	.-6      	; 0x19a6 <__mulsf3_pse+0x82>
    19ac:	98 3e       	cpi	r25, 0xE8	; 232
    19ae:	dc f3       	brlt	.-10     	; 0x19a6 <__mulsf3_pse+0x82>
    19b0:	86 95       	lsr	r24
    19b2:	77 95       	ror	r23
    19b4:	67 95       	ror	r22
    19b6:	b7 95       	ror	r27
    19b8:	f7 95       	ror	r31
    19ba:	e7 95       	ror	r30
    19bc:	9f 5f       	subi	r25, 0xFF	; 255
    19be:	c1 f7       	brne	.-16     	; 0x19b0 <__mulsf3_pse+0x8c>
    19c0:	fe 2b       	or	r31, r30
    19c2:	88 0f       	add	r24, r24
    19c4:	91 1d       	adc	r25, r1
    19c6:	96 95       	lsr	r25
    19c8:	87 95       	ror	r24
    19ca:	97 f9       	bld	r25, 7
    19cc:	08 95       	ret

000019ce <__divmodhi4>:
    19ce:	97 fb       	bst	r25, 7
    19d0:	07 2e       	mov	r0, r23
    19d2:	16 f4       	brtc	.+4      	; 0x19d8 <__divmodhi4+0xa>
    19d4:	00 94       	com	r0
    19d6:	06 d0       	rcall	.+12     	; 0x19e4 <__divmodhi4_neg1>
    19d8:	77 fd       	sbrc	r23, 7
    19da:	08 d0       	rcall	.+16     	; 0x19ec <__divmodhi4_neg2>
    19dc:	0b d0       	rcall	.+22     	; 0x19f4 <__udivmodhi4>
    19de:	07 fc       	sbrc	r0, 7
    19e0:	05 d0       	rcall	.+10     	; 0x19ec <__divmodhi4_neg2>
    19e2:	3e f4       	brtc	.+14     	; 0x19f2 <__divmodhi4_exit>

000019e4 <__divmodhi4_neg1>:
    19e4:	90 95       	com	r25
    19e6:	81 95       	neg	r24
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	08 95       	ret

000019ec <__divmodhi4_neg2>:
    19ec:	70 95       	com	r23
    19ee:	61 95       	neg	r22
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255

000019f2 <__divmodhi4_exit>:
    19f2:	08 95       	ret

000019f4 <__udivmodhi4>:
    19f4:	aa 1b       	sub	r26, r26
    19f6:	bb 1b       	sub	r27, r27
    19f8:	51 e1       	ldi	r21, 0x11	; 17
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <__udivmodhi4_ep>

000019fc <__udivmodhi4_loop>:
    19fc:	aa 1f       	adc	r26, r26
    19fe:	bb 1f       	adc	r27, r27
    1a00:	a6 17       	cp	r26, r22
    1a02:	b7 07       	cpc	r27, r23
    1a04:	10 f0       	brcs	.+4      	; 0x1a0a <__udivmodhi4_ep>
    1a06:	a6 1b       	sub	r26, r22
    1a08:	b7 0b       	sbc	r27, r23

00001a0a <__udivmodhi4_ep>:
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	5a 95       	dec	r21
    1a10:	a9 f7       	brne	.-22     	; 0x19fc <__udivmodhi4_loop>
    1a12:	80 95       	com	r24
    1a14:	90 95       	com	r25
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	08 95       	ret

00001a1c <__tablejump2__>:
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	88 1f       	adc	r24, r24
    1a22:	8b bf       	out	0x3b, r24	; 59
    1a24:	07 90       	elpm	r0, Z+
    1a26:	f6 91       	elpm	r31, Z
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	19 94       	eijmp

00001a2c <_exit>:
    1a2c:	f8 94       	cli

00001a2e <__stop_program>:
    1a2e:	ff cf       	rjmp	.-2      	; 0x1a2e <__stop_program>

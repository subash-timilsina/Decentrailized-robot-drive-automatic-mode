
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000019e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000196c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800200  00800200  000019e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039f3  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016f0  00000000  00000000  000056db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000192e  00000000  00000000  00006dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000714  00000000  00000000  000086fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e5  00000000  00000000  00008e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001111  00000000  00000000  0000a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000b406  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	6e c3       	rjmp	.+1756   	; 0x6e2 <__vector_1>
       6:	00 00       	nop
       8:	1f c3       	rjmp	.+1598   	; 0x648 <__vector_2>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
      16:	00 00       	nop
      18:	89 c0       	rjmp	.+274    	; 0x12c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c2       	rjmp	.+1330   	; 0x570 <__vector_15>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_21>
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <__vector_25>
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c0       	rjmp	.+158    	; 0x12c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__vector_36>
      94:	4b c0       	rjmp	.+150    	; 0x12c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c0       	rjmp	.+146    	; 0x12c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c0       	rjmp	.+142    	; 0x12c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c0       	rjmp	.+138    	; 0x12c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c0       	rjmp	.+134    	; 0x12c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	53 c3       	rjmp	.+1702   	; 0x750 <__vector_42>
      aa:	00 00       	nop
      ac:	3f c0       	rjmp	.+126    	; 0x12c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c0       	rjmp	.+122    	; 0x12c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c0       	rjmp	.+118    	; 0x12c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c0       	rjmp	.+114    	; 0x12c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c0       	rjmp	.+110    	; 0x12c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c0       	rjmp	.+106    	; 0x12c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c0       	rjmp	.+102    	; 0x12c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c0       	rjmp	.+98     	; 0x12c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_51>
      d0:	2d c0       	rjmp	.+90     	; 0x12c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c0       	rjmp	.+86     	; 0x12c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_54>
      dc:	27 c0       	rjmp	.+78     	; 0x12c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c0       	rjmp	.+74     	; 0x12c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	d7 03       	fmuls	r21, r23

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	af 38       	cpi	r26, 0x8F	; 143
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c3 e7       	ldi	r28, 0x73	; 115
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__do_global_ctors+0x16>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	01 09       	sbc	r16, r1
     114:	80 2f       	mov	r24, r16
     116:	fe 01       	movw	r30, r28
     118:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__tablejump2__>
     11c:	c2 37       	cpi	r28, 0x72	; 114
     11e:	d1 07       	cpc	r29, r17
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	08 07       	cpc	r16, r24
     124:	a9 f7       	brne	.-22     	; 0x110 <__do_global_ctors+0xa>
     126:	03 d0       	rcall	.+6      	; 0x12e <main>
     128:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <main>:

#include "RobotDriver.h"

int main(void)
{
	initUART0();
     12e:	0e 94 c0 09 	call	0x1380	; 0x1380 <_Z9initUART0v>
	initUART3();
     132:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_Z9initUART3v>
	JOYSTICK_INITIALIZE();
     136:	0e 94 cc 09 	call	0x1398	; 0x1398 <_Z9initUART2v>
	init_master();
     13a:	ad d5       	rcall	.+2906   	; 0xc96 <_Z11init_masterv>
	rack_init();
     13c:	40 d1       	rcall	.+640    	; 0x3be <_Z9rack_initv>
     13e:	78 94       	sei
	sei();
     140:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <auto_mode>
    while (1) 
    {
		if(auto_mode)
     144:	88 23       	and	r24, r24
     146:	11 f0       	breq	.+4      	; 0x14c <main+0x1e>
			operate_master_auto();
     148:	61 d6       	rcall	.+3266   	; 0xe0c <_Z19operate_master_autov>
     14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0x20>
		else
			operate_master_manual();
     14c:	67 d7       	rcall	.+3790   	; 0x101c <_Z21operate_master_manualv>
     14e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <send_time>
			
		if (send_time)
     152:	88 23       	and	r24, r24
     154:	a9 f3       	breq	.-22     	; 0x140 <main+0x12>
		{
			Send_data_to_Slave();
     156:	08 d6       	rcall	.+3088   	; 0xd68 <_Z18Send_data_to_Slavev>
     158:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <send_time>
			send_time = false;
     15c:	f1 cf       	rjmp	.-30     	; 0x140 <main+0x12>

0000015e <_ZN3PID7Set_PidEfff>:
     15e:	cf 92       	push	r12


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	fc 01       	movw	r30, r24
	kp = kP;
     16c:	40 83       	st	Z, r20
     16e:	51 83       	std	Z+1, r21	; 0x01
     170:	62 83       	std	Z+2, r22	; 0x02
     172:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     174:	04 83       	std	Z+4, r16	; 0x04
     176:	15 83       	std	Z+5, r17	; 0x05
     178:	26 83       	std	Z+6, r18	; 0x06
     17a:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     17c:	c0 86       	std	Z+8, r12	; 0x08
     17e:	d1 86       	std	Z+9, r13	; 0x09
     180:	e2 86       	std	Z+10, r14	; 0x0a
     182:	f3 86       	std	Z+11, r15	; 0x0b
}
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	cf 90       	pop	r12
     190:	08 95       	ret

00000192 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     192:	8f 92       	push	r8
     194:	9f 92       	push	r9
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	ec 01       	movw	r28, r24
     1a8:	7b 01       	movw	r14, r22
	error = sp - input;
     1aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     1ac:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ae:	8b 01       	movw	r16, r22
     1b0:	0e 19       	sub	r16, r14
     1b2:	1f 09       	sbc	r17, r15
     1b4:	1f 87       	std	Y+15, r17	; 0x0f
     1b6:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     1b8:	8a 89       	ldd	r24, Y+18	; 0x12
     1ba:	9b 89       	ldd	r25, Y+19	; 0x13
     1bc:	80 0f       	add	r24, r16
     1be:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     1c0:	8e 37       	cpi	r24, 0x7E	; 126
     1c2:	91 05       	cpc	r25, r1
     1c4:	2c f0       	brlt	.+10     	; 0x1d0 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     1c6:	8d e7       	ldi	r24, 0x7D	; 125
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	9b 8b       	std	Y+19, r25	; 0x13
     1cc:	8a 8b       	std	Y+18, r24	; 0x12
     1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     1d0:	83 38       	cpi	r24, 0x83	; 131
     1d2:	2f ef       	ldi	r18, 0xFF	; 255
     1d4:	92 07       	cpc	r25, r18
     1d6:	1c f0       	brlt	.+6      	; 0x1de <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     1d8:	9b 8b       	std	Y+19, r25	; 0x13
     1da:	8a 8b       	std	Y+18, r24	; 0x12
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     1de:	83 e8       	ldi	r24, 0x83	; 131
     1e0:	9f ef       	ldi	r25, 0xFF	; 255
     1e2:	9b 8b       	std	Y+19, r25	; 0x13
     1e4:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     1e6:	6a 89       	ldd	r22, Y+18	; 0x12
     1e8:	7b 89       	ldd	r23, Y+19	; 0x13
     1ea:	07 2e       	mov	r0, r23
     1ec:	00 0c       	add	r0, r0
     1ee:	88 0b       	sbc	r24, r24
     1f0:	99 0b       	sbc	r25, r25
     1f2:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__floatsisf>
     1f6:	2c 81       	ldd	r18, Y+4	; 0x04
     1f8:	3d 81       	ldd	r19, Y+5	; 0x05
     1fa:	4e 81       	ldd	r20, Y+6	; 0x06
     1fc:	5f 81       	ldd	r21, Y+7	; 0x07
     1fe:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3>
     202:	4b 01       	movw	r8, r22
     204:	5c 01       	movw	r10, r24
     206:	b8 01       	movw	r22, r16
     208:	11 0f       	add	r17, r17
     20a:	88 0b       	sbc	r24, r24
     20c:	99 0b       	sbc	r25, r25
     20e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__floatsisf>
     212:	28 81       	ld	r18, Y
     214:	39 81       	ldd	r19, Y+1	; 0x01
     216:	4a 81       	ldd	r20, Y+2	; 0x02
     218:	5b 81       	ldd	r21, Y+3	; 0x03
     21a:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3>
     21e:	9b 01       	movw	r18, r22
     220:	ac 01       	movw	r20, r24
     222:	c5 01       	movw	r24, r10
     224:	b4 01       	movw	r22, r8
     226:	0e 94 6f 0a 	call	0x14de	; 0x14de <__addsf3>
     22a:	4b 01       	movw	r8, r22
     22c:	5c 01       	movw	r10, r24
     22e:	88 89       	ldd	r24, Y+16	; 0x10
     230:	99 89       	ldd	r25, Y+17	; 0x11
     232:	b7 01       	movw	r22, r14
     234:	68 1b       	sub	r22, r24
     236:	79 0b       	sbc	r23, r25
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__floatsisf>
     244:	28 85       	ldd	r18, Y+8	; 0x08
     246:	39 85       	ldd	r19, Y+9	; 0x09
     248:	4a 85       	ldd	r20, Y+10	; 0x0a
     24a:	5b 85       	ldd	r21, Y+11	; 0x0b
     24c:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3>
     250:	9b 01       	movw	r18, r22
     252:	ac 01       	movw	r20, r24
     254:	c5 01       	movw	r24, r10
     256:	b4 01       	movw	r22, r8
     258:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__subsf3>
     25c:	2c 89       	ldd	r18, Y+20	; 0x14
     25e:	3d 89       	ldd	r19, Y+21	; 0x15
     260:	4e 89       	ldd	r20, Y+22	; 0x16
     262:	5f 89       	ldd	r21, Y+23	; 0x17
     264:	0e 94 6f 0a 	call	0x14de	; 0x14de <__addsf3>
     268:	6c 8b       	std	Y+20, r22	; 0x14
     26a:	7d 8b       	std	Y+21, r23	; 0x15
     26c:	8e 8b       	std	Y+22, r24	; 0x16
     26e:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     270:	f9 8a       	std	Y+17, r15	; 0x11
     272:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	9f 90       	pop	r9
     286:	8f 90       	pop	r8
     288:	08 95       	ret

0000028a <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	af 92       	push	r10
     290:	bf 92       	push	r11
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
     2a0:	7b 01       	movw	r14, r22
	error = sp - input;
     2a2:	6c 85       	ldd	r22, Y+12	; 0x0c
     2a4:	7d 85       	ldd	r23, Y+13	; 0x0d
     2a6:	8b 01       	movw	r16, r22
     2a8:	0e 19       	sub	r16, r14
     2aa:	1f 09       	sbc	r17, r15
     2ac:	1f 87       	std	Y+15, r17	; 0x0f
     2ae:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     2b0:	8a 89       	ldd	r24, Y+18	; 0x12
     2b2:	9b 89       	ldd	r25, Y+19	; 0x13
     2b4:	80 0f       	add	r24, r16
     2b6:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     2b8:	8e 37       	cpi	r24, 0x7E	; 126
     2ba:	91 05       	cpc	r25, r1
     2bc:	2c f0       	brlt	.+10     	; 0x2c8 <_ZN3PID13angle_ComputeEi+0x3e>
	errorsum = 125;
     2be:	8d e7       	ldi	r24, 0x7D	; 125
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	9b 8b       	std	Y+19, r25	; 0x13
     2c4:	8a 8b       	std	Y+18, r24	; 0x12
     2c6:	0b c0       	rjmp	.+22     	; 0x2de <_ZN3PID13angle_ComputeEi+0x54>
	else if (errorsum < -125)
     2c8:	83 38       	cpi	r24, 0x83	; 131
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	92 07       	cpc	r25, r18
     2ce:	1c f0       	brlt	.+6      	; 0x2d6 <_ZN3PID13angle_ComputeEi+0x4c>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     2d0:	9b 8b       	std	Y+19, r25	; 0x13
     2d2:	8a 8b       	std	Y+18, r24	; 0x12
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <_ZN3PID13angle_ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
     2d6:	83 e8       	ldi	r24, 0x83	; 131
     2d8:	9f ef       	ldi	r25, 0xFF	; 255
     2da:	9b 8b       	std	Y+19, r25	; 0x13
     2dc:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
     2de:	6a 89       	ldd	r22, Y+18	; 0x12
     2e0:	7b 89       	ldd	r23, Y+19	; 0x13
     2e2:	07 2e       	mov	r0, r23
     2e4:	00 0c       	add	r0, r0
     2e6:	88 0b       	sbc	r24, r24
     2e8:	99 0b       	sbc	r25, r25
     2ea:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__floatsisf>
     2ee:	2c 81       	ldd	r18, Y+4	; 0x04
     2f0:	3d 81       	ldd	r19, Y+5	; 0x05
     2f2:	4e 81       	ldd	r20, Y+6	; 0x06
     2f4:	5f 81       	ldd	r21, Y+7	; 0x07
     2f6:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3>
     2fa:	4b 01       	movw	r8, r22
     2fc:	5c 01       	movw	r10, r24
     2fe:	b8 01       	movw	r22, r16
     300:	11 0f       	add	r17, r17
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__floatsisf>
     30a:	28 81       	ld	r18, Y
     30c:	39 81       	ldd	r19, Y+1	; 0x01
     30e:	4a 81       	ldd	r20, Y+2	; 0x02
     310:	5b 81       	ldd	r21, Y+3	; 0x03
     312:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3>
     316:	9b 01       	movw	r18, r22
     318:	ac 01       	movw	r20, r24
     31a:	c5 01       	movw	r24, r10
     31c:	b4 01       	movw	r22, r8
     31e:	0e 94 6f 0a 	call	0x14de	; 0x14de <__addsf3>
     322:	4b 01       	movw	r8, r22
     324:	5c 01       	movw	r10, r24
     326:	88 89       	ldd	r24, Y+16	; 0x10
     328:	99 89       	ldd	r25, Y+17	; 0x11
     32a:	b7 01       	movw	r22, r14
     32c:	68 1b       	sub	r22, r24
     32e:	79 0b       	sbc	r23, r25
     330:	07 2e       	mov	r0, r23
     332:	00 0c       	add	r0, r0
     334:	88 0b       	sbc	r24, r24
     336:	99 0b       	sbc	r25, r25
     338:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__floatsisf>
     33c:	28 85       	ldd	r18, Y+8	; 0x08
     33e:	39 85       	ldd	r19, Y+9	; 0x09
     340:	4a 85       	ldd	r20, Y+10	; 0x0a
     342:	5b 85       	ldd	r21, Y+11	; 0x0b
     344:	0e 94 22 0c 	call	0x1844	; 0x1844 <__mulsf3>
     348:	9b 01       	movw	r18, r22
     34a:	ac 01       	movw	r20, r24
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__subsf3>
     354:	6c 8b       	std	Y+20, r22	; 0x14
     356:	7d 8b       	std	Y+21, r23	; 0x15
     358:	8e 8b       	std	Y+22, r24	; 0x16
     35a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     35c:	f9 8a       	std	Y+17, r15	; 0x11
     35e:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	bf 90       	pop	r11
     36e:	af 90       	pop	r10
     370:	9f 90       	pop	r9
     372:	8f 90       	pop	r8
     374:	08 95       	ret

00000376 <_Z21initialise_timeperiodv>:
}

void disable_promity()
{
	EIMSK &= ~(1<<PROXIMITY_INT);		//setting INT pin
	EIFR |= (1<<PROXIMITY_INTF);	    //clear int flag
     376:	e1 eb       	ldi	r30, 0xB1	; 177
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
     380:	e0 e7       	ldi	r30, 0x70	; 112
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	81 60       	ori	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
     38a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     38e:	08 95       	ret

00000390 <_Z20close_all_pneumaticsv>:
     390:	10 98       	cbi	0x02, 0	; 2
     392:	14 98       	cbi	0x02, 4	; 2
     394:	47 98       	cbi	0x08, 7	; 8
     396:	16 98       	cbi	0x02, 6	; 2
     398:	08 95       	ret

0000039a <_Z21initialize_pneumaticsv>:
     39a:	08 9a       	sbi	0x01, 0	; 1
     39c:	0c 9a       	sbi	0x01, 4	; 1
     39e:	0e 9a       	sbi	0x01, 6	; 1
     3a0:	3f 9a       	sbi	0x07, 7	; 7
     3a2:	f6 cf       	rjmp	.-20     	; 0x390 <_Z20close_all_pneumaticsv>
     3a4:	08 95       	ret

000003a6 <_Z6millisv>:
//calculate the time from begining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     3a6:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
     3a8:	f8 94       	cli
	m = timer2_millis;
     3aa:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <timer2_millis>
     3ae:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <timer2_millis+0x1>
     3b2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer2_millis+0x2>
     3b6:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer2_millis+0x3>
	SREG = oldSREG;
     3ba:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
     3bc:	08 95       	ret

000003be <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
	
	Geneva_Start = false;
     3ca:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Geneva_Start>
	auto_move_rack = false;
     3ce:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
	donotstop = false;
     3d2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <donotstop>
	throw_rack = false;
     3d6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <throw_rack>
	rack_throw_auto = false;
     3da:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rack_throw_auto>
	pneumatic_geneva_start = false;
     3de:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
	inside_robot = true;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
    pass_the_shuttcock = false;
     3e8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
	pid_compute_flag = false;
     3ec:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	
	pneumatic_geneva_time = 0;
     3f0:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pneumatic_geneva_time>
     3f4:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pneumatic_geneva_time+0x1>
     3f8:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <pneumatic_geneva_time+0x2>
     3fc:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <pneumatic_geneva_time+0x3>
	send_time = false;
     400:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <send_time>
	
	
	
	RackMotor.Initialise(1);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	8b e6       	ldi	r24, 0x6B	; 107
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	f1 d2       	rcall	.+1506   	; 0x9ee <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	8a e6       	ldi	r24, 0x6A	; 106
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	ed d2       	rcall	.+1498   	; 0x9ee <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	8d e5       	ldi	r24, 0x5D	; 93
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	48 d2       	rcall	.+1168   	; 0x8ac <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	80 e5       	ldi	r24, 0x50	; 80
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	44 d2       	rcall	.+1160   	; 0x8ac <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LTSWITCH_RACK_HOME);
     424:	24 98       	cbi	0x04, 4	; 4
	INPUT(LTSWITCH_RACK_FINAL);
     426:	e1 e0       	ldi	r30, 0x01	; 1
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	80 81       	ld	r24, Z
     42c:	8f 7b       	andi	r24, 0xBF	; 191
     42e:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_FINAL);
     430:	e2 e0       	ldi	r30, 0x02	; 2
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	80 81       	ld	r24, Z
     436:	80 64       	ori	r24, 0x40	; 64
	SET(LTSWITCH_RACK_HOME);
     438:	80 83       	st	Z, r24
	
	initialize_pneumatics();
     43a:	2c 9a       	sbi	0x05, 4	; 5
     43c:	ae df       	rcall	.-164    	; 0x39a <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     43e:	1c 9b       	sbis	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     440:	07 c0       	rjmp	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     442:	69 ef       	ldi	r22, 0xF9	; 249
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	8b e6       	ldi	r24, 0x6B	; 107
     448:	92 e0       	ldi	r25, 0x02	; 2
	SET(LTSWITCH_RACK_HOME);
	
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     44a:	a6 d2       	rcall	.+1356   	; 0x998 <_ZN10Rack_Motor11SetOcrValueEi>
     44c:	1c 99       	sbic	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	previous_time = millis();
     44e:	f9 cf       	rjmp	.-14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     450:	aa df       	rcall	.-172    	; 0x3a6 <_Z6millisv>
     452:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <previous_time>
     456:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <previous_time+0x1>
     45a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <previous_time+0x2>
     45e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <previous_time+0x3>
	
	RackMotor.StopMotor();
     462:	8b e6       	ldi	r24, 0x6B	; 107
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	83 d2       	rcall	.+1286   	; 0x96e <_ZN10Rack_Motor9StopMotorEv>
	
	RackEncoder.angle =0;
     468:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <RackEncoder+0x9>
     46c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <RackEncoder+0xa>
     470:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <RackEncoder+0xb>
     474:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0xc>
	
	Rack_home_position = true;		// true rack home-position -- initial position and false rack position -- final position
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Rack_home_position>
	angle_pid.Set_Pid(47.29,0.139,29.30);
     47e:	0f 2e       	mov	r0, r31
     480:	f6 e6       	ldi	r31, 0x66	; 102
     482:	cf 2e       	mov	r12, r31
     484:	dc 2c       	mov	r13, r12
     486:	fa ee       	ldi	r31, 0xEA	; 234
     488:	ef 2e       	mov	r14, r31
     48a:	f1 e4       	ldi	r31, 0x41	; 65
     48c:	ff 2e       	mov	r15, r31
     48e:	f0 2d       	mov	r31, r0
     490:	04 e0       	ldi	r16, 0x04	; 4
     492:	16 e5       	ldi	r17, 0x56	; 86
     494:	2e e0       	ldi	r18, 0x0E	; 14
     496:	3e e3       	ldi	r19, 0x3E	; 62
     498:	46 ef       	ldi	r20, 0xF6	; 246
     49a:	58 e2       	ldi	r21, 0x28	; 40
     49c:	6d e3       	ldi	r22, 0x3D	; 61
     49e:	72 e4       	ldi	r23, 0x42	; 66
     4a0:	8b e2       	ldi	r24, 0x2B	; 43
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	5c de       	rcall	.-840    	; 0x15e <_ZN3PID7Set_PidEfff>
	rack_motor_pid.Set_Pid(8.67,0,4.89);
     4a6:	0f 2e       	mov	r0, r31
     4a8:	f1 ee       	ldi	r31, 0xE1	; 225
     4aa:	cf 2e       	mov	r12, r31
     4ac:	fa e7       	ldi	r31, 0x7A	; 122
     4ae:	df 2e       	mov	r13, r31
     4b0:	fc e9       	ldi	r31, 0x9C	; 156
     4b2:	ef 2e       	mov	r14, r31
     4b4:	f0 e4       	ldi	r31, 0x40	; 64
     4b6:	ff 2e       	mov	r15, r31
     4b8:	f0 2d       	mov	r31, r0
     4ba:	00 e0       	ldi	r16, 0x00	; 0
     4bc:	10 e0       	ldi	r17, 0x00	; 0
     4be:	98 01       	movw	r18, r16
     4c0:	42 e5       	ldi	r20, 0x52	; 82
     4c2:	58 eb       	ldi	r21, 0xB8	; 184
     4c4:	6a e0       	ldi	r22, 0x0A	; 10
     4c6:	71 e4       	ldi	r23, 0x41	; 65
     4c8:	83 e1       	ldi	r24, 0x13	; 19
     4ca:	92 e0       	ldi	r25, 0x02	; 2
	
	//Setting the proximity pins
	INPUT(PROXIMITY_PIN);
     4cc:	48 de       	rcall	.-880    	; 0x15e <_ZN3PID7Set_PidEfff>
	SET(PROXIMITY_PIN);
     4ce:	52 98       	cbi	0x0a, 2	; 10
	
	initialise_timeperiod();
     4d0:	5a 9a       	sbi	0x0b, 2	; 11
     4d2:	51 df       	rcall	.-350    	; 0x376 <_Z21initialise_timeperiodv>
}
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	08 95       	ret

000004e2 <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && !Rack_home_position )	//if reached home position
     4e2:	1c 99       	sbic	0x03, 4	; 3
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <_Z16rack_limit_checkv+0xc>
     4e6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     4ea:	88 23       	and	r24, r24
     4ec:	89 f0       	breq	.+34     	; 0x510 <_Z16rack_limit_checkv+0x2e>
		auto_move_rack = false;
		throw_rack = true;
		previous_time = millis();
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && auto_move_rack && donotstop  )		//reached final position
     4ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     4f2:	86 fd       	sbrc	r24, 6
     4f4:	3c c0       	rjmp	.+120    	; 0x56e <_Z16rack_limit_checkv+0x8c>
     4f6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
     4fa:	88 23       	and	r24, r24
     4fc:	c1 f1       	breq	.+112    	; 0x56e <_Z16rack_limit_checkv+0x8c>
     4fe:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <donotstop>
     502:	81 11       	cpse	r24, r1
     504:	25 c0       	rjmp	.+74     	; 0x550 <_Z16rack_limit_checkv+0x6e>
     506:	08 95       	ret
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
		donotstop = false;
		if (rack_throw_auto)
		{
			RACK_LIFT_CLOSE();
     508:	14 98       	cbi	0x02, 4	; 2
			rack_throw_auto = false;
     50a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rack_throw_auto>
		}
	}
	
}
     50e:	08 95       	ret
void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && !Rack_home_position )	//if reached home position
	{
		RackMotor.StopMotor();
     510:	8b e6       	ldi	r24, 0x6B	; 107
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	2c d2       	rcall	.+1112   	; 0x96e <_ZN10Rack_Motor9StopMotorEv>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     516:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
     51a:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(0);
		Rack_home_position = true;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <Rack_home_position>
		RackEncoder.angle = 0;
     524:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <RackEncoder+0x9>
     528:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <RackEncoder+0xa>
     52c:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <RackEncoder+0xb>
     530:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0xc>
		auto_move_rack = false;
     534:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
		throw_rack = true;
     538:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <throw_rack>
		previous_time = millis();
     53c:	34 df       	rcall	.-408    	; 0x3a6 <_Z6millisv>
     53e:	60 93 4c 02 	sts	0x024C, r22	; 0x80024c <previous_time>
     542:	70 93 4d 02 	sts	0x024D, r23	; 0x80024d <previous_time+0x1>
     546:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <previous_time+0x2>
     54a:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <previous_time+0x3>
     54e:	cf cf       	rjmp	.-98     	; 0x4ee <_Z16rack_limit_checkv+0xc>
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && auto_move_rack && donotstop  )		//reached final position
	{
		RackMotor.StopMotor();
     550:	8b e6       	ldi	r24, 0x6B	; 107
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0c d2       	rcall	.+1048   	; 0x96e <_ZN10Rack_Motor9StopMotorEv>
     556:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
     55a:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     55e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <auto_move_rack>
		donotstop = false;
     562:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <donotstop>
		if (rack_throw_auto)
     566:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     56a:	81 11       	cpse	r24, r1
     56c:	cd cf       	rjmp	.-102    	; 0x508 <_Z16rack_limit_checkv+0x26>
     56e:	08 95       	ret

00000570 <__vector_15>:



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
     570:	1f 92       	push	r1
     572:	0f 92       	push	r0
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	0f 92       	push	r0
     578:	11 24       	eor	r1, r1
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
     580:	bf 93       	push	r27
	timer2_millis += 1;
     582:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timer2_millis>
     586:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timer2_millis+0x1>
     58a:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timer2_millis+0x2>
     58e:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timer2_millis+0x3>
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	a1 1d       	adc	r26, r1
     596:	b1 1d       	adc	r27, r1
     598:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer2_millis>
     59c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timer2_millis+0x1>
     5a0:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timer2_millis+0x2>
     5a4:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timer2_millis+0x3>
	timer2_fract += 3;
     5a8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5ac:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     5b0:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     5b4:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     5b8:	03 96       	adiw	r24, 0x03	; 3
     5ba:	a1 1d       	adc	r26, r1
     5bc:	b1 1d       	adc	r27, r1
     5be:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer2_fract>
     5c2:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer2_fract+0x1>
     5c6:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer2_fract+0x2>
     5ca:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer2_fract+0x3>
	if (timer2_fract >= 125) {
     5ce:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5d2:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     5d6:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     5da:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     5de:	8d 37       	cpi	r24, 0x7D	; 125
     5e0:	91 05       	cpc	r25, r1
     5e2:	a1 05       	cpc	r26, r1
     5e4:	b1 05       	cpc	r27, r1
     5e6:	38 f1       	brcs	.+78     	; 0x636 <__vector_15+0xc6>
		timer2_fract -= 125;
     5e8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <timer2_fract>
     5ec:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <timer2_fract+0x1>
     5f0:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <timer2_fract+0x2>
     5f4:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <timer2_fract+0x3>
     5f8:	8d 57       	subi	r24, 0x7D	; 125
     5fa:	91 09       	sbc	r25, r1
     5fc:	a1 09       	sbc	r26, r1
     5fe:	b1 09       	sbc	r27, r1
     600:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <timer2_fract>
     604:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <timer2_fract+0x1>
     608:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <timer2_fract+0x2>
     60c:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <timer2_fract+0x3>
		timer2_millis += 1;
     610:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timer2_millis>
     614:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <timer2_millis+0x1>
     618:	a0 91 11 02 	lds	r26, 0x0211	; 0x800211 <timer2_millis+0x2>
     61c:	b0 91 12 02 	lds	r27, 0x0212	; 0x800212 <timer2_millis+0x3>
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	a1 1d       	adc	r26, r1
     624:	b1 1d       	adc	r27, r1
     626:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timer2_millis>
     62a:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <timer2_millis+0x1>
     62e:	a0 93 11 02 	sts	0x0211, r26	; 0x800211 <timer2_millis+0x2>
     632:	b0 93 12 02 	sts	0x0212, r27	; 0x800212 <timer2_millis+0x3>
	}
}
     636:	bf 91       	pop	r27
     638:	af 91       	pop	r26
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_2>:

ISR(INT_VECTR)
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	0b b6       	in	r0, 0x3b	; 59
     654:	0f 92       	push	r0
     656:	8f 93       	push	r24
     658:	9f 93       	push	r25
     65a:	af 93       	push	r26
     65c:	bf 93       	push	r27
     65e:	ef 93       	push	r30
     660:	ff 93       	push	r31
	if(bit_is_clear(ENCODERR_CHAPORTPIN,ENCODERR_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     662:	95 99       	sbic	0x12, 5	; 18
     664:	19 c0       	rjmp	.+50     	; 0x698 <__vector_2+0x50>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     666:	ed e5       	ldi	r30, 0x5D	; 93
     668:	f2 e0       	ldi	r31, 0x02	; 2
     66a:	85 81       	ldd	r24, Z+5	; 0x05
     66c:	96 81       	ldd	r25, Z+6	; 0x06
     66e:	a7 81       	ldd	r26, Z+7	; 0x07
     670:	b0 85       	ldd	r27, Z+8	; 0x08
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	a1 1d       	adc	r26, r1
     676:	b1 1d       	adc	r27, r1
     678:	85 83       	std	Z+5, r24	; 0x05
     67a:	96 83       	std	Z+6, r25	; 0x06
     67c:	a7 83       	std	Z+7, r26	; 0x07
     67e:	b0 87       	std	Z+8, r27	; 0x08
	{
		RackEncoder.incCount();
		RackEncoder.angle++;
     680:	81 85       	ldd	r24, Z+9	; 0x09
     682:	92 85       	ldd	r25, Z+10	; 0x0a
     684:	a3 85       	ldd	r26, Z+11	; 0x0b
     686:	b4 85       	ldd	r27, Z+12	; 0x0c
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	a1 1d       	adc	r26, r1
     68c:	b1 1d       	adc	r27, r1
     68e:	81 87       	std	Z+9, r24	; 0x09
     690:	92 87       	std	Z+10, r25	; 0x0a
     692:	a3 87       	std	Z+11, r26	; 0x0b
     694:	b4 87       	std	Z+12, r27	; 0x0c
     696:	18 c0       	rjmp	.+48     	; 0x6c8 <__vector_2+0x80>
	inline void dcrCount(){pprcount--;};
     698:	ed e5       	ldi	r30, 0x5D	; 93
     69a:	f2 e0       	ldi	r31, 0x02	; 2
     69c:	85 81       	ldd	r24, Z+5	; 0x05
     69e:	96 81       	ldd	r25, Z+6	; 0x06
     6a0:	a7 81       	ldd	r26, Z+7	; 0x07
     6a2:	b0 85       	ldd	r27, Z+8	; 0x08
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	a1 09       	sbc	r26, r1
     6a8:	b1 09       	sbc	r27, r1
     6aa:	85 83       	std	Z+5, r24	; 0x05
     6ac:	96 83       	std	Z+6, r25	; 0x06
     6ae:	a7 83       	std	Z+7, r26	; 0x07
     6b0:	b0 87       	std	Z+8, r27	; 0x08
	}
	else
	{
		RackEncoder.dcrCount();
		RackEncoder.angle--;
     6b2:	81 85       	ldd	r24, Z+9	; 0x09
     6b4:	92 85       	ldd	r25, Z+10	; 0x0a
     6b6:	a3 85       	ldd	r26, Z+11	; 0x0b
     6b8:	b4 85       	ldd	r27, Z+12	; 0x0c
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	a1 09       	sbc	r26, r1
     6be:	b1 09       	sbc	r27, r1
     6c0:	81 87       	std	Z+9, r24	; 0x09
     6c2:	92 87       	std	Z+10, r25	; 0x0a
     6c4:	a3 87       	std	Z+11, r26	; 0x0b
     6c6:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     6c8:	ff 91       	pop	r31
     6ca:	ef 91       	pop	r30
     6cc:	bf 91       	pop	r27
     6ce:	af 91       	pop	r26
     6d0:	9f 91       	pop	r25
     6d2:	8f 91       	pop	r24
     6d4:	0f 90       	pop	r0
     6d6:	0b be       	out	0x3b, r0	; 59
     6d8:	0f 90       	pop	r0
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	0f 90       	pop	r0
     6de:	1f 90       	pop	r1
     6e0:	18 95       	reti

000006e2 <__vector_1>:

ISR(INT_VECTG)
{
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	0b b6       	in	r0, 0x3b	; 59
     6ee:	0f 92       	push	r0
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	af 93       	push	r26
     6f6:	bf 93       	push	r27
     6f8:	ef 93       	push	r30
     6fa:	ff 93       	push	r31
	if(bit_is_clear(ENCODERG_CHAPORTPIN,ENCODERG_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     6fc:	63 99       	sbic	0x0c, 3	; 12
     6fe:	0e c0       	rjmp	.+28     	; 0x71c <__vector_1+0x3a>
	{
		GenevaEncoder.angle++;
     700:	e0 e5       	ldi	r30, 0x50	; 80
     702:	f2 e0       	ldi	r31, 0x02	; 2
     704:	81 85       	ldd	r24, Z+9	; 0x09
     706:	92 85       	ldd	r25, Z+10	; 0x0a
     708:	a3 85       	ldd	r26, Z+11	; 0x0b
     70a:	b4 85       	ldd	r27, Z+12	; 0x0c
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	a1 1d       	adc	r26, r1
     710:	b1 1d       	adc	r27, r1
     712:	81 87       	std	Z+9, r24	; 0x09
     714:	92 87       	std	Z+10, r25	; 0x0a
     716:	a3 87       	std	Z+11, r26	; 0x0b
     718:	b4 87       	std	Z+12, r27	; 0x0c
     71a:	0d c0       	rjmp	.+26     	; 0x736 <__vector_1+0x54>
		
	}
	else
	{
		GenevaEncoder.angle--;
     71c:	e0 e5       	ldi	r30, 0x50	; 80
     71e:	f2 e0       	ldi	r31, 0x02	; 2
     720:	81 85       	ldd	r24, Z+9	; 0x09
     722:	92 85       	ldd	r25, Z+10	; 0x0a
     724:	a3 85       	ldd	r26, Z+11	; 0x0b
     726:	b4 85       	ldd	r27, Z+12	; 0x0c
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	a1 09       	sbc	r26, r1
     72c:	b1 09       	sbc	r27, r1
     72e:	81 87       	std	Z+9, r24	; 0x09
     730:	92 87       	std	Z+10, r25	; 0x0a
     732:	a3 87       	std	Z+11, r26	; 0x0b
     734:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     736:	ff 91       	pop	r31
     738:	ef 91       	pop	r30
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	0f 90       	pop	r0
     744:	0b be       	out	0x3b, r0	; 59
     746:	0f 90       	pop	r0
     748:	0f be       	out	0x3f, r0	; 63
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <__vector_42>:


ISR(TIMER4_COMPA_vect)
{
     750:	1f 92       	push	r1
     752:	0f 92       	push	r0
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	0f 92       	push	r0
     758:	11 24       	eor	r1, r1
     75a:	0b b6       	in	r0, 0x3b	; 59
     75c:	0f 92       	push	r0
     75e:	4f 93       	push	r20
     760:	5f 93       	push	r21
     762:	6f 93       	push	r22
     764:	7f 93       	push	r23
     766:	8f 93       	push	r24
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
	pid_compute_flag = true;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;}; //keep in timer compare match
     772:	ed e5       	ldi	r30, 0x5D	; 93
     774:	f2 e0       	ldi	r31, 0x02	; 2
     776:	45 81       	ldd	r20, Z+5	; 0x05
     778:	56 81       	ldd	r21, Z+6	; 0x06
     77a:	67 81       	ldd	r22, Z+7	; 0x07
     77c:	70 85       	ldd	r23, Z+8	; 0x08
     77e:	41 83       	std	Z+1, r20	; 0x01
     780:	52 83       	std	Z+2, r21	; 0x02
     782:	63 83       	std	Z+3, r22	; 0x03
     784:	74 83       	std	Z+4, r23	; 0x04
     786:	15 82       	std	Z+5, r1	; 0x05
     788:	16 82       	std	Z+6, r1	; 0x06
     78a:	17 82       	std	Z+7, r1	; 0x07
     78c:	10 86       	std	Z+8, r1	; 0x08
	RackEncoder.Calc_Speed();
	send_time = true;
     78e:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <send_time>
}
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	0f 90       	pop	r0
     7a2:	0b be       	out	0x3b, r0	; 59
     7a4:	0f 90       	pop	r0
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	0f 90       	pop	r0
     7aa:	1f 90       	pop	r1
     7ac:	18 95       	reti

000007ae <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	long int angle;
	
	Rack_Encoder():speed(0),pprcount(0),angle(0){};
     7ae:	ed e5       	ldi	r30, 0x5D	; 93
     7b0:	f2 e0       	ldi	r31, 0x02	; 2
     7b2:	11 82       	std	Z+1, r1	; 0x01
     7b4:	12 82       	std	Z+2, r1	; 0x02
     7b6:	13 82       	std	Z+3, r1	; 0x03
     7b8:	14 82       	std	Z+4, r1	; 0x04
     7ba:	15 82       	std	Z+5, r1	; 0x05
     7bc:	16 82       	std	Z+6, r1	; 0x06
     7be:	17 82       	std	Z+7, r1	; 0x07
     7c0:	10 86       	std	Z+8, r1	; 0x08
     7c2:	11 86       	std	Z+9, r1	; 0x09
     7c4:	12 86       	std	Z+10, r1	; 0x0a
     7c6:	13 86       	std	Z+11, r1	; 0x0b
     7c8:	14 86       	std	Z+12, r1	; 0x0c
     7ca:	e0 e5       	ldi	r30, 0x50	; 80
     7cc:	f2 e0       	ldi	r31, 0x02	; 2
     7ce:	11 82       	std	Z+1, r1	; 0x01
     7d0:	12 82       	std	Z+2, r1	; 0x02
     7d2:	13 82       	std	Z+3, r1	; 0x03
     7d4:	14 82       	std	Z+4, r1	; 0x04
     7d6:	15 82       	std	Z+5, r1	; 0x05
     7d8:	16 82       	std	Z+6, r1	; 0x06
     7da:	17 82       	std	Z+7, r1	; 0x07
     7dc:	10 86       	std	Z+8, r1	; 0x08
     7de:	11 86       	std	Z+9, r1	; 0x09
     7e0:	12 86       	std	Z+10, r1	; 0x0a
     7e2:	13 86       	std	Z+11, r1	; 0x0b
     7e4:	14 86       	std	Z+12, r1	; 0x0c
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     7e6:	eb e2       	ldi	r30, 0x2B	; 43
     7e8:	f2 e0       	ldi	r31, 0x02	; 2
     7ea:	10 82       	st	Z, r1
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	12 82       	std	Z+2, r1	; 0x02
     7f0:	13 82       	std	Z+3, r1	; 0x03
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	15 82       	std	Z+5, r1	; 0x05
     7f6:	16 82       	std	Z+6, r1	; 0x06
     7f8:	17 82       	std	Z+7, r1	; 0x07
     7fa:	10 86       	std	Z+8, r1	; 0x08
     7fc:	11 86       	std	Z+9, r1	; 0x09
     7fe:	12 86       	std	Z+10, r1	; 0x0a
     800:	13 86       	std	Z+11, r1	; 0x0b
     802:	15 86       	std	Z+13, r1	; 0x0d
     804:	14 86       	std	Z+12, r1	; 0x0c
     806:	17 86       	std	Z+15, r1	; 0x0f
     808:	16 86       	std	Z+14, r1	; 0x0e
     80a:	11 8a       	std	Z+17, r1	; 0x11
     80c:	10 8a       	std	Z+16, r1	; 0x10
     80e:	13 8a       	std	Z+19, r1	; 0x13
     810:	12 8a       	std	Z+18, r1	; 0x12
     812:	e3 e1       	ldi	r30, 0x13	; 19
     814:	f2 e0       	ldi	r31, 0x02	; 2
     816:	10 82       	st	Z, r1
     818:	11 82       	std	Z+1, r1	; 0x01
     81a:	12 82       	std	Z+2, r1	; 0x02
     81c:	13 82       	std	Z+3, r1	; 0x03
     81e:	14 82       	std	Z+4, r1	; 0x04
     820:	15 82       	std	Z+5, r1	; 0x05
     822:	16 82       	std	Z+6, r1	; 0x06
     824:	17 82       	std	Z+7, r1	; 0x07
     826:	10 86       	std	Z+8, r1	; 0x08
     828:	11 86       	std	Z+9, r1	; 0x09
     82a:	12 86       	std	Z+10, r1	; 0x0a
     82c:	13 86       	std	Z+11, r1	; 0x0b
     82e:	15 86       	std	Z+13, r1	; 0x0d
     830:	14 86       	std	Z+12, r1	; 0x0c
     832:	17 86       	std	Z+15, r1	; 0x0f
     834:	16 86       	std	Z+14, r1	; 0x0e
     836:	11 8a       	std	Z+17, r1	; 0x11
     838:	10 8a       	std	Z+16, r1	; 0x10
     83a:	13 8a       	std	Z+19, r1	; 0x13
     83c:	12 8a       	std	Z+18, r1	; 0x12
     83e:	08 95       	ret

00000840 <_ZN12Rack_Encoder11Init_TimersEv>:
}

void Rack_Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     840:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     844:	81 11       	cpse	r24, r1
     846:	17 c0       	rjmp	.+46     	; 0x876 <_ZN12Rack_Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     848:	e1 ea       	ldi	r30, 0xA1	; 161
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8b 60       	ori	r24, 0x0B	; 11
     850:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     852:	e2 e7       	ldi	r30, 0x72	; 114
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	82 60       	ori	r24, 0x02	; 2
     85a:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     85c:	88 e8       	ldi	r24, 0x88	; 136
     85e:	93 e1       	ldi	r25, 0x13	; 19
     860:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     864:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     868:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     86c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     876:	08 95       	ret

00000878 <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
     878:	78 94       	sei
	if (no==1)
     87a:	fc 01       	movw	r30, r24
     87c:	20 81       	ld	r18, Z
     87e:	21 30       	cpi	r18, 0x01	; 1
     880:	49 f4       	brne	.+18     	; 0x894 <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODERR_INT);
     882:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INTR_ISC1);	//falling edge
     884:	e9 e6       	ldi	r30, 0x69	; 105
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	20 81       	ld	r18, Z
     88a:	28 60       	ori	r18, 0x08	; 8
     88c:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERR_INT);		//setting INT pin
     88e:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INTR_INTF);	    //clear int flag
     890:	e1 9a       	sbi	0x1c, 1	; 28
     892:	0a c0       	rjmp	.+20     	; 0x8a8 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	}
	else if (no==2)
     894:	22 30       	cpi	r18, 0x02	; 2
     896:	41 f4       	brne	.+16     	; 0x8a8 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODERG_INT);
     898:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INTG_ISC1);	//falling edge
     89a:	e9 e6       	ldi	r30, 0x69	; 105
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	20 81       	ld	r18, Z
     8a0:	22 60       	ori	r18, 0x02	; 2
     8a2:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERG_INT);		//setting INT pin
     8a4:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INTG_INTF);	    //clear int flag
     8a6:	e0 9a       	sbi	0x1c, 0	; 28
	}
	Init_Timers();
     8a8:	cb cf       	rjmp	.-106    	; 0x840 <_ZN12Rack_Encoder11Init_TimersEv>
     8aa:	08 95       	ret

000008ac <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
     8ac:	fc 01       	movw	r30, r24
     8ae:	60 83       	st	Z, r22
	if(no==1)
     8b0:	61 30       	cpi	r22, 0x01	; 1
     8b2:	29 f4       	brne	.+10     	; 0x8be <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODERR_CHANNELA);
     8b4:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODERR_CHANNELB);
     8b6:	9d 98       	cbi	0x13, 5	; 19
		SET(ENCODERR_CHANNELA);
     8b8:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODERR_CHANNELB);
     8ba:	a5 9a       	sbi	0x14, 5	; 20
     8bc:	06 c0       	rjmp	.+12     	; 0x8ca <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
     8be:	62 30       	cpi	r22, 0x02	; 2
     8c0:	21 f4       	brne	.+8      	; 0x8ca <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODERG_CHANNELA);
     8c2:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODERG_CHANNELB);
     8c4:	6b 98       	cbi	0x0d, 3	; 13
		SET(ENCODERG_CHANNELA);
     8c6:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODERG_CHANNELB);
     8c8:	73 9a       	sbi	0x0e, 3	; 14
	}
	Init_Interrupts();
     8ca:	d6 cf       	rjmp	.-84     	; 0x878 <_ZN12Rack_Encoder15Init_InterruptsEv>
     8cc:	08 95       	ret

000008ce <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	c1 f4       	brne	.+48     	; 0x906 <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
     8d6:	0b 9a       	sbi	0x01, 3	; 1
		OUTPUT(DD_B5);
     8d8:	09 9a       	sbi	0x01, 1	; 1

		OUTPUT(DD_PWM5);
     8da:	ea e0       	ldi	r30, 0x0A	; 10
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	80 81       	ld	r24, Z
     8e0:	80 62       	ori	r24, 0x20	; 32
     8e2:	80 83       	st	Z, r24

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
     8e4:	e0 e2       	ldi	r30, 0x20	; 32
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	80 81       	ld	r24, Z
     8ea:	8a 60       	ori	r24, 0x0A	; 10
     8ec:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
     8ee:	e1 e2       	ldi	r30, 0x21	; 33
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
     8f2:	80 81       	ld	r24, Z
     8f4:	8a 61       	ori	r24, 0x1A	; 26
     8f6:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
     8f8:	89 ef       	ldi	r24, 0xF9	; 249
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     900:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     904:	08 95       	ret
	}
	else if(num==2)
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	b9 f4       	brne	.+46     	; 0x938 <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
     90a:	0f 9a       	sbi	0x01, 7	; 1
		OUTPUT(DD_B6);
     90c:	0d 9a       	sbi	0x01, 5	; 1

		OUTPUT(DD_PWM6);
     90e:	ea e0       	ldi	r30, 0x0A	; 10
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	80 81       	ld	r24, Z
     914:	80 61       	ori	r24, 0x10	; 16
     916:	80 83       	st	Z, r24

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
     918:	e0 e2       	ldi	r30, 0x20	; 32
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	80 81       	ld	r24, Z
     91e:	82 62       	ori	r24, 0x22	; 34
     920:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
     922:	e1 e2       	ldi	r30, 0x21	; 33
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	80 81       	ld	r24, Z
     928:	8a 61       	ori	r24, 0x1A	; 26
     92a:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
     92c:	89 ef       	ldi	r24, 0xF9	; 249
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     934:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     938:	08 95       	ret

0000093a <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	19 f0       	breq	.+6      	; 0x948 <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	21 f0       	breq	.+8      	; 0x94e <_ZN10Rack_Motor19SetForwardDirectionEv+0x14>
     946:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
     948:	13 9a       	sbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     94a:	11 98       	cbi	0x02, 1	; 2
		break;
     94c:	08 95       	ret
		case 2:
		SET		(DD_F6);
     94e:	17 9a       	sbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     950:	15 98       	cbi	0x02, 5	; 2
     952:	08 95       	ret

00000954 <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
     954:	fc 01       	movw	r30, r24
     956:	80 81       	ld	r24, Z
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	19 f0       	breq	.+6      	; 0x962 <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	21 f0       	breq	.+8      	; 0x968 <_ZN10Rack_Motor19SetReverseDirectionEv+0x14>
     960:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     962:	13 98       	cbi	0x02, 3	; 2
		SET		(DD_B5);
     964:	11 9a       	sbi	0x02, 1	; 2
		break;
     966:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     968:	17 98       	cbi	0x02, 7	; 2
		SET		(DD_B6);
     96a:	15 9a       	sbi	0x02, 5	; 2
     96c:	08 95       	ret

0000096e <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	19 f0       	breq	.+6      	; 0x97c <_ZN10Rack_Motor9StopMotorEv+0xe>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	41 f0       	breq	.+16     	; 0x98a <_ZN10Rack_Motor9StopMotorEv+0x1c>
     97a:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     97c:	13 98       	cbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     97e:	11 98       	cbi	0x02, 1	; 2

		PWM_OCR5 = 0;
     980:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     984:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     988:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     98a:	17 98       	cbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     98c:	15 98       	cbi	0x02, 5	; 2

		PWM_OCR6 = 0;
     98e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     992:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     996:	08 95       	ret

00000998 <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	8c 01       	movw	r16, r24
     9a2:	eb 01       	movw	r28, r22
  if (Ocr > 0)
     9a4:	1c 16       	cp	r1, r28
     9a6:	1d 06       	cpc	r1, r29
     9a8:	0c f4       	brge	.+2      	; 0x9ac <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
     9aa:	c7 df       	rcall	.-114    	; 0x93a <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
     9ac:	dd 23       	and	r29, r29
     9ae:	2c f4       	brge	.+10     	; 0x9ba <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
     9b0:	d1 95       	neg	r29
     9b2:	c1 95       	neg	r28
     9b4:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
     9b6:	c8 01       	movw	r24, r16
     9b8:	cd df       	rcall	.-102    	; 0x954 <_ZN10Rack_Motor19SetReverseDirectionEv>
     9ba:	ca 3f       	cpi	r28, 0xFA	; 250
     9bc:	d1 05       	cpc	r29, r1
     9be:	14 f0       	brlt	.+4      	; 0x9c4 <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
     9c0:	c9 ef       	ldi	r28, 0xF9	; 249
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
     9c4:	f8 01       	movw	r30, r16
     9c6:	80 81       	ld	r24, Z
     9c8:	81 30       	cpi	r24, 0x01	; 1
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	31 f0       	breq	.+12     	; 0x9dc <_ZN10Rack_Motor11SetOcrValueEi+0x44>
     9d0:	09 c0       	rjmp	.+18     	; 0x9e4 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
     9d2:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     9d6:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
     9dc:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9e0:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		break;
	}
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	08 95       	ret

000009ee <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	ec 01       	movw	r28, r24
	num = no;
     9f4:	68 83       	st	Y, r22
	InitPWM();
     9f6:	6b df       	rcall	.-298    	; 0x8ce <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
     9f8:	ce 01       	movw	r24, r28
     9fa:	b9 df       	rcall	.-142    	; 0x96e <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	ce 01       	movw	r24, r28
     a02:	ca df       	rcall	.-108    	; 0x998 <_ZN10Rack_Motor11SetOcrValueEi>

}
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <_Z17operation_of_rackv>:
}

void disable_linetracker_interrupt()
{
	EIMSK &= ~(1<<JUNCTION_INT);
	EIFR |= (1<<JUNCTION_INTF);
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <RackEncoder+0x9>
     a12:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <RackEncoder+0xa>
     a16:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <RackEncoder+0xb>
     a1a:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <RackEncoder+0xc>
     a1e:	85 3c       	cpi	r24, 0xC5	; 197
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	af 4f       	sbci	r26, 0xFF	; 255
     a24:	bf 4f       	sbci	r27, 0xFF	; 255
     a26:	4c f4       	brge	.+18     	; 0xa3a <_Z17operation_of_rackv+0x30>
     a28:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     a2c:	88 23       	and	r24, r24
     a2e:	29 f0       	breq	.+10     	; 0xa3a <_Z17operation_of_rackv+0x30>
     a30:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <Rack_home_position>
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <donotstop>
     a3a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Geneva_Start>
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <_Z17operation_of_rackv+0x3a>
     a42:	5c c0       	rjmp	.+184    	; 0xafc <_Z17operation_of_rackv+0xf2>
     a44:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     a48:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     a4c:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <GenevaEncoder+0xb>
     a50:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <GenevaEncoder+0xc>
     a54:	88 36       	cpi	r24, 0x68	; 104
     a56:	91 40       	sbci	r25, 0x01	; 1
     a58:	a1 05       	cpc	r26, r1
     a5a:	b1 05       	cpc	r27, r1
     a5c:	54 f1       	brlt	.+84     	; 0xab2 <_Z17operation_of_rackv+0xa8>
     a5e:	60 91 39 02 	lds	r22, 0x0239	; 0x800239 <angle_pid+0xe>
     a62:	70 91 3a 02 	lds	r23, 0x023A	; 0x80023a <angle_pid+0xf>
     a66:	77 23       	and	r23, r23
     a68:	1c f4       	brge	.+6      	; 0xa70 <_Z17operation_of_rackv+0x66>
     a6a:	71 95       	neg	r23
     a6c:	61 95       	neg	r22
     a6e:	71 09       	sbc	r23, r1
     a70:	07 2e       	mov	r0, r23
     a72:	00 0c       	add	r0, r0
     a74:	88 0b       	sbc	r24, r24
     a76:	99 0b       	sbc	r25, r25
     a78:	35 d6       	rcall	.+3178   	; 0x16e4 <__floatsisf>
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	40 e4       	ldi	r20, 0x40	; 64
     a80:	50 e4       	ldi	r21, 0x40	; 64
     a82:	91 d5       	rcall	.+2850   	; 0x15a6 <__cmpsf2>
     a84:	18 16       	cp	r1, r24
     a86:	ac f0       	brlt	.+42     	; 0xab2 <_Z17operation_of_rackv+0xa8>
     a88:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <GenevaEncoder+0x9>
     a8c:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <GenevaEncoder+0xa>
     a90:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <GenevaEncoder+0xb>
     a94:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <GenevaEncoder+0xc>
     a98:	eb e2       	ldi	r30, 0x2B	; 43
     a9a:	f2 e0       	ldi	r31, 0x02	; 2
     a9c:	15 86       	std	Z+13, r1	; 0x0d
     a9e:	14 86       	std	Z+12, r1	; 0x0c
     aa0:	13 8a       	std	Z+19, r1	; 0x13
     aa2:	12 8a       	std	Z+18, r1	; 0x12
     aa4:	14 8a       	std	Z+20, r1	; 0x14
     aa6:	15 8a       	std	Z+21, r1	; 0x15
     aa8:	16 8a       	std	Z+22, r1	; 0x16
     aaa:	17 8a       	std	Z+23, r1	; 0x17
     aac:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Geneva_Start>
     ab0:	25 c0       	rjmp	.+74     	; 0xafc <_Z17operation_of_rackv+0xf2>
     ab2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     ab6:	88 23       	and	r24, r24
     ab8:	91 f0       	breq	.+36     	; 0xade <_Z17operation_of_rackv+0xd4>
     aba:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     abe:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     ac2:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <GenevaEncoder+0xb>
     ac6:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <GenevaEncoder+0xc>
     aca:	88 3c       	cpi	r24, 0xC8	; 200
     acc:	91 05       	cpc	r25, r1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	2c f0       	brlt	.+10     	; 0xade <_Z17operation_of_rackv+0xd4>
     ad4:	16 98       	cbi	0x02, 6	; 2
     ad6:	47 98       	cbi	0x08, 7	; 8
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
     ade:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     ae2:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     ae6:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <GenevaEncoder+0xb>
     aea:	b0 91 5c 02 	lds	r27, 0x025C	; 0x80025c <GenevaEncoder+0xc>
     aee:	88 37       	cpi	r24, 0x78	; 120
     af0:	91 05       	cpc	r25, r1
     af2:	a1 05       	cpc	r26, r1
     af4:	b1 05       	cpc	r27, r1
     af6:	14 f0       	brlt	.+4      	; 0xafc <_Z17operation_of_rackv+0xf2>
     af8:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
     afc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     b00:	88 23       	and	r24, r24
     b02:	c1 f0       	breq	.+48     	; 0xb34 <_Z17operation_of_rackv+0x12a>
     b04:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <GenevaEncoder+0x9>
     b08:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <GenevaEncoder+0xa>
     b0c:	8b e2       	ldi	r24, 0x2B	; 43
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	bc db       	rcall	.-2184   	; 0x28a <_ZN3PID13angle_ComputeEi>
     b12:	b5 d5       	rcall	.+2922   	; 0x167e <__fixsfsi>
     b14:	8a e6       	ldi	r24, 0x6A	; 106
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	3f df       	rcall	.-386    	; 0x998 <_ZN10Rack_Motor11SetOcrValueEi>
     b1a:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <RackEncoder+0x1>
     b1e:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <RackEncoder+0x2>
     b22:	83 e1       	ldi	r24, 0x13	; 19
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	35 db       	rcall	.-2454   	; 0x192 <_ZN3PID7ComputeEi>
     b28:	aa d5       	rcall	.+2900   	; 0x167e <__fixsfsi>
     b2a:	8b e6       	ldi	r24, 0x6B	; 107
     b2c:	92 e0       	ldi	r25, 0x02	; 2
     b2e:	34 df       	rcall	.-408    	; 0x998 <_ZN10Rack_Motor11SetOcrValueEi>
     b30:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
     b34:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     b38:	88 23       	and	r24, r24
     b3a:	09 f1       	breq	.+66     	; 0xb7e <_Z17operation_of_rackv+0x174>
     b3c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
     b40:	88 23       	and	r24, r24
     b42:	e9 f0       	breq	.+58     	; 0xb7e <_Z17operation_of_rackv+0x174>
     b44:	30 dc       	rcall	.-1952   	; 0x3a6 <_Z6millisv>
     b46:	00 91 4c 02 	lds	r16, 0x024C	; 0x80024c <previous_time>
     b4a:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <previous_time+0x1>
     b4e:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <previous_time+0x2>
     b52:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <previous_time+0x3>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	80 1b       	sub	r24, r16
     b5c:	91 0b       	sbc	r25, r17
     b5e:	a2 0b       	sbc	r26, r18
     b60:	b3 0b       	sbc	r27, r19
     b62:	8d 3b       	cpi	r24, 0xBD	; 189
     b64:	92 40       	sbci	r25, 0x02	; 2
     b66:	a1 05       	cpc	r26, r1
     b68:	b1 05       	cpc	r27, r1
     b6a:	48 f0       	brcs	.+18     	; 0xb7e <_Z17operation_of_rackv+0x174>
     b6c:	8e ef       	ldi	r24, 0xFE	; 254
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     b74:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
     b7e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pneumatic_geneva_start>
     b82:	88 23       	and	r24, r24
     b84:	e9 f0       	breq	.+58     	; 0xbc0 <_Z17operation_of_rackv+0x1b6>
     b86:	0f dc       	rcall	.-2018   	; 0x3a6 <_Z6millisv>
     b88:	00 91 48 02 	lds	r16, 0x0248	; 0x800248 <pneumatic_geneva_time>
     b8c:	10 91 49 02 	lds	r17, 0x0249	; 0x800249 <pneumatic_geneva_time+0x1>
     b90:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <pneumatic_geneva_time+0x2>
     b94:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <pneumatic_geneva_time+0x3>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	80 1b       	sub	r24, r16
     b9e:	91 0b       	sbc	r25, r17
     ba0:	a2 0b       	sbc	r26, r18
     ba2:	b3 0b       	sbc	r27, r19
     ba4:	8d 3b       	cpi	r24, 0xBD	; 189
     ba6:	92 40       	sbci	r25, 0x02	; 2
     ba8:	a1 05       	cpc	r26, r1
     baa:	b1 05       	cpc	r27, r1
     bac:	48 f0       	brcs	.+18     	; 0xbc0 <_Z17operation_of_rackv+0x1b6>
     bae:	88 e6       	ldi	r24, 0x68	; 104
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
     bb6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
     bc0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pass_the_shuttcock>
     bc4:	88 23       	and	r24, r24
     bc6:	d1 f0       	breq	.+52     	; 0xbfc <_Z17operation_of_rackv+0x1f2>
     bc8:	ee db       	rcall	.-2084   	; 0x3a6 <_Z6millisv>
     bca:	00 91 44 02 	lds	r16, 0x0244	; 0x800244 <passing_time>
     bce:	10 91 45 02 	lds	r17, 0x0245	; 0x800245 <passing_time+0x1>
     bd2:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <passing_time+0x2>
     bd6:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <passing_time+0x3>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	80 1b       	sub	r24, r16
     be0:	91 0b       	sbc	r25, r17
     be2:	a2 0b       	sbc	r26, r18
     be4:	b3 0b       	sbc	r27, r19
     be6:	8d 32       	cpi	r24, 0x2D	; 45
     be8:	91 40       	sbci	r25, 0x01	; 1
     bea:	a1 05       	cpc	r26, r1
     bec:	b1 05       	cpc	r27, r1
     bee:	30 f0       	brcs	.+12     	; 0xbfc <_Z17operation_of_rackv+0x1f2>
     bf0:	92 b1       	in	r25, 0x02	; 2
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	89 27       	eor	r24, r25
     bf6:	82 b9       	out	0x02, r24	; 2
     bf8:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
     bfc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <throw_rack>
     c00:	88 23       	and	r24, r24
     c02:	21 f1       	breq	.+72     	; 0xc4c <_Z17operation_of_rackv+0x242>
     c04:	d0 db       	rcall	.-2144   	; 0x3a6 <_Z6millisv>
     c06:	00 91 4c 02 	lds	r16, 0x024C	; 0x80024c <previous_time>
     c0a:	10 91 4d 02 	lds	r17, 0x024D	; 0x80024d <previous_time+0x1>
     c0e:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <previous_time+0x2>
     c12:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <previous_time+0x3>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	80 1b       	sub	r24, r16
     c1c:	91 0b       	sbc	r25, r17
     c1e:	a2 0b       	sbc	r26, r18
     c20:	b3 0b       	sbc	r27, r19
     c22:	8c 3b       	cpi	r24, 0xBC	; 188
     c24:	92 40       	sbci	r25, 0x02	; 2
     c26:	a1 05       	cpc	r26, r1
     c28:	b1 05       	cpc	r27, r1
     c2a:	80 f0       	brcs	.+32     	; 0xc4c <_Z17operation_of_rackv+0x242>
     c2c:	10 98       	cbi	0x02, 0	; 2
     c2e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <throw_rack>
     c32:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     c36:	88 23       	and	r24, r24
     c38:	49 f0       	breq	.+18     	; 0xc4c <_Z17operation_of_rackv+0x242>
     c3a:	88 e6       	ldi	r24, 0x68	; 104
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
     c42:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	08 95       	ret

00000c52 <_Z18init_timer_rampingv>:
     c52:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rampupflag_start>
     c56:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <timer_count>
     c5a:	84 b5       	in	r24, 0x24	; 36
     c5c:	82 60       	ori	r24, 0x02	; 2
     c5e:	84 bd       	out	0x24, r24	; 36
     c60:	85 b5       	in	r24, 0x25	; 37
     c62:	85 60       	ori	r24, 0x05	; 5
     c64:	85 bd       	out	0x25, r24	; 37
     c66:	ee e6       	ldi	r30, 0x6E	; 110
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	82 60       	ori	r24, 0x02	; 2
     c6e:	80 83       	st	Z, r24
     c70:	16 bc       	out	0x26, r1	; 38
     c72:	8b e9       	ldi	r24, 0x9B	; 155
     c74:	87 bd       	out	0x27, r24	; 39
     c76:	08 95       	ret

00000c78 <_Z14init_LedStripsv>:
     c78:	98 9a       	sbi	0x13, 0	; 19
     c7a:	3e 9a       	sbi	0x07, 6	; 7
     c7c:	3c 9a       	sbi	0x07, 4	; 7
     c7e:	9a 9a       	sbi	0x13, 2	; 19
     c80:	38 9a       	sbi	0x07, 0	; 7
     c82:	3a 9a       	sbi	0x07, 2	; 7
     c84:	99 9a       	sbi	0x13, 1	; 19
     c86:	a0 98       	cbi	0x14, 0	; 20
     c88:	46 98       	cbi	0x08, 6	; 8
     c8a:	44 98       	cbi	0x08, 4	; 8
     c8c:	a2 98       	cbi	0x14, 2	; 20
     c8e:	40 98       	cbi	0x08, 0	; 8
     c90:	42 98       	cbi	0x08, 2	; 8
     c92:	a1 98       	cbi	0x14, 1	; 20
     c94:	08 95       	ret

00000c96 <_Z11init_masterv>:
     c96:	ec e7       	ldi	r30, 0x7C	; 124
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	82 e3       	ldi	r24, 0x32	; 50
     c9c:	80 83       	st	Z, r24
     c9e:	81 83       	std	Z+1, r24	; 0x01
     ca0:	82 83       	std	Z+2, r24	; 0x02
     ca2:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <slave_work_category>
     ca6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <LtState>
     caa:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <line_tracker_data+0x1>
     cae:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <line_tracker_data>
     cb2:	89 e0       	ldi	r24, 0x09	; 9
     cb4:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <robot_rpm>
     cb8:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <auto_mode>
     cbc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_pickup>
     cc0:	10 ba       	out	0x10, r1	; 16
     cc2:	6d 98       	cbi	0x0d, 5	; 13
     cc4:	75 9a       	sbi	0x0e, 5	; 14
     cc6:	c5 df       	rcall	.-118    	; 0xc52 <_Z18init_timer_rampingv>
     cc8:	d7 cf       	rjmp	.-82     	; 0xc78 <_Z14init_LedStripsv>
     cca:	08 95       	ret

00000ccc <_Z20Get_linetracker_datav>:

/**************************************************Get line tracker data and send the value from 10 to 80 or 0 if not found*************************/

char Get_linetracker_data()
{
	line_tracker_data = 0;
     ccc:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <line_tracker_data+0x1>
     cd0:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <line_tracker_data>
	total_on_sensor = 0;
     cd4:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <total_on_sensor>
	for(counter_i=0; counter_i < 8; counter_i++)
     cd8:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <counter_i>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
	{
		val = READ2(F,counter_i);
     ce0:	6f b1       	in	r22, 0x0f	; 15
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	ca 01       	movw	r24, r20
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <_Z20Get_linetracker_datav+0x22>
     cea:	75 95       	asr	r23
     cec:	67 95       	ror	r22
     cee:	8a 95       	dec	r24
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <_Z20Get_linetracker_datav+0x1e>
     cf2:	61 70       	andi	r22, 0x01	; 1
     cf4:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <val>
		line_tracker_data += (val*(counter_i+1)*10);
     cf8:	86 2f       	mov	r24, r22
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	84 9f       	mul	r24, r20
     cfe:	90 01       	movw	r18, r0
     d00:	85 9f       	mul	r24, r21
     d02:	30 0d       	add	r19, r0
     d04:	94 9f       	mul	r25, r20
     d06:	30 0d       	add	r19, r0
     d08:	11 24       	eor	r1, r1
     d0a:	c9 01       	movw	r24, r18
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	22 0f       	add	r18, r18
     d16:	33 1f       	adc	r19, r19
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	28 0f       	add	r18, r24
     d1e:	39 1f       	adc	r19, r25
     d20:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <line_tracker_data>
     d24:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <line_tracker_data+0x1>
     d28:	28 0f       	add	r18, r24
     d2a:	39 1f       	adc	r19, r25
     d2c:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <line_tracker_data+0x1>
     d30:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <line_tracker_data>
		total_on_sensor += val;
     d34:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <total_on_sensor>
     d38:	69 0f       	add	r22, r25
     d3a:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <total_on_sensor>

char Get_linetracker_data()
{
	line_tracker_data = 0;
	total_on_sensor = 0;
	for(counter_i=0; counter_i < 8; counter_i++)
     d3e:	40 93 73 02 	sts	0x0273, r20	; 0x800273 <counter_i>
     d42:	4f 5f       	subi	r20, 0xFF	; 255
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	49 30       	cpi	r20, 0x09	; 9
     d48:	51 05       	cpc	r21, r1
     d4a:	51 f6       	brne	.-108    	; 0xce0 <_Z20Get_linetracker_datav+0x14>
	{
		val = READ2(F,counter_i);
		line_tracker_data += (val*(counter_i+1)*10);
		total_on_sensor += val;
	}
	total_on_sensor = (total_on_sensor == 0)?1:total_on_sensor;
     d4c:	61 11       	cpse	r22, r1
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <_Z20Get_linetracker_datav+0x86>
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <total_on_sensor>
	line_tracker_data = line_tracker_data/total_on_sensor;
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	c9 01       	movw	r24, r18
     d5a:	d7 d5       	rcall	.+2990   	; 0x190a <__divmodhi4>
     d5c:	86 2f       	mov	r24, r22
     d5e:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <line_tracker_data>
     d62:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <line_tracker_data+0x1>
	return line_tracker_data;
}
     d66:	08 95       	ret

00000d68 <_Z18Send_data_to_Slavev>:

/*****************************************Function to send data to slave***************************/

void Send_data_to_Slave()
{
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
	if(auto_mode)
     d6c:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <auto_mode>
     d70:	88 23       	and	r24, r24
     d72:	69 f0       	breq	.+26     	; 0xd8e <_Z18Send_data_to_Slavev+0x26>
	{
		UART3Transmit(START_BYTE_AUTO);
     d74:	8e ef       	ldi	r24, 0xFE	; 254
     d76:	37 d3       	rcall	.+1646   	; 0x13e6 <_Z13UART3Transmith>
		UART3Transmit(slave_work_category);
     d78:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <slave_work_category>
		UART3Transmit(Get_linetracker_data());
     d7c:	34 d3       	rcall	.+1640   	; 0x13e6 <_Z13UART3Transmith>
     d7e:	a6 df       	rcall	.-180    	; 0xccc <_Z20Get_linetracker_datav>
     d80:	32 d3       	rcall	.+1636   	; 0x13e6 <_Z13UART3Transmith>
		UART3Transmit(LtState);
     d82:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     d86:	2f d3       	rcall	.+1630   	; 0x13e6 <_Z13UART3Transmith>
		slave_work_category = static_position;
     d88:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <slave_work_category>
     d8c:	0e c0       	rjmp	.+28     	; 0xdaa <_Z18Send_data_to_Slavev+0x42>
	}
	else
	{
		UART3Transmit(START_BYTE_MANUAL);
     d8e:	8d ef       	ldi	r24, 0xFD	; 253
     d90:	2a d3       	rcall	.+1620   	; 0x13e6 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[0]);
     d92:	cc e7       	ldi	r28, 0x7C	; 124
     d94:	d2 e0       	ldi	r29, 0x02	; 2
     d96:	88 81       	ld	r24, Y
     d98:	26 d3       	rcall	.+1612   	; 0x13e6 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[1]);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	24 d3       	rcall	.+1608   	; 0x13e6 <_Z13UART3Transmith>
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
		UART3Transmit(velocity_robot[2]);
     da0:	22 d3       	rcall	.+1604   	; 0x13e6 <_Z13UART3Transmith>
     da2:	82 e3       	ldi	r24, 0x32	; 50
     da4:	88 83       	st	Y, r24
		velocity_robot[0] = RESETDATA_JOYSTICK;
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	8a 83       	std	Y+2, r24	; 0x02
		velocity_robot[1] = RESETDATA_JOYSTICK;
     daa:	df 91       	pop	r29
		velocity_robot[2] = RESETDATA_JOYSTICK;
     dac:	cf 91       	pop	r28
	}

	
}
     dae:	08 95       	ret

00000db0 <_Z17orientation_checkv>:
     db0:	1e 9b       	sbis	0x03, 6	; 3
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <_Z17orientation_checkv+0x12>
void orientation_check()
{
		//limit_switch 1
		if(READ(LTSWITCH_ORIENT_1))
		{
			LtState &= ~(1<<0);
     db4:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			CLEAR(LT1_LED);
     dbe:	44 98       	cbi	0x08, 4	; 8
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <_Z17orientation_checkv+0x1e>
		}
		else
		{
			LtState |= (1<<0);
     dc2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			SET(LT1_LED);
     dcc:	44 9a       	sbi	0x08, 4	; 8
		}
		
		//limit_Switch 2
		if(READ(LTSWITCH_ORIENT_2))
     dce:	1f 9b       	sbis	0x03, 7	; 3
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <_Z17orientation_checkv+0x30>
		{
			LtState &= ~(1<<1);
     dd2:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     dd6:	8d 7f       	andi	r24, 0xFD	; 253
     dd8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			CLEAR(LT2_LED);
     ddc:	a1 98       	cbi	0x14, 1	; 20
     dde:	06 c0       	rjmp	.+12     	; 0xdec <_Z17orientation_checkv+0x3c>
		}
		else
		{
			LtState |= (1<<1);
     de0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			SET(LT2_LED);
     dea:	a1 9a       	sbi	0x14, 1	; 20
		}
		
		//limit_Switch 3
		if (READ(LTSWITCH_ORIENT_3))
     dec:	1d 9b       	sbis	0x03, 5	; 3
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <_Z17orientation_checkv+0x4e>
		{
			LtState &= ~(1<<2);
     df0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     df4:	8b 7f       	andi	r24, 0xFB	; 251
     df6:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			CLEAR(LT3_LED);
     dfa:	40 98       	cbi	0x08, 0	; 8
     dfc:	08 95       	ret
		}
		else
		{
			LtState |= (1<<2);
     dfe:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <LtState>
     e02:	84 60       	ori	r24, 0x04	; 4
     e04:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <LtState>
			SET(LT3_LED);
     e08:	40 9a       	sbi	0x08, 0	; 8
     e0a:	08 95       	ret

00000e0c <_Z19operate_master_autov>:
	init_timer_ramping();
	init_LedStrips();
}

void operate_master_auto()
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
	static unsigned long rack_picktime = 0;
	
	SET(AUTO_LED_STRIP);
     e12:	a0 9a       	sbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     e14:	46 98       	cbi	0x08, 6	; 8
	
	//toggling manual and automatic mode
	if(GAMEBUTTONA == START_BUTTON)
     e16:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <rcvdata>
     e1a:	80 34       	cpi	r24, 0x40	; 64
     e1c:	29 f4       	brne	.+10     	; 0xe28 <_Z19operate_master_autov+0x1c>
	{
		auto_mode = false;
     e1e:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <auto_mode>
		GAMEBUTTONA = 0;
     e22:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e26:	5c c0       	rjmp	.+184    	; 0xee0 <_Z19operate_master_autov+0xd4>
	}
	//Automatic zone navigation
	else if(GAMEBUTTONA == BUTTON_A)
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	69 f4       	brne	.+26     	; 0xe46 <_Z19operate_master_autov+0x3a>
	{
		slave_work_category = Rack_load;
     e2c:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		auto_move_rack = true;
     e30:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     e34:	8e ef       	ldi	r24, 0xFE	; 254
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     e3c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(-RACK_COUNT);
		GAMEBUTTONA = 0;
     e40:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e44:	4d c0       	rjmp	.+154    	; 0xee0 <_Z19operate_master_autov+0xd4>
	}
	else if(GAMEBUTTONA == BUTTON_B)
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	29 f4       	brne	.+10     	; 0xe54 <_Z19operate_master_autov+0x48>
	{
		slave_work_category = Load1;
     e4a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONA = 0;
     e4e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e52:	46 c0       	rjmp	.+140    	; 0xee0 <_Z19operate_master_autov+0xd4>
	}
	else if (GAMEBUTTONA == BUTTON_X)
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	31 f4       	brne	.+12     	; 0xe64 <_Z19operate_master_autov+0x58>
	{
		slave_work_category = Load2;
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONA = 0;
     e5e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e62:	3e c0       	rjmp	.+124    	; 0xee0 <_Z19operate_master_autov+0xd4>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	31 f4       	brne	.+12     	; 0xe74 <_Z19operate_master_autov+0x68>
	{
		slave_work_category = Golden_Rack;
     e68:	85 e0       	ldi	r24, 0x05	; 5
     e6a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONA = 0;
     e6e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
     e72:	36 c0       	rjmp	.+108    	; 0xee0 <_Z19operate_master_autov+0xd4>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)
     e74:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
     e78:	91 11       	cpse	r25, r1
     e7a:	32 c0       	rjmp	.+100    	; 0xee0 <_Z19operate_master_autov+0xd4>
     e7c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
     e80:	91 11       	cpse	r25, r1
     e82:	2e c0       	rjmp	.+92     	; 0xee0 <_Z19operate_master_autov+0xd4>
     e84:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
     e88:	91 11       	cpse	r25, r1
     e8a:	2a c0       	rjmp	.+84     	; 0xee0 <_Z19operate_master_autov+0xd4>
     e8c:	80 32       	cpi	r24, 0x20	; 32
     e8e:	41 f5       	brne	.+80     	; 0xee0 <_Z19operate_master_autov+0xd4>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
     e90:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     e94:	88 23       	and	r24, r24
     e96:	81 f0       	breq	.+32     	; 0xeb8 <_Z19operate_master_autov+0xac>
		{
			pneumatic_geneva_start = true;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     e9e:	83 da       	rcall	.-2810   	; 0x3a6 <_Z6millisv>
     ea0:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pneumatic_geneva_time>
     ea4:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pneumatic_geneva_time+0x1>
     ea8:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pneumatic_geneva_time+0x2>
     eac:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     eb0:	88 b1       	in	r24, 0x08	; 8
     eb2:	80 58       	subi	r24, 0x80	; 128
     eb4:	88 b9       	out	0x08, r24	; 8
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <_Z19operate_master_autov+0xae>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     eb8:	47 98       	cbi	0x08, 7	; 8
		}
		
		pass_the_shuttcock = true;
     eba:	c1 e0       	ldi	r28, 0x01	; 1
     ebc:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     ec0:	72 da       	rcall	.-2844   	; 0x3a6 <_Z6millisv>
     ec2:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <passing_time>
     ec6:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <passing_time+0x1>
     eca:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <passing_time+0x2>
     ece:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <passing_time+0x3>
		inside_robot = (1^inside_robot);
     ed2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     ed6:	c8 27       	eor	r28, r24
     ed8:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
     edc:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
	}

	
	if (GAMEBUTTONB == LEFT_BUTTON)
     ee0:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rcvdata+0x1>
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	29 f4       	brne	.+10     	; 0xef2 <_Z19operate_master_autov+0xe6>
	{
		slave_work_category = Search_automaticrobot;
     ee8:	84 e0       	ldi	r24, 0x04	; 4
     eea:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
		GAMEBUTTONB = 0;
     eee:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <rcvdata+0x1>
	}		
	
	//if reached rack loading zone
	if(SLAVE_DATA == Rack_zone)
     ef2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <rcv_value_slave>
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	a9 f4       	brne	.+42     	; 0xf24 <_Z19operate_master_autov+0x118>
	{
		auto_move_rack = true;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		rack_throw_auto = true;
     f00:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
     f04:	16 9a       	sbi	0x02, 6	; 2
		RACK_GRIP_CLOSE();
     f06:	10 9a       	sbi	0x02, 0	; 2
		rack_pickup = true;
     f08:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_pickup>
		rack_picktime = millis();
     f0c:	4c da       	rcall	.-2920   	; 0x3a6 <_Z6millisv>
     f0e:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_ZZ19operate_master_autovE13rack_picktime>
     f12:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_ZZ19operate_master_autovE13rack_picktime+0x1>
     f16:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZ19operate_master_autovE13rack_picktime+0x2>
     f1a:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_ZZ19operate_master_autovE13rack_picktime+0x3>
		SLAVE_DATA = 0;
     f1e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
     f22:	42 c0       	rjmp	.+132    	; 0xfa8 <_Z19operate_master_autov+0x19c>
	}
	else if(SLAVE_DATA == Golden_zone)
     f24:	85 30       	cpi	r24, 0x05	; 5
     f26:	81 f4       	brne	.+32     	; 0xf48 <_Z19operate_master_autov+0x13c>
	{
		RACK_GRIP_CLOSE();
     f28:	10 9a       	sbi	0x02, 0	; 2
		rack_pickup = true;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_pickup>
		rack_picktime = millis();
     f30:	3a da       	rcall	.-2956   	; 0x3a6 <_Z6millisv>
     f32:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <_ZZ19operate_master_autovE13rack_picktime>
     f36:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <_ZZ19operate_master_autovE13rack_picktime+0x1>
     f3a:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <_ZZ19operate_master_autovE13rack_picktime+0x2>
     f3e:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <_ZZ19operate_master_autovE13rack_picktime+0x3>
		SLAVE_DATA = 0;
     f42:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
     f46:	30 c0       	rjmp	.+96     	; 0xfa8 <_Z19operate_master_autov+0x19c>
	}
	else if(SLAVE_DATA == Give_shutcock)
     f48:	86 30       	cpi	r24, 0x06	; 6
     f4a:	49 f5       	brne	.+82     	; 0xf9e <_Z19operate_master_autov+0x192>
	{
		if(inside_robot)
     f4c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     f50:	88 23       	and	r24, r24
		{
			pneumatic_geneva_start = true;
     f52:	81 f0       	breq	.+32     	; 0xf74 <_Z19operate_master_autov+0x168>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     f5a:	25 da       	rcall	.-2998   	; 0x3a6 <_Z6millisv>
     f5c:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pneumatic_geneva_time>
     f60:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pneumatic_geneva_time+0x1>
     f64:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pneumatic_geneva_time+0x2>
     f68:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     f6c:	88 b1       	in	r24, 0x08	; 8
     f6e:	80 58       	subi	r24, 0x80	; 128
     f70:	88 b9       	out	0x08, r24	; 8
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <_Z19operate_master_autov+0x16a>
		}
		
		pass_the_shuttcock = true;
     f74:	47 98       	cbi	0x08, 7	; 8
     f76:	c1 e0       	ldi	r28, 0x01	; 1
     f78:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     f7c:	14 da       	rcall	.-3032   	; 0x3a6 <_Z6millisv>
     f7e:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <passing_time>
     f82:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <passing_time+0x1>
     f86:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <passing_time+0x2>
     f8a:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <passing_time+0x3>
		inside_robot = (1^inside_robot);
     f8e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     f92:	c8 27       	eor	r28, r24
     f94:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		SLAVE_DATA = 0;
     f98:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <_Z19operate_master_autov+0x19c>
	}
	else if(SLAVE_DATA == Give_GoldenRack)
     f9e:	87 30       	cpi	r24, 0x07	; 7
     fa0:	19 f4       	brne	.+6      	; 0xfa8 <_Z19operate_master_autov+0x19c>
	{
		RACK_GRIP_OPEN();
     fa2:	10 98       	cbi	0x02, 0	; 2
		SLAVE_DATA = 0;
     fa4:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
	}
	
	//delay for rack pickup
	if(rack_pickup && (millis()-rack_picktime) >= 500)
     fa8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_pickup>
     fac:	88 23       	and	r24, r24
     fae:	39 f1       	breq	.+78     	; 0xffe <_Z19operate_master_autov+0x1f2>
     fb0:	fa d9       	rcall	.-3084   	; 0x3a6 <_Z6millisv>
     fb2:	00 91 6d 02 	lds	r16, 0x026D	; 0x80026d <_ZZ19operate_master_autovE13rack_picktime>
     fb6:	10 91 6e 02 	lds	r17, 0x026E	; 0x80026e <_ZZ19operate_master_autovE13rack_picktime+0x1>
     fba:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <_ZZ19operate_master_autovE13rack_picktime+0x2>
     fbe:	30 91 70 02 	lds	r19, 0x0270	; 0x800270 <_ZZ19operate_master_autovE13rack_picktime+0x3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	80 1b       	sub	r24, r16
     fc8:	91 0b       	sbc	r25, r17
     fca:	a2 0b       	sbc	r26, r18
     fcc:	b3 0b       	sbc	r27, r19
     fce:	84 3f       	cpi	r24, 0xF4	; 244
     fd0:	91 40       	sbci	r25, 0x01	; 1
     fd2:	a1 05       	cpc	r26, r1
     fd4:	b1 05       	cpc	r27, r1
     fd6:	98 f0       	brcs	.+38     	; 0xffe <_Z19operate_master_autov+0x1f2>
	{
		RACK_LIFT_OPEN();
     fd8:	14 9a       	sbi	0x02, 4	; 2
		
		if(rack_throw_auto)
     fda:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     fde:	88 23       	and	r24, r24
     fe0:	59 f0       	breq	.+22     	; 0xff8 <_Z19operate_master_autov+0x1ec>
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
     fea:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
			slave_work_category = Load1;
     fee:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
			rack_pickup = false;
     ff2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_pickup>
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <_Z19operate_master_autov+0x1f2>
		}	
		else
			slave_work_category = Golden_Rack;	
     ff8:	85 e0       	ldi	r24, 0x05	; 5
     ffa:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <slave_work_category>
	}
	
	//if not rack auto move stop rack motor
	if(!auto_move_rack)
     ffe:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
    1002:	81 11       	cpse	r24, r1
    1004:	04 c0       	rjmp	.+8      	; 0x100e <_Z19operate_master_autov+0x202>
    1006:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
		rack_motor_pid.Set_SP(0);
		
	operation_of_rack();
    100a:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
	rack_limit_check();
    100e:	fd dc       	rcall	.-1542   	; 0xa0a <_Z17operation_of_rackv>
    1010:	68 da       	rcall	.-2864   	; 0x4e2 <_Z16rack_limit_checkv>
	orientation_check();
    1012:	ce de       	rcall	.-612    	; 0xdb0 <_Z17orientation_checkv>
    1014:	cf 91       	pop	r28
}
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <_Z21operate_master_manualv>:
    101c:	0f 93       	push	r16


void operate_master_manual()
{
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
	/**********************************************GAMEBUTTONB_SECTION*********************************/
	SET(MANUAL_LED_STRIP);
    1024:	46 9a       	sbi	0x08, 6	; 8
	CLEAR(AUTO_LED_STRIP);
    1026:	a0 98       	cbi	0x14, 0	; 20
	
	if (GAMEBUTTONB == RIGHT)
    1028:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rcvdata+0x1>
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	51 f4       	brne	.+20     	; 0x1044 <_Z21operate_master_manualv+0x28>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    1030:	ec e7       	ldi	r30, 0x7C	; 124
    1032:	f2 e0       	ldi	r31, 0x02	; 2
    1034:	92 e3       	ldi	r25, 0x32	; 50
    1036:	90 83       	st	Z, r25
		velocity_robot[1] = RESETDATA_JOYSTICK + robot_rpm;
    1038:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <robot_rpm>
    103c:	8e 5c       	subi	r24, 0xCE	; 206
    103e:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    1040:	92 83       	std	Z+2, r25	; 0x02
    1042:	25 c0       	rjmp	.+74     	; 0x108e <_Z21operate_master_manualv+0x72>
	}
	else if (GAMEBUTTONB == LEFT)
    1044:	88 30       	cpi	r24, 0x08	; 8
    1046:	59 f4       	brne	.+22     	; 0x105e <_Z21operate_master_manualv+0x42>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    1048:	ec e7       	ldi	r30, 0x7C	; 124
    104a:	f2 e0       	ldi	r31, 0x02	; 2
    104c:	82 e3       	ldi	r24, 0x32	; 50
    104e:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK - robot_rpm;
    1050:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <robot_rpm>
    1054:	28 2f       	mov	r18, r24
    1056:	29 1b       	sub	r18, r25
    1058:	21 83       	std	Z+1, r18	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    105a:	82 83       	std	Z+2, r24	; 0x02
    105c:	18 c0       	rjmp	.+48     	; 0x108e <_Z21operate_master_manualv+0x72>
	}
	else if (GAMEBUTTONB == UP)
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	51 f4       	brne	.+20     	; 0x1076 <_Z21operate_master_manualv+0x5a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK + robot_rpm;
    1062:	ec e7       	ldi	r30, 0x7C	; 124
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <robot_rpm>
    106a:	8e 5c       	subi	r24, 0xCE	; 206
    106c:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
    106e:	82 e3       	ldi	r24, 0x32	; 50
    1070:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    1072:	82 83       	std	Z+2, r24	; 0x02
    1074:	0c c0       	rjmp	.+24     	; 0x108e <_Z21operate_master_manualv+0x72>
		//front_drive = true;
		
	}
	else if (GAMEBUTTONB == DOWN)
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	51 f4       	brne	.+20     	; 0x108e <_Z21operate_master_manualv+0x72>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK - robot_rpm;
    107a:	ec e7       	ldi	r30, 0x7C	; 124
    107c:	f2 e0       	ldi	r31, 0x02	; 2
    107e:	82 e3       	ldi	r24, 0x32	; 50
    1080:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <robot_rpm>
    1084:	68 2f       	mov	r22, r24
    1086:	69 1b       	sub	r22, r25
    1088:	60 83       	st	Z, r22
		velocity_robot[1] = RESETDATA_JOYSTICK;
    108a:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    108c:	82 83       	std	Z+2, r24	; 0x02
		//back_drive = true;
	}
	
	
	/**********************************************************************GAMEBUTTONA_SECTION****************************/
	if(GAMEBUTTONA == START_BUTTON)
    108e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <rcvdata>
    1092:	80 34       	cpi	r24, 0x40	; 64
    1094:	31 f4       	brne	.+12     	; 0x10a2 <_Z21operate_master_manualv+0x86>
	{
		auto_mode = true;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <auto_mode>
		GAMEBUTTONA = 0;
    109c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    10a0:	88 c0       	rjmp	.+272    	; 0x11b2 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == BUTTON_A)
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	31 f4       	brne	.+12     	; 0x10b2 <_Z21operate_master_manualv+0x96>
	{
		RACK_GRIP_TOGGLE();
    10a6:	92 b1       	in	r25, 0x02	; 2
    10a8:	89 27       	eor	r24, r25
    10aa:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    10ac:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    10b0:	80 c0       	rjmp	.+256    	; 0x11b2 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	59 f4       	brne	.+22     	; 0x10cc <_Z21operate_master_manualv+0xb0>
    10b6:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Rack_home_position>
    10ba:	91 11       	cpse	r25, r1
    10bc:	44 c0       	rjmp	.+136    	; 0x1146 <_Z21operate_master_manualv+0x12a>
	{
		RACK_LIFT_TOGGLE();
    10be:	92 b1       	in	r25, 0x02	; 2
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	89 27       	eor	r24, r25
    10c4:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    10c6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    10ca:	73 c0       	rjmp	.+230    	; 0x11b2 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == BUTTON_X)
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	b9 f4       	brne	.+46     	; 0x10fe <_Z21operate_master_manualv+0xe2>
	{
		auto_move_rack = true;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		if(Rack_home_position)
    10d6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <Rack_home_position>
    10da:	88 23       	and	r24, r24
    10dc:	39 f0       	breq	.+14     	; 0x10ec <_Z21operate_master_manualv+0xd0>
    10de:	8e ef       	ldi	r24, 0xFE	; 254
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    10e6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <_Z21operate_master_manualv+0xdc>
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    10f4:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		}
		else
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		GAMEBUTTONA = 0;
    10f8:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    10fc:	71 c0       	rjmp	.+226    	; 0x11e0 <_Z21operate_master_manualv+0x1c4>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
    10fe:	88 30       	cpi	r24, 0x08	; 8
    1100:	61 f4       	brne	.+24     	; 0x111a <_Z21operate_master_manualv+0xfe>
    1102:	88 e6       	ldi	r24, 0x68	; 104
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <angle_pid+0xd>
    110a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <angle_pid+0xc>
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Geneva_Start>
		GAMEBUTTONA = 0;
    1114:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    1118:	4c c0       	rjmp	.+152    	; 0x11b2 <_Z21operate_master_manualv+0x196>
	}
	else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
    111a:	80 31       	cpi	r24, 0x10	; 16
    111c:	a1 f4       	brne	.+40     	; 0x1146 <_Z21operate_master_manualv+0x12a>
    111e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Rack_home_position>
    1122:	91 11       	cpse	r25, r1
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <_Z21operate_master_manualv+0x12a>
	{
		auto_move_rack = true;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <auto_move_rack>
		rack_throw_auto = true;
    112c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
    1130:	16 9a       	sbi	0x02, 6	; 2
		RACK_LIFT_OPEN();
    1132:	14 9a       	sbi	0x02, 4	; 2
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    113c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
		rack_motor_pid.Set_SP(RACK_COUNT);
		GAMEBUTTONA = 0;
    1140:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>
    1144:	36 c0       	rjmp	.+108    	; 0x11b2 <_Z21operate_master_manualv+0x196>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	
    1146:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
    114a:	91 11       	cpse	r25, r1
    114c:	32 c0       	rjmp	.+100    	; 0x11b2 <_Z21operate_master_manualv+0x196>
    114e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
    1152:	91 11       	cpse	r25, r1
    1154:	2e c0       	rjmp	.+92     	; 0x11b2 <_Z21operate_master_manualv+0x196>
    1156:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
    115a:	91 11       	cpse	r25, r1
    115c:	2a c0       	rjmp	.+84     	; 0x11b2 <_Z21operate_master_manualv+0x196>
    115e:	80 32       	cpi	r24, 0x20	; 32
    1160:	41 f5       	brne	.+80     	; 0x11b2 <_Z21operate_master_manualv+0x196>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
    1162:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    1166:	88 23       	and	r24, r24
    1168:	81 f0       	breq	.+32     	; 0x118a <_Z21operate_master_manualv+0x16e>
		{
			pneumatic_geneva_start = true;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
    1170:	1a d9       	rcall	.-3532   	; 0x3a6 <_Z6millisv>
    1172:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <pneumatic_geneva_time>
    1176:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <pneumatic_geneva_time+0x1>
    117a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pneumatic_geneva_time+0x2>
    117e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
    1182:	88 b1       	in	r24, 0x08	; 8
    1184:	80 58       	subi	r24, 0x80	; 128
    1186:	88 b9       	out	0x08, r24	; 8
    1188:	01 c0       	rjmp	.+2      	; 0x118c <_Z21operate_master_manualv+0x170>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    118a:	47 98       	cbi	0x08, 7	; 8
		}
		
		pass_the_shuttcock = true;
    118c:	c1 e0       	ldi	r28, 0x01	; 1
    118e:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
    1192:	09 d9       	rcall	.-3566   	; 0x3a6 <_Z6millisv>
    1194:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <passing_time>
    1198:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <passing_time+0x1>
    119c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <passing_time+0x2>
    11a0:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <passing_time+0x3>
		inside_robot = (1^inside_robot);
    11a4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    11a8:	c8 27       	eor	r28, r24
    11aa:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
    11ae:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rcvdata>

	
	

	/**************************************************Rack Operation******************************************************/
	if (!auto_move_rack)
    11b2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <auto_move_rack>
    11b6:	81 11       	cpse	r24, r1
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <_Z21operate_master_manualv+0x1c4>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
    11ba:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rcvdata+0x2>
    11be:	85 31       	cpi	r24, 0x15	; 21
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <_Z21operate_master_manualv+0x1a8>
    11c2:	b4 c0       	rjmp	.+360    	; 0x132c <_Z21operate_master_manualv+0x310>
    11c4:	1c 99       	sbic	0x03, 4	; 3
    11c6:	ab c0       	rjmp	.+342    	; 0x131e <_Z21operate_master_manualv+0x302>
    11c8:	b1 c0       	rjmp	.+354    	; 0x132c <_Z21operate_master_manualv+0x310>
    11ca:	8e ef       	ldi	r24, 0xFE	; 254
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    11d2:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <_Z21operate_master_manualv+0x1c4>
    11d8:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xd>
    11dc:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <rack_motor_pid+0xc>
		else
		rack_motor_pid.Set_SP(0);
	}
	
	/*********************************************************************Move using joystick analog stick********************************************/
	if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
    11e0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <rcvdata+0x5>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9c 01       	movw	r18, r24
    11e8:	22 53       	subi	r18, 0x32	; 50
    11ea:	31 09       	sbc	r19, r1
    11ec:	12 16       	cp	r1, r18
    11ee:	13 06       	cpc	r1, r19
    11f0:	24 f4       	brge	.+8      	; 0x11fa <_Z21operate_master_manualv+0x1de>
    11f2:	26 30       	cpi	r18, 0x06	; 6
    11f4:	31 05       	cpc	r19, r1
    11f6:	44 f0       	brlt	.+16     	; 0x1208 <_Z21operate_master_manualv+0x1ec>
    11f8:	32 c0       	rjmp	.+100    	; 0x125e <_Z21operate_master_manualv+0x242>
    11fa:	42 e3       	ldi	r20, 0x32	; 50
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	fa 01       	movw	r30, r20
    1200:	e8 1b       	sub	r30, r24
    1202:	f9 0b       	sbc	r31, r25
    1204:	36 97       	sbiw	r30, 0x06	; 6
    1206:	5c f5       	brge	.+86     	; 0x125e <_Z21operate_master_manualv+0x242>
    1208:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <rcvdata+0x4>
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	ac 01       	movw	r20, r24
    1210:	42 53       	subi	r20, 0x32	; 50
    1212:	51 09       	sbc	r21, r1
    1214:	14 16       	cp	r1, r20
    1216:	15 06       	cpc	r1, r21
    1218:	24 f4       	brge	.+8      	; 0x1222 <_Z21operate_master_manualv+0x206>
    121a:	46 30       	cpi	r20, 0x06	; 6
    121c:	51 05       	cpc	r21, r1
    121e:	4c f0       	brlt	.+18     	; 0x1232 <_Z21operate_master_manualv+0x216>
    1220:	1e c0       	rjmp	.+60     	; 0x125e <_Z21operate_master_manualv+0x242>
    1222:	42 e3       	ldi	r20, 0x32	; 50
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	ba 01       	movw	r22, r20
    1228:	68 1b       	sub	r22, r24
    122a:	79 0b       	sbc	r23, r25
    122c:	66 30       	cpi	r22, 0x06	; 6
    122e:	71 05       	cpc	r23, r1
    1230:	b4 f4       	brge	.+44     	; 0x125e <_Z21operate_master_manualv+0x242>
    1232:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <rcvdata+0x6>
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	ac 01       	movw	r20, r24
    123a:	42 53       	subi	r20, 0x32	; 50
    123c:	51 09       	sbc	r21, r1
    123e:	14 16       	cp	r1, r20
    1240:	15 06       	cpc	r1, r21
    1242:	2c f4       	brge	.+10     	; 0x124e <_Z21operate_master_manualv+0x232>
    1244:	46 30       	cpi	r20, 0x06	; 6
    1246:	51 05       	cpc	r21, r1
    1248:	0c f4       	brge	.+2      	; 0x124c <_Z21operate_master_manualv+0x230>
    124a:	63 c0       	rjmp	.+198    	; 0x1312 <_Z21operate_master_manualv+0x2f6>
    124c:	08 c0       	rjmp	.+16     	; 0x125e <_Z21operate_master_manualv+0x242>
    124e:	42 e3       	ldi	r20, 0x32	; 50
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	fa 01       	movw	r30, r20
    1254:	e8 1b       	sub	r30, r24
    1256:	f9 0b       	sbc	r31, r25
    1258:	36 97       	sbiw	r30, 0x06	; 6
    125a:	0c f4       	brge	.+2      	; 0x125e <_Z21operate_master_manualv+0x242>
    125c:	5a c0       	rjmp	.+180    	; 0x1312 <_Z21operate_master_manualv+0x2f6>
	{
		rampupflag_start = true;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <rampupflag_start>
		velocity_robot[0] = (LEFTSTICKY-50)*timer_count/60.0 + 50;
    1264:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <timer_count>
    1268:	cc e7       	ldi	r28, 0x7C	; 124
    126a:	d2 e0       	ldi	r29, 0x02	; 2
    126c:	42 03       	mulsu	r20, r18
    126e:	b0 01       	movw	r22, r0
    1270:	43 9f       	mul	r20, r19
    1272:	70 0d       	add	r23, r0
    1274:	11 24       	eor	r1, r1
    1276:	07 2e       	mov	r0, r23
    1278:	00 0c       	add	r0, r0
    127a:	88 0b       	sbc	r24, r24
    127c:	99 0b       	sbc	r25, r25
    127e:	32 d2       	rcall	.+1124   	; 0x16e4 <__floatsisf>
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e7       	ldi	r20, 0x70	; 112
    1286:	52 e4       	ldi	r21, 0x42	; 66
    1288:	92 d1       	rcall	.+804    	; 0x15ae <__divsf3>
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	48 e4       	ldi	r20, 0x48	; 72
    1290:	52 e4       	ldi	r21, 0x42	; 66
    1292:	25 d1       	rcall	.+586    	; 0x14de <__addsf3>
    1294:	f9 d1       	rcall	.+1010   	; 0x1688 <__fixunssfsi>
    1296:	68 83       	st	Y, r22
		velocity_robot[1] = (LEFTSTICKX-50)*timer_count/60.0 + 50;
    1298:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <timer_count>
    129c:	03 e8       	ldi	r16, 0x83	; 131
    129e:	12 e0       	ldi	r17, 0x02	; 2
    12a0:	f8 01       	movw	r30, r16
    12a2:	24 81       	ldd	r18, Z+4	; 0x04
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	22 53       	subi	r18, 0x32	; 50
    12a8:	31 09       	sbc	r19, r1
    12aa:	42 03       	mulsu	r20, r18
    12ac:	b0 01       	movw	r22, r0
    12ae:	43 9f       	mul	r20, r19
    12b0:	70 0d       	add	r23, r0
    12b2:	11 24       	eor	r1, r1
    12b4:	07 2e       	mov	r0, r23
    12b6:	00 0c       	add	r0, r0
    12b8:	88 0b       	sbc	r24, r24
    12ba:	99 0b       	sbc	r25, r25
    12bc:	13 d2       	rcall	.+1062   	; 0x16e4 <__floatsisf>
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e7       	ldi	r20, 0x70	; 112
    12c4:	52 e4       	ldi	r21, 0x42	; 66
    12c6:	73 d1       	rcall	.+742    	; 0x15ae <__divsf3>
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	48 e4       	ldi	r20, 0x48	; 72
    12ce:	52 e4       	ldi	r21, 0x42	; 66
    12d0:	06 d1       	rcall	.+524    	; 0x14de <__addsf3>
    12d2:	da d1       	rcall	.+948    	; 0x1688 <__fixunssfsi>
    12d4:	69 83       	std	Y+1, r22	; 0x01
		velocity_robot[2] = (RIGHTSTICKX-50)*timer_count/60.0 + 50;
    12d6:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <timer_count>
    12da:	f8 01       	movw	r30, r16
    12dc:	26 81       	ldd	r18, Z+6	; 0x06
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	22 53       	subi	r18, 0x32	; 50
    12e2:	31 09       	sbc	r19, r1
    12e4:	42 03       	mulsu	r20, r18
    12e6:	b0 01       	movw	r22, r0
    12e8:	43 9f       	mul	r20, r19
    12ea:	70 0d       	add	r23, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	07 2e       	mov	r0, r23
    12f0:	00 0c       	add	r0, r0
    12f2:	88 0b       	sbc	r24, r24
    12f4:	99 0b       	sbc	r25, r25
    12f6:	f6 d1       	rcall	.+1004   	; 0x16e4 <__floatsisf>
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e7       	ldi	r20, 0x70	; 112
    12fe:	52 e4       	ldi	r21, 0x42	; 66
    1300:	56 d1       	rcall	.+684    	; 0x15ae <__divsf3>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	48 e4       	ldi	r20, 0x48	; 72
    1308:	52 e4       	ldi	r21, 0x42	; 66
    130a:	e9 d0       	rcall	.+466    	; 0x14de <__addsf3>
	}
	else
	rampupflag_start = false;
    130c:	bd d1       	rcall	.+890    	; 0x1688 <__fixunssfsi>
    130e:	6a 83       	std	Y+2, r22	; 0x02
	
	operation_of_rack();	
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <_Z21operate_master_manualv+0x2fa>
    1312:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <rampupflag_start>
	rack_limit_check();
    1316:	79 db       	rcall	.-2318   	; 0xa0a <_Z17operation_of_rackv>
	orientation_check();
    1318:	e4 d8       	rcall	.-3640   	; 0x4e2 <_Z16rack_limit_checkv>
    131a:	4a dd       	rcall	.-1388   	; 0xdb0 <_Z17orientation_checkv>

}
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <_Z21operate_master_manualv+0x31c>
    131e:	82 e0       	ldi	r24, 0x02	; 2
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <rack_motor_pid+0xd>
    1326:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rack_motor_pid+0xc>
    132a:	5a cf       	rjmp	.-332    	; 0x11e0 <_Z21operate_master_manualv+0x1c4>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 )
    132c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <rcvdata+0x3>
    1330:	85 31       	cpi	r24, 0x15	; 21
    1332:	08 f0       	brcs	.+2      	; 0x1336 <_Z21operate_master_manualv+0x31a>
    1334:	4a cf       	rjmp	.-364    	; 0x11ca <_Z21operate_master_manualv+0x1ae>
    1336:	50 cf       	rjmp	.-352    	; 0x11d8 <_Z21operate_master_manualv+0x1bc>
	
	operation_of_rack();	
	rack_limit_check();
	orientation_check();

}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <__vector_21>:
//Global timer interrupt

/***********************************Ramping from the joystick analog button*************************************/

ISR(TIMER0_COMPA_vect)
{
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	8f 93       	push	r24
	if (rampupflag_start)
    134e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <rampupflag_start>
    1352:	88 23       	and	r24, r24
    1354:	31 f0       	breq	.+12     	; 0x1362 <__vector_21+0x20>
	timer_count++;
    1356:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <timer_count>
    135a:	8f 5f       	subi	r24, 0xFF	; 255
    135c:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <timer_count>
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <__vector_21+0x24>
	else
	timer_count = 0;
    1362:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <timer_count>
	
	if (timer_count > 60)
    1366:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <timer_count>
    136a:	8d 33       	cpi	r24, 0x3D	; 61
    136c:	1c f0       	brlt	.+6      	; 0x1374 <__vector_21+0x32>
	timer_count = 60;
    136e:	8c e3       	ldi	r24, 0x3C	; 60
    1370:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <timer_count>
	

    1374:	8f 91       	pop	r24
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    1380:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1384:	87 e6       	ldi	r24, 0x67	; 103
    1386:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    138a:	88 e9       	ldi	r24, 0x98	; 152
    138c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1396:	08 95       	ret

00001398 <_Z9initUART2v>:
    1398:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <_ZL9datacount>
    139c:	e3 e8       	ldi	r30, 0x83	; 131
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	10 82       	st	Z, r1
    13a2:	11 82       	std	Z+1, r1	; 0x01
    13a4:	12 82       	std	Z+2, r1	; 0x02
    13a6:	13 82       	std	Z+3, r1	; 0x03
    13a8:	82 e3       	ldi	r24, 0x32	; 50
    13aa:	84 83       	std	Z+4, r24	; 0x04
    13ac:	85 83       	std	Z+5, r24	; 0x05
    13ae:	86 83       	std	Z+6, r24	; 0x06
    13b0:	87 83       	std	Z+7, r24	; 0x07
    13b2:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    13bc:	88 e9       	ldi	r24, 0x98	; 152
    13be:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    13c2:	86 e0       	ldi	r24, 0x06	; 6
    13c4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    13c8:	08 95       	ret

000013ca <_Z9initUART3v>:
    13ca:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rcv_value_slave>
    13ce:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    13d2:	89 e1       	ldi	r24, 0x19	; 25
    13d4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    13d8:	88 e9       	ldi	r24, 0x98	; 152
    13da:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    13e4:	08 95       	ret

000013e6 <_Z13UART3Transmith>:
    13e6:	e0 e3       	ldi	r30, 0x30	; 48
    13e8:	f1 e0       	ldi	r31, 0x01	; 1
    13ea:	90 81       	ld	r25, Z
    13ec:	95 ff       	sbrs	r25, 5
    13ee:	fd cf       	rjmp	.-6      	; 0x13ea <_Z13UART3Transmith+0x4>
    13f0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    13f4:	08 95       	ret

000013f6 <__vector_25>:

ISR(USART0_RX_vect)
{
    13f6:	1f 92       	push	r1
    13f8:	0f 92       	push	r0
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	0f 92       	push	r0
    13fe:	11 24       	eor	r1, r1
    1400:	8f 93       	push	r24
	buffer=UDR0;
    1402:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1406:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <buffer>
}
    140a:	8f 91       	pop	r24
    140c:	0f 90       	pop	r0
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	0f 90       	pop	r0
    1412:	1f 90       	pop	r1
    1414:	18 95       	reti

00001416 <__vector_36>:

ISR(USART1_RX_vect)
{
    1416:	1f 92       	push	r1
    1418:	0f 92       	push	r0
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	0f 92       	push	r0
    141e:	11 24       	eor	r1, r1
    1420:	8f 93       	push	r24
	buffer1=UDR1;
    1422:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1426:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <buffer1>
	
}
    142a:	8f 91       	pop	r24
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti

00001436 <__vector_51>:

ISR(USART2_RX_vect)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	0b b6       	in	r0, 0x3b	; 59
    1442:	0f 92       	push	r0
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
	buffer2=UDR2;
    144c:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    1450:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <buffer2>
		if(rcvflag)
    1454:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <rcvflag>
    1458:	99 23       	and	r25, r25
    145a:	89 f0       	breq	.+34     	; 0x147e <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    145c:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <_ZL9datacount>
    1460:	e9 2f       	mov	r30, r25
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	ed 57       	subi	r30, 0x7D	; 125
    1466:	fd 4f       	sbci	r31, 0xFD	; 253
    1468:	80 83       	st	Z, r24
			datacount++;
    146a:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>7)
    146c:	98 30       	cpi	r25, 0x08	; 8
    146e:	18 f4       	brcc	.+6      	; 0x1476 <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    1470:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <_ZL9datacount>
    1474:	04 c0       	rjmp	.+8      	; 0x147e <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    1476:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <_ZL9datacount>
				rcvflag = false; 
    147a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
    147e:	8f 37       	cpi	r24, 0x7F	; 127
    1480:	19 f4       	brne	.+6      	; 0x1488 <__vector_51+0x52>
			rcvflag=true;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <rcvflag>
		
}
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	0f 90       	pop	r0
    1492:	0b be       	out	0x3b, r0	; 59
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_54>:


ISR(USART3_RX_vect)
{
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	8f 93       	push	r24
    14aa:	9f 93       	push	r25
	buffer3=UDR3;
    14ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    14b0:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <buffer3>
	
	if(rcv_slave_flag)
    14b4:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <rcv_slave_flag>
    14b8:	99 23       	and	r25, r25
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <__vector_54+0x26>
	{
		rcv_value_slave = buffer3;
    14bc:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <rcv_value_slave>
		rcv_slave_flag = false;
    14c0:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <rcv_slave_flag>
	}
	if(buffer3 == START_BYTE_MASTER)
    14c4:	8c 3f       	cpi	r24, 0xFC	; 252
    14c6:	19 f4       	brne	.+6      	; 0x14ce <__vector_54+0x30>
		rcv_slave_flag = true;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <rcv_slave_flag>
}
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__subsf3>:
    14dc:	50 58       	subi	r21, 0x80	; 128

000014de <__addsf3>:
    14de:	bb 27       	eor	r27, r27
    14e0:	aa 27       	eor	r26, r26
    14e2:	0e d0       	rcall	.+28     	; 0x1500 <__addsf3x>
    14e4:	75 c1       	rjmp	.+746    	; 0x17d0 <__fp_round>
    14e6:	66 d1       	rcall	.+716    	; 0x17b4 <__fp_pscA>
    14e8:	30 f0       	brcs	.+12     	; 0x14f6 <__addsf3+0x18>
    14ea:	6b d1       	rcall	.+726    	; 0x17c2 <__fp_pscB>
    14ec:	20 f0       	brcs	.+8      	; 0x14f6 <__addsf3+0x18>
    14ee:	31 f4       	brne	.+12     	; 0x14fc <__addsf3+0x1e>
    14f0:	9f 3f       	cpi	r25, 0xFF	; 255
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__addsf3+0x1a>
    14f4:	1e f4       	brtc	.+6      	; 0x14fc <__addsf3+0x1e>
    14f6:	5b c1       	rjmp	.+694    	; 0x17ae <__fp_nan>
    14f8:	0e f4       	brtc	.+2      	; 0x14fc <__addsf3+0x1e>
    14fa:	e0 95       	com	r30
    14fc:	e7 fb       	bst	r30, 7
    14fe:	51 c1       	rjmp	.+674    	; 0x17a2 <__fp_inf>

00001500 <__addsf3x>:
    1500:	e9 2f       	mov	r30, r25
    1502:	77 d1       	rcall	.+750    	; 0x17f2 <__fp_split3>
    1504:	80 f3       	brcs	.-32     	; 0x14e6 <__addsf3+0x8>
    1506:	ba 17       	cp	r27, r26
    1508:	62 07       	cpc	r22, r18
    150a:	73 07       	cpc	r23, r19
    150c:	84 07       	cpc	r24, r20
    150e:	95 07       	cpc	r25, r21
    1510:	18 f0       	brcs	.+6      	; 0x1518 <__addsf3x+0x18>
    1512:	71 f4       	brne	.+28     	; 0x1530 <__addsf3x+0x30>
    1514:	9e f5       	brtc	.+102    	; 0x157c <__addsf3x+0x7c>
    1516:	8f c1       	rjmp	.+798    	; 0x1836 <__fp_zero>
    1518:	0e f4       	brtc	.+2      	; 0x151c <__addsf3x+0x1c>
    151a:	e0 95       	com	r30
    151c:	0b 2e       	mov	r0, r27
    151e:	ba 2f       	mov	r27, r26
    1520:	a0 2d       	mov	r26, r0
    1522:	0b 01       	movw	r0, r22
    1524:	b9 01       	movw	r22, r18
    1526:	90 01       	movw	r18, r0
    1528:	0c 01       	movw	r0, r24
    152a:	ca 01       	movw	r24, r20
    152c:	a0 01       	movw	r20, r0
    152e:	11 24       	eor	r1, r1
    1530:	ff 27       	eor	r31, r31
    1532:	59 1b       	sub	r21, r25
    1534:	99 f0       	breq	.+38     	; 0x155c <__addsf3x+0x5c>
    1536:	59 3f       	cpi	r21, 0xF9	; 249
    1538:	50 f4       	brcc	.+20     	; 0x154e <__addsf3x+0x4e>
    153a:	50 3e       	cpi	r21, 0xE0	; 224
    153c:	68 f1       	brcs	.+90     	; 0x1598 <__addsf3x+0x98>
    153e:	1a 16       	cp	r1, r26
    1540:	f0 40       	sbci	r31, 0x00	; 0
    1542:	a2 2f       	mov	r26, r18
    1544:	23 2f       	mov	r18, r19
    1546:	34 2f       	mov	r19, r20
    1548:	44 27       	eor	r20, r20
    154a:	58 5f       	subi	r21, 0xF8	; 248
    154c:	f3 cf       	rjmp	.-26     	; 0x1534 <__addsf3x+0x34>
    154e:	46 95       	lsr	r20
    1550:	37 95       	ror	r19
    1552:	27 95       	ror	r18
    1554:	a7 95       	ror	r26
    1556:	f0 40       	sbci	r31, 0x00	; 0
    1558:	53 95       	inc	r21
    155a:	c9 f7       	brne	.-14     	; 0x154e <__addsf3x+0x4e>
    155c:	7e f4       	brtc	.+30     	; 0x157c <__addsf3x+0x7c>
    155e:	1f 16       	cp	r1, r31
    1560:	ba 0b       	sbc	r27, r26
    1562:	62 0b       	sbc	r22, r18
    1564:	73 0b       	sbc	r23, r19
    1566:	84 0b       	sbc	r24, r20
    1568:	ba f0       	brmi	.+46     	; 0x1598 <__addsf3x+0x98>
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	a1 f0       	breq	.+40     	; 0x1596 <__addsf3x+0x96>
    156e:	ff 0f       	add	r31, r31
    1570:	bb 1f       	adc	r27, r27
    1572:	66 1f       	adc	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	88 1f       	adc	r24, r24
    1578:	c2 f7       	brpl	.-16     	; 0x156a <__addsf3x+0x6a>
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <__addsf3x+0x98>
    157c:	ba 0f       	add	r27, r26
    157e:	62 1f       	adc	r22, r18
    1580:	73 1f       	adc	r23, r19
    1582:	84 1f       	adc	r24, r20
    1584:	48 f4       	brcc	.+18     	; 0x1598 <__addsf3x+0x98>
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f7 95       	ror	r31
    1590:	9e 3f       	cpi	r25, 0xFE	; 254
    1592:	08 f0       	brcs	.+2      	; 0x1596 <__addsf3x+0x96>
    1594:	b3 cf       	rjmp	.-154    	; 0x14fc <__addsf3+0x1e>
    1596:	93 95       	inc	r25
    1598:	88 0f       	add	r24, r24
    159a:	08 f0       	brcs	.+2      	; 0x159e <__addsf3x+0x9e>
    159c:	99 27       	eor	r25, r25
    159e:	ee 0f       	add	r30, r30
    15a0:	97 95       	ror	r25
    15a2:	87 95       	ror	r24
    15a4:	08 95       	ret

000015a6 <__cmpsf2>:
    15a6:	d9 d0       	rcall	.+434    	; 0x175a <__fp_cmp>
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <__cmpsf2+0x6>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	08 95       	ret

000015ae <__divsf3>:
    15ae:	0c d0       	rcall	.+24     	; 0x15c8 <__divsf3x>
    15b0:	0f c1       	rjmp	.+542    	; 0x17d0 <__fp_round>
    15b2:	07 d1       	rcall	.+526    	; 0x17c2 <__fp_pscB>
    15b4:	40 f0       	brcs	.+16     	; 0x15c6 <__divsf3+0x18>
    15b6:	fe d0       	rcall	.+508    	; 0x17b4 <__fp_pscA>
    15b8:	30 f0       	brcs	.+12     	; 0x15c6 <__divsf3+0x18>
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <__divsf3+0x16>
    15bc:	5f 3f       	cpi	r21, 0xFF	; 255
    15be:	19 f0       	breq	.+6      	; 0x15c6 <__divsf3+0x18>
    15c0:	f0 c0       	rjmp	.+480    	; 0x17a2 <__fp_inf>
    15c2:	51 11       	cpse	r21, r1
    15c4:	39 c1       	rjmp	.+626    	; 0x1838 <__fp_szero>
    15c6:	f3 c0       	rjmp	.+486    	; 0x17ae <__fp_nan>

000015c8 <__divsf3x>:
    15c8:	14 d1       	rcall	.+552    	; 0x17f2 <__fp_split3>
    15ca:	98 f3       	brcs	.-26     	; 0x15b2 <__divsf3+0x4>

000015cc <__divsf3_pse>:
    15cc:	99 23       	and	r25, r25
    15ce:	c9 f3       	breq	.-14     	; 0x15c2 <__divsf3+0x14>
    15d0:	55 23       	and	r21, r21
    15d2:	b1 f3       	breq	.-20     	; 0x15c0 <__divsf3+0x12>
    15d4:	95 1b       	sub	r25, r21
    15d6:	55 0b       	sbc	r21, r21
    15d8:	bb 27       	eor	r27, r27
    15da:	aa 27       	eor	r26, r26
    15dc:	62 17       	cp	r22, r18
    15de:	73 07       	cpc	r23, r19
    15e0:	84 07       	cpc	r24, r20
    15e2:	38 f0       	brcs	.+14     	; 0x15f2 <__divsf3_pse+0x26>
    15e4:	9f 5f       	subi	r25, 0xFF	; 255
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	22 0f       	add	r18, r18
    15ea:	33 1f       	adc	r19, r19
    15ec:	44 1f       	adc	r20, r20
    15ee:	aa 1f       	adc	r26, r26
    15f0:	a9 f3       	breq	.-22     	; 0x15dc <__divsf3_pse+0x10>
    15f2:	33 d0       	rcall	.+102    	; 0x165a <__divsf3_pse+0x8e>
    15f4:	0e 2e       	mov	r0, r30
    15f6:	3a f0       	brmi	.+14     	; 0x1606 <__divsf3_pse+0x3a>
    15f8:	e0 e8       	ldi	r30, 0x80	; 128
    15fa:	30 d0       	rcall	.+96     	; 0x165c <__divsf3_pse+0x90>
    15fc:	91 50       	subi	r25, 0x01	; 1
    15fe:	50 40       	sbci	r21, 0x00	; 0
    1600:	e6 95       	lsr	r30
    1602:	00 1c       	adc	r0, r0
    1604:	ca f7       	brpl	.-14     	; 0x15f8 <__divsf3_pse+0x2c>
    1606:	29 d0       	rcall	.+82     	; 0x165a <__divsf3_pse+0x8e>
    1608:	fe 2f       	mov	r31, r30
    160a:	27 d0       	rcall	.+78     	; 0x165a <__divsf3_pse+0x8e>
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	bb 1f       	adc	r27, r27
    1614:	26 17       	cp	r18, r22
    1616:	37 07       	cpc	r19, r23
    1618:	48 07       	cpc	r20, r24
    161a:	ab 07       	cpc	r26, r27
    161c:	b0 e8       	ldi	r27, 0x80	; 128
    161e:	09 f0       	breq	.+2      	; 0x1622 <__divsf3_pse+0x56>
    1620:	bb 0b       	sbc	r27, r27
    1622:	80 2d       	mov	r24, r0
    1624:	bf 01       	movw	r22, r30
    1626:	ff 27       	eor	r31, r31
    1628:	93 58       	subi	r25, 0x83	; 131
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	2a f0       	brmi	.+10     	; 0x1638 <__divsf3_pse+0x6c>
    162e:	9e 3f       	cpi	r25, 0xFE	; 254
    1630:	51 05       	cpc	r21, r1
    1632:	68 f0       	brcs	.+26     	; 0x164e <__divsf3_pse+0x82>
    1634:	b6 c0       	rjmp	.+364    	; 0x17a2 <__fp_inf>
    1636:	00 c1       	rjmp	.+512    	; 0x1838 <__fp_szero>
    1638:	5f 3f       	cpi	r21, 0xFF	; 255
    163a:	ec f3       	brlt	.-6      	; 0x1636 <__divsf3_pse+0x6a>
    163c:	98 3e       	cpi	r25, 0xE8	; 232
    163e:	dc f3       	brlt	.-10     	; 0x1636 <__divsf3_pse+0x6a>
    1640:	86 95       	lsr	r24
    1642:	77 95       	ror	r23
    1644:	67 95       	ror	r22
    1646:	b7 95       	ror	r27
    1648:	f7 95       	ror	r31
    164a:	9f 5f       	subi	r25, 0xFF	; 255
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__divsf3_pse+0x74>
    164e:	88 0f       	add	r24, r24
    1650:	91 1d       	adc	r25, r1
    1652:	96 95       	lsr	r25
    1654:	87 95       	ror	r24
    1656:	97 f9       	bld	r25, 7
    1658:	08 95       	ret
    165a:	e1 e0       	ldi	r30, 0x01	; 1
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	bb 1f       	adc	r27, r27
    1664:	62 17       	cp	r22, r18
    1666:	73 07       	cpc	r23, r19
    1668:	84 07       	cpc	r24, r20
    166a:	ba 07       	cpc	r27, r26
    166c:	20 f0       	brcs	.+8      	; 0x1676 <__divsf3_pse+0xaa>
    166e:	62 1b       	sub	r22, r18
    1670:	73 0b       	sbc	r23, r19
    1672:	84 0b       	sbc	r24, r20
    1674:	ba 0b       	sbc	r27, r26
    1676:	ee 1f       	adc	r30, r30
    1678:	88 f7       	brcc	.-30     	; 0x165c <__divsf3_pse+0x90>
    167a:	e0 95       	com	r30
    167c:	08 95       	ret

0000167e <__fixsfsi>:
    167e:	04 d0       	rcall	.+8      	; 0x1688 <__fixunssfsi>
    1680:	68 94       	set
    1682:	b1 11       	cpse	r27, r1
    1684:	d9 c0       	rjmp	.+434    	; 0x1838 <__fp_szero>
    1686:	08 95       	ret

00001688 <__fixunssfsi>:
    1688:	bc d0       	rcall	.+376    	; 0x1802 <__fp_splitA>
    168a:	88 f0       	brcs	.+34     	; 0x16ae <__fixunssfsi+0x26>
    168c:	9f 57       	subi	r25, 0x7F	; 127
    168e:	90 f0       	brcs	.+36     	; 0x16b4 <__fixunssfsi+0x2c>
    1690:	b9 2f       	mov	r27, r25
    1692:	99 27       	eor	r25, r25
    1694:	b7 51       	subi	r27, 0x17	; 23
    1696:	a0 f0       	brcs	.+40     	; 0x16c0 <__fixunssfsi+0x38>
    1698:	d1 f0       	breq	.+52     	; 0x16ce <__fixunssfsi+0x46>
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	88 1f       	adc	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	1a f0       	brmi	.+6      	; 0x16aa <__fixunssfsi+0x22>
    16a4:	ba 95       	dec	r27
    16a6:	c9 f7       	brne	.-14     	; 0x169a <__fixunssfsi+0x12>
    16a8:	12 c0       	rjmp	.+36     	; 0x16ce <__fixunssfsi+0x46>
    16aa:	b1 30       	cpi	r27, 0x01	; 1
    16ac:	81 f0       	breq	.+32     	; 0x16ce <__fixunssfsi+0x46>
    16ae:	c3 d0       	rcall	.+390    	; 0x1836 <__fp_zero>
    16b0:	b1 e0       	ldi	r27, 0x01	; 1
    16b2:	08 95       	ret
    16b4:	c0 c0       	rjmp	.+384    	; 0x1836 <__fp_zero>
    16b6:	67 2f       	mov	r22, r23
    16b8:	78 2f       	mov	r23, r24
    16ba:	88 27       	eor	r24, r24
    16bc:	b8 5f       	subi	r27, 0xF8	; 248
    16be:	39 f0       	breq	.+14     	; 0x16ce <__fixunssfsi+0x46>
    16c0:	b9 3f       	cpi	r27, 0xF9	; 249
    16c2:	cc f3       	brlt	.-14     	; 0x16b6 <__fixunssfsi+0x2e>
    16c4:	86 95       	lsr	r24
    16c6:	77 95       	ror	r23
    16c8:	67 95       	ror	r22
    16ca:	b3 95       	inc	r27
    16cc:	d9 f7       	brne	.-10     	; 0x16c4 <__fixunssfsi+0x3c>
    16ce:	3e f4       	brtc	.+14     	; 0x16de <__fixunssfsi+0x56>
    16d0:	90 95       	com	r25
    16d2:	80 95       	com	r24
    16d4:	70 95       	com	r23
    16d6:	61 95       	neg	r22
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8f 4f       	sbci	r24, 0xFF	; 255
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <__floatunsisf>:
    16e0:	e8 94       	clt
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <__floatsisf+0x12>

000016e4 <__floatsisf>:
    16e4:	97 fb       	bst	r25, 7
    16e6:	3e f4       	brtc	.+14     	; 0x16f6 <__floatsisf+0x12>
    16e8:	90 95       	com	r25
    16ea:	80 95       	com	r24
    16ec:	70 95       	com	r23
    16ee:	61 95       	neg	r22
    16f0:	7f 4f       	sbci	r23, 0xFF	; 255
    16f2:	8f 4f       	sbci	r24, 0xFF	; 255
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	99 23       	and	r25, r25
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <__floatsisf+0x40>
    16fa:	f9 2f       	mov	r31, r25
    16fc:	96 e9       	ldi	r25, 0x96	; 150
    16fe:	bb 27       	eor	r27, r27
    1700:	93 95       	inc	r25
    1702:	f6 95       	lsr	r31
    1704:	87 95       	ror	r24
    1706:	77 95       	ror	r23
    1708:	67 95       	ror	r22
    170a:	b7 95       	ror	r27
    170c:	f1 11       	cpse	r31, r1
    170e:	f8 cf       	rjmp	.-16     	; 0x1700 <__floatsisf+0x1c>
    1710:	fa f4       	brpl	.+62     	; 0x1750 <__floatsisf+0x6c>
    1712:	bb 0f       	add	r27, r27
    1714:	11 f4       	brne	.+4      	; 0x171a <__floatsisf+0x36>
    1716:	60 ff       	sbrs	r22, 0
    1718:	1b c0       	rjmp	.+54     	; 0x1750 <__floatsisf+0x6c>
    171a:	6f 5f       	subi	r22, 0xFF	; 255
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8f 4f       	sbci	r24, 0xFF	; 255
    1720:	9f 4f       	sbci	r25, 0xFF	; 255
    1722:	16 c0       	rjmp	.+44     	; 0x1750 <__floatsisf+0x6c>
    1724:	88 23       	and	r24, r24
    1726:	11 f0       	breq	.+4      	; 0x172c <__floatsisf+0x48>
    1728:	96 e9       	ldi	r25, 0x96	; 150
    172a:	11 c0       	rjmp	.+34     	; 0x174e <__floatsisf+0x6a>
    172c:	77 23       	and	r23, r23
    172e:	21 f0       	breq	.+8      	; 0x1738 <__floatsisf+0x54>
    1730:	9e e8       	ldi	r25, 0x8E	; 142
    1732:	87 2f       	mov	r24, r23
    1734:	76 2f       	mov	r23, r22
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <__floatsisf+0x5e>
    1738:	66 23       	and	r22, r22
    173a:	71 f0       	breq	.+28     	; 0x1758 <__floatsisf+0x74>
    173c:	96 e8       	ldi	r25, 0x86	; 134
    173e:	86 2f       	mov	r24, r22
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	2a f0       	brmi	.+10     	; 0x1750 <__floatsisf+0x6c>
    1746:	9a 95       	dec	r25
    1748:	66 0f       	add	r22, r22
    174a:	77 1f       	adc	r23, r23
    174c:	88 1f       	adc	r24, r24
    174e:	da f7       	brpl	.-10     	; 0x1746 <__floatsisf+0x62>
    1750:	88 0f       	add	r24, r24
    1752:	96 95       	lsr	r25
    1754:	87 95       	ror	r24
    1756:	97 f9       	bld	r25, 7
    1758:	08 95       	ret

0000175a <__fp_cmp>:
    175a:	99 0f       	add	r25, r25
    175c:	00 08       	sbc	r0, r0
    175e:	55 0f       	add	r21, r21
    1760:	aa 0b       	sbc	r26, r26
    1762:	e0 e8       	ldi	r30, 0x80	; 128
    1764:	fe ef       	ldi	r31, 0xFE	; 254
    1766:	16 16       	cp	r1, r22
    1768:	17 06       	cpc	r1, r23
    176a:	e8 07       	cpc	r30, r24
    176c:	f9 07       	cpc	r31, r25
    176e:	c0 f0       	brcs	.+48     	; 0x17a0 <__fp_cmp+0x46>
    1770:	12 16       	cp	r1, r18
    1772:	13 06       	cpc	r1, r19
    1774:	e4 07       	cpc	r30, r20
    1776:	f5 07       	cpc	r31, r21
    1778:	98 f0       	brcs	.+38     	; 0x17a0 <__fp_cmp+0x46>
    177a:	62 1b       	sub	r22, r18
    177c:	73 0b       	sbc	r23, r19
    177e:	84 0b       	sbc	r24, r20
    1780:	95 0b       	sbc	r25, r21
    1782:	39 f4       	brne	.+14     	; 0x1792 <__fp_cmp+0x38>
    1784:	0a 26       	eor	r0, r26
    1786:	61 f0       	breq	.+24     	; 0x17a0 <__fp_cmp+0x46>
    1788:	23 2b       	or	r18, r19
    178a:	24 2b       	or	r18, r20
    178c:	25 2b       	or	r18, r21
    178e:	21 f4       	brne	.+8      	; 0x1798 <__fp_cmp+0x3e>
    1790:	08 95       	ret
    1792:	0a 26       	eor	r0, r26
    1794:	09 f4       	brne	.+2      	; 0x1798 <__fp_cmp+0x3e>
    1796:	a1 40       	sbci	r26, 0x01	; 1
    1798:	a6 95       	lsr	r26
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	81 1d       	adc	r24, r1
    179e:	81 1d       	adc	r24, r1
    17a0:	08 95       	ret

000017a2 <__fp_inf>:
    17a2:	97 f9       	bld	r25, 7
    17a4:	9f 67       	ori	r25, 0x7F	; 127
    17a6:	80 e8       	ldi	r24, 0x80	; 128
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	08 95       	ret

000017ae <__fp_nan>:
    17ae:	9f ef       	ldi	r25, 0xFF	; 255
    17b0:	80 ec       	ldi	r24, 0xC0	; 192
    17b2:	08 95       	ret

000017b4 <__fp_pscA>:
    17b4:	00 24       	eor	r0, r0
    17b6:	0a 94       	dec	r0
    17b8:	16 16       	cp	r1, r22
    17ba:	17 06       	cpc	r1, r23
    17bc:	18 06       	cpc	r1, r24
    17be:	09 06       	cpc	r0, r25
    17c0:	08 95       	ret

000017c2 <__fp_pscB>:
    17c2:	00 24       	eor	r0, r0
    17c4:	0a 94       	dec	r0
    17c6:	12 16       	cp	r1, r18
    17c8:	13 06       	cpc	r1, r19
    17ca:	14 06       	cpc	r1, r20
    17cc:	05 06       	cpc	r0, r21
    17ce:	08 95       	ret

000017d0 <__fp_round>:
    17d0:	09 2e       	mov	r0, r25
    17d2:	03 94       	inc	r0
    17d4:	00 0c       	add	r0, r0
    17d6:	11 f4       	brne	.+4      	; 0x17dc <__fp_round+0xc>
    17d8:	88 23       	and	r24, r24
    17da:	52 f0       	brmi	.+20     	; 0x17f0 <__fp_round+0x20>
    17dc:	bb 0f       	add	r27, r27
    17de:	40 f4       	brcc	.+16     	; 0x17f0 <__fp_round+0x20>
    17e0:	bf 2b       	or	r27, r31
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <__fp_round+0x18>
    17e4:	60 ff       	sbrs	r22, 0
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <__fp_round+0x20>
    17e8:	6f 5f       	subi	r22, 0xFF	; 255
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	8f 4f       	sbci	r24, 0xFF	; 255
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	08 95       	ret

000017f2 <__fp_split3>:
    17f2:	57 fd       	sbrc	r21, 7
    17f4:	90 58       	subi	r25, 0x80	; 128
    17f6:	44 0f       	add	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	59 f0       	breq	.+22     	; 0x1812 <__fp_splitA+0x10>
    17fc:	5f 3f       	cpi	r21, 0xFF	; 255
    17fe:	71 f0       	breq	.+28     	; 0x181c <__fp_splitA+0x1a>
    1800:	47 95       	ror	r20

00001802 <__fp_splitA>:
    1802:	88 0f       	add	r24, r24
    1804:	97 fb       	bst	r25, 7
    1806:	99 1f       	adc	r25, r25
    1808:	61 f0       	breq	.+24     	; 0x1822 <__fp_splitA+0x20>
    180a:	9f 3f       	cpi	r25, 0xFF	; 255
    180c:	79 f0       	breq	.+30     	; 0x182c <__fp_splitA+0x2a>
    180e:	87 95       	ror	r24
    1810:	08 95       	ret
    1812:	12 16       	cp	r1, r18
    1814:	13 06       	cpc	r1, r19
    1816:	14 06       	cpc	r1, r20
    1818:	55 1f       	adc	r21, r21
    181a:	f2 cf       	rjmp	.-28     	; 0x1800 <__fp_split3+0xe>
    181c:	46 95       	lsr	r20
    181e:	f1 df       	rcall	.-30     	; 0x1802 <__fp_splitA>
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <__fp_splitA+0x30>
    1822:	16 16       	cp	r1, r22
    1824:	17 06       	cpc	r1, r23
    1826:	18 06       	cpc	r1, r24
    1828:	99 1f       	adc	r25, r25
    182a:	f1 cf       	rjmp	.-30     	; 0x180e <__fp_splitA+0xc>
    182c:	86 95       	lsr	r24
    182e:	71 05       	cpc	r23, r1
    1830:	61 05       	cpc	r22, r1
    1832:	08 94       	sec
    1834:	08 95       	ret

00001836 <__fp_zero>:
    1836:	e8 94       	clt

00001838 <__fp_szero>:
    1838:	bb 27       	eor	r27, r27
    183a:	66 27       	eor	r22, r22
    183c:	77 27       	eor	r23, r23
    183e:	cb 01       	movw	r24, r22
    1840:	97 f9       	bld	r25, 7
    1842:	08 95       	ret

00001844 <__mulsf3>:
    1844:	0b d0       	rcall	.+22     	; 0x185c <__mulsf3x>
    1846:	c4 cf       	rjmp	.-120    	; 0x17d0 <__fp_round>
    1848:	b5 df       	rcall	.-150    	; 0x17b4 <__fp_pscA>
    184a:	28 f0       	brcs	.+10     	; 0x1856 <__mulsf3+0x12>
    184c:	ba df       	rcall	.-140    	; 0x17c2 <__fp_pscB>
    184e:	18 f0       	brcs	.+6      	; 0x1856 <__mulsf3+0x12>
    1850:	95 23       	and	r25, r21
    1852:	09 f0       	breq	.+2      	; 0x1856 <__mulsf3+0x12>
    1854:	a6 cf       	rjmp	.-180    	; 0x17a2 <__fp_inf>
    1856:	ab cf       	rjmp	.-170    	; 0x17ae <__fp_nan>
    1858:	11 24       	eor	r1, r1
    185a:	ee cf       	rjmp	.-36     	; 0x1838 <__fp_szero>

0000185c <__mulsf3x>:
    185c:	ca df       	rcall	.-108    	; 0x17f2 <__fp_split3>
    185e:	a0 f3       	brcs	.-24     	; 0x1848 <__mulsf3+0x4>

00001860 <__mulsf3_pse>:
    1860:	95 9f       	mul	r25, r21
    1862:	d1 f3       	breq	.-12     	; 0x1858 <__mulsf3+0x14>
    1864:	95 0f       	add	r25, r21
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	55 1f       	adc	r21, r21
    186a:	62 9f       	mul	r22, r18
    186c:	f0 01       	movw	r30, r0
    186e:	72 9f       	mul	r23, r18
    1870:	bb 27       	eor	r27, r27
    1872:	f0 0d       	add	r31, r0
    1874:	b1 1d       	adc	r27, r1
    1876:	63 9f       	mul	r22, r19
    1878:	aa 27       	eor	r26, r26
    187a:	f0 0d       	add	r31, r0
    187c:	b1 1d       	adc	r27, r1
    187e:	aa 1f       	adc	r26, r26
    1880:	64 9f       	mul	r22, r20
    1882:	66 27       	eor	r22, r22
    1884:	b0 0d       	add	r27, r0
    1886:	a1 1d       	adc	r26, r1
    1888:	66 1f       	adc	r22, r22
    188a:	82 9f       	mul	r24, r18
    188c:	22 27       	eor	r18, r18
    188e:	b0 0d       	add	r27, r0
    1890:	a1 1d       	adc	r26, r1
    1892:	62 1f       	adc	r22, r18
    1894:	73 9f       	mul	r23, r19
    1896:	b0 0d       	add	r27, r0
    1898:	a1 1d       	adc	r26, r1
    189a:	62 1f       	adc	r22, r18
    189c:	83 9f       	mul	r24, r19
    189e:	a0 0d       	add	r26, r0
    18a0:	61 1d       	adc	r22, r1
    18a2:	22 1f       	adc	r18, r18
    18a4:	74 9f       	mul	r23, r20
    18a6:	33 27       	eor	r19, r19
    18a8:	a0 0d       	add	r26, r0
    18aa:	61 1d       	adc	r22, r1
    18ac:	23 1f       	adc	r18, r19
    18ae:	84 9f       	mul	r24, r20
    18b0:	60 0d       	add	r22, r0
    18b2:	21 1d       	adc	r18, r1
    18b4:	82 2f       	mov	r24, r18
    18b6:	76 2f       	mov	r23, r22
    18b8:	6a 2f       	mov	r22, r26
    18ba:	11 24       	eor	r1, r1
    18bc:	9f 57       	subi	r25, 0x7F	; 127
    18be:	50 40       	sbci	r21, 0x00	; 0
    18c0:	8a f0       	brmi	.+34     	; 0x18e4 <__mulsf3_pse+0x84>
    18c2:	e1 f0       	breq	.+56     	; 0x18fc <__mulsf3_pse+0x9c>
    18c4:	88 23       	and	r24, r24
    18c6:	4a f0       	brmi	.+18     	; 0x18da <__mulsf3_pse+0x7a>
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	bb 1f       	adc	r27, r27
    18ce:	66 1f       	adc	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	88 1f       	adc	r24, r24
    18d4:	91 50       	subi	r25, 0x01	; 1
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	a9 f7       	brne	.-22     	; 0x18c4 <__mulsf3_pse+0x64>
    18da:	9e 3f       	cpi	r25, 0xFE	; 254
    18dc:	51 05       	cpc	r21, r1
    18de:	70 f0       	brcs	.+28     	; 0x18fc <__mulsf3_pse+0x9c>
    18e0:	60 cf       	rjmp	.-320    	; 0x17a2 <__fp_inf>
    18e2:	aa cf       	rjmp	.-172    	; 0x1838 <__fp_szero>
    18e4:	5f 3f       	cpi	r21, 0xFF	; 255
    18e6:	ec f3       	brlt	.-6      	; 0x18e2 <__mulsf3_pse+0x82>
    18e8:	98 3e       	cpi	r25, 0xE8	; 232
    18ea:	dc f3       	brlt	.-10     	; 0x18e2 <__mulsf3_pse+0x82>
    18ec:	86 95       	lsr	r24
    18ee:	77 95       	ror	r23
    18f0:	67 95       	ror	r22
    18f2:	b7 95       	ror	r27
    18f4:	f7 95       	ror	r31
    18f6:	e7 95       	ror	r30
    18f8:	9f 5f       	subi	r25, 0xFF	; 255
    18fa:	c1 f7       	brne	.-16     	; 0x18ec <__mulsf3_pse+0x8c>
    18fc:	fe 2b       	or	r31, r30
    18fe:	88 0f       	add	r24, r24
    1900:	91 1d       	adc	r25, r1
    1902:	96 95       	lsr	r25
    1904:	87 95       	ror	r24
    1906:	97 f9       	bld	r25, 7
    1908:	08 95       	ret

0000190a <__divmodhi4>:
    190a:	97 fb       	bst	r25, 7
    190c:	07 2e       	mov	r0, r23
    190e:	16 f4       	brtc	.+4      	; 0x1914 <__divmodhi4+0xa>
    1910:	00 94       	com	r0
    1912:	06 d0       	rcall	.+12     	; 0x1920 <__divmodhi4_neg1>
    1914:	77 fd       	sbrc	r23, 7
    1916:	08 d0       	rcall	.+16     	; 0x1928 <__divmodhi4_neg2>
    1918:	0b d0       	rcall	.+22     	; 0x1930 <__udivmodhi4>
    191a:	07 fc       	sbrc	r0, 7
    191c:	05 d0       	rcall	.+10     	; 0x1928 <__divmodhi4_neg2>
    191e:	3e f4       	brtc	.+14     	; 0x192e <__divmodhi4_exit>

00001920 <__divmodhi4_neg1>:
    1920:	90 95       	com	r25
    1922:	81 95       	neg	r24
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	08 95       	ret

00001928 <__divmodhi4_neg2>:
    1928:	70 95       	com	r23
    192a:	61 95       	neg	r22
    192c:	7f 4f       	sbci	r23, 0xFF	; 255

0000192e <__divmodhi4_exit>:
    192e:	08 95       	ret

00001930 <__udivmodhi4>:
    1930:	aa 1b       	sub	r26, r26
    1932:	bb 1b       	sub	r27, r27
    1934:	51 e1       	ldi	r21, 0x11	; 17
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <__udivmodhi4_ep>

00001938 <__udivmodhi4_loop>:
    1938:	aa 1f       	adc	r26, r26
    193a:	bb 1f       	adc	r27, r27
    193c:	a6 17       	cp	r26, r22
    193e:	b7 07       	cpc	r27, r23
    1940:	10 f0       	brcs	.+4      	; 0x1946 <__udivmodhi4_ep>
    1942:	a6 1b       	sub	r26, r22
    1944:	b7 0b       	sbc	r27, r23

00001946 <__udivmodhi4_ep>:
    1946:	88 1f       	adc	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	5a 95       	dec	r21
    194c:	a9 f7       	brne	.-22     	; 0x1938 <__udivmodhi4_loop>
    194e:	80 95       	com	r24
    1950:	90 95       	com	r25
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	08 95       	ret

00001958 <__tablejump2__>:
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	88 1f       	adc	r24, r24
    195e:	8b bf       	out	0x3b, r24	; 59
    1960:	07 90       	elpm	r0, Z+
    1962:	f6 91       	elpm	r31, Z
    1964:	e0 2d       	mov	r30, r0
    1966:	19 94       	eijmp

00001968 <_exit>:
    1968:	f8 94       	cli

0000196a <__stop_program>:
    196a:	ff cf       	rjmp	.-2      	; 0x196a <__stop_program>

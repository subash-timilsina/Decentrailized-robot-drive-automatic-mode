
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  00800200  00800200  00001abe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001abe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a0  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a67  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016d6  00000000  00000000  00005837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019dc  00000000  00000000  00006f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000740  00000000  00000000  000088ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000155d  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001167  00000000  00000000  0000a589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	76 c3       	rjmp	.+1772   	; 0x6f2 <__vector_1>
       6:	00 00       	nop
       8:	27 c3       	rjmp	.+1614   	; 0x658 <__vector_2>
       a:	00 00       	nop
       c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
       e:	00 00       	nop
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_6>
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a1 c2       	rjmp	.+1346   	; 0x580 <__vector_15>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_21>
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6a 0a 	jmp	0x14d4	; 0x14d4 <__vector_25>
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c0       	rjmp	.+158    	; 0x12c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_36>
      94:	4b c0       	rjmp	.+150    	; 0x12c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c0       	rjmp	.+146    	; 0x12c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c0       	rjmp	.+142    	; 0x12c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c0       	rjmp	.+138    	; 0x12c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c0       	rjmp	.+134    	; 0x12c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5b c3       	rjmp	.+1718   	; 0x760 <__vector_42>
      aa:	00 00       	nop
      ac:	3f c0       	rjmp	.+126    	; 0x12c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c0       	rjmp	.+122    	; 0x12c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c0       	rjmp	.+118    	; 0x12c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c0       	rjmp	.+114    	; 0x12c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c0       	rjmp	.+110    	; 0x12c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c0       	rjmp	.+106    	; 0x12c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c0       	rjmp	.+102    	; 0x12c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c0       	rjmp	.+98     	; 0x12c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__vector_51>
      d0:	2d c0       	rjmp	.+90     	; 0x12c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c0       	rjmp	.+86     	; 0x12c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__vector_54>
      dc:	27 c0       	rjmp	.+78     	; 0x12c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c0       	rjmp	.+74     	; 0x12c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	df 03       	fmulsu	r21, r23

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a5 39       	cpi	r26, 0x95	; 149
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c3 e7       	ldi	r28, 0x73	; 115
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__do_global_ctors+0x16>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	01 09       	sbc	r16, r1
     114:	80 2f       	mov	r24, r16
     116:	fe 01       	movw	r30, r28
     118:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <__tablejump2__>
     11c:	c2 37       	cpi	r28, 0x72	; 114
     11e:	d1 07       	cpc	r29, r17
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	08 07       	cpc	r16, r24
     124:	a9 f7       	brne	.-22     	; 0x110 <__do_global_ctors+0xa>
     126:	03 d0       	rcall	.+6      	; 0x12e <main>
     128:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <main>:

#include "RobotDriver.h"

int main(void)
{
	initUART0();
     12e:	0e 94 2f 0a 	call	0x145e	; 0x145e <_Z9initUART0v>
	initUART3();
     132:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_Z9initUART3v>
	JOYSTICK_INITIALIZE();
     136:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_Z9initUART2v>
	init_master();
     13a:	b7 d5       	rcall	.+2926   	; 0xcaa <_Z11init_masterv>
	rack_init();
     13c:	50 d1       	rcall	.+672    	; 0x3de <_Z9rack_initv>
     13e:	78 94       	sei
	sei();
     140:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <auto_mode>
    while (1) 
    {
		if(auto_mode)
     144:	88 23       	and	r24, r24
     146:	11 f0       	breq	.+4      	; 0x14c <main+0x1e>
			operate_master_auto();
     148:	82 d6       	rcall	.+3332   	; 0xe4e <_Z19operate_master_autov>
     14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0x20>
		else
			operate_master_manual();
     14c:	b0 d7       	rcall	.+3936   	; 0x10ae <_Z21operate_master_manualv>
     14e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <send_time>
			
		if (send_time)
     152:	88 23       	and	r24, r24
     154:	a9 f3       	breq	.-22     	; 0x140 <main+0x12>
		{
			Send_data_to_Slave();
     156:	29 d6       	rcall	.+3154   	; 0xdaa <_Z18Send_data_to_Slavev>
     158:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <send_time>
			send_time = false;
     15c:	f1 cf       	rjmp	.-30     	; 0x140 <main+0x12>

0000015e <_ZN3PID7Set_PidEfff>:
     15e:	cf 92       	push	r12


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	fc 01       	movw	r30, r24
	kp = kP;
     16c:	40 83       	st	Z, r20
     16e:	51 83       	std	Z+1, r21	; 0x01
     170:	62 83       	std	Z+2, r22	; 0x02
     172:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     174:	04 83       	std	Z+4, r16	; 0x04
     176:	15 83       	std	Z+5, r17	; 0x05
     178:	26 83       	std	Z+6, r18	; 0x06
     17a:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     17c:	c0 86       	std	Z+8, r12	; 0x08
     17e:	d1 86       	std	Z+9, r13	; 0x09
     180:	e2 86       	std	Z+10, r14	; 0x0a
     182:	f3 86       	std	Z+11, r15	; 0x0b
}
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	cf 90       	pop	r12
     190:	08 95       	ret

00000192 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     192:	8f 92       	push	r8
     194:	9f 92       	push	r9
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	ec 01       	movw	r28, r24
     1a8:	7b 01       	movw	r14, r22
	error = sp - input;
     1aa:	6c 85       	ldd	r22, Y+12	; 0x0c
     1ac:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ae:	8b 01       	movw	r16, r22
     1b0:	0e 19       	sub	r16, r14
     1b2:	1f 09       	sbc	r17, r15
     1b4:	1f 87       	std	Y+15, r17	; 0x0f
     1b6:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     1b8:	8a 89       	ldd	r24, Y+18	; 0x12
     1ba:	9b 89       	ldd	r25, Y+19	; 0x13
     1bc:	80 0f       	add	r24, r16
     1be:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     1c0:	8e 37       	cpi	r24, 0x7E	; 126
     1c2:	91 05       	cpc	r25, r1
     1c4:	2c f0       	brlt	.+10     	; 0x1d0 <_ZN3PID7ComputeEi+0x3e>
		errorsum = 125;
     1c6:	8d e7       	ldi	r24, 0x7D	; 125
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	9b 8b       	std	Y+19, r25	; 0x13
     1cc:	8a 8b       	std	Y+18, r24	; 0x12
     1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <_ZN3PID7ComputeEi+0x54>
	else if (errorsum < -125)
     1d0:	83 38       	cpi	r24, 0x83	; 131
     1d2:	2f ef       	ldi	r18, 0xFF	; 255
     1d4:	92 07       	cpc	r25, r18
     1d6:	1c f0       	brlt	.+6      	; 0x1de <_ZN3PID7ComputeEi+0x4c>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     1d8:	9b 8b       	std	Y+19, r25	; 0x13
     1da:	8a 8b       	std	Y+18, r24	; 0x12
     1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <_ZN3PID7ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     1de:	83 e8       	ldi	r24, 0x83	; 131
     1e0:	9f ef       	ldi	r25, 0xFF	; 255
     1e2:	9b 8b       	std	Y+19, r25	; 0x13
     1e4:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     1e6:	6a 89       	ldd	r22, Y+18	; 0x12
     1e8:	7b 89       	ldd	r23, Y+19	; 0x13
     1ea:	07 2e       	mov	r0, r23
     1ec:	00 0c       	add	r0, r0
     1ee:	88 0b       	sbc	r24, r24
     1f0:	99 0b       	sbc	r25, r25
     1f2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__floatsisf>
     1f6:	2c 81       	ldd	r18, Y+4	; 0x04
     1f8:	3d 81       	ldd	r19, Y+5	; 0x05
     1fa:	4e 81       	ldd	r20, Y+6	; 0x06
     1fc:	5f 81       	ldd	r21, Y+7	; 0x07
     1fe:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     202:	4b 01       	movw	r8, r22
     204:	5c 01       	movw	r10, r24
     206:	b8 01       	movw	r22, r16
     208:	11 0f       	add	r17, r17
     20a:	88 0b       	sbc	r24, r24
     20c:	99 0b       	sbc	r25, r25
     20e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__floatsisf>
     212:	28 81       	ld	r18, Y
     214:	39 81       	ldd	r19, Y+1	; 0x01
     216:	4a 81       	ldd	r20, Y+2	; 0x02
     218:	5b 81       	ldd	r21, Y+3	; 0x03
     21a:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     21e:	9b 01       	movw	r18, r22
     220:	ac 01       	movw	r20, r24
     222:	c5 01       	movw	r24, r10
     224:	b4 01       	movw	r22, r8
     226:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__addsf3>
     22a:	4b 01       	movw	r8, r22
     22c:	5c 01       	movw	r10, r24
     22e:	88 89       	ldd	r24, Y+16	; 0x10
     230:	99 89       	ldd	r25, Y+17	; 0x11
     232:	b7 01       	movw	r22, r14
     234:	68 1b       	sub	r22, r24
     236:	79 0b       	sbc	r23, r25
     238:	07 2e       	mov	r0, r23
     23a:	00 0c       	add	r0, r0
     23c:	88 0b       	sbc	r24, r24
     23e:	99 0b       	sbc	r25, r25
     240:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__floatsisf>
     244:	28 85       	ldd	r18, Y+8	; 0x08
     246:	39 85       	ldd	r19, Y+9	; 0x09
     248:	4a 85       	ldd	r20, Y+10	; 0x0a
     24a:	5b 85       	ldd	r21, Y+11	; 0x0b
     24c:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     250:	9b 01       	movw	r18, r22
     252:	ac 01       	movw	r20, r24
     254:	c5 01       	movw	r24, r10
     256:	b4 01       	movw	r22, r8
     258:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__subsf3>
     25c:	2c 89       	ldd	r18, Y+20	; 0x14
     25e:	3d 89       	ldd	r19, Y+21	; 0x15
     260:	4e 89       	ldd	r20, Y+22	; 0x16
     262:	5f 89       	ldd	r21, Y+23	; 0x17
     264:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__addsf3>
     268:	6c 8b       	std	Y+20, r22	; 0x14
     26a:	7d 8b       	std	Y+21, r23	; 0x15
     26c:	8e 8b       	std	Y+22, r24	; 0x16
     26e:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     270:	f9 8a       	std	Y+17, r15	; 0x11
     272:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	9f 90       	pop	r9
     286:	8f 90       	pop	r8
     288:	08 95       	ret

0000028a <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	af 92       	push	r10
     290:	bf 92       	push	r11
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
     2a0:	7b 01       	movw	r14, r22
	error = sp - input;
     2a2:	6c 85       	ldd	r22, Y+12	; 0x0c
     2a4:	7d 85       	ldd	r23, Y+13	; 0x0d
     2a6:	8b 01       	movw	r16, r22
     2a8:	0e 19       	sub	r16, r14
     2aa:	1f 09       	sbc	r17, r15
     2ac:	1f 87       	std	Y+15, r17	; 0x0f
     2ae:	0e 87       	std	Y+14, r16	; 0x0e
	
	errorsum += error;
     2b0:	8a 89       	ldd	r24, Y+18	; 0x12
     2b2:	9b 89       	ldd	r25, Y+19	; 0x13
     2b4:	80 0f       	add	r24, r16
     2b6:	91 1f       	adc	r25, r17
	
	//Limiting I-term
	if (errorsum > 125)
     2b8:	8e 37       	cpi	r24, 0x7E	; 126
     2ba:	91 05       	cpc	r25, r1
     2bc:	2c f0       	brlt	.+10     	; 0x2c8 <_ZN3PID13angle_ComputeEi+0x3e>
	errorsum = 125;
     2be:	8d e7       	ldi	r24, 0x7D	; 125
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	9b 8b       	std	Y+19, r25	; 0x13
     2c4:	8a 8b       	std	Y+18, r24	; 0x12
     2c6:	0b c0       	rjmp	.+22     	; 0x2de <_ZN3PID13angle_ComputeEi+0x54>
	else if (errorsum < -125)
     2c8:	83 38       	cpi	r24, 0x83	; 131
     2ca:	2f ef       	ldi	r18, 0xFF	; 255
     2cc:	92 07       	cpc	r25, r18
     2ce:	1c f0       	brlt	.+6      	; 0x2d6 <_ZN3PID13angle_ComputeEi+0x4c>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     2d0:	9b 8b       	std	Y+19, r25	; 0x13
     2d2:	8a 8b       	std	Y+18, r24	; 0x12
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <_ZN3PID13angle_ComputeEi+0x54>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
     2d6:	83 e8       	ldi	r24, 0x83	; 131
     2d8:	9f ef       	ldi	r25, 0xFF	; 255
     2da:	9b 8b       	std	Y+19, r25	; 0x13
     2dc:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
     2de:	6a 89       	ldd	r22, Y+18	; 0x12
     2e0:	7b 89       	ldd	r23, Y+19	; 0x13
     2e2:	07 2e       	mov	r0, r23
     2e4:	00 0c       	add	r0, r0
     2e6:	88 0b       	sbc	r24, r24
     2e8:	99 0b       	sbc	r25, r25
     2ea:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__floatsisf>
     2ee:	2c 81       	ldd	r18, Y+4	; 0x04
     2f0:	3d 81       	ldd	r19, Y+5	; 0x05
     2f2:	4e 81       	ldd	r20, Y+6	; 0x06
     2f4:	5f 81       	ldd	r21, Y+7	; 0x07
     2f6:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     2fa:	4b 01       	movw	r8, r22
     2fc:	5c 01       	movw	r10, r24
     2fe:	b8 01       	movw	r22, r16
     300:	11 0f       	add	r17, r17
     302:	88 0b       	sbc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__floatsisf>
     30a:	28 81       	ld	r18, Y
     30c:	39 81       	ldd	r19, Y+1	; 0x01
     30e:	4a 81       	ldd	r20, Y+2	; 0x02
     310:	5b 81       	ldd	r21, Y+3	; 0x03
     312:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     316:	9b 01       	movw	r18, r22
     318:	ac 01       	movw	r20, r24
     31a:	c5 01       	movw	r24, r10
     31c:	b4 01       	movw	r22, r8
     31e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__addsf3>
     322:	4b 01       	movw	r8, r22
     324:	5c 01       	movw	r10, r24
     326:	88 89       	ldd	r24, Y+16	; 0x10
     328:	99 89       	ldd	r25, Y+17	; 0x11
     32a:	b7 01       	movw	r22, r14
     32c:	68 1b       	sub	r22, r24
     32e:	79 0b       	sbc	r23, r25
     330:	07 2e       	mov	r0, r23
     332:	00 0c       	add	r0, r0
     334:	88 0b       	sbc	r24, r24
     336:	99 0b       	sbc	r25, r25
     338:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__floatsisf>
     33c:	28 85       	ldd	r18, Y+8	; 0x08
     33e:	39 85       	ldd	r19, Y+9	; 0x09
     340:	4a 85       	ldd	r20, Y+10	; 0x0a
     342:	5b 85       	ldd	r21, Y+11	; 0x0b
     344:	0e 94 91 0c 	call	0x1922	; 0x1922 <__mulsf3>
     348:	9b 01       	movw	r18, r22
     34a:	ac 01       	movw	r20, r24
     34c:	c5 01       	movw	r24, r10
     34e:	b4 01       	movw	r22, r8
     350:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__subsf3>
     354:	6c 8b       	std	Y+20, r22	; 0x14
     356:	7d 8b       	std	Y+21, r23	; 0x15
     358:	8e 8b       	std	Y+22, r24	; 0x16
     35a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     35c:	f9 8a       	std	Y+17, r15	; 0x11
     35e:	e8 8a       	std	Y+16, r14	; 0x10
	return cv;
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	bf 90       	pop	r11
     36e:	af 90       	pop	r10
     370:	9f 90       	pop	r9
     372:	8f 90       	pop	r8
     374:	08 95       	ret

00000376 <_Z21initialise_timeperiodv>:

//initialize global timer

void initialise_timeperiod()
{
	TCCR2B |= (1<<CS22);
     376:	e1 eb       	ldi	r30, 0xB1	; 177
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	80 81       	ld	r24, Z
     37c:	84 60       	ori	r24, 0x04	; 4
     37e:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
     380:	e0 e7       	ldi	r30, 0x70	; 112
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	81 60       	ori	r24, 0x01	; 1
     388:	80 83       	st	Z, r24
	TCNT2 = 0;
     38a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
     38e:	08 95       	ret

00000390 <_Z20close_all_pneumaticsv>:
	
}

void close_all_pneumatics()
{
	RACK_GRIP_OPEN();
     390:	10 98       	cbi	0x02, 0	; 2
	RACK_LIFT_CLOSE();
     392:	14 98       	cbi	0x02, 4	; 2
	SHUTTCOCK_GRIP_CLOSE();
     394:	47 98       	cbi	0x08, 7	; 8
	SHUTTCOCK_PASS_CLOSE();
     396:	16 98       	cbi	0x02, 6	; 2
     398:	08 95       	ret

0000039a <_Z21initialize_pneumaticsv>:
}

void initialize_pneumatics()
{
	OUTPUT(RACK_GRAB);
     39a:	08 9a       	sbi	0x01, 0	; 1
	OUTPUT(LIFT_RACK);
     39c:	0c 9a       	sbi	0x01, 4	; 1
	OUTPUT(SC_PASS);
     39e:	0e 9a       	sbi	0x01, 6	; 1
	OUTPUT(SC_GRIPPER);
     3a0:	3f 9a       	sbi	0x07, 7	; 7
	close_all_pneumatics();
     3a2:	f6 cf       	rjmp	.-20     	; 0x390 <_Z20close_all_pneumaticsv>
     3a4:	08 95       	ret

000003a6 <_Z16enable_proximityv>:
}

void enable_proximity()
{
	EIMSK |= (1<<PROXIMITY_INT);		//setting INT pin
     3a6:	ed 9a       	sbi	0x1d, 5	; 29
	EICRB |= (1<<PROXIMITY_ISC1);	//falling edge
     3a8:	ea e6       	ldi	r30, 0x6A	; 106
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	88 60       	ori	r24, 0x08	; 8
     3b0:	80 83       	st	Z, r24
	EIFR |= (1<<PROXIMITY_INTF);	    //clear int flag
     3b2:	e5 9a       	sbi	0x1c, 5	; 28
     3b4:	08 95       	ret

000003b6 <_Z17disable_proximityv>:
}

void disable_proximity()
{
	EIFR |= (1<<PROXIMITY_INTF);
     3b6:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK &= ~(1<<PROXIMITY_INT);	
     3b8:	ed 98       	cbi	0x1d, 5	; 29
	EICRB &= ~(1<<PROXIMITY_ISC1);	
     3ba:	ea e6       	ldi	r30, 0x6A	; 106
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	87 7f       	andi	r24, 0xF7	; 247
     3c2:	80 83       	st	Z, r24
     3c4:	08 95       	ret

000003c6 <_Z6millisv>:
//calculate the time from begining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     3c6:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
     3c8:	f8 94       	cli
	m = timer2_millis;
     3ca:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <timer2_millis>
     3ce:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <timer2_millis+0x1>
     3d2:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timer2_millis+0x2>
     3d6:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <timer2_millis+0x3>
	SREG = oldSREG;
     3da:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
     3dc:	08 95       	ret

000003de <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
	
	Geneva_Start = false;
     3ea:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Geneva_Start>
	auto_move_rack = false;
     3ee:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <auto_move_rack>
	stop_rack_initial = false;
     3f2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <stop_rack_initial>
	stop_rack_final = false;
     3f6:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <stop_rack_final>
	throw_rack = false;
     3fa:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <throw_rack>
	rack_throw_auto = false;
     3fe:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rack_throw_auto>
	pneumatic_geneva_start = false;
     402:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
	inside_robot = true;
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
    pass_the_shuttcock = false;
     40c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
	pid_compute_flag = false;
     410:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	
	pneumatic_geneva_time = 0;
     414:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <pneumatic_geneva_time>
     418:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <pneumatic_geneva_time+0x1>
     41c:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <pneumatic_geneva_time+0x2>
     420:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <pneumatic_geneva_time+0x3>
	send_time = false;
     424:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <send_time>
	
	
	
	RackMotor.Initialise(1);
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8c e6       	ldi	r24, 0x6C	; 108
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	e7 d2       	rcall	.+1486   	; 0x9fe <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	8b e6       	ldi	r24, 0x6B	; 107
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	e3 d2       	rcall	.+1478   	; 0x9fe <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	8e e5       	ldi	r24, 0x5E	; 94
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	3e d2       	rcall	.+1148   	; 0x8bc <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
     440:	62 e0       	ldi	r22, 0x02	; 2
     442:	81 e5       	ldi	r24, 0x51	; 81
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	3a d2       	rcall	.+1140   	; 0x8bc <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LTSWITCH_RACK_HOME);
     448:	24 98       	cbi	0x04, 4	; 4
	INPUT(LTSWITCH_RACK_FINAL);
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	80 81       	ld	r24, Z
     450:	8f 7b       	andi	r24, 0xBF	; 191
     452:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_FINAL);
     454:	e2 e0       	ldi	r30, 0x02	; 2
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	80 81       	ld	r24, Z
     45a:	80 64       	ori	r24, 0x40	; 64
	SET(LTSWITCH_RACK_HOME);
     45c:	80 83       	st	Z, r24
	
	initialize_pneumatics();
     45e:	2c 9a       	sbi	0x05, 4	; 5
     460:	9c df       	rcall	.-200    	; 0x39a <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     462:	1c 9b       	sbis	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     464:	07 c0       	rjmp	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     466:	62 e3       	ldi	r22, 0x32	; 50
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	8c e6       	ldi	r24, 0x6C	; 108
     46c:	92 e0       	ldi	r25, 0x02	; 2
	SET(LTSWITCH_RACK_HOME);
	
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_HOME))
     46e:	9c d2       	rcall	.+1336   	; 0x9a8 <_ZN10Rack_Motor11SetOcrValueEi>
     470:	1c 99       	sbic	0x03, 4	; 3
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	previous_time = millis();
     472:	f9 cf       	rjmp	.-14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     474:	a8 df       	rcall	.-176    	; 0x3c6 <_Z6millisv>
     476:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <previous_time>
     47a:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <previous_time+0x1>
     47e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <previous_time+0x2>
     482:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <previous_time+0x3>
	
	RackMotor.StopMotor();
     486:	8c e6       	ldi	r24, 0x6C	; 108
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	79 d2       	rcall	.+1266   	; 0x97e <_ZN10Rack_Motor9StopMotorEv>
	
	RackEncoder.angle =0;
     48c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <RackEncoder+0x9>
     490:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <RackEncoder+0xa>
     494:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0xb>
     498:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <RackEncoder+0xc>
	
	Rack_home_position = true;		// true rack home-position -- initial position and false rack position -- final position
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Rack_home_position>
	angle_pid.Set_Pid(47.29,0.139,40.30);	//47.29 0.139  29.30
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f3 e3       	ldi	r31, 0x33	; 51
     4a6:	cf 2e       	mov	r12, r31
     4a8:	dc 2c       	mov	r13, r12
     4aa:	f1 e2       	ldi	r31, 0x21	; 33
     4ac:	ef 2e       	mov	r14, r31
     4ae:	f2 e4       	ldi	r31, 0x42	; 66
     4b0:	ff 2e       	mov	r15, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	04 e0       	ldi	r16, 0x04	; 4
     4b6:	16 e5       	ldi	r17, 0x56	; 86
     4b8:	2e e0       	ldi	r18, 0x0E	; 14
     4ba:	3e e3       	ldi	r19, 0x3E	; 62
     4bc:	46 ef       	ldi	r20, 0xF6	; 246
     4be:	58 e2       	ldi	r21, 0x28	; 40
     4c0:	6d e3       	ldi	r22, 0x3D	; 61
     4c2:	72 e4       	ldi	r23, 0x42	; 66
     4c4:	8c e2       	ldi	r24, 0x2C	; 44
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	4a de       	rcall	.-876    	; 0x15e <_ZN3PID7Set_PidEfff>
	rack_motor_pid.Set_Pid(3.08,0,9.89);	//3.08 0 9.89
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f1 e7       	ldi	r31, 0x71	; 113
     4ce:	cf 2e       	mov	r12, r31
     4d0:	fd e3       	ldi	r31, 0x3D	; 61
     4d2:	df 2e       	mov	r13, r31
     4d4:	fe e1       	ldi	r31, 0x1E	; 30
     4d6:	ef 2e       	mov	r14, r31
     4d8:	f1 e4       	ldi	r31, 0x41	; 65
     4da:	ff 2e       	mov	r15, r31
     4dc:	f0 2d       	mov	r31, r0
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	10 e0       	ldi	r17, 0x00	; 0
     4e2:	98 01       	movw	r18, r16
     4e4:	48 eb       	ldi	r20, 0xB8	; 184
     4e6:	5e e1       	ldi	r21, 0x1E	; 30
     4e8:	65 e4       	ldi	r22, 0x45	; 69
     4ea:	70 e4       	ldi	r23, 0x40	; 64
     4ec:	84 e1       	ldi	r24, 0x14	; 20
     4ee:	92 e0       	ldi	r25, 0x02	; 2
	
	//Setting the proximity pins
	INPUT(PROXIMITY_PIN);
     4f0:	36 de       	rcall	.-916    	; 0x15e <_ZN3PID7Set_PidEfff>
	SET(PROXIMITY_PIN);
     4f2:	6d 98       	cbi	0x0d, 5	; 13
	
	initialise_timeperiod();
     4f4:	75 9a       	sbi	0x0e, 5	; 14
     4f6:	3f df       	rcall	.-386    	; 0x376 <_Z21initialise_timeperiodv>
}
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	08 95       	ret

00000506 <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && stop_rack_initial)	//if reached home position
     506:	1c 99       	sbic	0x03, 4	; 3
     508:	04 c0       	rjmp	.+8      	; 0x512 <_Z16rack_limit_checkv+0xc>
     50a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <stop_rack_initial>
     50e:	81 11       	cpse	r24, r1
     510:	0d c0       	rjmp	.+26     	; 0x52c <_Z16rack_limit_checkv+0x26>
		//open rack gripper when reached to home position
		throw_rack = true;
		previous_time = millis();
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && stop_rack_final)		//if reached final position
     512:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
     516:	86 fd       	sbrc	r24, 6
     518:	32 c0       	rjmp	.+100    	; 0x57e <_Z16rack_limit_checkv+0x78>
     51a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <stop_rack_final>
     51e:	81 11       	cpse	r24, r1
     520:	22 c0       	rjmp	.+68     	; 0x566 <_Z16rack_limit_checkv+0x60>
     522:	08 95       	ret
		auto_move_rack = false;
		stop_rack_final = false;
		
		if (rack_throw_auto)
		{
			RACK_LIFT_CLOSE();
     524:	14 98       	cbi	0x02, 4	; 2
			rack_throw_auto = false;
     526:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <rack_throw_auto>
		}
	}
	
}
     52a:	08 95       	ret
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     52c:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <rack_motor_pid+0xd>
     530:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xc>
{
	
	if(!READ(LTSWITCH_RACK_HOME) && stop_rack_initial)	//if reached home position
	{
		rack_motor_pid.Set_SP(0);
		RackEncoder.angle = 0;
     534:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <RackEncoder+0x9>
     538:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <RackEncoder+0xa>
     53c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <RackEncoder+0xb>
     540:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <RackEncoder+0xc>
		auto_move_rack = false;
     544:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <auto_move_rack>
		stop_rack_initial = false;
     548:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <stop_rack_initial>
		
		//open rack gripper when reached to home position
		throw_rack = true;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <throw_rack>
		previous_time = millis();
     552:	39 df       	rcall	.-398    	; 0x3c6 <_Z6millisv>
     554:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <previous_time>
     558:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <previous_time+0x1>
     55c:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <previous_time+0x2>
     560:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <previous_time+0x3>
     564:	d6 cf       	rjmp	.-84     	; 0x512 <_Z16rack_limit_checkv+0xc>
     566:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <rack_motor_pid+0xd>
     56a:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xc>
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && stop_rack_final)		//if reached final position
	{
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     56e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <auto_move_rack>
		stop_rack_final = false;
     572:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <stop_rack_final>
		
		if (rack_throw_auto)
     576:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     57a:	81 11       	cpse	r24, r1
     57c:	d3 cf       	rjmp	.-90     	; 0x524 <_Z16rack_limit_checkv+0x1e>
     57e:	08 95       	ret

00000580 <__vector_15>:



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	8f 93       	push	r24
     58c:	9f 93       	push	r25
     58e:	af 93       	push	r26
     590:	bf 93       	push	r27
	timer2_millis += 1;
     592:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timer2_millis>
     596:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <timer2_millis+0x1>
     59a:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <timer2_millis+0x2>
     59e:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <timer2_millis+0x3>
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	a1 1d       	adc	r26, r1
     5a6:	b1 1d       	adc	r27, r1
     5a8:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timer2_millis>
     5ac:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <timer2_millis+0x1>
     5b0:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <timer2_millis+0x2>
     5b4:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <timer2_millis+0x3>
	timer2_fract += 3;
     5b8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <timer2_fract>
     5bc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <timer2_fract+0x1>
     5c0:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <timer2_fract+0x2>
     5c4:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <timer2_fract+0x3>
     5c8:	03 96       	adiw	r24, 0x03	; 3
     5ca:	a1 1d       	adc	r26, r1
     5cc:	b1 1d       	adc	r27, r1
     5ce:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <timer2_fract>
     5d2:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <timer2_fract+0x1>
     5d6:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <timer2_fract+0x2>
     5da:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <timer2_fract+0x3>
	if (timer2_fract >= 125) {
     5de:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <timer2_fract>
     5e2:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <timer2_fract+0x1>
     5e6:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <timer2_fract+0x2>
     5ea:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <timer2_fract+0x3>
     5ee:	8d 37       	cpi	r24, 0x7D	; 125
     5f0:	91 05       	cpc	r25, r1
     5f2:	a1 05       	cpc	r26, r1
     5f4:	b1 05       	cpc	r27, r1
     5f6:	38 f1       	brcs	.+78     	; 0x646 <__vector_15+0xc6>
		timer2_fract -= 125;
     5f8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <timer2_fract>
     5fc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <timer2_fract+0x1>
     600:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <timer2_fract+0x2>
     604:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <timer2_fract+0x3>
     608:	8d 57       	subi	r24, 0x7D	; 125
     60a:	91 09       	sbc	r25, r1
     60c:	a1 09       	sbc	r26, r1
     60e:	b1 09       	sbc	r27, r1
     610:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <timer2_fract>
     614:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <timer2_fract+0x1>
     618:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <timer2_fract+0x2>
     61c:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <timer2_fract+0x3>
		timer2_millis += 1;
     620:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <timer2_millis>
     624:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <timer2_millis+0x1>
     628:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <timer2_millis+0x2>
     62c:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <timer2_millis+0x3>
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	a1 1d       	adc	r26, r1
     634:	b1 1d       	adc	r27, r1
     636:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <timer2_millis>
     63a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <timer2_millis+0x1>
     63e:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <timer2_millis+0x2>
     642:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <timer2_millis+0x3>
	}
}
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	0f 90       	pop	r0
     650:	0f be       	out	0x3f, r0	; 63
     652:	0f 90       	pop	r0
     654:	1f 90       	pop	r1
     656:	18 95       	reti

00000658 <__vector_2>:

//Rack motor using veitnamese motor
ISR(INT_VECTR)
{
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	0b b6       	in	r0, 0x3b	; 59
     664:	0f 92       	push	r0
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	ef 93       	push	r30
     670:	ff 93       	push	r31
	if(bit_is_clear(ENCODERR_CHAPORTPIN,ENCODERR_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     672:	95 99       	sbic	0x12, 5	; 18
     674:	19 c0       	rjmp	.+50     	; 0x6a8 <__vector_2+0x50>
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
     676:	ee e5       	ldi	r30, 0x5E	; 94
     678:	f2 e0       	ldi	r31, 0x02	; 2
     67a:	85 81       	ldd	r24, Z+5	; 0x05
     67c:	96 81       	ldd	r25, Z+6	; 0x06
     67e:	a7 81       	ldd	r26, Z+7	; 0x07
     680:	b0 85       	ldd	r27, Z+8	; 0x08
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	a1 09       	sbc	r26, r1
     686:	b1 09       	sbc	r27, r1
     688:	85 83       	std	Z+5, r24	; 0x05
     68a:	96 83       	std	Z+6, r25	; 0x06
     68c:	a7 83       	std	Z+7, r26	; 0x07
     68e:	b0 87       	std	Z+8, r27	; 0x08
	{
		RackEncoder.dcrCount();
		RackEncoder.angle--;
     690:	81 85       	ldd	r24, Z+9	; 0x09
     692:	92 85       	ldd	r25, Z+10	; 0x0a
     694:	a3 85       	ldd	r26, Z+11	; 0x0b
     696:	b4 85       	ldd	r27, Z+12	; 0x0c
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	a1 09       	sbc	r26, r1
     69c:	b1 09       	sbc	r27, r1
     69e:	81 87       	std	Z+9, r24	; 0x09
     6a0:	92 87       	std	Z+10, r25	; 0x0a
     6a2:	a3 87       	std	Z+11, r26	; 0x0b
     6a4:	b4 87       	std	Z+12, r27	; 0x0c
     6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <__vector_2+0x80>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     6a8:	ee e5       	ldi	r30, 0x5E	; 94
     6aa:	f2 e0       	ldi	r31, 0x02	; 2
     6ac:	85 81       	ldd	r24, Z+5	; 0x05
     6ae:	96 81       	ldd	r25, Z+6	; 0x06
     6b0:	a7 81       	ldd	r26, Z+7	; 0x07
     6b2:	b0 85       	ldd	r27, Z+8	; 0x08
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	a1 1d       	adc	r26, r1
     6b8:	b1 1d       	adc	r27, r1
     6ba:	85 83       	std	Z+5, r24	; 0x05
     6bc:	96 83       	std	Z+6, r25	; 0x06
     6be:	a7 83       	std	Z+7, r26	; 0x07
     6c0:	b0 87       	std	Z+8, r27	; 0x08
	}
	else
	{
		RackEncoder.incCount();
		RackEncoder.angle++;
     6c2:	81 85       	ldd	r24, Z+9	; 0x09
     6c4:	92 85       	ldd	r25, Z+10	; 0x0a
     6c6:	a3 85       	ldd	r26, Z+11	; 0x0b
     6c8:	b4 85       	ldd	r27, Z+12	; 0x0c
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	a1 1d       	adc	r26, r1
     6ce:	b1 1d       	adc	r27, r1
     6d0:	81 87       	std	Z+9, r24	; 0x09
     6d2:	92 87       	std	Z+10, r25	; 0x0a
     6d4:	a3 87       	std	Z+11, r26	; 0x0b
     6d6:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     6d8:	ff 91       	pop	r31
     6da:	ef 91       	pop	r30
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	0f 90       	pop	r0
     6e6:	0b be       	out	0x3b, r0	; 59
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_1>:

//geneva motor cytron

ISR(INT_VECTG)
{
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	0b b6       	in	r0, 0x3b	; 59
     6fe:	0f 92       	push	r0
     700:	8f 93       	push	r24
     702:	9f 93       	push	r25
     704:	af 93       	push	r26
     706:	bf 93       	push	r27
     708:	ef 93       	push	r30
     70a:	ff 93       	push	r31
	if(bit_is_clear(ENCODERG_CHAPORTPIN,ENCODERG_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     70c:	63 99       	sbic	0x0c, 3	; 12
     70e:	0e c0       	rjmp	.+28     	; 0x72c <__vector_1+0x3a>
	{
		GenevaEncoder.angle++;
     710:	e1 e5       	ldi	r30, 0x51	; 81
     712:	f2 e0       	ldi	r31, 0x02	; 2
     714:	81 85       	ldd	r24, Z+9	; 0x09
     716:	92 85       	ldd	r25, Z+10	; 0x0a
     718:	a3 85       	ldd	r26, Z+11	; 0x0b
     71a:	b4 85       	ldd	r27, Z+12	; 0x0c
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	a1 1d       	adc	r26, r1
     720:	b1 1d       	adc	r27, r1
     722:	81 87       	std	Z+9, r24	; 0x09
     724:	92 87       	std	Z+10, r25	; 0x0a
     726:	a3 87       	std	Z+11, r26	; 0x0b
     728:	b4 87       	std	Z+12, r27	; 0x0c
     72a:	0d c0       	rjmp	.+26     	; 0x746 <__vector_1+0x54>
		
	}
	else
	{
		GenevaEncoder.angle--;
     72c:	e1 e5       	ldi	r30, 0x51	; 81
     72e:	f2 e0       	ldi	r31, 0x02	; 2
     730:	81 85       	ldd	r24, Z+9	; 0x09
     732:	92 85       	ldd	r25, Z+10	; 0x0a
     734:	a3 85       	ldd	r26, Z+11	; 0x0b
     736:	b4 85       	ldd	r27, Z+12	; 0x0c
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	a1 09       	sbc	r26, r1
     73c:	b1 09       	sbc	r27, r1
     73e:	81 87       	std	Z+9, r24	; 0x09
     740:	92 87       	std	Z+10, r25	; 0x0a
     742:	a3 87       	std	Z+11, r26	; 0x0b
     744:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     746:	ff 91       	pop	r31
     748:	ef 91       	pop	r30
     74a:	bf 91       	pop	r27
     74c:	af 91       	pop	r26
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	0f 90       	pop	r0
     754:	0b be       	out	0x3b, r0	; 59
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_42>:


ISR(TIMER4_COMPA_vect)
{
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	0b b6       	in	r0, 0x3b	; 59
     76c:	0f 92       	push	r0
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	pid_compute_flag = true;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;}; //keep in timer compare match
     782:	ee e5       	ldi	r30, 0x5E	; 94
     784:	f2 e0       	ldi	r31, 0x02	; 2
     786:	45 81       	ldd	r20, Z+5	; 0x05
     788:	56 81       	ldd	r21, Z+6	; 0x06
     78a:	67 81       	ldd	r22, Z+7	; 0x07
     78c:	70 85       	ldd	r23, Z+8	; 0x08
     78e:	41 83       	std	Z+1, r20	; 0x01
     790:	52 83       	std	Z+2, r21	; 0x02
     792:	63 83       	std	Z+3, r22	; 0x03
     794:	74 83       	std	Z+4, r23	; 0x04
     796:	15 82       	std	Z+5, r1	; 0x05
     798:	16 82       	std	Z+6, r1	; 0x06
     79a:	17 82       	std	Z+7, r1	; 0x07
     79c:	10 86       	std	Z+8, r1	; 0x08
	RackEncoder.Calc_Speed();
	send_time = true;
     79e:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <send_time>
}
     7a2:	ff 91       	pop	r31
     7a4:	ef 91       	pop	r30
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	0f 90       	pop	r0
     7b2:	0b be       	out	0x3b, r0	; 59
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	long int angle;
	
	Rack_Encoder():speed(0),pprcount(0),angle(0){};
     7be:	ee e5       	ldi	r30, 0x5E	; 94
     7c0:	f2 e0       	ldi	r31, 0x02	; 2
     7c2:	11 82       	std	Z+1, r1	; 0x01
     7c4:	12 82       	std	Z+2, r1	; 0x02
     7c6:	13 82       	std	Z+3, r1	; 0x03
     7c8:	14 82       	std	Z+4, r1	; 0x04
     7ca:	15 82       	std	Z+5, r1	; 0x05
     7cc:	16 82       	std	Z+6, r1	; 0x06
     7ce:	17 82       	std	Z+7, r1	; 0x07
     7d0:	10 86       	std	Z+8, r1	; 0x08
     7d2:	11 86       	std	Z+9, r1	; 0x09
     7d4:	12 86       	std	Z+10, r1	; 0x0a
     7d6:	13 86       	std	Z+11, r1	; 0x0b
     7d8:	14 86       	std	Z+12, r1	; 0x0c
     7da:	e1 e5       	ldi	r30, 0x51	; 81
     7dc:	f2 e0       	ldi	r31, 0x02	; 2
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	12 82       	std	Z+2, r1	; 0x02
     7e2:	13 82       	std	Z+3, r1	; 0x03
     7e4:	14 82       	std	Z+4, r1	; 0x04
     7e6:	15 82       	std	Z+5, r1	; 0x05
     7e8:	16 82       	std	Z+6, r1	; 0x06
     7ea:	17 82       	std	Z+7, r1	; 0x07
     7ec:	10 86       	std	Z+8, r1	; 0x08
     7ee:	11 86       	std	Z+9, r1	; 0x09
     7f0:	12 86       	std	Z+10, r1	; 0x0a
     7f2:	13 86       	std	Z+11, r1	; 0x0b
     7f4:	14 86       	std	Z+12, r1	; 0x0c
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     7f6:	ec e2       	ldi	r30, 0x2C	; 44
     7f8:	f2 e0       	ldi	r31, 0x02	; 2
     7fa:	10 82       	st	Z, r1
     7fc:	11 82       	std	Z+1, r1	; 0x01
     7fe:	12 82       	std	Z+2, r1	; 0x02
     800:	13 82       	std	Z+3, r1	; 0x03
     802:	14 82       	std	Z+4, r1	; 0x04
     804:	15 82       	std	Z+5, r1	; 0x05
     806:	16 82       	std	Z+6, r1	; 0x06
     808:	17 82       	std	Z+7, r1	; 0x07
     80a:	10 86       	std	Z+8, r1	; 0x08
     80c:	11 86       	std	Z+9, r1	; 0x09
     80e:	12 86       	std	Z+10, r1	; 0x0a
     810:	13 86       	std	Z+11, r1	; 0x0b
     812:	15 86       	std	Z+13, r1	; 0x0d
     814:	14 86       	std	Z+12, r1	; 0x0c
     816:	17 86       	std	Z+15, r1	; 0x0f
     818:	16 86       	std	Z+14, r1	; 0x0e
     81a:	11 8a       	std	Z+17, r1	; 0x11
     81c:	10 8a       	std	Z+16, r1	; 0x10
     81e:	13 8a       	std	Z+19, r1	; 0x13
     820:	12 8a       	std	Z+18, r1	; 0x12
     822:	e4 e1       	ldi	r30, 0x14	; 20
     824:	f2 e0       	ldi	r31, 0x02	; 2
     826:	10 82       	st	Z, r1
     828:	11 82       	std	Z+1, r1	; 0x01
     82a:	12 82       	std	Z+2, r1	; 0x02
     82c:	13 82       	std	Z+3, r1	; 0x03
     82e:	14 82       	std	Z+4, r1	; 0x04
     830:	15 82       	std	Z+5, r1	; 0x05
     832:	16 82       	std	Z+6, r1	; 0x06
     834:	17 82       	std	Z+7, r1	; 0x07
     836:	10 86       	std	Z+8, r1	; 0x08
     838:	11 86       	std	Z+9, r1	; 0x09
     83a:	12 86       	std	Z+10, r1	; 0x0a
     83c:	13 86       	std	Z+11, r1	; 0x0b
     83e:	15 86       	std	Z+13, r1	; 0x0d
     840:	14 86       	std	Z+12, r1	; 0x0c
     842:	17 86       	std	Z+15, r1	; 0x0f
     844:	16 86       	std	Z+14, r1	; 0x0e
     846:	11 8a       	std	Z+17, r1	; 0x11
     848:	10 8a       	std	Z+16, r1	; 0x10
     84a:	13 8a       	std	Z+19, r1	; 0x13
     84c:	12 8a       	std	Z+18, r1	; 0x12
     84e:	08 95       	ret

00000850 <_ZN12Rack_Encoder11Init_TimersEv>:
}

void Rack_Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     850:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     854:	81 11       	cpse	r24, r1
     856:	17 c0       	rjmp	.+46     	; 0x886 <_ZN12Rack_Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     858:	e1 ea       	ldi	r30, 0xA1	; 161
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	8b 60       	ori	r24, 0x0B	; 11
     860:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     862:	e2 e7       	ldi	r30, 0x72	; 114
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	82 60       	ori	r24, 0x02	; 2
     86a:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     86c:	88 e8       	ldi	r24, 0x88	; 136
     86e:	93 e1       	ldi	r25, 0x13	; 19
     870:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     874:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
		TCNT4 = 0;
     878:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
     87c:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
		was_initialized = true;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <_ZZN12Rack_Encoder11Init_TimersEvE15was_initialized>
     886:	08 95       	ret

00000888 <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
     888:	78 94       	sei
	if (no==1)
     88a:	fc 01       	movw	r30, r24
     88c:	20 81       	ld	r18, Z
     88e:	21 30       	cpi	r18, 0x01	; 1
     890:	49 f4       	brne	.+18     	; 0x8a4 <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODERR_INT);
     892:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INTR_ISC1);	//falling edge
     894:	e9 e6       	ldi	r30, 0x69	; 105
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	20 81       	ld	r18, Z
     89a:	28 60       	ori	r18, 0x08	; 8
     89c:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERR_INT);		//setting INT pin
     89e:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INTR_INTF);	    //clear int flag
     8a0:	e1 9a       	sbi	0x1c, 1	; 28
     8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	}
	else if (no==2)
     8a4:	22 30       	cpi	r18, 0x02	; 2
     8a6:	41 f4       	brne	.+16     	; 0x8b8 <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODERG_INT);
     8a8:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INTG_ISC1);	//falling edge
     8aa:	e9 e6       	ldi	r30, 0x69	; 105
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	20 81       	ld	r18, Z
     8b0:	22 60       	ori	r18, 0x02	; 2
     8b2:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERG_INT);		//setting INT pin
     8b4:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INTG_INTF);	    //clear int flag
     8b6:	e0 9a       	sbi	0x1c, 0	; 28
	}
	Init_Timers();
     8b8:	cb cf       	rjmp	.-106    	; 0x850 <_ZN12Rack_Encoder11Init_TimersEv>
     8ba:	08 95       	ret

000008bc <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
     8bc:	fc 01       	movw	r30, r24
     8be:	60 83       	st	Z, r22
	if(no==1)
     8c0:	61 30       	cpi	r22, 0x01	; 1
     8c2:	29 f4       	brne	.+10     	; 0x8ce <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODERR_CHANNELA);
     8c4:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODERR_CHANNELB);
     8c6:	9d 98       	cbi	0x13, 5	; 19
		SET(ENCODERR_CHANNELA);
     8c8:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODERR_CHANNELB);
     8ca:	a5 9a       	sbi	0x14, 5	; 20
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
     8ce:	62 30       	cpi	r22, 0x02	; 2
     8d0:	21 f4       	brne	.+8      	; 0x8da <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODERG_CHANNELA);
     8d2:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODERG_CHANNELB);
     8d4:	6b 98       	cbi	0x0d, 3	; 13
		SET(ENCODERG_CHANNELA);
     8d6:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODERG_CHANNELB);
     8d8:	73 9a       	sbi	0x0e, 3	; 14
	}
	Init_Interrupts();
     8da:	d6 cf       	rjmp	.-84     	; 0x888 <_ZN12Rack_Encoder15Init_InterruptsEv>
     8dc:	08 95       	ret

000008de <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	c1 f4       	brne	.+48     	; 0x916 <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
     8e6:	09 9a       	sbi	0x01, 1	; 1
		OUTPUT(DD_B5);
     8e8:	0b 9a       	sbi	0x01, 3	; 1

		OUTPUT(DD_PWM5);
     8ea:	ea e0       	ldi	r30, 0x0A	; 10
     8ec:	f1 e0       	ldi	r31, 0x01	; 1
     8ee:	80 81       	ld	r24, Z
     8f0:	80 62       	ori	r24, 0x20	; 32
     8f2:	80 83       	st	Z, r24

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
     8f4:	e0 e2       	ldi	r30, 0x20	; 32
     8f6:	f1 e0       	ldi	r31, 0x01	; 1
     8f8:	80 81       	ld	r24, Z
     8fa:	8a 60       	ori	r24, 0x0A	; 10
     8fc:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
     8fe:	e1 e2       	ldi	r30, 0x21	; 33
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	80 81       	ld	r24, Z
     904:	8a 61       	ori	r24, 0x1A	; 26
     906:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
     908:	89 ef       	ldi	r24, 0xF9	; 249
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     910:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     914:	08 95       	ret
	}
	else if(num==2)
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	b9 f4       	brne	.+46     	; 0x948 <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
     91a:	0f 9a       	sbi	0x01, 7	; 1
		OUTPUT(DD_B6);
     91c:	0d 9a       	sbi	0x01, 5	; 1

		OUTPUT(DD_PWM6);
     91e:	ea e0       	ldi	r30, 0x0A	; 10
     920:	f1 e0       	ldi	r31, 0x01	; 1
     922:	80 81       	ld	r24, Z
     924:	80 61       	ori	r24, 0x10	; 16
     926:	80 83       	st	Z, r24

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
     928:	e0 e2       	ldi	r30, 0x20	; 32
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	80 81       	ld	r24, Z
     92e:	82 62       	ori	r24, 0x22	; 34
     930:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
     932:	e1 e2       	ldi	r30, 0x21	; 33
     934:	f1 e0       	ldi	r31, 0x01	; 1
     936:	80 81       	ld	r24, Z
     938:	8a 61       	ori	r24, 0x1A	; 26
     93a:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
     93c:	89 ef       	ldi	r24, 0xF9	; 249
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
     944:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
     948:	08 95       	ret

0000094a <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	19 f0       	breq	.+6      	; 0x958 <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	21 f0       	breq	.+8      	; 0x95e <_ZN10Rack_Motor19SetForwardDirectionEv+0x14>
     956:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
     958:	11 9a       	sbi	0x02, 1	; 2
		CLEAR	(DD_B5);
     95a:	13 98       	cbi	0x02, 3	; 2
		break;
     95c:	08 95       	ret
		case 2:
		SET		(DD_F6);
     95e:	17 9a       	sbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     960:	15 98       	cbi	0x02, 5	; 2
     962:	08 95       	ret

00000964 <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
     964:	fc 01       	movw	r30, r24
     966:	80 81       	ld	r24, Z
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	19 f0       	breq	.+6      	; 0x972 <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	21 f0       	breq	.+8      	; 0x978 <_ZN10Rack_Motor19SetReverseDirectionEv+0x14>
     970:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     972:	11 98       	cbi	0x02, 1	; 2
		SET		(DD_B5);
     974:	13 9a       	sbi	0x02, 3	; 2
		break;
     976:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     978:	17 98       	cbi	0x02, 7	; 2
		SET		(DD_B6);
     97a:	15 9a       	sbi	0x02, 5	; 2
     97c:	08 95       	ret

0000097e <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	19 f0       	breq	.+6      	; 0x98c <_ZN10Rack_Motor9StopMotorEv+0xe>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	41 f0       	breq	.+16     	; 0x99a <_ZN10Rack_Motor9StopMotorEv+0x1c>
     98a:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     98c:	11 98       	cbi	0x02, 1	; 2
		CLEAR	(DD_B5);
     98e:	13 98       	cbi	0x02, 3	; 2

		PWM_OCR5 = 0;
     990:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     994:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     998:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     99a:	17 98       	cbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     99c:	15 98       	cbi	0x02, 5	; 2

		PWM_OCR6 = 0;
     99e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9a2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     9a6:	08 95       	ret

000009a8 <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	8c 01       	movw	r16, r24
     9b2:	eb 01       	movw	r28, r22
  if (Ocr > 0)
     9b4:	1c 16       	cp	r1, r28
     9b6:	1d 06       	cpc	r1, r29
     9b8:	0c f4       	brge	.+2      	; 0x9bc <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
     9ba:	c7 df       	rcall	.-114    	; 0x94a <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
     9bc:	dd 23       	and	r29, r29
     9be:	2c f4       	brge	.+10     	; 0x9ca <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
     9c0:	d1 95       	neg	r29
     9c2:	c1 95       	neg	r28
     9c4:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
     9c6:	c8 01       	movw	r24, r16
     9c8:	cd df       	rcall	.-102    	; 0x964 <_ZN10Rack_Motor19SetReverseDirectionEv>
     9ca:	ca 3f       	cpi	r28, 0xFA	; 250
     9cc:	d1 05       	cpc	r29, r1
     9ce:	14 f0       	brlt	.+4      	; 0x9d4 <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
     9d0:	c9 ef       	ldi	r28, 0xF9	; 249
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
     9d4:	f8 01       	movw	r30, r16
     9d6:	80 81       	ld	r24, Z
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	19 f0       	breq	.+6      	; 0x9e2 <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	31 f0       	breq	.+12     	; 0x9ec <_ZN10Rack_Motor11SetOcrValueEi+0x44>
     9e0:	09 c0       	rjmp	.+18     	; 0x9f4 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
     9e2:	d0 93 2d 01 	sts	0x012D, r29	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     9e6:	c0 93 2c 01 	sts	0x012C, r28	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		break;
     9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
     9ec:	d0 93 2b 01 	sts	0x012B, r29	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     9f0:	c0 93 2a 01 	sts	0x012A, r28	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		break;
	}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	08 95       	ret

000009fe <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ec 01       	movw	r28, r24
	num = no;
     a04:	68 83       	st	Y, r22
	InitPWM();
     a06:	6b df       	rcall	.-298    	; 0x8de <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
     a08:	ce 01       	movw	r24, r28
     a0a:	b9 df       	rcall	.-142    	; 0x97e <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	ce 01       	movw	r24, r28
     a12:	ca df       	rcall	.-108    	; 0x9a8 <_ZN10Rack_Motor11SetOcrValueEi>

}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <_Z17operation_of_rackv>:
}

void disable_linetracker_interrupt()
{
	EIMSK &= ~(1<<JUNCTION_INT);
	EIFR |= (1<<JUNCTION_INTF);
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <RackEncoder+0x9>
     a22:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <RackEncoder+0xa>
     a26:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <RackEncoder+0xb>
     a2a:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <RackEncoder+0xc>
     a2e:	87 3a       	cpi	r24, 0xA7	; 167
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	92 07       	cpc	r25, r18
     a34:	a2 07       	cpc	r26, r18
     a36:	b2 07       	cpc	r27, r18
     a38:	5c f4       	brge	.+22     	; 0xa50 <_Z17operation_of_rackv+0x36>
     a3a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Rack_home_position>
     a3e:	22 23       	and	r18, r18
     a40:	09 f4       	brne	.+2      	; 0xa44 <_Z17operation_of_rackv+0x2a>
     a42:	07 c1       	rjmp	.+526    	; 0xc52 <_Z17operation_of_rackv+0x238>
     a44:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Rack_home_position>
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <stop_rack_final>
     a4e:	0e c0       	rjmp	.+28     	; 0xa6c <_Z17operation_of_rackv+0x52>
     a50:	86 3a       	cpi	r24, 0xA6	; 166
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	af 4f       	sbci	r26, 0xFF	; 255
     a56:	bf 4f       	sbci	r27, 0xFF	; 255
     a58:	4c f0       	brlt	.+18     	; 0xa6c <_Z17operation_of_rackv+0x52>
     a5a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Rack_home_position>
     a5e:	81 11       	cpse	r24, r1
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <_Z17operation_of_rackv+0x52>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Rack_home_position>
     a68:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <stop_rack_initial>
     a6c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <Geneva_Start>
     a70:	88 23       	and	r24, r24
     a72:	09 f4       	brne	.+2      	; 0xa76 <_Z17operation_of_rackv+0x5c>
     a74:	62 c0       	rjmp	.+196    	; 0xb3a <_Z17operation_of_rackv+0x120>
     a76:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <GenevaEncoder+0x9>
     a7a:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <GenevaEncoder+0xa>
     a7e:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <GenevaEncoder+0xb>
     a82:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <GenevaEncoder+0xc>
     a86:	88 36       	cpi	r24, 0x68	; 104
     a88:	91 40       	sbci	r25, 0x01	; 1
     a8a:	a1 05       	cpc	r26, r1
     a8c:	b1 05       	cpc	r27, r1
     a8e:	54 f1       	brlt	.+84     	; 0xae4 <_Z17operation_of_rackv+0xca>
     a90:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <angle_pid+0xe>
     a94:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <angle_pid+0xf>
     a98:	77 23       	and	r23, r23
     a9a:	1c f4       	brge	.+6      	; 0xaa2 <_Z17operation_of_rackv+0x88>
     a9c:	71 95       	neg	r23
     a9e:	61 95       	neg	r22
     aa0:	71 09       	sbc	r23, r1
     aa2:	07 2e       	mov	r0, r23
     aa4:	00 0c       	add	r0, r0
     aa6:	88 0b       	sbc	r24, r24
     aa8:	99 0b       	sbc	r25, r25
     aaa:	8b d6       	rcall	.+3350   	; 0x17c2 <__floatsisf>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e4       	ldi	r20, 0x40	; 64
     ab2:	50 e4       	ldi	r21, 0x40	; 64
     ab4:	e7 d5       	rcall	.+3022   	; 0x1684 <__cmpsf2>
     ab6:	18 16       	cp	r1, r24
     ab8:	ac f0       	brlt	.+42     	; 0xae4 <_Z17operation_of_rackv+0xca>
     aba:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <GenevaEncoder+0x9>
     abe:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <GenevaEncoder+0xa>
     ac2:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <GenevaEncoder+0xb>
     ac6:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <GenevaEncoder+0xc>
     aca:	ec e2       	ldi	r30, 0x2C	; 44
     acc:	f2 e0       	ldi	r31, 0x02	; 2
     ace:	15 86       	std	Z+13, r1	; 0x0d
     ad0:	14 86       	std	Z+12, r1	; 0x0c
     ad2:	13 8a       	std	Z+19, r1	; 0x13
     ad4:	12 8a       	std	Z+18, r1	; 0x12
     ad6:	14 8a       	std	Z+20, r1	; 0x14
     ad8:	15 8a       	std	Z+21, r1	; 0x15
     ada:	16 8a       	std	Z+22, r1	; 0x16
     adc:	17 8a       	std	Z+23, r1	; 0x17
     ade:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Geneva_Start>
     ae2:	2b c0       	rjmp	.+86     	; 0xb3a <_Z17operation_of_rackv+0x120>
     ae4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     ae8:	88 23       	and	r24, r24
     aea:	91 f0       	breq	.+36     	; 0xb10 <_Z17operation_of_rackv+0xf6>
     aec:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <GenevaEncoder+0x9>
     af0:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <GenevaEncoder+0xa>
     af4:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <GenevaEncoder+0xb>
     af8:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <GenevaEncoder+0xc>
     afc:	88 3c       	cpi	r24, 0xC8	; 200
     afe:	91 05       	cpc	r25, r1
     b00:	a1 05       	cpc	r26, r1
     b02:	b1 05       	cpc	r27, r1
     b04:	2c f0       	brlt	.+10     	; 0xb10 <_Z17operation_of_rackv+0xf6>
     b06:	16 98       	cbi	0x02, 6	; 2
     b08:	47 98       	cbi	0x08, 7	; 8
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <inside_robot>
     b10:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <GenevaEncoder+0x9>
     b14:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <GenevaEncoder+0xa>
     b18:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <GenevaEncoder+0xb>
     b1c:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <GenevaEncoder+0xc>
     b20:	88 37       	cpi	r24, 0x78	; 120
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	44 f0       	brlt	.+16     	; 0xb3a <_Z17operation_of_rackv+0x120>
     b2a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pneumatic_geneva_start>
     b2e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     b32:	88 23       	and	r24, r24
     b34:	09 f4       	brne	.+2      	; 0xb38 <_Z17operation_of_rackv+0x11e>
     b36:	3e c0       	rjmp	.+124    	; 0xbb4 <_Z17operation_of_rackv+0x19a>
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <_Z17operation_of_rackv+0x128>
     b3a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
     b3e:	88 23       	and	r24, r24
     b40:	c1 f0       	breq	.+48     	; 0xb72 <_Z17operation_of_rackv+0x158>
     b42:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <GenevaEncoder+0x9>
     b46:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <GenevaEncoder+0xa>
     b4a:	8c e2       	ldi	r24, 0x2C	; 44
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	9d db       	rcall	.-2246   	; 0x28a <_ZN3PID13angle_ComputeEi>
     b50:	05 d6       	rcall	.+3082   	; 0x175c <__fixsfsi>
     b52:	8b e6       	ldi	r24, 0x6B	; 107
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	28 df       	rcall	.-432    	; 0x9a8 <_ZN10Rack_Motor11SetOcrValueEi>
     b58:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <RackEncoder+0x1>
     b5c:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <RackEncoder+0x2>
     b60:	84 e1       	ldi	r24, 0x14	; 20
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	16 db       	rcall	.-2516   	; 0x192 <_ZN3PID7ComputeEi>
     b66:	fa d5       	rcall	.+3060   	; 0x175c <__fixsfsi>
     b68:	8c e6       	ldi	r24, 0x6C	; 108
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	1d df       	rcall	.-454    	; 0x9a8 <_ZN10Rack_Motor11SetOcrValueEi>
     b6e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
     b72:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <pneumatic_geneva_start>
     b76:	88 23       	and	r24, r24
     b78:	e9 f0       	breq	.+58     	; 0xbb4 <_Z17operation_of_rackv+0x19a>
     b7a:	25 dc       	rcall	.-1974   	; 0x3c6 <_Z6millisv>
     b7c:	00 91 49 02 	lds	r16, 0x0249	; 0x800249 <pneumatic_geneva_time>
     b80:	10 91 4a 02 	lds	r17, 0x024A	; 0x80024a <pneumatic_geneva_time+0x1>
     b84:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <pneumatic_geneva_time+0x2>
     b88:	30 91 4c 02 	lds	r19, 0x024C	; 0x80024c <pneumatic_geneva_time+0x3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	80 1b       	sub	r24, r16
     b92:	91 0b       	sbc	r25, r17
     b94:	a2 0b       	sbc	r26, r18
     b96:	b3 0b       	sbc	r27, r19
     b98:	8d 3b       	cpi	r24, 0xBD	; 189
     b9a:	92 40       	sbci	r25, 0x02	; 2
     b9c:	a1 05       	cpc	r26, r1
     b9e:	b1 05       	cpc	r27, r1
     ba0:	48 f0       	brcs	.+18     	; 0xbb4 <_Z17operation_of_rackv+0x19a>
     ba2:	88 e6       	ldi	r24, 0x68	; 104
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <angle_pid+0xd>
     baa:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <angle_pid+0xc>
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <Geneva_Start>
     bb4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pass_the_shuttcock>
     bb8:	88 23       	and	r24, r24
     bba:	d1 f0       	breq	.+52     	; 0xbf0 <_Z17operation_of_rackv+0x1d6>
     bbc:	04 dc       	rcall	.-2040   	; 0x3c6 <_Z6millisv>
     bbe:	00 91 45 02 	lds	r16, 0x0245	; 0x800245 <passing_time>
     bc2:	10 91 46 02 	lds	r17, 0x0246	; 0x800246 <passing_time+0x1>
     bc6:	20 91 47 02 	lds	r18, 0x0247	; 0x800247 <passing_time+0x2>
     bca:	30 91 48 02 	lds	r19, 0x0248	; 0x800248 <passing_time+0x3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	80 1b       	sub	r24, r16
     bd4:	91 0b       	sbc	r25, r17
     bd6:	a2 0b       	sbc	r26, r18
     bd8:	b3 0b       	sbc	r27, r19
     bda:	8d 32       	cpi	r24, 0x2D	; 45
     bdc:	91 40       	sbci	r25, 0x01	; 1
     bde:	a1 05       	cpc	r26, r1
     be0:	b1 05       	cpc	r27, r1
     be2:	30 f0       	brcs	.+12     	; 0xbf0 <_Z17operation_of_rackv+0x1d6>
     be4:	92 b1       	in	r25, 0x02	; 2
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	89 27       	eor	r24, r25
     bea:	82 b9       	out	0x02, r24	; 2
     bec:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pass_the_shuttcock>
     bf0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <throw_rack>
     bf4:	88 23       	and	r24, r24
     bf6:	a1 f1       	breq	.+104    	; 0xc60 <_Z17operation_of_rackv+0x246>
     bf8:	e6 db       	rcall	.-2100   	; 0x3c6 <_Z6millisv>
     bfa:	00 91 4d 02 	lds	r16, 0x024D	; 0x80024d <previous_time>
     bfe:	10 91 4e 02 	lds	r17, 0x024E	; 0x80024e <previous_time+0x1>
     c02:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <previous_time+0x2>
     c06:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <previous_time+0x3>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	80 1b       	sub	r24, r16
     c10:	91 0b       	sbc	r25, r17
     c12:	a2 0b       	sbc	r26, r18
     c14:	b3 0b       	sbc	r27, r19
     c16:	8c 32       	cpi	r24, 0x2C	; 44
     c18:	91 40       	sbci	r25, 0x01	; 1
     c1a:	a1 05       	cpc	r26, r1
     c1c:	b1 05       	cpc	r27, r1
     c1e:	00 f1       	brcs	.+64     	; 0xc60 <_Z17operation_of_rackv+0x246>
     c20:	10 98       	cbi	0x02, 0	; 2
     c22:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <throw_rack>
     c26:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
     c2a:	88 23       	and	r24, r24
     c2c:	c9 f0       	breq	.+50     	; 0xc60 <_Z17operation_of_rackv+0x246>
     c2e:	8d ef       	ldi	r24, 0xFD	; 253
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
     c36:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <auto_move_rack>
     c40:	28 e6       	ldi	r18, 0x68	; 104
     c42:	31 e0       	ldi	r19, 0x01	; 1
     c44:	30 93 39 02 	sts	0x0239, r19	; 0x800239 <angle_pid+0xd>
     c48:	20 93 38 02 	sts	0x0238, r18	; 0x800238 <angle_pid+0xc>
     c4c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <Geneva_Start>
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <_Z17operation_of_rackv+0x246>
     c52:	86 3a       	cpi	r24, 0xA6	; 166
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	af 4f       	sbci	r26, 0xFF	; 255
     c58:	bf 4f       	sbci	r27, 0xFF	; 255
     c5a:	0c f0       	brlt	.+2      	; 0xc5e <_Z17operation_of_rackv+0x244>
     c5c:	02 cf       	rjmp	.-508    	; 0xa62 <_Z17operation_of_rackv+0x48>
     c5e:	06 cf       	rjmp	.-500    	; 0xa6c <_Z17operation_of_rackv+0x52>
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <_Z18init_timer_rampingv>:
     c66:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <rampupflag_start>
     c6a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <timer_count>
     c6e:	84 b5       	in	r24, 0x24	; 36
     c70:	82 60       	ori	r24, 0x02	; 2
     c72:	84 bd       	out	0x24, r24	; 36
     c74:	85 b5       	in	r24, 0x25	; 37
     c76:	85 60       	ori	r24, 0x05	; 5
     c78:	85 bd       	out	0x25, r24	; 37
     c7a:	ee e6       	ldi	r30, 0x6E	; 110
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	80 83       	st	Z, r24
     c84:	16 bc       	out	0x26, r1	; 38
     c86:	8b e9       	ldi	r24, 0x9B	; 155
     c88:	87 bd       	out	0x27, r24	; 39
     c8a:	08 95       	ret

00000c8c <_Z14init_LedStripsv>:
     c8c:	98 9a       	sbi	0x13, 0	; 19
     c8e:	3e 9a       	sbi	0x07, 6	; 7
     c90:	3c 9a       	sbi	0x07, 4	; 7
     c92:	9a 9a       	sbi	0x13, 2	; 19
     c94:	38 9a       	sbi	0x07, 0	; 7
     c96:	3a 9a       	sbi	0x07, 2	; 7
     c98:	99 9a       	sbi	0x13, 1	; 19
     c9a:	a0 98       	cbi	0x14, 0	; 20
     c9c:	46 98       	cbi	0x08, 6	; 8
     c9e:	44 98       	cbi	0x08, 4	; 8
     ca0:	a2 98       	cbi	0x14, 2	; 20
     ca2:	40 98       	cbi	0x08, 0	; 8
     ca4:	42 98       	cbi	0x08, 2	; 8
     ca6:	a1 98       	cbi	0x14, 1	; 20
     ca8:	08 95       	ret

00000caa <_Z11init_masterv>:
     caa:	e2 e8       	ldi	r30, 0x82	; 130
     cac:	f2 e0       	ldi	r31, 0x02	; 2
     cae:	82 e3       	ldi	r24, 0x32	; 50
     cb0:	80 83       	st	Z, r24
     cb2:	81 83       	std	Z+1, r24	; 0x01
     cb4:	82 83       	std	Z+2, r24	; 0x02
     cb6:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <slave_work_category>
     cba:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <LtState>
     cbe:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <line_tracker_data+0x1>
     cc2:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <line_tracker_data>
     cc6:	89 e0       	ldi	r24, 0x09	; 9
     cc8:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <robot_rpm>
     ccc:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <search_time>
     cd0:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <search_time+0x1>
     cd4:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <search_time+0x2>
     cd8:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <search_time+0x3>
     cdc:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <rack_picktime>
     ce0:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <rack_picktime+0x1>
     ce4:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <rack_picktime+0x2>
     ce8:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <rack_picktime+0x3>
     cec:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <auto_mode>
     cf0:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <search_auto>
     cf4:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_pickup>
     cf8:	10 ba       	out	0x10, r1	; 16
     cfa:	6c 98       	cbi	0x0d, 4	; 13
     cfc:	74 9a       	sbi	0x0e, 4	; 14
     cfe:	ea e0       	ldi	r30, 0x0A	; 10
     d00:	f1 e0       	ldi	r31, 0x01	; 1
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	80 83       	st	Z, r24
     d08:	ae df       	rcall	.-164    	; 0xc66 <_Z18init_timer_rampingv>
     d0a:	c0 cf       	rjmp	.-128    	; 0xc8c <_Z14init_LedStripsv>
     d0c:	08 95       	ret

00000d0e <_Z20Get_linetracker_datav>:

/**************************************************Get line tracker data and send the value from 10 to 80 or 0 if not found*************************/

char Get_linetracker_data()
{
	line_tracker_data = 0;
     d0e:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <line_tracker_data+0x1>
     d12:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <line_tracker_data>
	total_on_sensor = 0;
     d16:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <total_on_sensor>
	for(counter_i=0; counter_i < 8; counter_i++)
     d1a:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <counter_i>
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	50 e0       	ldi	r21, 0x00	; 0
	{
		val = READ2(F,counter_i);
     d22:	6f b1       	in	r22, 0x0f	; 15
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	ca 01       	movw	r24, r20
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <_Z20Get_linetracker_datav+0x22>
     d2c:	75 95       	asr	r23
     d2e:	67 95       	ror	r22
     d30:	8a 95       	dec	r24
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <_Z20Get_linetracker_datav+0x1e>
     d34:	61 70       	andi	r22, 0x01	; 1
     d36:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <val>
		line_tracker_data += (val*(counter_i+1)*10);
     d3a:	86 2f       	mov	r24, r22
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	84 9f       	mul	r24, r20
     d40:	90 01       	movw	r18, r0
     d42:	85 9f       	mul	r24, r21
     d44:	30 0d       	add	r19, r0
     d46:	94 9f       	mul	r25, r20
     d48:	30 0d       	add	r19, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	c9 01       	movw	r24, r18
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	28 0f       	add	r18, r24
     d60:	39 1f       	adc	r19, r25
     d62:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <line_tracker_data>
     d66:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <line_tracker_data+0x1>
     d6a:	28 0f       	add	r18, r24
     d6c:	39 1f       	adc	r19, r25
     d6e:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <line_tracker_data+0x1>
     d72:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <line_tracker_data>
		total_on_sensor += val;
     d76:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <total_on_sensor>
     d7a:	69 0f       	add	r22, r25
     d7c:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <total_on_sensor>

char Get_linetracker_data()
{
	line_tracker_data = 0;
	total_on_sensor = 0;
	for(counter_i=0; counter_i < 8; counter_i++)
     d80:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <counter_i>
     d84:	4f 5f       	subi	r20, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	49 30       	cpi	r20, 0x09	; 9
     d8a:	51 05       	cpc	r21, r1
     d8c:	51 f6       	brne	.-108    	; 0xd22 <_Z20Get_linetracker_datav+0x14>
	{
		val = READ2(F,counter_i);
		line_tracker_data += (val*(counter_i+1)*10);
		total_on_sensor += val;
	}
	total_on_sensor = (total_on_sensor == 0)?1:total_on_sensor;
     d8e:	61 11       	cpse	r22, r1
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <_Z20Get_linetracker_datav+0x86>
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <total_on_sensor>
	line_tracker_data = line_tracker_data/total_on_sensor;
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	c9 01       	movw	r24, r18
     d9c:	25 d6       	rcall	.+3146   	; 0x19e8 <__divmodhi4>
     d9e:	86 2f       	mov	r24, r22
     da0:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <line_tracker_data>
     da4:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <line_tracker_data+0x1>
	return line_tracker_data;
}
     da8:	08 95       	ret

00000daa <_Z18Send_data_to_Slavev>:

/*****************************************Function to send data to slave***************************/

void Send_data_to_Slave()
{
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
	if(auto_mode)
     dae:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <auto_mode>
     db2:	88 23       	and	r24, r24
     db4:	69 f0       	breq	.+26     	; 0xdd0 <_Z18Send_data_to_Slavev+0x26>
	{
		UART3Transmit(START_BYTE_AUTO);
     db6:	8e ef       	ldi	r24, 0xFE	; 254
     db8:	85 d3       	rcall	.+1802   	; 0x14c4 <_Z13UART3Transmith>
		UART3Transmit(slave_work_category);
     dba:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <slave_work_category>
		UART3Transmit(Get_linetracker_data());
     dbe:	82 d3       	rcall	.+1796   	; 0x14c4 <_Z13UART3Transmith>
     dc0:	a6 df       	rcall	.-180    	; 0xd0e <_Z20Get_linetracker_datav>
     dc2:	80 d3       	rcall	.+1792   	; 0x14c4 <_Z13UART3Transmith>
		UART3Transmit(LtState);
     dc4:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     dc8:	7d d3       	rcall	.+1786   	; 0x14c4 <_Z13UART3Transmith>
		slave_work_category = static_position;
     dca:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <slave_work_category>
     dce:	0e c0       	rjmp	.+28     	; 0xdec <_Z18Send_data_to_Slavev+0x42>
	}
	else
	{
		UART3Transmit(START_BYTE_MANUAL);
     dd0:	8d ef       	ldi	r24, 0xFD	; 253
     dd2:	78 d3       	rcall	.+1776   	; 0x14c4 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[0]);
     dd4:	c2 e8       	ldi	r28, 0x82	; 130
     dd6:	d2 e0       	ldi	r29, 0x02	; 2
     dd8:	88 81       	ld	r24, Y
     dda:	74 d3       	rcall	.+1768   	; 0x14c4 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[1]);
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	72 d3       	rcall	.+1764   	; 0x14c4 <_Z13UART3Transmith>
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
		UART3Transmit(velocity_robot[2]);
     de2:	70 d3       	rcall	.+1760   	; 0x14c4 <_Z13UART3Transmith>
     de4:	82 e3       	ldi	r24, 0x32	; 50
     de6:	88 83       	st	Y, r24
		velocity_robot[0] = RESETDATA_JOYSTICK;
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	8a 83       	std	Y+2, r24	; 0x02
		velocity_robot[1] = RESETDATA_JOYSTICK;
     dec:	df 91       	pop	r29
		velocity_robot[2] = RESETDATA_JOYSTICK;
     dee:	cf 91       	pop	r28
	}

	
}
     df0:	08 95       	ret

00000df2 <_Z17orientation_checkv>:
     df2:	1e 9b       	sbis	0x03, 6	; 3
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <_Z17orientation_checkv+0x12>
void orientation_check()
{
		//limit_switch 1
		if(READ(LTSWITCH_ORIENT_1))
		{
			LtState &= ~(1<<0);
     df6:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <LtState>
			CLEAR(LT1_LED);
     e00:	44 98       	cbi	0x08, 4	; 8
     e02:	06 c0       	rjmp	.+12     	; 0xe10 <_Z17orientation_checkv+0x1e>
		}
		else
		{
			LtState |= (1<<0);
     e04:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <LtState>
			SET(LT1_LED);
     e0e:	44 9a       	sbi	0x08, 4	; 8
		}
		
		//limit_Switch 2
		if(READ(LTSWITCH_ORIENT_2))
     e10:	1f 9b       	sbis	0x03, 7	; 3
     e12:	07 c0       	rjmp	.+14     	; 0xe22 <_Z17orientation_checkv+0x30>
		{
			LtState &= ~(1<<1);
     e14:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     e18:	8d 7f       	andi	r24, 0xFD	; 253
     e1a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <LtState>
			CLEAR(LT2_LED);
     e1e:	a1 98       	cbi	0x14, 1	; 20
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <_Z17orientation_checkv+0x3c>
		}
		else
		{
			LtState |= (1<<1);
     e22:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <LtState>
			SET(LT2_LED);
     e2c:	a1 9a       	sbi	0x14, 1	; 20
		}
		
		//limit_Switch 3
		if (READ(LTSWITCH_ORIENT_3))
     e2e:	1d 9b       	sbis	0x03, 5	; 3
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <_Z17orientation_checkv+0x4e>
		{
			LtState &= ~(1<<2);
     e32:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     e36:	8b 7f       	andi	r24, 0xFB	; 251
     e38:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <LtState>
			CLEAR(LT3_LED);
     e3c:	40 98       	cbi	0x08, 0	; 8
     e3e:	08 95       	ret
		}
		else
		{
			LtState |= (1<<2);
     e40:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <LtState>
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <LtState>
			SET(LT3_LED);
     e4a:	40 9a       	sbi	0x08, 0	; 8
     e4c:	08 95       	ret

00000e4e <_Z19operate_master_autov>:
	init_timer_ramping();
	init_LedStrips();
}

void operate_master_auto()
{
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
	SET(AUTO_LED_STRIP);
     e52:	a0 9a       	sbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     e54:	46 98       	cbi	0x08, 6	; 8
	
	//toggling manual and automatic mode
	if(GAMEBUTTONA == START_BUTTON)
     e56:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <rcvdata>
     e5a:	80 34       	cpi	r24, 0x40	; 64
     e5c:	29 f4       	brne	.+10     	; 0xe68 <_Z19operate_master_autov+0x1a>
	{
		auto_mode = false;
     e5e:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <auto_mode>
		GAMEBUTTONA = 0;
     e62:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
     e66:	60 c0       	rjmp	.+192    	; 0xf28 <_Z19operate_master_autov+0xda>
	}
	//Automatic zone navigation
	else if(GAMEBUTTONA == BUTTON_A)
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	89 f4       	brne	.+34     	; 0xe8e <_Z19operate_master_autov+0x40>
	{
		slave_work_category = Rack_load;
     e6c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
		auto_move_rack = true;
     e70:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <auto_move_rack>
		if(Rack_home_position)
     e74:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Rack_home_position>
     e78:	88 23       	and	r24, r24
     e7a:	31 f0       	breq	.+12     	; 0xe88 <_Z19operate_master_autov+0x3a>
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     e7c:	8d ef       	ldi	r24, 0xFD	; 253
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
     e84:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
			rack_motor_pid.Set_SP(-RACK_COUNT);
		GAMEBUTTONA = 0;
     e88:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <_Z19operate_master_autov+0xda>
	}
	else if(GAMEBUTTONA == BUTTON_B)
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	29 f4       	brne	.+10     	; 0xe9c <_Z19operate_master_autov+0x4e>
	{
		slave_work_category = Load1;
     e92:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
		GAMEBUTTONA = 0;
     e96:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
     e9a:	46 c0       	rjmp	.+140    	; 0xf28 <_Z19operate_master_autov+0xda>
	}
	else if (GAMEBUTTONA == BUTTON_X)
     e9c:	84 30       	cpi	r24, 0x04	; 4
     e9e:	31 f4       	brne	.+12     	; 0xeac <_Z19operate_master_autov+0x5e>
	{
		slave_work_category = Load2;
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
		GAMEBUTTONA = 0;
     ea6:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
     eaa:	3e c0       	rjmp	.+124    	; 0xf28 <_Z19operate_master_autov+0xda>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     eac:	88 30       	cpi	r24, 0x08	; 8
     eae:	31 f4       	brne	.+12     	; 0xebc <_Z19operate_master_autov+0x6e>
	{
		slave_work_category = Golden_Rack;
     eb0:	87 e0       	ldi	r24, 0x07	; 7
     eb2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
		GAMEBUTTONA = 0;
     eb6:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
     eba:	36 c0       	rjmp	.+108    	; 0xf28 <_Z19operate_master_autov+0xda>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)
     ebc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
     ec0:	91 11       	cpse	r25, r1
     ec2:	32 c0       	rjmp	.+100    	; 0xf28 <_Z19operate_master_autov+0xda>
     ec4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
     ec8:	91 11       	cpse	r25, r1
     eca:	2e c0       	rjmp	.+92     	; 0xf28 <_Z19operate_master_autov+0xda>
     ecc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
     ed0:	91 11       	cpse	r25, r1
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <_Z19operate_master_autov+0xda>
     ed4:	80 32       	cpi	r24, 0x20	; 32
     ed6:	41 f5       	brne	.+80     	; 0xf28 <_Z19operate_master_autov+0xda>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
     ed8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     edc:	88 23       	and	r24, r24
     ede:	81 f0       	breq	.+32     	; 0xf00 <_Z19operate_master_autov+0xb2>
		{
			pneumatic_geneva_start = true;
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     ee6:	6f da       	rcall	.-2850   	; 0x3c6 <_Z6millisv>
     ee8:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <pneumatic_geneva_time>
     eec:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <pneumatic_geneva_time+0x1>
     ef0:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <pneumatic_geneva_time+0x2>
     ef4:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     ef8:	88 b1       	in	r24, 0x08	; 8
     efa:	80 58       	subi	r24, 0x80	; 128
     efc:	88 b9       	out	0x08, r24	; 8
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <_Z19operate_master_autov+0xb4>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     f00:	47 98       	cbi	0x08, 7	; 8
		}
		
		pass_the_shuttcock = true;
     f02:	11 e0       	ldi	r17, 0x01	; 1
     f04:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     f08:	5e da       	rcall	.-2884   	; 0x3c6 <_Z6millisv>
     f0a:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <passing_time>
     f0e:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <passing_time+0x1>
     f12:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <passing_time+0x2>
     f16:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <passing_time+0x3>
		inside_robot = (1^inside_robot);
     f1a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     f1e:	18 27       	eor	r17, r24
     f20:	10 93 02 02 	sts	0x0202, r17	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
     f24:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
	}

	
	if (GAMEBUTTONB == LEFT_BUTTON)
     f28:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <rcvdata+0x1>
     f2c:	80 32       	cpi	r24, 0x20	; 32
     f2e:	31 f4       	brne	.+12     	; 0xf3c <_Z19operate_master_autov+0xee>
	{
		slave_work_category = Search_automaticrobot;
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
		GAMEBUTTONB = 0;
     f36:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <rcvdata+0x1>
     f3a:	0b c0       	rjmp	.+22     	; 0xf52 <_Z19operate_master_autov+0x104>
	}	
	else if(GAMEBUTTONB == UP)
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	21 f4       	brne	.+8      	; 0xf48 <_Z19operate_master_autov+0xfa>
	{
		slave_work_category = up_rob;
     f40:	85 e0       	ldi	r24, 0x05	; 5
     f42:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <_Z19operate_master_autov+0x104>
	}	
	else if(GAMEBUTTONB == DOWN)
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	19 f4       	brne	.+6      	; 0xf52 <_Z19operate_master_autov+0x104>
	{
		slave_work_category = down_rob;
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
	}
	
	//if reached rack loading zone
	if(SLAVE_DATA == Rack_zone)
     f52:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <rcv_value_slave>
     f56:	84 30       	cpi	r24, 0x04	; 4
     f58:	a1 f4       	brne	.+40     	; 0xf82 <_Z19operate_master_autov+0x134>
	{
		rack_throw_auto = true;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
     f60:	16 9a       	sbi	0x02, 6	; 2
		RACK_GRIP_CLOSE();
     f62:	10 9a       	sbi	0x02, 0	; 2
		rack_pickup = true;
     f64:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_pickup>
		rack_picktime = millis();
     f68:	2e da       	rcall	.-2980   	; 0x3c6 <_Z6millisv>
     f6a:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <rack_picktime>
     f6e:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <rack_picktime+0x1>
     f72:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <rack_picktime+0x2>
     f76:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <rack_picktime+0x3>
		disable_proximity();
     f7a:	1d da       	rcall	.-3014   	; 0x3b6 <_Z17disable_proximityv>
		SLAVE_DATA = 0;
     f7c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <rcv_value_slave>
	}
	else if(SLAVE_DATA == Golden_zone)
     f80:	55 c0       	rjmp	.+170    	; 0x102c <_Z19operate_master_autov+0x1de>
     f82:	85 30       	cpi	r24, 0x05	; 5
	{
		RACK_GRIP_CLOSE();
     f84:	89 f4       	brne	.+34     	; 0xfa8 <_Z19operate_master_autov+0x15a>
		disable_proximity();
     f86:	10 9a       	sbi	0x02, 0	; 2
		rack_pickup = true;
     f88:	16 da       	rcall	.-3028   	; 0x3b6 <_Z17disable_proximityv>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <rack_pickup>
		rack_picktime = millis();
     f90:	1a da       	rcall	.-3020   	; 0x3c6 <_Z6millisv>
     f92:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <rack_picktime>
     f96:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <rack_picktime+0x1>
     f9a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <rack_picktime+0x2>
     f9e:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <rack_picktime+0x3>
		SLAVE_DATA = 0;
     fa2:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <rcv_value_slave>
     fa6:	42 c0       	rjmp	.+132    	; 0x102c <_Z19operate_master_autov+0x1de>
	}
	else if(!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && SLAVE_DATA == Give_shutcock)
     fa8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
     fac:	91 11       	cpse	r25, r1
     fae:	33 c0       	rjmp	.+102    	; 0x1016 <_Z19operate_master_autov+0x1c8>
     fb0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
     fb4:	91 11       	cpse	r25, r1
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <_Z19operate_master_autov+0x1c8>
     fb8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
     fbc:	91 11       	cpse	r25, r1
     fbe:	2b c0       	rjmp	.+86     	; 0x1016 <_Z19operate_master_autov+0x1c8>
     fc0:	88 30       	cpi	r24, 0x08	; 8
     fc2:	49 f5       	brne	.+82     	; 0x1016 <_Z19operate_master_autov+0x1c8>
	{
		if(inside_robot)
     fc4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
     fc8:	88 23       	and	r24, r24
		{
			pneumatic_geneva_start = true;
     fca:	81 f0       	breq	.+32     	; 0xfec <_Z19operate_master_autov+0x19e>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
     fd2:	f9 d9       	rcall	.-3086   	; 0x3c6 <_Z6millisv>
     fd4:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <pneumatic_geneva_time>
     fd8:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <pneumatic_geneva_time+0x1>
     fdc:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <pneumatic_geneva_time+0x2>
     fe0:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
     fe4:	88 b1       	in	r24, 0x08	; 8
     fe6:	80 58       	subi	r24, 0x80	; 128
     fe8:	88 b9       	out	0x08, r24	; 8
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     fea:	01 c0       	rjmp	.+2      	; 0xfee <_Z19operate_master_autov+0x1a0>
		}
		
		pass_the_shuttcock = true;
     fec:	47 98       	cbi	0x08, 7	; 8
     fee:	11 e0       	ldi	r17, 0x01	; 1
     ff0:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
     ff4:	e8 d9       	rcall	.-3120   	; 0x3c6 <_Z6millisv>
     ff6:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <passing_time>
     ffa:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <passing_time+0x1>
     ffe:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <passing_time+0x2>
    1002:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <passing_time+0x3>
		inside_robot = (1^inside_robot);
    1006:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    100a:	18 27       	eor	r17, r24
    100c:	10 93 02 02 	sts	0x0202, r17	; 0x800202 <inside_robot>
		SLAVE_DATA = 0;
    1010:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <rcv_value_slave>
    1014:	0b c0       	rjmp	.+22     	; 0x102c <_Z19operate_master_autov+0x1de>
	}
	else if(SLAVE_DATA == Give_GoldenRack)
    1016:	89 30       	cpi	r24, 0x09	; 9
	{
		RACK_GRIP_OPEN();
    1018:	21 f4       	brne	.+8      	; 0x1022 <_Z19operate_master_autov+0x1d4>
		SLAVE_DATA = 0;
    101a:	10 98       	cbi	0x02, 0	; 2
    101c:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <rcv_value_slave>
	}
	else if(SLAVE_DATA == enable_prox)
    1020:	05 c0       	rjmp	.+10     	; 0x102c <_Z19operate_master_autov+0x1de>
	{
		enable_proximity();		
    1022:	8a 30       	cpi	r24, 0x0A	; 10
    1024:	19 f4       	brne	.+6      	; 0x102c <_Z19operate_master_autov+0x1de>
		SLAVE_DATA = 0;
    1026:	bf d9       	rcall	.-3202   	; 0x3a6 <_Z16enable_proximityv>
    1028:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <rcv_value_slave>
	}
	
	
	if(rack_pickup && (millis()-rack_picktime) >= 500)
    102c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <rack_pickup>
    1030:	88 23       	and	r24, r24
    1032:	79 f1       	breq	.+94     	; 0x1092 <_Z19operate_master_autov+0x244>
    1034:	c8 d9       	rcall	.-3184   	; 0x3c6 <_Z6millisv>
    1036:	00 91 6f 02 	lds	r16, 0x026F	; 0x80026f <rack_picktime>
    103a:	10 91 70 02 	lds	r17, 0x0270	; 0x800270 <rack_picktime+0x1>
    103e:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <rack_picktime+0x2>
    1042:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <rack_picktime+0x3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	80 1b       	sub	r24, r16
    104c:	91 0b       	sbc	r25, r17
    104e:	a2 0b       	sbc	r26, r18
    1050:	b3 0b       	sbc	r27, r19
    1052:	84 3f       	cpi	r24, 0xF4	; 244
    1054:	91 40       	sbci	r25, 0x01	; 1
    1056:	a1 05       	cpc	r26, r1
    1058:	b1 05       	cpc	r27, r1
    105a:	d8 f0       	brcs	.+54     	; 0x1092 <_Z19operate_master_autov+0x244>
	{
		RACK_LIFT_OPEN();
    105c:	14 9a       	sbi	0x02, 4	; 2
		rack_pickup = false;
    105e:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <rack_pickup>
		
		if(rack_throw_auto)
    1062:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rack_throw_auto>
    1066:	88 23       	and	r24, r24
    1068:	89 f0       	breq	.+34     	; 0x108c <_Z19operate_master_autov+0x23e>
		{
			auto_move_rack = true;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <auto_move_rack>
			if(!Rack_home_position)
    1070:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Rack_home_position>
    1074:	81 11       	cpse	r24, r1
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <_Z19operate_master_autov+0x236>
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
    1080:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
				rack_motor_pid.Set_SP(RACK_COUNT);
			slave_work_category = Load1;
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
    108a:	0b c0       	rjmp	.+22     	; 0x10a2 <_Z19operate_master_autov+0x254>
		}
		else
		{
			slave_work_category = Golden_Rack;
    108c:	87 e0       	ldi	r24, 0x07	; 7
    108e:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <slave_work_category>
		}
		
	}
	
	//if not rack auto move stop rack motor
	if(!auto_move_rack)
    1092:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <auto_move_rack>
    1096:	81 11       	cpse	r24, r1
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <_Z19operate_master_autov+0x254>
    109a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <rack_motor_pid+0xd>
		rack_motor_pid.Set_SP(0);
		
	operation_of_rack();
    109e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xc>
	rack_limit_check();
    10a2:	bb dc       	rcall	.-1674   	; 0xa1a <_Z17operation_of_rackv>
    10a4:	30 da       	rcall	.-2976   	; 0x506 <_Z16rack_limit_checkv>
	orientation_check();
    10a6:	a5 de       	rcall	.-694    	; 0xdf2 <_Z17orientation_checkv>
    10a8:	1f 91       	pop	r17
}
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <_Z21operate_master_manualv>:
    10ae:	0f 93       	push	r16


void operate_master_manual()
{
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
	/**********************************************GAMEBUTTONB_SECTION*********************************/
	SET(MANUAL_LED_STRIP);
    10b6:	46 9a       	sbi	0x08, 6	; 8
	CLEAR(AUTO_LED_STRIP);
    10b8:	a0 98       	cbi	0x14, 0	; 20
	
	if (GAMEBUTTONB == RIGHT)
    10ba:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <rcvdata+0x1>
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	51 f4       	brne	.+20     	; 0x10d6 <_Z21operate_master_manualv+0x28>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    10c2:	e2 e8       	ldi	r30, 0x82	; 130
    10c4:	f2 e0       	ldi	r31, 0x02	; 2
    10c6:	92 e3       	ldi	r25, 0x32	; 50
    10c8:	90 83       	st	Z, r25
		velocity_robot[1] = RESETDATA_JOYSTICK + robot_rpm;
    10ca:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <robot_rpm>
    10ce:	8e 5c       	subi	r24, 0xCE	; 206
    10d0:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    10d2:	92 83       	std	Z+2, r25	; 0x02
    10d4:	25 c0       	rjmp	.+74     	; 0x1120 <_Z21operate_master_manualv+0x72>
	}
	else if (GAMEBUTTONB == LEFT)
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	59 f4       	brne	.+22     	; 0x10f0 <_Z21operate_master_manualv+0x42>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    10da:	e2 e8       	ldi	r30, 0x82	; 130
    10dc:	f2 e0       	ldi	r31, 0x02	; 2
    10de:	82 e3       	ldi	r24, 0x32	; 50
    10e0:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK - robot_rpm;
    10e2:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <robot_rpm>
    10e6:	28 2f       	mov	r18, r24
    10e8:	29 1b       	sub	r18, r25
    10ea:	21 83       	std	Z+1, r18	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    10ec:	82 83       	std	Z+2, r24	; 0x02
    10ee:	18 c0       	rjmp	.+48     	; 0x1120 <_Z21operate_master_manualv+0x72>
	}
	else if (GAMEBUTTONB == UP)
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	51 f4       	brne	.+20     	; 0x1108 <_Z21operate_master_manualv+0x5a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK + robot_rpm;
    10f4:	e2 e8       	ldi	r30, 0x82	; 130
    10f6:	f2 e0       	ldi	r31, 0x02	; 2
    10f8:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <robot_rpm>
    10fc:	8e 5c       	subi	r24, 0xCE	; 206
    10fe:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
    1100:	82 e3       	ldi	r24, 0x32	; 50
    1102:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    1104:	82 83       	std	Z+2, r24	; 0x02
    1106:	0c c0       	rjmp	.+24     	; 0x1120 <_Z21operate_master_manualv+0x72>
		//front_drive = true;
		
	}
	else if (GAMEBUTTONB == DOWN)
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	51 f4       	brne	.+20     	; 0x1120 <_Z21operate_master_manualv+0x72>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK - robot_rpm;
    110c:	e2 e8       	ldi	r30, 0x82	; 130
    110e:	f2 e0       	ldi	r31, 0x02	; 2
    1110:	82 e3       	ldi	r24, 0x32	; 50
    1112:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <robot_rpm>
    1116:	68 2f       	mov	r22, r24
    1118:	69 1b       	sub	r22, r25
    111a:	60 83       	st	Z, r22
		velocity_robot[1] = RESETDATA_JOYSTICK;
    111c:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    111e:	82 83       	std	Z+2, r24	; 0x02
		//back_drive = true;
	}
	
	
	/**********************************************************************GAMEBUTTONA_SECTION****************************/
	if(GAMEBUTTONA == START_BUTTON)
    1120:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <rcvdata>
    1124:	80 34       	cpi	r24, 0x40	; 64
    1126:	31 f4       	brne	.+12     	; 0x1134 <_Z21operate_master_manualv+0x86>
	{
		auto_mode = true;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <auto_mode>
		GAMEBUTTONA = 0;
    112e:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
    1132:	8c c0       	rjmp	.+280    	; 0x124c <_Z21operate_master_manualv+0x19e>
	}
	else if (GAMEBUTTONA == BUTTON_A)
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	31 f4       	brne	.+12     	; 0x1144 <_Z21operate_master_manualv+0x96>
	{
		RACK_GRIP_TOGGLE();
    1138:	92 b1       	in	r25, 0x02	; 2
    113a:	89 27       	eor	r24, r25
    113c:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    113e:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
    1142:	84 c0       	rjmp	.+264    	; 0x124c <_Z21operate_master_manualv+0x19e>
	}
	else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	59 f4       	brne	.+22     	; 0x115e <_Z21operate_master_manualv+0xb0>
    1148:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <Rack_home_position>
    114c:	91 11       	cpse	r25, r1
    114e:	48 c0       	rjmp	.+144    	; 0x11e0 <_Z21operate_master_manualv+0x132>
	{
		RACK_LIFT_TOGGLE();
    1150:	92 b1       	in	r25, 0x02	; 2
    1152:	80 e1       	ldi	r24, 0x10	; 16
    1154:	89 27       	eor	r24, r25
    1156:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    1158:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
    115c:	77 c0       	rjmp	.+238    	; 0x124c <_Z21operate_master_manualv+0x19e>
	}
	else if (GAMEBUTTONA == BUTTON_X)
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	b9 f4       	brne	.+46     	; 0x1190 <_Z21operate_master_manualv+0xe2>
	{
		auto_move_rack = true;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <auto_move_rack>
		if(Rack_home_position)
    1168:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Rack_home_position>
    116c:	88 23       	and	r24, r24
    116e:	39 f0       	breq	.+14     	; 0x117e <_Z21operate_master_manualv+0xd0>
    1170:	8d ef       	ldi	r24, 0xFD	; 253
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
    1178:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
    117c:	06 c0       	rjmp	.+12     	; 0x118a <_Z21operate_master_manualv+0xdc>
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
    1186:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
		}
		else
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		GAMEBUTTONA = 0;
    118a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
    118e:	6f c0       	rjmp	.+222    	; 0x126e <_Z21operate_master_manualv+0x1c0>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
    1190:	88 30       	cpi	r24, 0x08	; 8
    1192:	61 f4       	brne	.+24     	; 0x11ac <_Z21operate_master_manualv+0xfe>
    1194:	88 e6       	ldi	r24, 0x68	; 104
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <angle_pid+0xd>
    119c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <angle_pid+0xc>
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <Geneva_Start>
		GAMEBUTTONA = 0;
    11a6:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
    11aa:	50 c0       	rjmp	.+160    	; 0x124c <_Z21operate_master_manualv+0x19e>
	}
	else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
    11ac:	80 31       	cpi	r24, 0x10	; 16
    11ae:	c1 f4       	brne	.+48     	; 0x11e0 <_Z21operate_master_manualv+0x132>
    11b0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <Rack_home_position>
    11b4:	91 11       	cpse	r25, r1
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <_Z21operate_master_manualv+0x132>
	{
		auto_move_rack = true;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <auto_move_rack>
		rack_throw_auto = true;
    11be:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rack_throw_auto>
		SHUTTCOCK_PASS_OPEN();
    11c2:	16 9a       	sbi	0x02, 6	; 2
		RACK_LIFT_OPEN();
    11c4:	14 9a       	sbi	0x02, 4	; 2
		if(!Rack_home_position)
    11c6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Rack_home_position>
    11ca:	81 11       	cpse	r24, r1
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <_Z21operate_master_manualv+0x12c>
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
    11d6:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
			rack_motor_pid.Set_SP(RACK_COUNT);
		GAMEBUTTONA = 0;
    11da:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>
    11de:	36 c0       	rjmp	.+108    	; 0x124c <_Z21operate_master_manualv+0x19e>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	
    11e0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <pass_the_shuttcock>
    11e4:	91 11       	cpse	r25, r1
    11e6:	32 c0       	rjmp	.+100    	; 0x124c <_Z21operate_master_manualv+0x19e>
    11e8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <rack_throw_auto>
    11ec:	91 11       	cpse	r25, r1
    11ee:	2e c0       	rjmp	.+92     	; 0x124c <_Z21operate_master_manualv+0x19e>
    11f0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <pneumatic_geneva_start>
    11f4:	91 11       	cpse	r25, r1
    11f6:	2a c0       	rjmp	.+84     	; 0x124c <_Z21operate_master_manualv+0x19e>
    11f8:	80 32       	cpi	r24, 0x20	; 32
    11fa:	41 f5       	brne	.+80     	; 0x124c <_Z21operate_master_manualv+0x19e>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
    11fc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    1200:	88 23       	and	r24, r24
    1202:	81 f0       	breq	.+32     	; 0x1224 <_Z21operate_master_manualv+0x176>
		{
			pneumatic_geneva_start = true;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <pneumatic_geneva_start>
			pneumatic_geneva_time = millis();
    120a:	dd d8       	rcall	.-3654   	; 0x3c6 <_Z6millisv>
    120c:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <pneumatic_geneva_time>
    1210:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <pneumatic_geneva_time+0x1>
    1214:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <pneumatic_geneva_time+0x2>
    1218:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <pneumatic_geneva_time+0x3>
			SHUTTCOCK_GRIP_TOGGLE();
    121c:	88 b1       	in	r24, 0x08	; 8
    121e:	80 58       	subi	r24, 0x80	; 128
    1220:	88 b9       	out	0x08, r24	; 8
    1222:	01 c0       	rjmp	.+2      	; 0x1226 <_Z21operate_master_manualv+0x178>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    1224:	47 98       	cbi	0x08, 7	; 8
		}
		
		pass_the_shuttcock = true;
    1226:	c1 e0       	ldi	r28, 0x01	; 1
    1228:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pass_the_shuttcock>
		passing_time = millis();
    122c:	cc d8       	rcall	.-3688   	; 0x3c6 <_Z6millisv>
    122e:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <passing_time>
    1232:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <passing_time+0x1>
    1236:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <passing_time+0x2>
    123a:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <passing_time+0x3>
		inside_robot = (1^inside_robot);
    123e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <inside_robot>
    1242:	c8 27       	eor	r28, r24
    1244:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <inside_robot>
		GAMEBUTTONA = 0;
    1248:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <rcvdata>

	
	

	/**************************************************Rack Operation******************************************************/
	if (!auto_move_rack)
    124c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <auto_move_rack>
    1250:	81 11       	cpse	r24, r1
    1252:	0d c0       	rjmp	.+26     	; 0x126e <_Z21operate_master_manualv+0x1c0>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
    1254:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <rcvdata+0x2>
    1258:	85 31       	cpi	r24, 0x15	; 21
    125a:	08 f4       	brcc	.+2      	; 0x125e <_Z21operate_master_manualv+0x1b0>
    125c:	ae c0       	rjmp	.+348    	; 0x13ba <_Z21operate_master_manualv+0x30c>
    125e:	1c 99       	sbic	0x03, 4	; 3
    1260:	a5 c0       	rjmp	.+330    	; 0x13ac <_Z21operate_master_manualv+0x2fe>
    1262:	ab c0       	rjmp	.+342    	; 0x13ba <_Z21operate_master_manualv+0x30c>
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 && READ(LTSWITCH_RACK_FINAL))
    1264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1268:	86 fd       	sbrc	r24, 6
    126a:	ad c0       	rjmp	.+346    	; 0x13c6 <_Z21operate_master_manualv+0x318>
    126c:	b3 c0       	rjmp	.+358    	; 0x13d4 <_Z21operate_master_manualv+0x326>
		else
			rack_motor_pid.Set_SP(0);
	}
	
	/*********************************************************************Move using joystick analog stick********************************************/
	if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
    126e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <rcvdata+0x5>
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 01       	movw	r18, r24
    1276:	22 53       	subi	r18, 0x32	; 50
    1278:	31 09       	sbc	r19, r1
    127a:	12 16       	cp	r1, r18
    127c:	13 06       	cpc	r1, r19
    127e:	24 f4       	brge	.+8      	; 0x1288 <_Z21operate_master_manualv+0x1da>
    1280:	26 30       	cpi	r18, 0x06	; 6
    1282:	31 05       	cpc	r19, r1
    1284:	44 f0       	brlt	.+16     	; 0x1296 <_Z21operate_master_manualv+0x1e8>
    1286:	32 c0       	rjmp	.+100    	; 0x12ec <_Z21operate_master_manualv+0x23e>
    1288:	42 e3       	ldi	r20, 0x32	; 50
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	fa 01       	movw	r30, r20
    128e:	e8 1b       	sub	r30, r24
    1290:	f9 0b       	sbc	r31, r25
    1292:	36 97       	sbiw	r30, 0x06	; 6
    1294:	5c f5       	brge	.+86     	; 0x12ec <_Z21operate_master_manualv+0x23e>
    1296:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <rcvdata+0x4>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	ac 01       	movw	r20, r24
    129e:	42 53       	subi	r20, 0x32	; 50
    12a0:	51 09       	sbc	r21, r1
    12a2:	14 16       	cp	r1, r20
    12a4:	15 06       	cpc	r1, r21
    12a6:	24 f4       	brge	.+8      	; 0x12b0 <_Z21operate_master_manualv+0x202>
    12a8:	46 30       	cpi	r20, 0x06	; 6
    12aa:	51 05       	cpc	r21, r1
    12ac:	4c f0       	brlt	.+18     	; 0x12c0 <_Z21operate_master_manualv+0x212>
    12ae:	1e c0       	rjmp	.+60     	; 0x12ec <_Z21operate_master_manualv+0x23e>
    12b0:	42 e3       	ldi	r20, 0x32	; 50
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	ba 01       	movw	r22, r20
    12b6:	68 1b       	sub	r22, r24
    12b8:	79 0b       	sbc	r23, r25
    12ba:	66 30       	cpi	r22, 0x06	; 6
    12bc:	71 05       	cpc	r23, r1
    12be:	b4 f4       	brge	.+44     	; 0x12ec <_Z21operate_master_manualv+0x23e>
    12c0:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <rcvdata+0x6>
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	ac 01       	movw	r20, r24
    12c8:	42 53       	subi	r20, 0x32	; 50
    12ca:	51 09       	sbc	r21, r1
    12cc:	14 16       	cp	r1, r20
    12ce:	15 06       	cpc	r1, r21
    12d0:	2c f4       	brge	.+10     	; 0x12dc <_Z21operate_master_manualv+0x22e>
    12d2:	46 30       	cpi	r20, 0x06	; 6
    12d4:	51 05       	cpc	r21, r1
    12d6:	0c f4       	brge	.+2      	; 0x12da <_Z21operate_master_manualv+0x22c>
    12d8:	63 c0       	rjmp	.+198    	; 0x13a0 <_Z21operate_master_manualv+0x2f2>
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <_Z21operate_master_manualv+0x23e>
    12dc:	42 e3       	ldi	r20, 0x32	; 50
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	fa 01       	movw	r30, r20
    12e2:	e8 1b       	sub	r30, r24
    12e4:	f9 0b       	sbc	r31, r25
    12e6:	36 97       	sbiw	r30, 0x06	; 6
    12e8:	0c f4       	brge	.+2      	; 0x12ec <_Z21operate_master_manualv+0x23e>
    12ea:	5a c0       	rjmp	.+180    	; 0x13a0 <_Z21operate_master_manualv+0x2f2>
	{
		rampupflag_start = true;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <rampupflag_start>
		velocity_robot[0] = (LEFTSTICKY-50)*timer_count/60.0 + 50;
    12f2:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <timer_count>
    12f6:	c2 e8       	ldi	r28, 0x82	; 130
    12f8:	d2 e0       	ldi	r29, 0x02	; 2
    12fa:	42 03       	mulsu	r20, r18
    12fc:	b0 01       	movw	r22, r0
    12fe:	43 9f       	mul	r20, r19
    1300:	70 0d       	add	r23, r0
    1302:	11 24       	eor	r1, r1
    1304:	07 2e       	mov	r0, r23
    1306:	00 0c       	add	r0, r0
    1308:	88 0b       	sbc	r24, r24
    130a:	99 0b       	sbc	r25, r25
    130c:	5a d2       	rcall	.+1204   	; 0x17c2 <__floatsisf>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e7       	ldi	r20, 0x70	; 112
    1314:	52 e4       	ldi	r21, 0x42	; 66
    1316:	ba d1       	rcall	.+884    	; 0x168c <__divsf3>
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	48 e4       	ldi	r20, 0x48	; 72
    131e:	52 e4       	ldi	r21, 0x42	; 66
    1320:	4d d1       	rcall	.+666    	; 0x15bc <__addsf3>
    1322:	21 d2       	rcall	.+1090   	; 0x1766 <__fixunssfsi>
    1324:	68 83       	st	Y, r22
		velocity_robot[1] = (LEFTSTICKX-50)*timer_count/60.0 + 50;
    1326:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <timer_count>
    132a:	09 e8       	ldi	r16, 0x89	; 137
    132c:	12 e0       	ldi	r17, 0x02	; 2
    132e:	f8 01       	movw	r30, r16
    1330:	24 81       	ldd	r18, Z+4	; 0x04
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	22 53       	subi	r18, 0x32	; 50
    1336:	31 09       	sbc	r19, r1
    1338:	42 03       	mulsu	r20, r18
    133a:	b0 01       	movw	r22, r0
    133c:	43 9f       	mul	r20, r19
    133e:	70 0d       	add	r23, r0
    1340:	11 24       	eor	r1, r1
    1342:	07 2e       	mov	r0, r23
    1344:	00 0c       	add	r0, r0
    1346:	88 0b       	sbc	r24, r24
    1348:	99 0b       	sbc	r25, r25
    134a:	3b d2       	rcall	.+1142   	; 0x17c2 <__floatsisf>
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e7       	ldi	r20, 0x70	; 112
    1352:	52 e4       	ldi	r21, 0x42	; 66
    1354:	9b d1       	rcall	.+822    	; 0x168c <__divsf3>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	48 e4       	ldi	r20, 0x48	; 72
    135c:	52 e4       	ldi	r21, 0x42	; 66
    135e:	2e d1       	rcall	.+604    	; 0x15bc <__addsf3>
    1360:	02 d2       	rcall	.+1028   	; 0x1766 <__fixunssfsi>
    1362:	69 83       	std	Y+1, r22	; 0x01
		velocity_robot[2] = (RIGHTSTICKX-50)*timer_count/60.0 + 50;
    1364:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <timer_count>
    1368:	f8 01       	movw	r30, r16
    136a:	26 81       	ldd	r18, Z+6	; 0x06
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	22 53       	subi	r18, 0x32	; 50
    1370:	31 09       	sbc	r19, r1
    1372:	42 03       	mulsu	r20, r18
    1374:	b0 01       	movw	r22, r0
    1376:	43 9f       	mul	r20, r19
    1378:	70 0d       	add	r23, r0
    137a:	11 24       	eor	r1, r1
    137c:	07 2e       	mov	r0, r23
    137e:	00 0c       	add	r0, r0
    1380:	88 0b       	sbc	r24, r24
    1382:	99 0b       	sbc	r25, r25
    1384:	1e d2       	rcall	.+1084   	; 0x17c2 <__floatsisf>
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e7       	ldi	r20, 0x70	; 112
    138c:	52 e4       	ldi	r21, 0x42	; 66
    138e:	7e d1       	rcall	.+764    	; 0x168c <__divsf3>
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	48 e4       	ldi	r20, 0x48	; 72
    1396:	52 e4       	ldi	r21, 0x42	; 66
    1398:	11 d1       	rcall	.+546    	; 0x15bc <__addsf3>
	}
	else
	rampupflag_start = false;
    139a:	e5 d1       	rcall	.+970    	; 0x1766 <__fixunssfsi>
    139c:	6a 83       	std	Y+2, r22	; 0x02
	
	operation_of_rack();	
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <_Z21operate_master_manualv+0x2f6>
    13a0:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <rampupflag_start>
	rack_limit_check();
    13a4:	3a db       	rcall	.-2444   	; 0xa1a <_Z17operation_of_rackv>
	orientation_check();
    13a6:	af d8       	rcall	.-3746   	; 0x506 <_Z16rack_limit_checkv>
    13a8:	24 dd       	rcall	.-1464   	; 0xdf2 <_Z17orientation_checkv>

}
    13aa:	19 c0       	rjmp	.+50     	; 0x13de <_Z21operate_master_manualv+0x330>
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
    13b4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
    13b8:	5a cf       	rjmp	.-332    	; 0x126e <_Z21operate_master_manualv+0x1c0>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 && READ(LTSWITCH_RACK_FINAL))
    13ba:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <rcvdata+0x3>
    13be:	85 31       	cpi	r24, 0x15	; 21
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <_Z21operate_master_manualv+0x316>
    13c2:	50 cf       	rjmp	.-352    	; 0x1264 <_Z21operate_master_manualv+0x1b6>
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <_Z21operate_master_manualv+0x326>
    13c6:	8d ef       	ldi	r24, 0xFD	; 253
    13c8:	9f ef       	ldi	r25, 0xFF	; 255
    13ca:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rack_motor_pid+0xd>
    13ce:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rack_motor_pid+0xc>
    13d2:	4d cf       	rjmp	.-358    	; 0x126e <_Z21operate_master_manualv+0x1c0>
    13d4:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <rack_motor_pid+0xd>
    13d8:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rack_motor_pid+0xc>
    13dc:	48 cf       	rjmp	.-368    	; 0x126e <_Z21operate_master_manualv+0x1c0>
	
	operation_of_rack();	
	rack_limit_check();
	orientation_check();

}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <__vector_21>:
//Global timer interrupt

/***********************************Ramping from the joystick analog button*************************************/

ISR(TIMER0_COMPA_vect)
{
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	8f 93       	push	r24
	if (rampupflag_start)
    13f4:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <rampupflag_start>
    13f8:	88 23       	and	r24, r24
    13fa:	31 f0       	breq	.+12     	; 0x1408 <__vector_21+0x20>
	timer_count++;
    13fc:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <timer_count>
    1400:	8f 5f       	subi	r24, 0xFF	; 255
    1402:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <timer_count>
    1406:	02 c0       	rjmp	.+4      	; 0x140c <__vector_21+0x24>
	else
	timer_count = 0;
    1408:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <timer_count>
	
	if (timer_count > 60)
    140c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <timer_count>
    1410:	8d 33       	cpi	r24, 0x3D	; 61
    1412:	1c f0       	brlt	.+6      	; 0x141a <__vector_21+0x32>
	timer_count = 60;
    1414:	8c e3       	ldi	r24, 0x3C	; 60
    1416:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <timer_count>
	

}
    141a:	8f 91       	pop	r24
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <__vector_6>:

/**********************************************************PROXIMITY_INTERRUPT***********************************************************************/
ISR(PROXIMITY_VECT)
{
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	0b b6       	in	r0, 0x3b	; 59
    1432:	0f 92       	push	r0
    1434:	8f 93       	push	r24
    1436:	9f 93       	push	r25
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
	//pcint for slave on to stop the robot
	TOGGLE(STOP_SLAVE);
    143c:	eb e0       	ldi	r30, 0x0B	; 11
    143e:	f1 e0       	ldi	r31, 0x01	; 1
    1440:	90 81       	ld	r25, Z
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	89 27       	eor	r24, r25
    1446:	80 83       	st	Z, r24
}
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	9f 91       	pop	r25
    144e:	8f 91       	pop	r24
    1450:	0f 90       	pop	r0
    1452:	0b be       	out	0x3b, r0	; 59
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    145e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    1462:	87 e6       	ldi	r24, 0x67	; 103
    1464:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    1468:	88 e9       	ldi	r24, 0x98	; 152
    146a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    146e:	86 e0       	ldi	r24, 0x06	; 6
    1470:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    1474:	08 95       	ret

00001476 <_Z9initUART2v>:
    1476:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_ZL9datacount>
    147a:	e9 e8       	ldi	r30, 0x89	; 137
    147c:	f2 e0       	ldi	r31, 0x02	; 2
    147e:	10 82       	st	Z, r1
    1480:	11 82       	std	Z+1, r1	; 0x01
    1482:	12 82       	std	Z+2, r1	; 0x02
    1484:	13 82       	std	Z+3, r1	; 0x03
    1486:	82 e3       	ldi	r24, 0x32	; 50
    1488:	84 83       	std	Z+4, r24	; 0x04
    148a:	85 83       	std	Z+5, r24	; 0x05
    148c:	86 83       	std	Z+6, r24	; 0x06
    148e:	87 83       	std	Z+7, r24	; 0x07
    1490:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
    1494:	89 e1       	ldi	r24, 0x19	; 25
    1496:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
    149a:	88 e9       	ldi	r24, 0x98	; 152
    149c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
    14a0:	86 e0       	ldi	r24, 0x06	; 6
    14a2:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
    14a6:	08 95       	ret

000014a8 <_Z9initUART3v>:
    14a8:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <rcv_value_slave>
    14ac:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    14b6:	88 e9       	ldi	r24, 0x98	; 152
    14b8:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    14bc:	86 e0       	ldi	r24, 0x06	; 6
    14be:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
    14c2:	08 95       	ret

000014c4 <_Z13UART3Transmith>:
    14c4:	e0 e3       	ldi	r30, 0x30	; 48
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	90 81       	ld	r25, Z
    14ca:	95 ff       	sbrs	r25, 5
    14cc:	fd cf       	rjmp	.-6      	; 0x14c8 <_Z13UART3Transmith+0x4>
    14ce:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    14d2:	08 95       	ret

000014d4 <__vector_25>:

ISR(USART0_RX_vect)
{
    14d4:	1f 92       	push	r1
    14d6:	0f 92       	push	r0
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	0f 92       	push	r0
    14dc:	11 24       	eor	r1, r1
    14de:	8f 93       	push	r24
	buffer=UDR0;
    14e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    14e4:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <buffer>
}
    14e8:	8f 91       	pop	r24
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <__vector_36>:

ISR(USART1_RX_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	8f 93       	push	r24
	buffer1=UDR1;
    1500:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1504:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <buffer1>
	
}
    1508:	8f 91       	pop	r24
    150a:	0f 90       	pop	r0
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	0f 90       	pop	r0
    1510:	1f 90       	pop	r1
    1512:	18 95       	reti

00001514 <__vector_51>:

ISR(USART2_RX_vect)
{
    1514:	1f 92       	push	r1
    1516:	0f 92       	push	r0
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	0f 92       	push	r0
    151c:	11 24       	eor	r1, r1
    151e:	0b b6       	in	r0, 0x3b	; 59
    1520:	0f 92       	push	r0
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
	buffer2=UDR2;
    152a:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    152e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <buffer2>
		if(rcvflag)
    1532:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <rcvflag>
    1536:	99 23       	and	r25, r25
    1538:	89 f0       	breq	.+34     	; 0x155c <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    153a:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <_ZL9datacount>
    153e:	e9 2f       	mov	r30, r25
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	e7 57       	subi	r30, 0x77	; 119
    1544:	fd 4f       	sbci	r31, 0xFD	; 253
    1546:	80 83       	st	Z, r24
			datacount++;
    1548:	9f 5f       	subi	r25, 0xFF	; 255
			if(datacount>7)
    154a:	98 30       	cpi	r25, 0x08	; 8
    154c:	18 f4       	brcc	.+6      	; 0x1554 <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    154e:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <_ZL9datacount>
    1552:	04 c0       	rjmp	.+8      	; 0x155c <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    1554:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <_ZL9datacount>
				rcvflag = false; 
    1558:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <rcvflag>
			}
		}
		if(buffer2==START_BYTE)
    155c:	8f 37       	cpi	r24, 0x7F	; 127
    155e:	19 f4       	brne	.+6      	; 0x1566 <__vector_51+0x52>
			rcvflag=true;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <rcvflag>
		
}
    1566:	ff 91       	pop	r31
    1568:	ef 91       	pop	r30
    156a:	9f 91       	pop	r25
    156c:	8f 91       	pop	r24
    156e:	0f 90       	pop	r0
    1570:	0b be       	out	0x3b, r0	; 59
    1572:	0f 90       	pop	r0
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	0f 90       	pop	r0
    1578:	1f 90       	pop	r1
    157a:	18 95       	reti

0000157c <__vector_54>:


ISR(USART3_RX_vect)
{
    157c:	1f 92       	push	r1
    157e:	0f 92       	push	r0
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	0f 92       	push	r0
    1584:	11 24       	eor	r1, r1
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
	buffer3=UDR3;
    158a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    158e:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <buffer3>
	
	if(rcv_slave_flag)
    1592:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <rcv_slave_flag>
    1596:	99 23       	and	r25, r25
    1598:	21 f0       	breq	.+8      	; 0x15a2 <__vector_54+0x26>
	{
		rcv_value_slave = buffer3;
    159a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <rcv_value_slave>
		rcv_slave_flag = false;
    159e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <rcv_slave_flag>
	}
	if(buffer3 == START_BYTE_MASTER)
    15a2:	8c 3f       	cpi	r24, 0xFC	; 252
    15a4:	19 f4       	brne	.+6      	; 0x15ac <__vector_54+0x30>
		rcv_slave_flag = true;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <rcv_slave_flag>
}
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__subsf3>:
    15ba:	50 58       	subi	r21, 0x80	; 128

000015bc <__addsf3>:
    15bc:	bb 27       	eor	r27, r27
    15be:	aa 27       	eor	r26, r26
    15c0:	0e d0       	rcall	.+28     	; 0x15de <__addsf3x>
    15c2:	75 c1       	rjmp	.+746    	; 0x18ae <__fp_round>
    15c4:	66 d1       	rcall	.+716    	; 0x1892 <__fp_pscA>
    15c6:	30 f0       	brcs	.+12     	; 0x15d4 <__addsf3+0x18>
    15c8:	6b d1       	rcall	.+726    	; 0x18a0 <__fp_pscB>
    15ca:	20 f0       	brcs	.+8      	; 0x15d4 <__addsf3+0x18>
    15cc:	31 f4       	brne	.+12     	; 0x15da <__addsf3+0x1e>
    15ce:	9f 3f       	cpi	r25, 0xFF	; 255
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <__addsf3+0x1a>
    15d2:	1e f4       	brtc	.+6      	; 0x15da <__addsf3+0x1e>
    15d4:	5b c1       	rjmp	.+694    	; 0x188c <__fp_nan>
    15d6:	0e f4       	brtc	.+2      	; 0x15da <__addsf3+0x1e>
    15d8:	e0 95       	com	r30
    15da:	e7 fb       	bst	r30, 7
    15dc:	51 c1       	rjmp	.+674    	; 0x1880 <__fp_inf>

000015de <__addsf3x>:
    15de:	e9 2f       	mov	r30, r25
    15e0:	77 d1       	rcall	.+750    	; 0x18d0 <__fp_split3>
    15e2:	80 f3       	brcs	.-32     	; 0x15c4 <__addsf3+0x8>
    15e4:	ba 17       	cp	r27, r26
    15e6:	62 07       	cpc	r22, r18
    15e8:	73 07       	cpc	r23, r19
    15ea:	84 07       	cpc	r24, r20
    15ec:	95 07       	cpc	r25, r21
    15ee:	18 f0       	brcs	.+6      	; 0x15f6 <__addsf3x+0x18>
    15f0:	71 f4       	brne	.+28     	; 0x160e <__addsf3x+0x30>
    15f2:	9e f5       	brtc	.+102    	; 0x165a <__addsf3x+0x7c>
    15f4:	8f c1       	rjmp	.+798    	; 0x1914 <__fp_zero>
    15f6:	0e f4       	brtc	.+2      	; 0x15fa <__addsf3x+0x1c>
    15f8:	e0 95       	com	r30
    15fa:	0b 2e       	mov	r0, r27
    15fc:	ba 2f       	mov	r27, r26
    15fe:	a0 2d       	mov	r26, r0
    1600:	0b 01       	movw	r0, r22
    1602:	b9 01       	movw	r22, r18
    1604:	90 01       	movw	r18, r0
    1606:	0c 01       	movw	r0, r24
    1608:	ca 01       	movw	r24, r20
    160a:	a0 01       	movw	r20, r0
    160c:	11 24       	eor	r1, r1
    160e:	ff 27       	eor	r31, r31
    1610:	59 1b       	sub	r21, r25
    1612:	99 f0       	breq	.+38     	; 0x163a <__addsf3x+0x5c>
    1614:	59 3f       	cpi	r21, 0xF9	; 249
    1616:	50 f4       	brcc	.+20     	; 0x162c <__addsf3x+0x4e>
    1618:	50 3e       	cpi	r21, 0xE0	; 224
    161a:	68 f1       	brcs	.+90     	; 0x1676 <__addsf3x+0x98>
    161c:	1a 16       	cp	r1, r26
    161e:	f0 40       	sbci	r31, 0x00	; 0
    1620:	a2 2f       	mov	r26, r18
    1622:	23 2f       	mov	r18, r19
    1624:	34 2f       	mov	r19, r20
    1626:	44 27       	eor	r20, r20
    1628:	58 5f       	subi	r21, 0xF8	; 248
    162a:	f3 cf       	rjmp	.-26     	; 0x1612 <__addsf3x+0x34>
    162c:	46 95       	lsr	r20
    162e:	37 95       	ror	r19
    1630:	27 95       	ror	r18
    1632:	a7 95       	ror	r26
    1634:	f0 40       	sbci	r31, 0x00	; 0
    1636:	53 95       	inc	r21
    1638:	c9 f7       	brne	.-14     	; 0x162c <__addsf3x+0x4e>
    163a:	7e f4       	brtc	.+30     	; 0x165a <__addsf3x+0x7c>
    163c:	1f 16       	cp	r1, r31
    163e:	ba 0b       	sbc	r27, r26
    1640:	62 0b       	sbc	r22, r18
    1642:	73 0b       	sbc	r23, r19
    1644:	84 0b       	sbc	r24, r20
    1646:	ba f0       	brmi	.+46     	; 0x1676 <__addsf3x+0x98>
    1648:	91 50       	subi	r25, 0x01	; 1
    164a:	a1 f0       	breq	.+40     	; 0x1674 <__addsf3x+0x96>
    164c:	ff 0f       	add	r31, r31
    164e:	bb 1f       	adc	r27, r27
    1650:	66 1f       	adc	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	c2 f7       	brpl	.-16     	; 0x1648 <__addsf3x+0x6a>
    1658:	0e c0       	rjmp	.+28     	; 0x1676 <__addsf3x+0x98>
    165a:	ba 0f       	add	r27, r26
    165c:	62 1f       	adc	r22, r18
    165e:	73 1f       	adc	r23, r19
    1660:	84 1f       	adc	r24, r20
    1662:	48 f4       	brcc	.+18     	; 0x1676 <__addsf3x+0x98>
    1664:	87 95       	ror	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b7 95       	ror	r27
    166c:	f7 95       	ror	r31
    166e:	9e 3f       	cpi	r25, 0xFE	; 254
    1670:	08 f0       	brcs	.+2      	; 0x1674 <__addsf3x+0x96>
    1672:	b3 cf       	rjmp	.-154    	; 0x15da <__addsf3+0x1e>
    1674:	93 95       	inc	r25
    1676:	88 0f       	add	r24, r24
    1678:	08 f0       	brcs	.+2      	; 0x167c <__addsf3x+0x9e>
    167a:	99 27       	eor	r25, r25
    167c:	ee 0f       	add	r30, r30
    167e:	97 95       	ror	r25
    1680:	87 95       	ror	r24
    1682:	08 95       	ret

00001684 <__cmpsf2>:
    1684:	d9 d0       	rcall	.+434    	; 0x1838 <__fp_cmp>
    1686:	08 f4       	brcc	.+2      	; 0x168a <__cmpsf2+0x6>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	08 95       	ret

0000168c <__divsf3>:
    168c:	0c d0       	rcall	.+24     	; 0x16a6 <__divsf3x>
    168e:	0f c1       	rjmp	.+542    	; 0x18ae <__fp_round>
    1690:	07 d1       	rcall	.+526    	; 0x18a0 <__fp_pscB>
    1692:	40 f0       	brcs	.+16     	; 0x16a4 <__divsf3+0x18>
    1694:	fe d0       	rcall	.+508    	; 0x1892 <__fp_pscA>
    1696:	30 f0       	brcs	.+12     	; 0x16a4 <__divsf3+0x18>
    1698:	21 f4       	brne	.+8      	; 0x16a2 <__divsf3+0x16>
    169a:	5f 3f       	cpi	r21, 0xFF	; 255
    169c:	19 f0       	breq	.+6      	; 0x16a4 <__divsf3+0x18>
    169e:	f0 c0       	rjmp	.+480    	; 0x1880 <__fp_inf>
    16a0:	51 11       	cpse	r21, r1
    16a2:	39 c1       	rjmp	.+626    	; 0x1916 <__fp_szero>
    16a4:	f3 c0       	rjmp	.+486    	; 0x188c <__fp_nan>

000016a6 <__divsf3x>:
    16a6:	14 d1       	rcall	.+552    	; 0x18d0 <__fp_split3>
    16a8:	98 f3       	brcs	.-26     	; 0x1690 <__divsf3+0x4>

000016aa <__divsf3_pse>:
    16aa:	99 23       	and	r25, r25
    16ac:	c9 f3       	breq	.-14     	; 0x16a0 <__divsf3+0x14>
    16ae:	55 23       	and	r21, r21
    16b0:	b1 f3       	breq	.-20     	; 0x169e <__divsf3+0x12>
    16b2:	95 1b       	sub	r25, r21
    16b4:	55 0b       	sbc	r21, r21
    16b6:	bb 27       	eor	r27, r27
    16b8:	aa 27       	eor	r26, r26
    16ba:	62 17       	cp	r22, r18
    16bc:	73 07       	cpc	r23, r19
    16be:	84 07       	cpc	r24, r20
    16c0:	38 f0       	brcs	.+14     	; 0x16d0 <__divsf3_pse+0x26>
    16c2:	9f 5f       	subi	r25, 0xFF	; 255
    16c4:	5f 4f       	sbci	r21, 0xFF	; 255
    16c6:	22 0f       	add	r18, r18
    16c8:	33 1f       	adc	r19, r19
    16ca:	44 1f       	adc	r20, r20
    16cc:	aa 1f       	adc	r26, r26
    16ce:	a9 f3       	breq	.-22     	; 0x16ba <__divsf3_pse+0x10>
    16d0:	33 d0       	rcall	.+102    	; 0x1738 <__divsf3_pse+0x8e>
    16d2:	0e 2e       	mov	r0, r30
    16d4:	3a f0       	brmi	.+14     	; 0x16e4 <__divsf3_pse+0x3a>
    16d6:	e0 e8       	ldi	r30, 0x80	; 128
    16d8:	30 d0       	rcall	.+96     	; 0x173a <__divsf3_pse+0x90>
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	50 40       	sbci	r21, 0x00	; 0
    16de:	e6 95       	lsr	r30
    16e0:	00 1c       	adc	r0, r0
    16e2:	ca f7       	brpl	.-14     	; 0x16d6 <__divsf3_pse+0x2c>
    16e4:	29 d0       	rcall	.+82     	; 0x1738 <__divsf3_pse+0x8e>
    16e6:	fe 2f       	mov	r31, r30
    16e8:	27 d0       	rcall	.+78     	; 0x1738 <__divsf3_pse+0x8e>
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	88 1f       	adc	r24, r24
    16f0:	bb 1f       	adc	r27, r27
    16f2:	26 17       	cp	r18, r22
    16f4:	37 07       	cpc	r19, r23
    16f6:	48 07       	cpc	r20, r24
    16f8:	ab 07       	cpc	r26, r27
    16fa:	b0 e8       	ldi	r27, 0x80	; 128
    16fc:	09 f0       	breq	.+2      	; 0x1700 <__divsf3_pse+0x56>
    16fe:	bb 0b       	sbc	r27, r27
    1700:	80 2d       	mov	r24, r0
    1702:	bf 01       	movw	r22, r30
    1704:	ff 27       	eor	r31, r31
    1706:	93 58       	subi	r25, 0x83	; 131
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	2a f0       	brmi	.+10     	; 0x1716 <__divsf3_pse+0x6c>
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	51 05       	cpc	r21, r1
    1710:	68 f0       	brcs	.+26     	; 0x172c <__divsf3_pse+0x82>
    1712:	b6 c0       	rjmp	.+364    	; 0x1880 <__fp_inf>
    1714:	00 c1       	rjmp	.+512    	; 0x1916 <__fp_szero>
    1716:	5f 3f       	cpi	r21, 0xFF	; 255
    1718:	ec f3       	brlt	.-6      	; 0x1714 <__divsf3_pse+0x6a>
    171a:	98 3e       	cpi	r25, 0xE8	; 232
    171c:	dc f3       	brlt	.-10     	; 0x1714 <__divsf3_pse+0x6a>
    171e:	86 95       	lsr	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	b7 95       	ror	r27
    1726:	f7 95       	ror	r31
    1728:	9f 5f       	subi	r25, 0xFF	; 255
    172a:	c9 f7       	brne	.-14     	; 0x171e <__divsf3_pse+0x74>
    172c:	88 0f       	add	r24, r24
    172e:	91 1d       	adc	r25, r1
    1730:	96 95       	lsr	r25
    1732:	87 95       	ror	r24
    1734:	97 f9       	bld	r25, 7
    1736:	08 95       	ret
    1738:	e1 e0       	ldi	r30, 0x01	; 1
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	88 1f       	adc	r24, r24
    1740:	bb 1f       	adc	r27, r27
    1742:	62 17       	cp	r22, r18
    1744:	73 07       	cpc	r23, r19
    1746:	84 07       	cpc	r24, r20
    1748:	ba 07       	cpc	r27, r26
    174a:	20 f0       	brcs	.+8      	; 0x1754 <__divsf3_pse+0xaa>
    174c:	62 1b       	sub	r22, r18
    174e:	73 0b       	sbc	r23, r19
    1750:	84 0b       	sbc	r24, r20
    1752:	ba 0b       	sbc	r27, r26
    1754:	ee 1f       	adc	r30, r30
    1756:	88 f7       	brcc	.-30     	; 0x173a <__divsf3_pse+0x90>
    1758:	e0 95       	com	r30
    175a:	08 95       	ret

0000175c <__fixsfsi>:
    175c:	04 d0       	rcall	.+8      	; 0x1766 <__fixunssfsi>
    175e:	68 94       	set
    1760:	b1 11       	cpse	r27, r1
    1762:	d9 c0       	rjmp	.+434    	; 0x1916 <__fp_szero>
    1764:	08 95       	ret

00001766 <__fixunssfsi>:
    1766:	bc d0       	rcall	.+376    	; 0x18e0 <__fp_splitA>
    1768:	88 f0       	brcs	.+34     	; 0x178c <__fixunssfsi+0x26>
    176a:	9f 57       	subi	r25, 0x7F	; 127
    176c:	90 f0       	brcs	.+36     	; 0x1792 <__fixunssfsi+0x2c>
    176e:	b9 2f       	mov	r27, r25
    1770:	99 27       	eor	r25, r25
    1772:	b7 51       	subi	r27, 0x17	; 23
    1774:	a0 f0       	brcs	.+40     	; 0x179e <__fixunssfsi+0x38>
    1776:	d1 f0       	breq	.+52     	; 0x17ac <__fixunssfsi+0x46>
    1778:	66 0f       	add	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	1a f0       	brmi	.+6      	; 0x1788 <__fixunssfsi+0x22>
    1782:	ba 95       	dec	r27
    1784:	c9 f7       	brne	.-14     	; 0x1778 <__fixunssfsi+0x12>
    1786:	12 c0       	rjmp	.+36     	; 0x17ac <__fixunssfsi+0x46>
    1788:	b1 30       	cpi	r27, 0x01	; 1
    178a:	81 f0       	breq	.+32     	; 0x17ac <__fixunssfsi+0x46>
    178c:	c3 d0       	rcall	.+390    	; 0x1914 <__fp_zero>
    178e:	b1 e0       	ldi	r27, 0x01	; 1
    1790:	08 95       	ret
    1792:	c0 c0       	rjmp	.+384    	; 0x1914 <__fp_zero>
    1794:	67 2f       	mov	r22, r23
    1796:	78 2f       	mov	r23, r24
    1798:	88 27       	eor	r24, r24
    179a:	b8 5f       	subi	r27, 0xF8	; 248
    179c:	39 f0       	breq	.+14     	; 0x17ac <__fixunssfsi+0x46>
    179e:	b9 3f       	cpi	r27, 0xF9	; 249
    17a0:	cc f3       	brlt	.-14     	; 0x1794 <__fixunssfsi+0x2e>
    17a2:	86 95       	lsr	r24
    17a4:	77 95       	ror	r23
    17a6:	67 95       	ror	r22
    17a8:	b3 95       	inc	r27
    17aa:	d9 f7       	brne	.-10     	; 0x17a2 <__fixunssfsi+0x3c>
    17ac:	3e f4       	brtc	.+14     	; 0x17bc <__fixunssfsi+0x56>
    17ae:	90 95       	com	r25
    17b0:	80 95       	com	r24
    17b2:	70 95       	com	r23
    17b4:	61 95       	neg	r22
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	8f 4f       	sbci	r24, 0xFF	; 255
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	08 95       	ret

000017be <__floatunsisf>:
    17be:	e8 94       	clt
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <__floatsisf+0x12>

000017c2 <__floatsisf>:
    17c2:	97 fb       	bst	r25, 7
    17c4:	3e f4       	brtc	.+14     	; 0x17d4 <__floatsisf+0x12>
    17c6:	90 95       	com	r25
    17c8:	80 95       	com	r24
    17ca:	70 95       	com	r23
    17cc:	61 95       	neg	r22
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	99 23       	and	r25, r25
    17d6:	a9 f0       	breq	.+42     	; 0x1802 <__floatsisf+0x40>
    17d8:	f9 2f       	mov	r31, r25
    17da:	96 e9       	ldi	r25, 0x96	; 150
    17dc:	bb 27       	eor	r27, r27
    17de:	93 95       	inc	r25
    17e0:	f6 95       	lsr	r31
    17e2:	87 95       	ror	r24
    17e4:	77 95       	ror	r23
    17e6:	67 95       	ror	r22
    17e8:	b7 95       	ror	r27
    17ea:	f1 11       	cpse	r31, r1
    17ec:	f8 cf       	rjmp	.-16     	; 0x17de <__floatsisf+0x1c>
    17ee:	fa f4       	brpl	.+62     	; 0x182e <__floatsisf+0x6c>
    17f0:	bb 0f       	add	r27, r27
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <__floatsisf+0x36>
    17f4:	60 ff       	sbrs	r22, 0
    17f6:	1b c0       	rjmp	.+54     	; 0x182e <__floatsisf+0x6c>
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	16 c0       	rjmp	.+44     	; 0x182e <__floatsisf+0x6c>
    1802:	88 23       	and	r24, r24
    1804:	11 f0       	breq	.+4      	; 0x180a <__floatsisf+0x48>
    1806:	96 e9       	ldi	r25, 0x96	; 150
    1808:	11 c0       	rjmp	.+34     	; 0x182c <__floatsisf+0x6a>
    180a:	77 23       	and	r23, r23
    180c:	21 f0       	breq	.+8      	; 0x1816 <__floatsisf+0x54>
    180e:	9e e8       	ldi	r25, 0x8E	; 142
    1810:	87 2f       	mov	r24, r23
    1812:	76 2f       	mov	r23, r22
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <__floatsisf+0x5e>
    1816:	66 23       	and	r22, r22
    1818:	71 f0       	breq	.+28     	; 0x1836 <__floatsisf+0x74>
    181a:	96 e8       	ldi	r25, 0x86	; 134
    181c:	86 2f       	mov	r24, r22
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	2a f0       	brmi	.+10     	; 0x182e <__floatsisf+0x6c>
    1824:	9a 95       	dec	r25
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	da f7       	brpl	.-10     	; 0x1824 <__floatsisf+0x62>
    182e:	88 0f       	add	r24, r24
    1830:	96 95       	lsr	r25
    1832:	87 95       	ror	r24
    1834:	97 f9       	bld	r25, 7
    1836:	08 95       	ret

00001838 <__fp_cmp>:
    1838:	99 0f       	add	r25, r25
    183a:	00 08       	sbc	r0, r0
    183c:	55 0f       	add	r21, r21
    183e:	aa 0b       	sbc	r26, r26
    1840:	e0 e8       	ldi	r30, 0x80	; 128
    1842:	fe ef       	ldi	r31, 0xFE	; 254
    1844:	16 16       	cp	r1, r22
    1846:	17 06       	cpc	r1, r23
    1848:	e8 07       	cpc	r30, r24
    184a:	f9 07       	cpc	r31, r25
    184c:	c0 f0       	brcs	.+48     	; 0x187e <__fp_cmp+0x46>
    184e:	12 16       	cp	r1, r18
    1850:	13 06       	cpc	r1, r19
    1852:	e4 07       	cpc	r30, r20
    1854:	f5 07       	cpc	r31, r21
    1856:	98 f0       	brcs	.+38     	; 0x187e <__fp_cmp+0x46>
    1858:	62 1b       	sub	r22, r18
    185a:	73 0b       	sbc	r23, r19
    185c:	84 0b       	sbc	r24, r20
    185e:	95 0b       	sbc	r25, r21
    1860:	39 f4       	brne	.+14     	; 0x1870 <__fp_cmp+0x38>
    1862:	0a 26       	eor	r0, r26
    1864:	61 f0       	breq	.+24     	; 0x187e <__fp_cmp+0x46>
    1866:	23 2b       	or	r18, r19
    1868:	24 2b       	or	r18, r20
    186a:	25 2b       	or	r18, r21
    186c:	21 f4       	brne	.+8      	; 0x1876 <__fp_cmp+0x3e>
    186e:	08 95       	ret
    1870:	0a 26       	eor	r0, r26
    1872:	09 f4       	brne	.+2      	; 0x1876 <__fp_cmp+0x3e>
    1874:	a1 40       	sbci	r26, 0x01	; 1
    1876:	a6 95       	lsr	r26
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	81 1d       	adc	r24, r1
    187c:	81 1d       	adc	r24, r1
    187e:	08 95       	ret

00001880 <__fp_inf>:
    1880:	97 f9       	bld	r25, 7
    1882:	9f 67       	ori	r25, 0x7F	; 127
    1884:	80 e8       	ldi	r24, 0x80	; 128
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	08 95       	ret

0000188c <__fp_nan>:
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	80 ec       	ldi	r24, 0xC0	; 192
    1890:	08 95       	ret

00001892 <__fp_pscA>:
    1892:	00 24       	eor	r0, r0
    1894:	0a 94       	dec	r0
    1896:	16 16       	cp	r1, r22
    1898:	17 06       	cpc	r1, r23
    189a:	18 06       	cpc	r1, r24
    189c:	09 06       	cpc	r0, r25
    189e:	08 95       	ret

000018a0 <__fp_pscB>:
    18a0:	00 24       	eor	r0, r0
    18a2:	0a 94       	dec	r0
    18a4:	12 16       	cp	r1, r18
    18a6:	13 06       	cpc	r1, r19
    18a8:	14 06       	cpc	r1, r20
    18aa:	05 06       	cpc	r0, r21
    18ac:	08 95       	ret

000018ae <__fp_round>:
    18ae:	09 2e       	mov	r0, r25
    18b0:	03 94       	inc	r0
    18b2:	00 0c       	add	r0, r0
    18b4:	11 f4       	brne	.+4      	; 0x18ba <__fp_round+0xc>
    18b6:	88 23       	and	r24, r24
    18b8:	52 f0       	brmi	.+20     	; 0x18ce <__fp_round+0x20>
    18ba:	bb 0f       	add	r27, r27
    18bc:	40 f4       	brcc	.+16     	; 0x18ce <__fp_round+0x20>
    18be:	bf 2b       	or	r27, r31
    18c0:	11 f4       	brne	.+4      	; 0x18c6 <__fp_round+0x18>
    18c2:	60 ff       	sbrs	r22, 0
    18c4:	04 c0       	rjmp	.+8      	; 0x18ce <__fp_round+0x20>
    18c6:	6f 5f       	subi	r22, 0xFF	; 255
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	8f 4f       	sbci	r24, 0xFF	; 255
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	08 95       	ret

000018d0 <__fp_split3>:
    18d0:	57 fd       	sbrc	r21, 7
    18d2:	90 58       	subi	r25, 0x80	; 128
    18d4:	44 0f       	add	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	59 f0       	breq	.+22     	; 0x18f0 <__fp_splitA+0x10>
    18da:	5f 3f       	cpi	r21, 0xFF	; 255
    18dc:	71 f0       	breq	.+28     	; 0x18fa <__fp_splitA+0x1a>
    18de:	47 95       	ror	r20

000018e0 <__fp_splitA>:
    18e0:	88 0f       	add	r24, r24
    18e2:	97 fb       	bst	r25, 7
    18e4:	99 1f       	adc	r25, r25
    18e6:	61 f0       	breq	.+24     	; 0x1900 <__fp_splitA+0x20>
    18e8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ea:	79 f0       	breq	.+30     	; 0x190a <__fp_splitA+0x2a>
    18ec:	87 95       	ror	r24
    18ee:	08 95       	ret
    18f0:	12 16       	cp	r1, r18
    18f2:	13 06       	cpc	r1, r19
    18f4:	14 06       	cpc	r1, r20
    18f6:	55 1f       	adc	r21, r21
    18f8:	f2 cf       	rjmp	.-28     	; 0x18de <__fp_split3+0xe>
    18fa:	46 95       	lsr	r20
    18fc:	f1 df       	rcall	.-30     	; 0x18e0 <__fp_splitA>
    18fe:	08 c0       	rjmp	.+16     	; 0x1910 <__fp_splitA+0x30>
    1900:	16 16       	cp	r1, r22
    1902:	17 06       	cpc	r1, r23
    1904:	18 06       	cpc	r1, r24
    1906:	99 1f       	adc	r25, r25
    1908:	f1 cf       	rjmp	.-30     	; 0x18ec <__fp_splitA+0xc>
    190a:	86 95       	lsr	r24
    190c:	71 05       	cpc	r23, r1
    190e:	61 05       	cpc	r22, r1
    1910:	08 94       	sec
    1912:	08 95       	ret

00001914 <__fp_zero>:
    1914:	e8 94       	clt

00001916 <__fp_szero>:
    1916:	bb 27       	eor	r27, r27
    1918:	66 27       	eor	r22, r22
    191a:	77 27       	eor	r23, r23
    191c:	cb 01       	movw	r24, r22
    191e:	97 f9       	bld	r25, 7
    1920:	08 95       	ret

00001922 <__mulsf3>:
    1922:	0b d0       	rcall	.+22     	; 0x193a <__mulsf3x>
    1924:	c4 cf       	rjmp	.-120    	; 0x18ae <__fp_round>
    1926:	b5 df       	rcall	.-150    	; 0x1892 <__fp_pscA>
    1928:	28 f0       	brcs	.+10     	; 0x1934 <__mulsf3+0x12>
    192a:	ba df       	rcall	.-140    	; 0x18a0 <__fp_pscB>
    192c:	18 f0       	brcs	.+6      	; 0x1934 <__mulsf3+0x12>
    192e:	95 23       	and	r25, r21
    1930:	09 f0       	breq	.+2      	; 0x1934 <__mulsf3+0x12>
    1932:	a6 cf       	rjmp	.-180    	; 0x1880 <__fp_inf>
    1934:	ab cf       	rjmp	.-170    	; 0x188c <__fp_nan>
    1936:	11 24       	eor	r1, r1
    1938:	ee cf       	rjmp	.-36     	; 0x1916 <__fp_szero>

0000193a <__mulsf3x>:
    193a:	ca df       	rcall	.-108    	; 0x18d0 <__fp_split3>
    193c:	a0 f3       	brcs	.-24     	; 0x1926 <__mulsf3+0x4>

0000193e <__mulsf3_pse>:
    193e:	95 9f       	mul	r25, r21
    1940:	d1 f3       	breq	.-12     	; 0x1936 <__mulsf3+0x14>
    1942:	95 0f       	add	r25, r21
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	55 1f       	adc	r21, r21
    1948:	62 9f       	mul	r22, r18
    194a:	f0 01       	movw	r30, r0
    194c:	72 9f       	mul	r23, r18
    194e:	bb 27       	eor	r27, r27
    1950:	f0 0d       	add	r31, r0
    1952:	b1 1d       	adc	r27, r1
    1954:	63 9f       	mul	r22, r19
    1956:	aa 27       	eor	r26, r26
    1958:	f0 0d       	add	r31, r0
    195a:	b1 1d       	adc	r27, r1
    195c:	aa 1f       	adc	r26, r26
    195e:	64 9f       	mul	r22, r20
    1960:	66 27       	eor	r22, r22
    1962:	b0 0d       	add	r27, r0
    1964:	a1 1d       	adc	r26, r1
    1966:	66 1f       	adc	r22, r22
    1968:	82 9f       	mul	r24, r18
    196a:	22 27       	eor	r18, r18
    196c:	b0 0d       	add	r27, r0
    196e:	a1 1d       	adc	r26, r1
    1970:	62 1f       	adc	r22, r18
    1972:	73 9f       	mul	r23, r19
    1974:	b0 0d       	add	r27, r0
    1976:	a1 1d       	adc	r26, r1
    1978:	62 1f       	adc	r22, r18
    197a:	83 9f       	mul	r24, r19
    197c:	a0 0d       	add	r26, r0
    197e:	61 1d       	adc	r22, r1
    1980:	22 1f       	adc	r18, r18
    1982:	74 9f       	mul	r23, r20
    1984:	33 27       	eor	r19, r19
    1986:	a0 0d       	add	r26, r0
    1988:	61 1d       	adc	r22, r1
    198a:	23 1f       	adc	r18, r19
    198c:	84 9f       	mul	r24, r20
    198e:	60 0d       	add	r22, r0
    1990:	21 1d       	adc	r18, r1
    1992:	82 2f       	mov	r24, r18
    1994:	76 2f       	mov	r23, r22
    1996:	6a 2f       	mov	r22, r26
    1998:	11 24       	eor	r1, r1
    199a:	9f 57       	subi	r25, 0x7F	; 127
    199c:	50 40       	sbci	r21, 0x00	; 0
    199e:	8a f0       	brmi	.+34     	; 0x19c2 <__mulsf3_pse+0x84>
    19a0:	e1 f0       	breq	.+56     	; 0x19da <__mulsf3_pse+0x9c>
    19a2:	88 23       	and	r24, r24
    19a4:	4a f0       	brmi	.+18     	; 0x19b8 <__mulsf3_pse+0x7a>
    19a6:	ee 0f       	add	r30, r30
    19a8:	ff 1f       	adc	r31, r31
    19aa:	bb 1f       	adc	r27, r27
    19ac:	66 1f       	adc	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	91 50       	subi	r25, 0x01	; 1
    19b4:	50 40       	sbci	r21, 0x00	; 0
    19b6:	a9 f7       	brne	.-22     	; 0x19a2 <__mulsf3_pse+0x64>
    19b8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ba:	51 05       	cpc	r21, r1
    19bc:	70 f0       	brcs	.+28     	; 0x19da <__mulsf3_pse+0x9c>
    19be:	60 cf       	rjmp	.-320    	; 0x1880 <__fp_inf>
    19c0:	aa cf       	rjmp	.-172    	; 0x1916 <__fp_szero>
    19c2:	5f 3f       	cpi	r21, 0xFF	; 255
    19c4:	ec f3       	brlt	.-6      	; 0x19c0 <__mulsf3_pse+0x82>
    19c6:	98 3e       	cpi	r25, 0xE8	; 232
    19c8:	dc f3       	brlt	.-10     	; 0x19c0 <__mulsf3_pse+0x82>
    19ca:	86 95       	lsr	r24
    19cc:	77 95       	ror	r23
    19ce:	67 95       	ror	r22
    19d0:	b7 95       	ror	r27
    19d2:	f7 95       	ror	r31
    19d4:	e7 95       	ror	r30
    19d6:	9f 5f       	subi	r25, 0xFF	; 255
    19d8:	c1 f7       	brne	.-16     	; 0x19ca <__mulsf3_pse+0x8c>
    19da:	fe 2b       	or	r31, r30
    19dc:	88 0f       	add	r24, r24
    19de:	91 1d       	adc	r25, r1
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	97 f9       	bld	r25, 7
    19e6:	08 95       	ret

000019e8 <__divmodhi4>:
    19e8:	97 fb       	bst	r25, 7
    19ea:	07 2e       	mov	r0, r23
    19ec:	16 f4       	brtc	.+4      	; 0x19f2 <__divmodhi4+0xa>
    19ee:	00 94       	com	r0
    19f0:	06 d0       	rcall	.+12     	; 0x19fe <__divmodhi4_neg1>
    19f2:	77 fd       	sbrc	r23, 7
    19f4:	08 d0       	rcall	.+16     	; 0x1a06 <__divmodhi4_neg2>
    19f6:	0b d0       	rcall	.+22     	; 0x1a0e <__udivmodhi4>
    19f8:	07 fc       	sbrc	r0, 7
    19fa:	05 d0       	rcall	.+10     	; 0x1a06 <__divmodhi4_neg2>
    19fc:	3e f4       	brtc	.+14     	; 0x1a0c <__divmodhi4_exit>

000019fe <__divmodhi4_neg1>:
    19fe:	90 95       	com	r25
    1a00:	81 95       	neg	r24
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	08 95       	ret

00001a06 <__divmodhi4_neg2>:
    1a06:	70 95       	com	r23
    1a08:	61 95       	neg	r22
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255

00001a0c <__divmodhi4_exit>:
    1a0c:	08 95       	ret

00001a0e <__udivmodhi4>:
    1a0e:	aa 1b       	sub	r26, r26
    1a10:	bb 1b       	sub	r27, r27
    1a12:	51 e1       	ldi	r21, 0x11	; 17
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <__udivmodhi4_ep>

00001a16 <__udivmodhi4_loop>:
    1a16:	aa 1f       	adc	r26, r26
    1a18:	bb 1f       	adc	r27, r27
    1a1a:	a6 17       	cp	r26, r22
    1a1c:	b7 07       	cpc	r27, r23
    1a1e:	10 f0       	brcs	.+4      	; 0x1a24 <__udivmodhi4_ep>
    1a20:	a6 1b       	sub	r26, r22
    1a22:	b7 0b       	sbc	r27, r23

00001a24 <__udivmodhi4_ep>:
    1a24:	88 1f       	adc	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	5a 95       	dec	r21
    1a2a:	a9 f7       	brne	.-22     	; 0x1a16 <__udivmodhi4_loop>
    1a2c:	80 95       	com	r24
    1a2e:	90 95       	com	r25
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	08 95       	ret

00001a36 <__tablejump2__>:
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	8b bf       	out	0x3b, r24	; 59
    1a3e:	07 90       	elpm	r0, Z+
    1a40:	f6 91       	elpm	r31, Z
    1a42:	e0 2d       	mov	r30, r0
    1a44:	19 94       	eijmp

00001a46 <_exit>:
    1a46:	f8 94       	cli

00001a48 <__stop_program>:
    1a48:	ff cf       	rjmp	.-2      	; 0x1a48 <__stop_program>


Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c32  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800200  00800200  00001ca6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c5c  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001746  00000000  00000000  00005c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a07  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  00008d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015fa  00000000  00000000  00009584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001305  00000000  00000000  0000ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000be83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	98 c3       	rjmp	.+1840   	; 0x736 <__vector_1>
       6:	00 00       	nop
       8:	49 c3       	rjmp	.+1682   	; 0x69c <__vector_2>
       a:	00 00       	nop
       c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_3>
      10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__vector_5>
      18:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_6>
      1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
      1e:	00 00       	nop
      20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
      22:	00 00       	nop
      24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
      26:	00 00       	nop
      28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
      2e:	00 00       	nop
      30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
      32:	00 00       	nop
      34:	7b c0       	rjmp	.+246    	; 0x12c <__bad_interrupt>
      36:	00 00       	nop
      38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c3 c2       	rjmp	.+1414   	; 0x5c4 <__vector_15>
      3e:	00 00       	nop
      40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
      42:	00 00       	nop
      44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
      46:	00 00       	nop
      48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
      4e:	00 00       	nop
      50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_21>
      58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
      5e:	00 00       	nop
      60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 81 0b 	jmp	0x1702	; 0x1702 <__vector_25>
      68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
      6e:	00 00       	nop
      70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
      72:	00 00       	nop
      74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
      76:	00 00       	nop
      78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
      7e:	00 00       	nop
      80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
      82:	00 00       	nop
      84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
      86:	00 00       	nop
      88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4f c0       	rjmp	.+158    	; 0x12c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_36>
      94:	4b c0       	rjmp	.+150    	; 0x12c <__bad_interrupt>
      96:	00 00       	nop
      98:	49 c0       	rjmp	.+146    	; 0x12c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	47 c0       	rjmp	.+142    	; 0x12c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	45 c0       	rjmp	.+138    	; 0x12c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	43 c0       	rjmp	.+134    	; 0x12c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c3       	rjmp	.+1786   	; 0x7a4 <__vector_42>
      aa:	00 00       	nop
      ac:	3f c0       	rjmp	.+126    	; 0x12c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3d c0       	rjmp	.+122    	; 0x12c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3b c0       	rjmp	.+118    	; 0x12c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	39 c0       	rjmp	.+114    	; 0x12c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	37 c0       	rjmp	.+110    	; 0x12c <__bad_interrupt>
      be:	00 00       	nop
      c0:	35 c0       	rjmp	.+106    	; 0x12c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	33 c0       	rjmp	.+102    	; 0x12c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	31 c0       	rjmp	.+98     	; 0x12c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_51>
      d0:	2d c0       	rjmp	.+90     	; 0x12c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2b c0       	rjmp	.+86     	; 0x12c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_54>
      dc:	27 c0       	rjmp	.+78     	; 0x12c <__bad_interrupt>
      de:	00 00       	nop
      e0:	25 c0       	rjmp	.+74     	; 0x12c <__bad_interrupt>
	...

000000e4 <__ctors_start>:
      e4:	01 04       	cpc	r0, r1

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d1 e2       	ldi	r29, 0x21	; 33
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61
      f2:	00 e0       	ldi	r16, 0x00	; 0
      f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_clear_bss>:
      f6:	22 e0       	ldi	r18, 0x02	; 2
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b2 e0       	ldi	r27, 0x02	; 2
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a6 39       	cpi	r26, 0x96	; 150
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
     106:	10 e0       	ldi	r17, 0x00	; 0
     108:	c3 e7       	ldi	r28, 0x73	; 115
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	00 e0       	ldi	r16, 0x00	; 0
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__do_global_ctors+0x16>
     110:	21 97       	sbiw	r28, 0x01	; 1
     112:	01 09       	sbc	r16, r1
     114:	80 2f       	mov	r24, r16
     116:	fe 01       	movw	r30, r28
     118:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__tablejump2__>
     11c:	c2 37       	cpi	r28, 0x72	; 114
     11e:	d1 07       	cpc	r29, r17
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	08 07       	cpc	r16, r24
     124:	a9 f7       	brne	.-22     	; 0x110 <__do_global_ctors+0xa>
     126:	03 d0       	rcall	.+6      	; 0x12e <main>
     128:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <_exit>

0000012c <__bad_interrupt>:
     12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <main>:

#include "RobotDriver.h"

int main(void)
{
	initUART0();
     12e:	0e 94 46 0b 	call	0x168c	; 0x168c <_Z9initUART0v>
	initUART3();
     132:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <_Z9initUART3v>
	JOYSTICK_INITIALIZE();
     136:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <_Z9initUART2v>
	init_master();
     13a:	f8 d5       	rcall	.+3056   	; 0xd2c <_Z11init_masterv>
	rack_init();
     13c:	51 d1       	rcall	.+674    	; 0x3e0 <_Z9rack_initv>
	sei();
     13e:	78 94       	sei
    while (1) 
    {
		if(auto_mode)
     140:	80 91 7b 02 	lds	r24, 0x027B
     144:	88 23       	and	r24, r24
     146:	11 f0       	breq	.+4      	; 0x14c <main+0x1e>
			operate_master_auto();
     148:	b6 d6       	rcall	.+3436   	; 0xeb6 <_Z19operate_master_autov>
     14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0x22>
		else
			operate_master_manual();
     14c:	0e 94 09 09 	call	0x1212	; 0x1212 <_Z21operate_master_manualv>
			
		if (send_time)
     150:	80 91 46 02 	lds	r24, 0x0246
     154:	88 23       	and	r24, r24
     156:	a1 f3       	breq	.-24     	; 0x140 <main+0x12>
		{
			Send_data_to_Slave();
     158:	4f d6       	rcall	.+3230   	; 0xdf8 <_Z18Send_data_to_Slavev>
			send_time = false;
     15a:	10 92 46 02 	sts	0x0246, r1
     15e:	f0 cf       	rjmp	.-32     	; 0x140 <main+0x12>

00000160 <_ZN3PID7Set_PidEfff>:


#include "PID.h"

void PID::Set_Pid(float kP,float kI,float kD)
{
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	fc 01       	movw	r30, r24
	kp = kP;
     16e:	40 83       	st	Z, r20
     170:	51 83       	std	Z+1, r21	; 0x01
     172:	62 83       	std	Z+2, r22	; 0x02
     174:	73 83       	std	Z+3, r23	; 0x03
	ki = kI;
     176:	04 83       	std	Z+4, r16	; 0x04
     178:	15 83       	std	Z+5, r17	; 0x05
     17a:	26 83       	std	Z+6, r18	; 0x06
     17c:	37 83       	std	Z+7, r19	; 0x07
	kd = kD;	
     17e:	c0 86       	std	Z+8, r12	; 0x08
     180:	d1 86       	std	Z+9, r13	; 0x09
     182:	e2 86       	std	Z+10, r14	; 0x0a
     184:	f3 86       	std	Z+11, r15	; 0x0b
}
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	df 90       	pop	r13
     190:	cf 90       	pop	r12
     192:	08 95       	ret

00000194 <_ZN3PID7ComputeEi>:


float PID::Compute(int input)
{
     194:	cf 92       	push	r12
     196:	df 92       	push	r13
     198:	ef 92       	push	r14
     19a:	ff 92       	push	r15
     19c:	0f 93       	push	r16
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	8b 01       	movw	r16, r22
	error = sp - input;
     1a8:	6c 85       	ldd	r22, Y+12	; 0x0c
     1aa:	7d 85       	ldd	r23, Y+13	; 0x0d
     1ac:	60 1b       	sub	r22, r16
     1ae:	71 0b       	sbc	r23, r17
     1b0:	7f 87       	std	Y+15, r23	; 0x0f
     1b2:	6e 87       	std	Y+14, r22	; 0x0e
	
	errorsum += error;
     1b4:	8a 89       	ldd	r24, Y+18	; 0x12
     1b6:	9b 89       	ldd	r25, Y+19	; 0x13
     1b8:	86 0f       	add	r24, r22
     1ba:	97 1f       	adc	r25, r23
	
	//Limiting I-term
	if (errorsum > 125)
     1bc:	8e 37       	cpi	r24, 0x7E	; 126
     1be:	91 05       	cpc	r25, r1
     1c0:	2c f0       	brlt	.+10     	; 0x1cc <_ZN3PID7ComputeEi+0x38>
		errorsum = 125;
     1c2:	8d e7       	ldi	r24, 0x7D	; 125
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	9b 8b       	std	Y+19, r25	; 0x13
     1c8:	8a 8b       	std	Y+18, r24	; 0x12
     1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <_ZN3PID7ComputeEi+0x4e>
	else if (errorsum < -125)
     1cc:	83 38       	cpi	r24, 0x83	; 131
     1ce:	2f ef       	ldi	r18, 0xFF	; 255
     1d0:	92 07       	cpc	r25, r18
     1d2:	1c f0       	brlt	.+6      	; 0x1da <_ZN3PID7ComputeEi+0x46>

float PID::Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     1d4:	9b 8b       	std	Y+19, r25	; 0x13
     1d6:	8a 8b       	std	Y+18, r24	; 0x12
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <_ZN3PID7ComputeEi+0x4e>
	
	//Limiting I-term
	if (errorsum > 125)
		errorsum = 125;
	else if (errorsum < -125)
		errorsum = -125;
     1da:	83 e8       	ldi	r24, 0x83	; 131
     1dc:	9f ef       	ldi	r25, 0xFF	; 255
     1de:	9b 8b       	std	Y+19, r25	; 0x13
     1e0:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv += error*kp + errorsum*ki - kd*(input-lastinput);
     1e2:	07 2e       	mov	r0, r23
     1e4:	00 0c       	add	r0, r0
     1e6:	88 0b       	sbc	r24, r24
     1e8:	99 0b       	sbc	r25, r25
     1ea:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatsisf>
     1ee:	28 81       	ld	r18, Y
     1f0:	39 81       	ldd	r19, Y+1	; 0x01
     1f2:	4a 81       	ldd	r20, Y+2	; 0x02
     1f4:	5b 81       	ldd	r21, Y+3	; 0x03
     1f6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     1fa:	6b 01       	movw	r12, r22
     1fc:	7c 01       	movw	r14, r24
     1fe:	8a 89       	ldd	r24, Y+18	; 0x12
     200:	9b 89       	ldd	r25, Y+19	; 0x13
     202:	bc 01       	movw	r22, r24
     204:	99 0f       	add	r25, r25
     206:	88 0b       	sbc	r24, r24
     208:	99 0b       	sbc	r25, r25
     20a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatsisf>
     20e:	2c 81       	ldd	r18, Y+4	; 0x04
     210:	3d 81       	ldd	r19, Y+5	; 0x05
     212:	4e 81       	ldd	r20, Y+6	; 0x06
     214:	5f 81       	ldd	r21, Y+7	; 0x07
     216:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     21a:	9b 01       	movw	r18, r22
     21c:	ac 01       	movw	r20, r24
     21e:	c7 01       	movw	r24, r14
     220:	b6 01       	movw	r22, r12
     222:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__addsf3>
     226:	6b 01       	movw	r12, r22
     228:	7c 01       	movw	r14, r24
     22a:	88 89       	ldd	r24, Y+16	; 0x10
     22c:	99 89       	ldd	r25, Y+17	; 0x11
     22e:	98 01       	movw	r18, r16
     230:	28 1b       	sub	r18, r24
     232:	39 0b       	sbc	r19, r25
     234:	b9 01       	movw	r22, r18
     236:	33 0f       	add	r19, r19
     238:	88 0b       	sbc	r24, r24
     23a:	99 0b       	sbc	r25, r25
     23c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatsisf>
     240:	28 85       	ldd	r18, Y+8	; 0x08
     242:	39 85       	ldd	r19, Y+9	; 0x09
     244:	4a 85       	ldd	r20, Y+10	; 0x0a
     246:	5b 85       	ldd	r21, Y+11	; 0x0b
     248:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     24c:	9b 01       	movw	r18, r22
     24e:	ac 01       	movw	r20, r24
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__subsf3>
     258:	2c 89       	ldd	r18, Y+20	; 0x14
     25a:	3d 89       	ldd	r19, Y+21	; 0x15
     25c:	4e 89       	ldd	r20, Y+22	; 0x16
     25e:	5f 89       	ldd	r21, Y+23	; 0x17
     260:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__addsf3>
     264:	6c 8b       	std	Y+20, r22	; 0x14
     266:	7d 8b       	std	Y+21, r23	; 0x15
     268:	8e 8b       	std	Y+22, r24	; 0x16
     26a:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     26c:	19 8b       	std	Y+17, r17	; 0x11
     26e:	08 8b       	std	Y+16, r16	; 0x10
	return cv;
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	df 90       	pop	r13
     27e:	cf 90       	pop	r12
     280:	08 95       	ret

00000282 <_ZN3PID13angle_ComputeEi>:

float PID::angle_Compute(int input)
{
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	ec 01       	movw	r28, r24
     294:	8b 01       	movw	r16, r22
	error = sp - input;
     296:	6c 85       	ldd	r22, Y+12	; 0x0c
     298:	7d 85       	ldd	r23, Y+13	; 0x0d
     29a:	60 1b       	sub	r22, r16
     29c:	71 0b       	sbc	r23, r17
     29e:	7f 87       	std	Y+15, r23	; 0x0f
     2a0:	6e 87       	std	Y+14, r22	; 0x0e
	
	errorsum += error;
     2a2:	8a 89       	ldd	r24, Y+18	; 0x12
     2a4:	9b 89       	ldd	r25, Y+19	; 0x13
     2a6:	86 0f       	add	r24, r22
     2a8:	97 1f       	adc	r25, r23
	
	//Limiting I-term
	if (errorsum > 125)
     2aa:	8e 37       	cpi	r24, 0x7E	; 126
     2ac:	91 05       	cpc	r25, r1
     2ae:	2c f0       	brlt	.+10     	; 0x2ba <_ZN3PID13angle_ComputeEi+0x38>
	errorsum = 125;
     2b0:	8d e7       	ldi	r24, 0x7D	; 125
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	9b 8b       	std	Y+19, r25	; 0x13
     2b6:	8a 8b       	std	Y+18, r24	; 0x12
     2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <_ZN3PID13angle_ComputeEi+0x4e>
	else if (errorsum < -125)
     2ba:	83 38       	cpi	r24, 0x83	; 131
     2bc:	2f ef       	ldi	r18, 0xFF	; 255
     2be:	92 07       	cpc	r25, r18
     2c0:	1c f0       	brlt	.+6      	; 0x2c8 <_ZN3PID13angle_ComputeEi+0x46>

float PID::angle_Compute(int input)
{
	error = sp - input;
	
	errorsum += error;
     2c2:	9b 8b       	std	Y+19, r25	; 0x13
     2c4:	8a 8b       	std	Y+18, r24	; 0x12
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <_ZN3PID13angle_ComputeEi+0x4e>
	
	//Limiting I-term
	if (errorsum > 125)
	errorsum = 125;
	else if (errorsum < -125)
	errorsum = -125;
     2c8:	83 e8       	ldi	r24, 0x83	; 131
     2ca:	9f ef       	ldi	r25, 0xFF	; 255
     2cc:	9b 8b       	std	Y+19, r25	; 0x13
     2ce:	8a 8b       	std	Y+18, r24	; 0x12
	
	cv = error*kp + errorsum*ki - kd*(input-lastinput);
     2d0:	07 2e       	mov	r0, r23
     2d2:	00 0c       	add	r0, r0
     2d4:	88 0b       	sbc	r24, r24
     2d6:	99 0b       	sbc	r25, r25
     2d8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatsisf>
     2dc:	28 81       	ld	r18, Y
     2de:	39 81       	ldd	r19, Y+1	; 0x01
     2e0:	4a 81       	ldd	r20, Y+2	; 0x02
     2e2:	5b 81       	ldd	r21, Y+3	; 0x03
     2e4:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     2e8:	6b 01       	movw	r12, r22
     2ea:	7c 01       	movw	r14, r24
     2ec:	8a 89       	ldd	r24, Y+18	; 0x12
     2ee:	9b 89       	ldd	r25, Y+19	; 0x13
     2f0:	bc 01       	movw	r22, r24
     2f2:	99 0f       	add	r25, r25
     2f4:	88 0b       	sbc	r24, r24
     2f6:	99 0b       	sbc	r25, r25
     2f8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatsisf>
     2fc:	2c 81       	ldd	r18, Y+4	; 0x04
     2fe:	3d 81       	ldd	r19, Y+5	; 0x05
     300:	4e 81       	ldd	r20, Y+6	; 0x06
     302:	5f 81       	ldd	r21, Y+7	; 0x07
     304:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     308:	9b 01       	movw	r18, r22
     30a:	ac 01       	movw	r20, r24
     30c:	c7 01       	movw	r24, r14
     30e:	b6 01       	movw	r22, r12
     310:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__addsf3>
     314:	6b 01       	movw	r12, r22
     316:	7c 01       	movw	r14, r24
     318:	88 89       	ldd	r24, Y+16	; 0x10
     31a:	99 89       	ldd	r25, Y+17	; 0x11
     31c:	98 01       	movw	r18, r16
     31e:	28 1b       	sub	r18, r24
     320:	39 0b       	sbc	r19, r25
     322:	b9 01       	movw	r22, r18
     324:	33 0f       	add	r19, r19
     326:	88 0b       	sbc	r24, r24
     328:	99 0b       	sbc	r25, r25
     32a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__floatsisf>
     32e:	28 85       	ldd	r18, Y+8	; 0x08
     330:	39 85       	ldd	r19, Y+9	; 0x09
     332:	4a 85       	ldd	r20, Y+10	; 0x0a
     334:	5b 85       	ldd	r21, Y+11	; 0x0b
     336:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulsf3>
     33a:	9b 01       	movw	r18, r22
     33c:	ac 01       	movw	r20, r24
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__subsf3>
     346:	6c 8b       	std	Y+20, r22	; 0x14
     348:	7d 8b       	std	Y+21, r23	; 0x15
     34a:	8e 8b       	std	Y+22, r24	; 0x16
     34c:	9f 8b       	std	Y+23, r25	; 0x17
	
	lastinput = input;
     34e:	19 8b       	std	Y+17, r17	; 0x11
     350:	08 8b       	std	Y+16, r16	; 0x10
	return cv;
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	df 90       	pop	r13
     360:	cf 90       	pop	r12
     362:	08 95       	ret

00000364 <_Z21initialise_timeperiodv>:

//initialize global timer

void initialise_timeperiod()
{
	TCCR2B |= (1<<CS22);
     364:	e1 eb       	ldi	r30, 0xB1	; 177
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	84 60       	ori	r24, 0x04	; 4
     36c:	80 83       	st	Z, r24
	TIMSK2 |= (1<<TOIE2);
     36e:	e0 e7       	ldi	r30, 0x70	; 112
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	81 60       	ori	r24, 0x01	; 1
     376:	80 83       	st	Z, r24
	TCNT2 = 0;
     378:	10 92 b2 00 	sts	0x00B2, r1
     37c:	08 95       	ret

0000037e <_Z20close_all_pneumaticsv>:
	}
}

void close_all_pneumatics()
{
	RACK_GRIP_OPEN();
     37e:	10 98       	cbi	0x02, 0	; 2
	RACK_LIFT_CLOSE();
     380:	14 98       	cbi	0x02, 4	; 2
	SHUTTCOCK_GRIP_CLOSE();
     382:	12 98       	cbi	0x02, 2	; 2
	SHUTTCOCK_PASS_CLOSE();
     384:	47 98       	cbi	0x08, 7	; 8
     386:	08 95       	ret

00000388 <_Z21initialize_pneumaticsv>:
}

void initialize_pneumatics()
{
	OUTPUT(RACK_GRAB);
     388:	08 9a       	sbi	0x01, 0	; 1
	OUTPUT(LIFT_RACK);
     38a:	0c 9a       	sbi	0x01, 4	; 1
	OUTPUT(SC_PASS);
     38c:	3f 9a       	sbi	0x07, 7	; 7
	OUTPUT(SC_GRIPPER);
     38e:	0a 9a       	sbi	0x01, 2	; 1
	close_all_pneumatics();
     390:	f6 cf       	rjmp	.-20     	; 0x37e <_Z20close_all_pneumaticsv>
     392:	08 95       	ret

00000394 <_Z16enable_proximityv>:
}

void enable_proximity()
{
	cli();
     394:	f8 94       	cli
	EIMSK |= (1<<PROXIMITY_INT);		//setting INT pin
     396:	ed 9a       	sbi	0x1d, 5	; 29
	EICRB |= (1<<PROXIMITY_ISC1);	    //falling edge
     398:	ea e6       	ldi	r30, 0x6A	; 106
     39a:	f0 e0       	ldi	r31, 0x00	; 0
     39c:	80 81       	ld	r24, Z
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	80 83       	st	Z, r24
	EIFR |= (1<<PROXIMITY_INTF);	    //clear int flag
     3a2:	e5 9a       	sbi	0x1c, 5	; 28
	sei();
     3a4:	78 94       	sei
     3a6:	08 95       	ret

000003a8 <_Z17disable_proximityv>:
}

void disable_proximity()
{
	EIFR |= (1<<PROXIMITY_INTF);
     3a8:	e5 9a       	sbi	0x1c, 5	; 28
	EIMSK &= ~(1<<PROXIMITY_INT);		
     3aa:	ed 98       	cbi	0x1d, 5	; 29
     3ac:	08 95       	ret

000003ae <_Z17enable_golden_eyev>:
}

void enable_golden_eye()
{
	cli();
     3ae:	f8 94       	cli
	EIMSK |= (1<<GOLDENEYE_INT);						//setting INT pin
     3b0:	ea 9a       	sbi	0x1d, 2	; 29
	EICRA |= (1<<GOLDENEYE_ISC1);						//falling  edge
     3b2:	e9 e6       	ldi	r30, 0x69	; 105
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	80 62       	ori	r24, 0x20	; 32
     3ba:	80 83       	st	Z, r24
	EIFR |= (1<<GOLDENEYE_INTF);						//clear int flag
     3bc:	e2 9a       	sbi	0x1c, 2	; 28
	sei();
     3be:	78 94       	sei
     3c0:	08 95       	ret

000003c2 <_Z18disable_golden_eyev>:
}

void disable_golden_eye()
{
	EIFR |= (1<<GOLDENEYE_INTF);
     3c2:	e2 9a       	sbi	0x1c, 2	; 28
	EIMSK &= ~(1<<GOLDENEYE_INT);
     3c4:	ea 98       	cbi	0x1d, 2	; 29
     3c6:	08 95       	ret

000003c8 <_Z6millisv>:
//calculate the time from begining of robot start 

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     3c8:	2f b7       	in	r18, 0x3f	; 63
	
	// disable interrupts while we read timer2_millis or we might get an
	// inconsistent value 
	cli();
     3ca:	f8 94       	cli
	m = timer2_millis;
     3cc:	60 91 0f 02 	lds	r22, 0x020F
     3d0:	70 91 10 02 	lds	r23, 0x0210
     3d4:	80 91 11 02 	lds	r24, 0x0211
     3d8:	90 91 12 02 	lds	r25, 0x0212
	SREG = oldSREG;
     3dc:	2f bf       	out	0x3f, r18	; 63
	
	return m;
}
     3de:	08 95       	ret

000003e0 <_Z9rack_initv>:
	TCNT2 = 0;
}


void rack_init()
{
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
	
	Geneva_Start = false;
     3f0:	10 92 0a 02 	sts	0x020A, r1
	auto_move_rack = false;
     3f4:	10 92 08 02 	sts	0x0208, r1
	stop_rack_initial = false;
     3f8:	10 92 07 02 	sts	0x0207, r1
	stop_rack_final = false;
     3fc:	10 92 06 02 	sts	0x0206, r1
	throw_rack = false;
     400:	10 92 05 02 	sts	0x0205, r1
	rack_throw_auto = false;
     404:	10 92 04 02 	sts	0x0204, r1
	pneumatic_geneva_start = false;
     408:	10 92 02 02 	sts	0x0202, r1
	inside_robot = true;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 01 02 	sts	0x0201, r24
    pass_the_shuttcock = false;
     412:	10 92 00 02 	sts	0x0200, r1
	pid_compute_flag = false;
     416:	10 92 45 02 	sts	0x0245, r1
					
	
	proximity_on_flag = false;
     41a:	10 92 44 02 	sts	0x0244, r1
	Goldeneye_on_flag = false;
     41e:	10 92 43 02 	sts	0x0243, r1
	
	pneumatic_geneva_time = 0;
     422:	10 92 4b 02 	sts	0x024B, r1
     426:	10 92 4c 02 	sts	0x024C, r1
     42a:	10 92 4d 02 	sts	0x024D, r1
     42e:	10 92 4e 02 	sts	0x024E, r1
	send_time = false;
     432:	10 92 46 02 	sts	0x0246, r1
	
	
	
	RackMotor.Initialise(1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	8e e6       	ldi	r24, 0x6E	; 110
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	02 d3       	rcall	.+1540   	; 0xa42 <_ZN10Rack_Motor10InitialiseEh>
	GenevaMotor.Initialise(2);
     43e:	62 e0       	ldi	r22, 0x02	; 2
     440:	8d e6       	ldi	r24, 0x6D	; 109
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	fe d2       	rcall	.+1532   	; 0xa42 <_ZN10Rack_Motor10InitialiseEh>
	
	RackEncoder.Initialise(1);
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	80 e6       	ldi	r24, 0x60	; 96
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	59 d2       	rcall	.+1202   	; 0x900 <_ZN12Rack_Encoder10InitialiseEh>
	GenevaEncoder.Initialise(2);
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	83 e5       	ldi	r24, 0x53	; 83
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	55 d2       	rcall	.+1194   	; 0x900 <_ZN12Rack_Encoder10InitialiseEh>
	
	
	INPUT(LTSWITCH_RACK_HOME);
     456:	24 98       	cbi	0x04, 4	; 4
	INPUT(LTSWITCH_RACK_FINAL);
     458:	e1 e0       	ldi	r30, 0x01	; 1
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	80 81       	ld	r24, Z
     45e:	8f 7b       	andi	r24, 0xBF	; 191
     460:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_FINAL);
     462:	e2 e0       	ldi	r30, 0x02	; 2
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	80 81       	ld	r24, Z
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	80 83       	st	Z, r24
	SET(LTSWITCH_RACK_HOME);
     46c:	2c 9a       	sbi	0x05, 4	; 5
	
	initialize_pneumatics();
     46e:	8c df       	rcall	.-232    	; 0x388 <_Z21initialize_pneumaticsv>
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_FINAL))
     470:	80 91 00 01 	lds	r24, 0x0100
     474:	86 ff       	sbrs	r24, 6
     476:	0a c0       	rjmp	.+20     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     478:	c0 e0       	ldi	r28, 0x00	; 0
     47a:	d1 e0       	ldi	r29, 0x01	; 1
	{
		RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
     47c:	6e ec       	ldi	r22, 0xCE	; 206
     47e:	7f ef       	ldi	r23, 0xFF	; 255
     480:	8e e6       	ldi	r24, 0x6E	; 110
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	b3 d2       	rcall	.+1382   	; 0x9ec <_ZN10Rack_Motor11SetOcrValueEi>
	SET(LTSWITCH_RACK_HOME);
	
	initialize_pneumatics();
	
	//home position of rack rotate
	while(READ(LTSWITCH_RACK_FINAL))
     486:	88 81       	ld	r24, Y
     488:	86 fd       	sbrc	r24, 6
     48a:	f8 cf       	rjmp	.-16     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		RackMotor.SetOcrValue(-RACK_SPEED_MOTOR);
	}
	Rack_home_position = false;  // true rack home-position -- initial position and false rack position -- final position
     48c:	10 92 09 02 	sts	0x0209, r1
	
	previous_time = millis();
     490:	9b df       	rcall	.-202    	; 0x3c8 <_Z6millisv>
     492:	60 93 4f 02 	sts	0x024F, r22
     496:	70 93 50 02 	sts	0x0250, r23
     49a:	80 93 51 02 	sts	0x0251, r24
     49e:	90 93 52 02 	sts	0x0252, r25
	
	
	RackEncoder.angle =0;
     4a2:	e0 e6       	ldi	r30, 0x60	; 96
     4a4:	f2 e0       	ldi	r31, 0x02	; 2
     4a6:	11 86       	std	Z+9, r1	; 0x09
     4a8:	12 86       	std	Z+10, r1	; 0x0a
     4aa:	13 86       	std	Z+11, r1	; 0x0b
     4ac:	14 86       	std	Z+12, r1	; 0x0c
	
	while(RackEncoder.angle <= 135)
     4ae:	81 85       	ldd	r24, Z+9	; 0x09
     4b0:	92 85       	ldd	r25, Z+10	; 0x0a
     4b2:	a3 85       	ldd	r26, Z+11	; 0x0b
     4b4:	b4 85       	ldd	r27, Z+12	; 0x0c
     4b6:	88 38       	cpi	r24, 0x88	; 136
     4b8:	91 05       	cpc	r25, r1
     4ba:	a1 05       	cpc	r26, r1
     4bc:	b1 05       	cpc	r27, r1
     4be:	7c f4       	brge	.+30     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4c0:	ef 01       	movw	r28, r30
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
     4c2:	62 e3       	ldi	r22, 0x32	; 50
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	8e e6       	ldi	r24, 0x6E	; 110
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	90 d2       	rcall	.+1312   	; 0x9ec <_ZN10Rack_Motor11SetOcrValueEi>
	previous_time = millis();
	
	
	RackEncoder.angle =0;
	
	while(RackEncoder.angle <= 135)
     4cc:	89 85       	ldd	r24, Y+9	; 0x09
     4ce:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d0:	ab 85       	ldd	r26, Y+11	; 0x0b
     4d2:	bc 85       	ldd	r27, Y+12	; 0x0c
     4d4:	88 38       	cpi	r24, 0x88	; 136
     4d6:	91 05       	cpc	r25, r1
     4d8:	a1 05       	cpc	r26, r1
     4da:	b1 05       	cpc	r27, r1
     4dc:	94 f3       	brlt	.-28     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	{
		RackMotor.SetOcrValue(RACK_SPEED_MOTOR);
	}
	
	angle_pid.Set_Pid(47.29,0.139,40.30);	//47.29 0.139  29.30
     4de:	0f 2e       	mov	r0, r31
     4e0:	f3 e3       	ldi	r31, 0x33	; 51
     4e2:	cf 2e       	mov	r12, r31
     4e4:	dc 2c       	mov	r13, r12
     4e6:	f1 e2       	ldi	r31, 0x21	; 33
     4e8:	ef 2e       	mov	r14, r31
     4ea:	f2 e4       	ldi	r31, 0x42	; 66
     4ec:	ff 2e       	mov	r15, r31
     4ee:	f0 2d       	mov	r31, r0
     4f0:	04 e0       	ldi	r16, 0x04	; 4
     4f2:	16 e5       	ldi	r17, 0x56	; 86
     4f4:	2e e0       	ldi	r18, 0x0E	; 14
     4f6:	3e e3       	ldi	r19, 0x3E	; 62
     4f8:	46 ef       	ldi	r20, 0xF6	; 246
     4fa:	58 e2       	ldi	r21, 0x28	; 40
     4fc:	6d e3       	ldi	r22, 0x3D	; 61
     4fe:	72 e4       	ldi	r23, 0x42	; 66
     500:	8b e2       	ldi	r24, 0x2B	; 43
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	2d de       	rcall	.-934    	; 0x160 <_ZN3PID7Set_PidEfff>
	rack_motor_pid.Set_Pid(3.08,0,9.89);	//3.08 0 9.89
     506:	0f 2e       	mov	r0, r31
     508:	f1 e7       	ldi	r31, 0x71	; 113
     50a:	cf 2e       	mov	r12, r31
     50c:	fd e3       	ldi	r31, 0x3D	; 61
     50e:	df 2e       	mov	r13, r31
     510:	fe e1       	ldi	r31, 0x1E	; 30
     512:	ef 2e       	mov	r14, r31
     514:	f1 e4       	ldi	r31, 0x41	; 65
     516:	ff 2e       	mov	r15, r31
     518:	f0 2d       	mov	r31, r0
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	98 01       	movw	r18, r16
     520:	48 eb       	ldi	r20, 0xB8	; 184
     522:	5e e1       	ldi	r21, 0x1E	; 30
     524:	65 e4       	ldi	r22, 0x45	; 69
     526:	70 e4       	ldi	r23, 0x40	; 64
     528:	83 e1       	ldi	r24, 0x13	; 19
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	19 de       	rcall	.-974    	; 0x160 <_ZN3PID7Set_PidEfff>
	
	//Setting the proximity pins
	INPUT(PROXIMITY_PIN);
     52e:	6d 98       	cbi	0x0d, 5	; 13
	SET(PROXIMITY_PIN);
     530:	75 9a       	sbi	0x0e, 5	; 14
	
	//setting the golden rack drop proximity pin
	INPUT(GOLDENEYE_PIN);
     532:	52 98       	cbi	0x0a, 2	; 10
	SET(GOLDENEYE_PIN);
     534:	5a 9a       	sbi	0x0b, 2	; 11
	

	
	initialise_timeperiod();
     536:	16 df       	rcall	.-468    	; 0x364 <_Z21initialise_timeperiodv>
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	08 95       	ret

0000054a <_Z16rack_limit_checkv>:


void rack_limit_check()
{
	
	if(!READ(LTSWITCH_RACK_HOME) && stop_rack_initial)	//if reached home position
     54a:	1c 99       	sbic	0x03, 4	; 3
     54c:	04 c0       	rjmp	.+8      	; 0x556 <_Z16rack_limit_checkv+0xc>
     54e:	80 91 07 02 	lds	r24, 0x0207
     552:	81 11       	cpse	r24, r1
     554:	0d c0       	rjmp	.+26     	; 0x570 <_Z16rack_limit_checkv+0x26>
		//open rack gripper when reached to home position
		throw_rack = true;
		previous_time = millis();
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && stop_rack_final)		//if reached final position
     556:	80 91 00 01 	lds	r24, 0x0100
     55a:	86 fd       	sbrc	r24, 6
     55c:	32 c0       	rjmp	.+100    	; 0x5c2 <_Z16rack_limit_checkv+0x78>
     55e:	80 91 06 02 	lds	r24, 0x0206
     562:	81 11       	cpse	r24, r1
     564:	1a c0       	rjmp	.+52     	; 0x59a <_Z16rack_limit_checkv+0x50>
     566:	08 95       	ret
		auto_move_rack = false;
		stop_rack_final = false;
		
		if (rack_throw_auto)
		{
			RACK_LIFT_CLOSE();
     568:	14 98       	cbi	0x02, 4	; 2
			rack_throw_auto = false;
     56a:	10 92 04 02 	sts	0x0204, r1
     56e:	08 95       	ret
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     570:	10 92 20 02 	sts	0x0220, r1
     574:	10 92 1f 02 	sts	0x021F, r1
{
	
	if(!READ(LTSWITCH_RACK_HOME) && stop_rack_initial)	//if reached home position
	{
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     578:	10 92 08 02 	sts	0x0208, r1
		stop_rack_initial = false;
     57c:	10 92 07 02 	sts	0x0207, r1
		
		//open rack gripper when reached to home position
		throw_rack = true;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 05 02 	sts	0x0205, r24
		previous_time = millis();
     586:	20 df       	rcall	.-448    	; 0x3c8 <_Z6millisv>
     588:	60 93 4f 02 	sts	0x024F, r22
     58c:	70 93 50 02 	sts	0x0250, r23
     590:	80 93 51 02 	sts	0x0251, r24
     594:	90 93 52 02 	sts	0x0252, r25
     598:	de cf       	rjmp	.-68     	; 0x556 <_Z16rack_limit_checkv+0xc>
	}
	
	if(!READ(LTSWITCH_RACK_FINAL) && stop_rack_final)		//if reached final position
	{
		RackEncoder.angle = 0;
     59a:	10 92 69 02 	sts	0x0269, r1
     59e:	10 92 6a 02 	sts	0x026A, r1
     5a2:	10 92 6b 02 	sts	0x026B, r1
     5a6:	10 92 6c 02 	sts	0x026C, r1
     5aa:	10 92 20 02 	sts	0x0220, r1
     5ae:	10 92 1f 02 	sts	0x021F, r1
		rack_motor_pid.Set_SP(0);
		auto_move_rack = false;
     5b2:	10 92 08 02 	sts	0x0208, r1
		stop_rack_final = false;
     5b6:	10 92 06 02 	sts	0x0206, r1
		
		if (rack_throw_auto)
     5ba:	80 91 04 02 	lds	r24, 0x0204
     5be:	81 11       	cpse	r24, r1
     5c0:	d3 cf       	rjmp	.-90     	; 0x568 <_Z16rack_limit_checkv+0x1e>
     5c2:	08 95       	ret

000005c4 <__vector_15>:



//Global timer2 interrupt

ISR(TIMER2_OVF_vect) {
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	8f 93       	push	r24
     5d0:	9f 93       	push	r25
     5d2:	af 93       	push	r26
     5d4:	bf 93       	push	r27
	timer2_millis += 1;
     5d6:	80 91 0f 02 	lds	r24, 0x020F
     5da:	90 91 10 02 	lds	r25, 0x0210
     5de:	a0 91 11 02 	lds	r26, 0x0211
     5e2:	b0 91 12 02 	lds	r27, 0x0212
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	a1 1d       	adc	r26, r1
     5ea:	b1 1d       	adc	r27, r1
     5ec:	80 93 0f 02 	sts	0x020F, r24
     5f0:	90 93 10 02 	sts	0x0210, r25
     5f4:	a0 93 11 02 	sts	0x0211, r26
     5f8:	b0 93 12 02 	sts	0x0212, r27
	timer2_fract += 3;
     5fc:	80 91 0b 02 	lds	r24, 0x020B
     600:	90 91 0c 02 	lds	r25, 0x020C
     604:	a0 91 0d 02 	lds	r26, 0x020D
     608:	b0 91 0e 02 	lds	r27, 0x020E
     60c:	03 96       	adiw	r24, 0x03	; 3
     60e:	a1 1d       	adc	r26, r1
     610:	b1 1d       	adc	r27, r1
     612:	80 93 0b 02 	sts	0x020B, r24
     616:	90 93 0c 02 	sts	0x020C, r25
     61a:	a0 93 0d 02 	sts	0x020D, r26
     61e:	b0 93 0e 02 	sts	0x020E, r27
	if (timer2_fract >= 125) {
     622:	80 91 0b 02 	lds	r24, 0x020B
     626:	90 91 0c 02 	lds	r25, 0x020C
     62a:	a0 91 0d 02 	lds	r26, 0x020D
     62e:	b0 91 0e 02 	lds	r27, 0x020E
     632:	8d 37       	cpi	r24, 0x7D	; 125
     634:	91 05       	cpc	r25, r1
     636:	a1 05       	cpc	r26, r1
     638:	b1 05       	cpc	r27, r1
     63a:	38 f1       	brcs	.+78     	; 0x68a <__vector_15+0xc6>
		timer2_fract -= 125;
     63c:	80 91 0b 02 	lds	r24, 0x020B
     640:	90 91 0c 02 	lds	r25, 0x020C
     644:	a0 91 0d 02 	lds	r26, 0x020D
     648:	b0 91 0e 02 	lds	r27, 0x020E
     64c:	8d 57       	subi	r24, 0x7D	; 125
     64e:	91 09       	sbc	r25, r1
     650:	a1 09       	sbc	r26, r1
     652:	b1 09       	sbc	r27, r1
     654:	80 93 0b 02 	sts	0x020B, r24
     658:	90 93 0c 02 	sts	0x020C, r25
     65c:	a0 93 0d 02 	sts	0x020D, r26
     660:	b0 93 0e 02 	sts	0x020E, r27
		timer2_millis += 1;
     664:	80 91 0f 02 	lds	r24, 0x020F
     668:	90 91 10 02 	lds	r25, 0x0210
     66c:	a0 91 11 02 	lds	r26, 0x0211
     670:	b0 91 12 02 	lds	r27, 0x0212
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	a1 1d       	adc	r26, r1
     678:	b1 1d       	adc	r27, r1
     67a:	80 93 0f 02 	sts	0x020F, r24
     67e:	90 93 10 02 	sts	0x0210, r25
     682:	a0 93 11 02 	sts	0x0211, r26
     686:	b0 93 12 02 	sts	0x0212, r27
	}
}
     68a:	bf 91       	pop	r27
     68c:	af 91       	pop	r26
     68e:	9f 91       	pop	r25
     690:	8f 91       	pop	r24
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <__vector_2>:

//Rack motor using veitnamese motor
ISR(INT_VECTR)
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	0b b6       	in	r0, 0x3b	; 59
     6a8:	0f 92       	push	r0
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
	if(bit_is_clear(ENCODERR_CHAPORTPIN,ENCODERR_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     6b6:	95 99       	sbic	0x12, 5	; 18
     6b8:	19 c0       	rjmp	.+50     	; 0x6ec <__vector_2+0x50>
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
	inline void dcrCount(){pprcount--;};
     6ba:	e0 e6       	ldi	r30, 0x60	; 96
     6bc:	f2 e0       	ldi	r31, 0x02	; 2
     6be:	85 81       	ldd	r24, Z+5	; 0x05
     6c0:	96 81       	ldd	r25, Z+6	; 0x06
     6c2:	a7 81       	ldd	r26, Z+7	; 0x07
     6c4:	b0 85       	ldd	r27, Z+8	; 0x08
     6c6:	01 97       	sbiw	r24, 0x01	; 1
     6c8:	a1 09       	sbc	r26, r1
     6ca:	b1 09       	sbc	r27, r1
     6cc:	85 83       	std	Z+5, r24	; 0x05
     6ce:	96 83       	std	Z+6, r25	; 0x06
     6d0:	a7 83       	std	Z+7, r26	; 0x07
     6d2:	b0 87       	std	Z+8, r27	; 0x08
	{
		RackEncoder.dcrCount();
		RackEncoder.angle--;
     6d4:	81 85       	ldd	r24, Z+9	; 0x09
     6d6:	92 85       	ldd	r25, Z+10	; 0x0a
     6d8:	a3 85       	ldd	r26, Z+11	; 0x0b
     6da:	b4 85       	ldd	r27, Z+12	; 0x0c
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	a1 09       	sbc	r26, r1
     6e0:	b1 09       	sbc	r27, r1
     6e2:	81 87       	std	Z+9, r24	; 0x09
     6e4:	92 87       	std	Z+10, r25	; 0x0a
     6e6:	a3 87       	std	Z+11, r26	; 0x0b
     6e8:	b4 87       	std	Z+12, r27	; 0x0c
     6ea:	18 c0       	rjmp	.+48     	; 0x71c <__vector_2+0x80>
	void Initialise(uint8_t x);
	void Init_Interrupts();
	void Init_Timers();
	inline long int Get_Speed(){return speed;};
	inline void Set_Speed(int val){speed = val;};
	inline void incCount(){pprcount++;};
     6ec:	e0 e6       	ldi	r30, 0x60	; 96
     6ee:	f2 e0       	ldi	r31, 0x02	; 2
     6f0:	85 81       	ldd	r24, Z+5	; 0x05
     6f2:	96 81       	ldd	r25, Z+6	; 0x06
     6f4:	a7 81       	ldd	r26, Z+7	; 0x07
     6f6:	b0 85       	ldd	r27, Z+8	; 0x08
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	a1 1d       	adc	r26, r1
     6fc:	b1 1d       	adc	r27, r1
     6fe:	85 83       	std	Z+5, r24	; 0x05
     700:	96 83       	std	Z+6, r25	; 0x06
     702:	a7 83       	std	Z+7, r26	; 0x07
     704:	b0 87       	std	Z+8, r27	; 0x08
	}
	else
	{
		RackEncoder.incCount();
		RackEncoder.angle++;
     706:	81 85       	ldd	r24, Z+9	; 0x09
     708:	92 85       	ldd	r25, Z+10	; 0x0a
     70a:	a3 85       	ldd	r26, Z+11	; 0x0b
     70c:	b4 85       	ldd	r27, Z+12	; 0x0c
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	a1 1d       	adc	r26, r1
     712:	b1 1d       	adc	r27, r1
     714:	81 87       	std	Z+9, r24	; 0x09
     716:	92 87       	std	Z+10, r25	; 0x0a
     718:	a3 87       	std	Z+11, r26	; 0x0b
     71a:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	0f 90       	pop	r0
     72a:	0b be       	out	0x3b, r0	; 59
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_1>:

//geneva motor cytron

ISR(INT_VECTG)
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	0b b6       	in	r0, 0x3b	; 59
     742:	0f 92       	push	r0
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	if(bit_is_clear(ENCODERG_CHAPORTPIN,ENCODERG_CHBPIN))		//ENCODER_CHAPORTPIN,ENCODER_CHBPIN
     750:	63 99       	sbic	0x0c, 3	; 12
     752:	0e c0       	rjmp	.+28     	; 0x770 <__vector_1+0x3a>
	{
		GenevaEncoder.angle++;
     754:	e3 e5       	ldi	r30, 0x53	; 83
     756:	f2 e0       	ldi	r31, 0x02	; 2
     758:	81 85       	ldd	r24, Z+9	; 0x09
     75a:	92 85       	ldd	r25, Z+10	; 0x0a
     75c:	a3 85       	ldd	r26, Z+11	; 0x0b
     75e:	b4 85       	ldd	r27, Z+12	; 0x0c
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	a1 1d       	adc	r26, r1
     764:	b1 1d       	adc	r27, r1
     766:	81 87       	std	Z+9, r24	; 0x09
     768:	92 87       	std	Z+10, r25	; 0x0a
     76a:	a3 87       	std	Z+11, r26	; 0x0b
     76c:	b4 87       	std	Z+12, r27	; 0x0c
     76e:	0d c0       	rjmp	.+26     	; 0x78a <__vector_1+0x54>
	}
	else
	{
		GenevaEncoder.angle--;
     770:	e3 e5       	ldi	r30, 0x53	; 83
     772:	f2 e0       	ldi	r31, 0x02	; 2
     774:	81 85       	ldd	r24, Z+9	; 0x09
     776:	92 85       	ldd	r25, Z+10	; 0x0a
     778:	a3 85       	ldd	r26, Z+11	; 0x0b
     77a:	b4 85       	ldd	r27, Z+12	; 0x0c
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	a1 09       	sbc	r26, r1
     780:	b1 09       	sbc	r27, r1
     782:	81 87       	std	Z+9, r24	; 0x09
     784:	92 87       	std	Z+10, r25	; 0x0a
     786:	a3 87       	std	Z+11, r26	; 0x0b
     788:	b4 87       	std	Z+12, r27	; 0x0c
	}
	
}
     78a:	ff 91       	pop	r31
     78c:	ef 91       	pop	r30
     78e:	bf 91       	pop	r27
     790:	af 91       	pop	r26
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_42>:


ISR(TIMER4_COMPA_vect)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	0b b6       	in	r0, 0x3b	; 59
     7b0:	0f 92       	push	r0
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
	pid_compute_flag = true;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 45 02 	sts	0x0245, r24
	inline void dcrCount(){pprcount--;};
	inline int Get_count(){return pprcount;};
	inline void Set_count(int val){pprcount = val;};
	inline void Calc_Speed(){speed = pprcount;pprcount = 0;}; //keep in timer compare match
     7c6:	e0 e6       	ldi	r30, 0x60	; 96
     7c8:	f2 e0       	ldi	r31, 0x02	; 2
     7ca:	45 81       	ldd	r20, Z+5	; 0x05
     7cc:	56 81       	ldd	r21, Z+6	; 0x06
     7ce:	67 81       	ldd	r22, Z+7	; 0x07
     7d0:	70 85       	ldd	r23, Z+8	; 0x08
     7d2:	41 83       	std	Z+1, r20	; 0x01
     7d4:	52 83       	std	Z+2, r21	; 0x02
     7d6:	63 83       	std	Z+3, r22	; 0x03
     7d8:	74 83       	std	Z+4, r23	; 0x04
     7da:	15 82       	std	Z+5, r1	; 0x05
     7dc:	16 82       	std	Z+6, r1	; 0x06
     7de:	17 82       	std	Z+7, r1	; 0x07
     7e0:	10 86       	std	Z+8, r1	; 0x08
	RackEncoder.Calc_Speed();
	send_time = true;
     7e2:	80 93 46 02 	sts	0x0246, r24
}
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	8f 91       	pop	r24
     7ec:	7f 91       	pop	r23
     7ee:	6f 91       	pop	r22
     7f0:	5f 91       	pop	r21
     7f2:	4f 91       	pop	r20
     7f4:	0f 90       	pop	r0
     7f6:	0b be       	out	0x3b, r0	; 59
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <_GLOBAL__sub_I_RackMotor>:
	
	public:
	
	volatile long int angle;
	
	Rack_Encoder():speed(0),pprcount(0),angle(0){};
     802:	e0 e6       	ldi	r30, 0x60	; 96
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	11 82       	std	Z+1, r1	; 0x01
     808:	12 82       	std	Z+2, r1	; 0x02
     80a:	13 82       	std	Z+3, r1	; 0x03
     80c:	14 82       	std	Z+4, r1	; 0x04
     80e:	15 82       	std	Z+5, r1	; 0x05
     810:	16 82       	std	Z+6, r1	; 0x06
     812:	17 82       	std	Z+7, r1	; 0x07
     814:	10 86       	std	Z+8, r1	; 0x08
     816:	11 86       	std	Z+9, r1	; 0x09
     818:	12 86       	std	Z+10, r1	; 0x0a
     81a:	13 86       	std	Z+11, r1	; 0x0b
     81c:	14 86       	std	Z+12, r1	; 0x0c
     81e:	e3 e5       	ldi	r30, 0x53	; 83
     820:	f2 e0       	ldi	r31, 0x02	; 2
     822:	11 82       	std	Z+1, r1	; 0x01
     824:	12 82       	std	Z+2, r1	; 0x02
     826:	13 82       	std	Z+3, r1	; 0x03
     828:	14 82       	std	Z+4, r1	; 0x04
     82a:	15 82       	std	Z+5, r1	; 0x05
     82c:	16 82       	std	Z+6, r1	; 0x06
     82e:	17 82       	std	Z+7, r1	; 0x07
     830:	10 86       	std	Z+8, r1	; 0x08
     832:	11 86       	std	Z+9, r1	; 0x09
     834:	12 86       	std	Z+10, r1	; 0x0a
     836:	13 86       	std	Z+11, r1	; 0x0b
     838:	14 86       	std	Z+12, r1	; 0x0c
		int sp; 
		int error , lastinput , errorsum;
		float cv;
		
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
     83a:	eb e2       	ldi	r30, 0x2B	; 43
     83c:	f2 e0       	ldi	r31, 0x02	; 2
     83e:	10 82       	st	Z, r1
     840:	11 82       	std	Z+1, r1	; 0x01
     842:	12 82       	std	Z+2, r1	; 0x02
     844:	13 82       	std	Z+3, r1	; 0x03
     846:	14 82       	std	Z+4, r1	; 0x04
     848:	15 82       	std	Z+5, r1	; 0x05
     84a:	16 82       	std	Z+6, r1	; 0x06
     84c:	17 82       	std	Z+7, r1	; 0x07
     84e:	10 86       	std	Z+8, r1	; 0x08
     850:	11 86       	std	Z+9, r1	; 0x09
     852:	12 86       	std	Z+10, r1	; 0x0a
     854:	13 86       	std	Z+11, r1	; 0x0b
     856:	15 86       	std	Z+13, r1	; 0x0d
     858:	14 86       	std	Z+12, r1	; 0x0c
     85a:	17 86       	std	Z+15, r1	; 0x0f
     85c:	16 86       	std	Z+14, r1	; 0x0e
     85e:	11 8a       	std	Z+17, r1	; 0x11
     860:	10 8a       	std	Z+16, r1	; 0x10
     862:	13 8a       	std	Z+19, r1	; 0x13
     864:	12 8a       	std	Z+18, r1	; 0x12
     866:	e3 e1       	ldi	r30, 0x13	; 19
     868:	f2 e0       	ldi	r31, 0x02	; 2
     86a:	10 82       	st	Z, r1
     86c:	11 82       	std	Z+1, r1	; 0x01
     86e:	12 82       	std	Z+2, r1	; 0x02
     870:	13 82       	std	Z+3, r1	; 0x03
     872:	14 82       	std	Z+4, r1	; 0x04
     874:	15 82       	std	Z+5, r1	; 0x05
     876:	16 82       	std	Z+6, r1	; 0x06
     878:	17 82       	std	Z+7, r1	; 0x07
     87a:	10 86       	std	Z+8, r1	; 0x08
     87c:	11 86       	std	Z+9, r1	; 0x09
     87e:	12 86       	std	Z+10, r1	; 0x0a
     880:	13 86       	std	Z+11, r1	; 0x0b
     882:	15 86       	std	Z+13, r1	; 0x0d
     884:	14 86       	std	Z+12, r1	; 0x0c
     886:	17 86       	std	Z+15, r1	; 0x0f
     888:	16 86       	std	Z+14, r1	; 0x0e
     88a:	11 8a       	std	Z+17, r1	; 0x11
     88c:	10 8a       	std	Z+16, r1	; 0x10
     88e:	13 8a       	std	Z+19, r1	; 0x13
     890:	12 8a       	std	Z+18, r1	; 0x12
     892:	08 95       	ret

00000894 <_ZN12Rack_Encoder11Init_TimersEv>:
}

void Rack_Encoder::Init_Timers()
{
	static bool was_initialized = false;
	if(!was_initialized)
     894:	80 91 6f 02 	lds	r24, 0x026F
     898:	81 11       	cpse	r24, r1
     89a:	17 c0       	rjmp	.+46     	; 0x8ca <_ZN12Rack_Encoder11Init_TimersEv+0x36>
	{
		TCCR4B |= ((1<<WGM42)|(1<<CS40)|(1<<CS41)); //CTC mode and prescaler of 64
     89c:	e1 ea       	ldi	r30, 0xA1	; 161
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	8b 60       	ori	r24, 0x0B	; 11
     8a4:	80 83       	st	Z, r24
		TIMSK4 |= (1<<OCIE4A);
     8a6:	e2 e7       	ldi	r30, 0x72	; 114
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	82 60       	ori	r24, 0x02	; 2
     8ae:	80 83       	st	Z, r24
		OCR4A  = 250*DELAYTIMEMS;
     8b0:	88 e8       	ldi	r24, 0x88	; 136
     8b2:	93 e1       	ldi	r25, 0x13	; 19
     8b4:	90 93 a9 00 	sts	0x00A9, r25
     8b8:	80 93 a8 00 	sts	0x00A8, r24
		TCNT4 = 0;
     8bc:	10 92 a5 00 	sts	0x00A5, r1
     8c0:	10 92 a4 00 	sts	0x00A4, r1
		was_initialized = true;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 6f 02 	sts	0x026F, r24
     8ca:	08 95       	ret

000008cc <_ZN12Rack_Encoder15Init_InterruptsEv>:
	Init_Interrupts();
}

void Rack_Encoder::Init_Interrupts()
{
	sei();
     8cc:	78 94       	sei
	if (no==1)
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 81       	ld	r18, Z
     8d2:	21 30       	cpi	r18, 0x01	; 1
     8d4:	49 f4       	brne	.+18     	; 0x8e8 <_ZN12Rack_Encoder15Init_InterruptsEv+0x1c>
	{
		EIMSK &= ~(1<<ENCODERR_INT);
     8d6:	e9 98       	cbi	0x1d, 1	; 29
		EICRA |= (1<<INTR_ISC1);	//falling edge
     8d8:	e9 e6       	ldi	r30, 0x69	; 105
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	20 81       	ld	r18, Z
     8de:	28 60       	ori	r18, 0x08	; 8
     8e0:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERR_INT);		//setting INT pin
     8e2:	e9 9a       	sbi	0x1d, 1	; 29
		EIFR |= (1<<INTR_INTF);	    //clear int flag
     8e4:	e1 9a       	sbi	0x1c, 1	; 28
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	}
	else if (no==2)
     8e8:	22 30       	cpi	r18, 0x02	; 2
     8ea:	41 f4       	brne	.+16     	; 0x8fc <_ZN12Rack_Encoder15Init_InterruptsEv+0x30>
	{
		EIMSK &= ~(1<<ENCODERG_INT);
     8ec:	e8 98       	cbi	0x1d, 0	; 29
		EICRA |= (1<<INTG_ISC1);	//falling edge
     8ee:	e9 e6       	ldi	r30, 0x69	; 105
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	20 81       	ld	r18, Z
     8f4:	22 60       	ori	r18, 0x02	; 2
     8f6:	20 83       	st	Z, r18
		EIMSK |= (1<<ENCODERG_INT);		//setting INT pin
     8f8:	e8 9a       	sbi	0x1d, 0	; 29
		EIFR |= (1<<INTG_INTF);	    //clear int flag
     8fa:	e0 9a       	sbi	0x1c, 0	; 28
	}
	Init_Timers();
     8fc:	cb cf       	rjmp	.-106    	; 0x894 <_ZN12Rack_Encoder11Init_TimersEv>
     8fe:	08 95       	ret

00000900 <_ZN12Rack_Encoder10InitialiseEh>:

#include "Rack_Encoder.h"

void Rack_Encoder::Initialise(uint8_t x)
{
	no = x;
     900:	fc 01       	movw	r30, r24
     902:	60 83       	st	Z, r22
	if(no==1)
     904:	61 30       	cpi	r22, 0x01	; 1
     906:	29 f4       	brne	.+10     	; 0x912 <_ZN12Rack_Encoder10InitialiseEh+0x12>
	{
		INPUT(ENCODERR_CHANNELA);
     908:	51 98       	cbi	0x0a, 1	; 10
		INPUT(ENCODERR_CHANNELB);
     90a:	9d 98       	cbi	0x13, 5	; 19
		SET(ENCODERR_CHANNELA);
     90c:	59 9a       	sbi	0x0b, 1	; 11
		SET(ENCODERR_CHANNELB);
     90e:	a5 9a       	sbi	0x14, 5	; 20
     910:	06 c0       	rjmp	.+12     	; 0x91e <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	}
	else if (no==2)
     912:	62 30       	cpi	r22, 0x02	; 2
     914:	21 f4       	brne	.+8      	; 0x91e <_ZN12Rack_Encoder10InitialiseEh+0x1e>
	{
		INPUT(ENCODERG_CHANNELA);
     916:	50 98       	cbi	0x0a, 0	; 10
		INPUT(ENCODERG_CHANNELB);
     918:	6b 98       	cbi	0x0d, 3	; 13
		SET(ENCODERG_CHANNELA);
     91a:	58 9a       	sbi	0x0b, 0	; 11
		SET(ENCODERG_CHANNELB);
     91c:	73 9a       	sbi	0x0e, 3	; 14
	}
	Init_Interrupts();
     91e:	d6 cf       	rjmp	.-84     	; 0x8cc <_ZN12Rack_Encoder15Init_InterruptsEv>
     920:	08 95       	ret

00000922 <_ZN10Rack_Motor7InitPWMEv>:

}

void Rack_Motor::InitPWM()
{
	if (num==1)
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	c1 f4       	brne	.+48     	; 0x95a <_ZN10Rack_Motor7InitPWMEv+0x38>
	{
		OUTPUT(DD_F5);
     92a:	0b 9a       	sbi	0x01, 3	; 1
		OUTPUT(DD_B5);
     92c:	09 9a       	sbi	0x01, 1	; 1

		OUTPUT(DD_PWM5);
     92e:	ea e0       	ldi	r30, 0x0A	; 10
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	80 81       	ld	r24, Z
     934:	80 62       	ori	r24, 0x20	; 32
     936:	80 83       	st	Z, r24

		PWM_TCCRA5	|=  ( 1 << PWM_5COM1 ) | ( 1 << PWM_5WGM1 );														//
     938:	e0 e2       	ldi	r30, 0x20	; 32
     93a:	f1 e0       	ldi	r31, 0x01	; 1
     93c:	80 81       	ld	r24, Z
     93e:	8a 60       	ori	r24, 0x0A	; 10
     940:	80 83       	st	Z, r24
		PWM_TCCRB5	|=  ( 1 << PWM_5WGM2 ) | ( 1 << PWM_5WGM3 ) | ( 1 << PWM_5CS1);									//PRESCALAR 8
     942:	e1 e2       	ldi	r30, 0x21	; 33
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	80 81       	ld	r24, Z
     948:	8a 61       	ori	r24, 0x1A	; 26
     94a:	80 83       	st	Z, r24
		PWM_ICR5		 =        RACK_ICR_TOP;
     94c:	89 ef       	ldi	r24, 0xF9	; 249
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 27 01 	sts	0x0127, r25
     954:	80 93 26 01 	sts	0x0126, r24
     958:	08 95       	ret
	}
	else if(num==2)
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	b9 f4       	brne	.+46     	; 0x98c <_ZN10Rack_Motor7InitPWMEv+0x6a>
	{
		OUTPUT(DD_F6);
     95e:	0f 9a       	sbi	0x01, 7	; 1
		OUTPUT(DD_B6);
     960:	0d 9a       	sbi	0x01, 5	; 1

		OUTPUT(DD_PWM6);
     962:	ea e0       	ldi	r30, 0x0A	; 10
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	80 81       	ld	r24, Z
     968:	80 61       	ori	r24, 0x10	; 16
     96a:	80 83       	st	Z, r24

		PWM_TCCRA6	|=  ( 1 << PWM_6COM1 ) | ( 1 << PWM_6WGM1 );														//
     96c:	e0 e2       	ldi	r30, 0x20	; 32
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	80 81       	ld	r24, Z
     972:	82 62       	ori	r24, 0x22	; 34
     974:	80 83       	st	Z, r24
		PWM_TCCRB6	|=  ( 1 << PWM_6WGM2 ) | ( 1 << PWM_6WGM3 ) | ( 1 << PWM_6CS1);									//PRESCALAR 8
     976:	e1 e2       	ldi	r30, 0x21	; 33
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	80 81       	ld	r24, Z
     97c:	8a 61       	ori	r24, 0x1A	; 26
     97e:	80 83       	st	Z, r24
		PWM_ICR6		 =         RACK_ICR_TOP;
     980:	89 ef       	ldi	r24, 0xF9	; 249
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 27 01 	sts	0x0127, r25
     988:	80 93 26 01 	sts	0x0126, r24
     98c:	08 95       	ret

0000098e <_ZN10Rack_Motor19SetForwardDirectionEv>:
	
}

void Rack_Motor::SetForwardDirection()
{
	switch(num)
     98e:	fc 01       	movw	r30, r24
     990:	80 81       	ld	r24, Z
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	19 f0       	breq	.+6      	; 0x99c <_ZN10Rack_Motor19SetForwardDirectionEv+0xe>
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	21 f0       	breq	.+8      	; 0x9a2 <_ZN10Rack_Motor19SetForwardDirectionEv+0x14>
     99a:	08 95       	ret
	{
		case 1:
		SET		(DD_F5);
     99c:	13 9a       	sbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     99e:	11 98       	cbi	0x02, 1	; 2
		break;
     9a0:	08 95       	ret
		case 2:
		SET		(DD_F6);
     9a2:	17 9a       	sbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     9a4:	15 98       	cbi	0x02, 5	; 2
     9a6:	08 95       	ret

000009a8 <_ZN10Rack_Motor19SetReverseDirectionEv>:
	

}
void Rack_Motor::SetReverseDirection()
{
	switch(num)
     9a8:	fc 01       	movw	r30, r24
     9aa:	80 81       	ld	r24, Z
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	19 f0       	breq	.+6      	; 0x9b6 <_ZN10Rack_Motor19SetReverseDirectionEv+0xe>
     9b0:	82 30       	cpi	r24, 0x02	; 2
     9b2:	21 f0       	breq	.+8      	; 0x9bc <_ZN10Rack_Motor19SetReverseDirectionEv+0x14>
     9b4:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     9b6:	13 98       	cbi	0x02, 3	; 2
		SET		(DD_B5);
     9b8:	11 9a       	sbi	0x02, 1	; 2
		break;
     9ba:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     9bc:	17 98       	cbi	0x02, 7	; 2
		SET		(DD_B6);
     9be:	15 9a       	sbi	0x02, 5	; 2
     9c0:	08 95       	ret

000009c2 <_ZN10Rack_Motor9StopMotorEv>:

}

void Rack_Motor::StopMotor()
{
	switch(num)
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	19 f0       	breq	.+6      	; 0x9d0 <_ZN10Rack_Motor9StopMotorEv+0xe>
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	41 f0       	breq	.+16     	; 0x9de <_ZN10Rack_Motor9StopMotorEv+0x1c>
     9ce:	08 95       	ret
	{
		case 1:
		CLEAR	(DD_F5);
     9d0:	13 98       	cbi	0x02, 3	; 2
		CLEAR	(DD_B5);
     9d2:	11 98       	cbi	0x02, 1	; 2

		PWM_OCR5 = 0;
     9d4:	10 92 2d 01 	sts	0x012D, r1
     9d8:	10 92 2c 01 	sts	0x012C, r1
		break;
     9dc:	08 95       	ret
		case 2:
		CLEAR	(DD_F6);
     9de:	17 98       	cbi	0x02, 7	; 2
		CLEAR	(DD_B6);
     9e0:	15 98       	cbi	0x02, 5	; 2

		PWM_OCR6 = 0;
     9e2:	10 92 2b 01 	sts	0x012B, r1
     9e6:	10 92 2a 01 	sts	0x012A, r1
     9ea:	08 95       	ret

000009ec <_ZN10Rack_Motor11SetOcrValueEi>:
	}
}


void Rack_Motor::SetOcrValue(int Ocr)
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	8c 01       	movw	r16, r24
     9f6:	eb 01       	movw	r28, r22
  if (Ocr > 0)
     9f8:	1c 16       	cp	r1, r28
     9fa:	1d 06       	cpc	r1, r29
     9fc:	0c f4       	brge	.+2      	; 0xa00 <_ZN10Rack_Motor11SetOcrValueEi+0x14>
	SetForwardDirection();
     9fe:	c7 df       	rcall	.-114    	; 0x98e <_ZN10Rack_Motor19SetForwardDirectionEv>
  if( Ocr < 0)
     a00:	dd 23       	and	r29, r29
     a02:	2c f4       	brge	.+10     	; 0xa0e <_ZN10Rack_Motor11SetOcrValueEi+0x22>
  {
	  Ocr = -Ocr;
     a04:	d1 95       	neg	r29
     a06:	c1 95       	neg	r28
     a08:	d1 09       	sbc	r29, r1
	  SetReverseDirection();
     a0a:	c8 01       	movw	r24, r16
     a0c:	cd df       	rcall	.-102    	; 0x9a8 <_ZN10Rack_Motor19SetReverseDirectionEv>
     a0e:	ca 3f       	cpi	r28, 0xFA	; 250
     a10:	d1 05       	cpc	r29, r1
     a12:	14 f0       	brlt	.+4      	; 0xa18 <_ZN10Rack_Motor11SetOcrValueEi+0x2c>
     a14:	c9 ef       	ldi	r28, 0xF9	; 249
     a16:	d0 e0       	ldi	r29, 0x00	; 0
  }
  if( Ocr > RACK_MAX_VALUE)
	Ocr = RACK_MAX_VALUE;
	switch(num)
     a18:	f8 01       	movw	r30, r16
     a1a:	80 81       	ld	r24, Z
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	19 f0       	breq	.+6      	; 0xa26 <_ZN10Rack_Motor11SetOcrValueEi+0x3a>
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	31 f0       	breq	.+12     	; 0xa30 <_ZN10Rack_Motor11SetOcrValueEi+0x44>
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
	{
		case 1:
		PWM_OCR5	= Ocr;
     a26:	d0 93 2d 01 	sts	0x012D, r29
     a2a:	c0 93 2c 01 	sts	0x012C, r28
		break;
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <_ZN10Rack_Motor11SetOcrValueEi+0x4c>
		case 2:
		PWM_OCR6	= Ocr;
     a30:	d0 93 2b 01 	sts	0x012B, r29
     a34:	c0 93 2a 01 	sts	0x012A, r28
		break;
	}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <_ZN10Rack_Motor10InitialiseEh>:


#include "Rack_Motor.h"

void Rack_Motor::Initialise(uint8_t no)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
	num = no;
     a48:	68 83       	st	Y, r22
	InitPWM();
     a4a:	6b df       	rcall	.-298    	; 0x922 <_ZN10Rack_Motor7InitPWMEv>

	StopMotor();
     a4c:	ce 01       	movw	r24, r28
     a4e:	b9 df       	rcall	.-142    	; 0x9c2 <_ZN10Rack_Motor9StopMotorEv>
	SetOcrValue(0);
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	ce 01       	movw	r24, r28
     a56:	ca df       	rcall	.-108    	; 0x9ec <_ZN10Rack_Motor11SetOcrValueEi>

}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <_Z17operation_of_rackv>:
	orientation_check();

}

void operation_of_rack()
{								//100
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
		if (RackEncoder.angle <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where near to the final position
     a62:	80 91 69 02 	lds	r24, 0x0269
     a66:	90 91 6a 02 	lds	r25, 0x026A
     a6a:	a0 91 6b 02 	lds	r26, 0x026B
     a6e:	b0 91 6c 02 	lds	r27, 0x026C
     a72:	85 36       	cpi	r24, 0x65	; 101
     a74:	91 05       	cpc	r25, r1
     a76:	a1 05       	cpc	r26, r1
     a78:	b1 05       	cpc	r27, r1
     a7a:	0c f0       	brlt	.+2      	; 0xa7e <_Z17operation_of_rackv+0x20>
     a7c:	e9 c0       	rjmp	.+466    	; 0xc50 <_Z17operation_of_rackv+0x1f2>
     a7e:	80 91 09 02 	lds	r24, 0x0209
     a82:	81 11       	cpse	r24, r1
     a84:	f4 c0       	rjmp	.+488    	; 0xc6e <_Z17operation_of_rackv+0x210>
     a86:	1f c1       	rjmp	.+574    	; 0xcc6 <_Z17operation_of_rackv+0x268>
		{
			Rack_home_position = false;
			stop_rack_final = true;
		}	
		else if(RackEncoder.angle >= RACK_POSITION_COUNT && !Rack_home_position) //near to the home position
     a88:	80 91 09 02 	lds	r24, 0x0209
     a8c:	88 23       	and	r24, r24
     a8e:	09 f4       	brne	.+2      	; 0xa92 <_Z17operation_of_rackv+0x34>
     a90:	f4 c0       	rjmp	.+488    	; 0xc7a <_Z17operation_of_rackv+0x21c>
			stop_rack_initial = true;
		}
		
		/*******************************************Geneva operation*********************************************/
		
		if (Geneva_Start && GenevaEncoder.angle >= 360 && angle_pid.Get_Error() <= 3)
     a92:	80 91 0a 02 	lds	r24, 0x020A
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <_Z17operation_of_rackv+0x3e>
     a9a:	48 c0       	rjmp	.+144    	; 0xb2c <_Z17operation_of_rackv+0xce>
     a9c:	80 91 5c 02 	lds	r24, 0x025C
     aa0:	90 91 5d 02 	lds	r25, 0x025D
     aa4:	a0 91 5e 02 	lds	r26, 0x025E
     aa8:	b0 91 5f 02 	lds	r27, 0x025F
     aac:	88 36       	cpi	r24, 0x68	; 104
     aae:	91 40       	sbci	r25, 0x01	; 1
     ab0:	a1 05       	cpc	r26, r1
     ab2:	b1 05       	cpc	r27, r1
     ab4:	0c f4       	brge	.+2      	; 0xab8 <_Z17operation_of_rackv+0x5a>
     ab6:	02 c1       	rjmp	.+516    	; 0xcbc <_Z17operation_of_rackv+0x25e>
		inline void Dcr_D(){kd-=0.01;};
		inline float Get_P(){return kp;};
		inline float Get_I(){return ki;};
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
     ab8:	60 91 39 02 	lds	r22, 0x0239
     abc:	70 91 3a 02 	lds	r23, 0x023A
     ac0:	77 23       	and	r23, r23
     ac2:	1c f4       	brge	.+6      	; 0xaca <_Z17operation_of_rackv+0x6c>
     ac4:	71 95       	neg	r23
     ac6:	61 95       	neg	r22
     ac8:	71 09       	sbc	r23, r1
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	92 d7       	rcall	.+3876   	; 0x19f8 <__floatsisf>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e4       	ldi	r20, 0x40	; 64
     ada:	50 e4       	ldi	r21, 0x40	; 64
     adc:	ee d6       	rcall	.+3548   	; 0x18ba <__cmpsf2>
     ade:	18 16       	cp	r1, r24
     ae0:	0c f0       	brlt	.+2      	; 0xae4 <_Z17operation_of_rackv+0x86>
     ae2:	d1 c0       	rjmp	.+418    	; 0xc86 <_Z17operation_of_rackv+0x228>
     ae4:	eb c0       	rjmp	.+470    	; 0xcbc <_Z17operation_of_rackv+0x25e>
			Geneva_Start = false;
		}
		
		if(Geneva_Start)
		{
			if( rack_throw_auto && GenevaEncoder.angle >= 200)
     ae6:	80 91 5c 02 	lds	r24, 0x025C
     aea:	90 91 5d 02 	lds	r25, 0x025D
     aee:	a0 91 5e 02 	lds	r26, 0x025E
     af2:	b0 91 5f 02 	lds	r27, 0x025F
     af6:	88 3c       	cpi	r24, 0xC8	; 200
     af8:	91 05       	cpc	r25, r1
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	0c f0       	brlt	.+2      	; 0xb02 <_Z17operation_of_rackv+0xa4>
     b00:	d7 c0       	rjmp	.+430    	; 0xcb0 <_Z17operation_of_rackv+0x252>
				SHUTTCOCK_PASS_CLOSE();
				SHUTTCOCK_GRIP_CLOSE();
				inside_robot = true;
			}
			//stop geneva
			if(GenevaEncoder.angle >= 120)
     b02:	80 91 5c 02 	lds	r24, 0x025C
     b06:	90 91 5d 02 	lds	r25, 0x025D
     b0a:	a0 91 5e 02 	lds	r26, 0x025E
     b0e:	b0 91 5f 02 	lds	r27, 0x025F
     b12:	88 37       	cpi	r24, 0x78	; 120
     b14:	91 05       	cpc	r25, r1
     b16:	a1 05       	cpc	r26, r1
     b18:	b1 05       	cpc	r27, r1
     b1a:	44 f0       	brlt	.+16     	; 0xb2c <_Z17operation_of_rackv+0xce>
				pneumatic_geneva_start = false;
     b1c:	10 92 02 02 	sts	0x0202, r1
		}

		//pid computation
		if (pid_compute_flag)
     b20:	80 91 45 02 	lds	r24, 0x0245
     b24:	88 23       	and	r24, r24
     b26:	09 f4       	brne	.+2      	; 0xb2a <_Z17operation_of_rackv+0xcc>
     b28:	42 c0       	rjmp	.+132    	; 0xbae <_Z17operation_of_rackv+0x150>
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <_Z17operation_of_rackv+0xd6>
     b2c:	80 91 45 02 	lds	r24, 0x0245
     b30:	88 23       	and	r24, r24
     b32:	e1 f0       	breq	.+56     	; 0xb6c <_Z17operation_of_rackv+0x10e>
		{
			GenevaMotor.SetOcrValue(angle_pid.angle_Compute(GenevaEncoder.angle));
     b34:	60 91 5c 02 	lds	r22, 0x025C
     b38:	70 91 5d 02 	lds	r23, 0x025D
     b3c:	80 91 5e 02 	lds	r24, 0x025E
     b40:	90 91 5f 02 	lds	r25, 0x025F
     b44:	8b e2       	ldi	r24, 0x2B	; 43
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	9c db       	rcall	.-2248   	; 0x282 <_ZN3PID13angle_ComputeEi>
     b4a:	23 d7       	rcall	.+3654   	; 0x1992 <__fixsfsi>
     b4c:	8d e6       	ldi	r24, 0x6D	; 109
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	4d df       	rcall	.-358    	; 0x9ec <_ZN10Rack_Motor11SetOcrValueEi>
			RackMotor.SetOcrValue(rack_motor_pid.Compute(RackEncoder.Get_Speed()));
     b52:	60 91 61 02 	lds	r22, 0x0261
     b56:	70 91 62 02 	lds	r23, 0x0262
     b5a:	83 e1       	ldi	r24, 0x13	; 19
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	1a db       	rcall	.-2508   	; 0x194 <_ZN3PID7ComputeEi>
     b60:	18 d7       	rcall	.+3632   	; 0x1992 <__fixsfsi>
     b62:	8e e6       	ldi	r24, 0x6E	; 110
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	42 df       	rcall	.-380    	; 0x9ec <_ZN10Rack_Motor11SetOcrValueEi>
			pid_compute_flag = false;
     b68:	10 92 45 02 	sts	0x0245, r1
		}
		
		/*************************************************Delay operation*****************************************/
		
		
		if(pneumatic_geneva_start && (millis()-pneumatic_geneva_time) > 700)
     b6c:	80 91 02 02 	lds	r24, 0x0202
     b70:	88 23       	and	r24, r24
     b72:	e9 f0       	breq	.+58     	; 0xbae <_Z17operation_of_rackv+0x150>
     b74:	29 dc       	rcall	.-1966   	; 0x3c8 <_Z6millisv>
     b76:	00 91 4b 02 	lds	r16, 0x024B
     b7a:	10 91 4c 02 	lds	r17, 0x024C
     b7e:	20 91 4d 02 	lds	r18, 0x024D
     b82:	30 91 4e 02 	lds	r19, 0x024E
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	80 1b       	sub	r24, r16
     b8c:	91 0b       	sbc	r25, r17
     b8e:	a2 0b       	sbc	r26, r18
     b90:	b3 0b       	sbc	r27, r19
     b92:	8d 3b       	cpi	r24, 0xBD	; 189
     b94:	92 40       	sbci	r25, 0x02	; 2
     b96:	a1 05       	cpc	r26, r1
     b98:	b1 05       	cpc	r27, r1
     b9a:	48 f0       	brcs	.+18     	; 0xbae <_Z17operation_of_rackv+0x150>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     b9c:	88 e6       	ldi	r24, 0x68	; 104
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	90 93 38 02 	sts	0x0238, r25
     ba4:	80 93 37 02 	sts	0x0237, r24
		{
			angle_pid.Set_SP(360);
			Geneva_Start = true;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 0a 02 	sts	0x020A, r24
		}
		
		if (pass_the_shuttcock && (millis()-passing_time) > 300)
     bae:	80 91 00 02 	lds	r24, 0x0200
     bb2:	88 23       	and	r24, r24
     bb4:	c9 f0       	breq	.+50     	; 0xbe8 <_Z17operation_of_rackv+0x18a>
     bb6:	08 dc       	rcall	.-2032   	; 0x3c8 <_Z6millisv>
     bb8:	00 91 47 02 	lds	r16, 0x0247
     bbc:	10 91 48 02 	lds	r17, 0x0248
     bc0:	20 91 49 02 	lds	r18, 0x0249
     bc4:	30 91 4a 02 	lds	r19, 0x024A
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	80 1b       	sub	r24, r16
     bce:	91 0b       	sbc	r25, r17
     bd0:	a2 0b       	sbc	r26, r18
     bd2:	b3 0b       	sbc	r27, r19
     bd4:	8d 32       	cpi	r24, 0x2D	; 45
     bd6:	91 40       	sbci	r25, 0x01	; 1
     bd8:	a1 05       	cpc	r26, r1
     bda:	b1 05       	cpc	r27, r1
     bdc:	28 f0       	brcs	.+10     	; 0xbe8 <_Z17operation_of_rackv+0x18a>
		{
			SHUTTCOCK_PASS_TOGGLE();
     bde:	88 b1       	in	r24, 0x08	; 8
     be0:	80 58       	subi	r24, 0x80	; 128
     be2:	88 b9       	out	0x08, r24	; 8
			pass_the_shuttcock = false;
     be4:	10 92 00 02 	sts	0x0200, r1
		}
		
		if(throw_rack && (millis()-previous_time) >= 300)
     be8:	80 91 05 02 	lds	r24, 0x0205
     bec:	88 23       	and	r24, r24
     bee:	09 f4       	brne	.+2      	; 0xbf2 <_Z17operation_of_rackv+0x194>
     bf0:	78 c0       	rjmp	.+240    	; 0xce2 <_Z17operation_of_rackv+0x284>
     bf2:	ea db       	rcall	.-2092   	; 0x3c8 <_Z6millisv>
     bf4:	00 91 4f 02 	lds	r16, 0x024F
     bf8:	10 91 50 02 	lds	r17, 0x0250
     bfc:	20 91 51 02 	lds	r18, 0x0251
     c00:	30 91 52 02 	lds	r19, 0x0252
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	80 1b       	sub	r24, r16
     c0a:	91 0b       	sbc	r25, r17
     c0c:	a2 0b       	sbc	r26, r18
     c0e:	b3 0b       	sbc	r27, r19
     c10:	8c 32       	cpi	r24, 0x2C	; 44
     c12:	91 40       	sbci	r25, 0x01	; 1
     c14:	a1 05       	cpc	r26, r1
     c16:	b1 05       	cpc	r27, r1
     c18:	08 f4       	brcc	.+2      	; 0xc1c <_Z17operation_of_rackv+0x1be>
     c1a:	63 c0       	rjmp	.+198    	; 0xce2 <_Z17operation_of_rackv+0x284>
		{
			RACK_GRIP_OPEN();
     c1c:	10 98       	cbi	0x02, 0	; 2
			throw_rack = false;
     c1e:	10 92 05 02 	sts	0x0205, r1
			if(rack_throw_auto)
     c22:	80 91 04 02 	lds	r24, 0x0204
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <_Z17operation_of_rackv+0x1ce>
     c2a:	5b c0       	rjmp	.+182    	; 0xce2 <_Z17operation_of_rackv+0x284>
     c2c:	8d ef       	ldi	r24, 0xFD	; 253
     c2e:	9f ef       	ldi	r25, 0xFF	; 255
     c30:	90 93 20 02 	sts	0x0220, r25
     c34:	80 93 1f 02 	sts	0x021F, r24
			{
				//Rack motor return to it's final position
				rack_motor_pid.Set_SP(-RACK_COUNT);
				auto_move_rack = true;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 08 02 	sts	0x0208, r24
     c3e:	28 e6       	ldi	r18, 0x68	; 104
     c40:	31 e0       	ldi	r19, 0x01	; 1
     c42:	30 93 38 02 	sts	0x0238, r19
     c46:	20 93 37 02 	sts	0x0237, r18
				
				//Geneva start after rack placement
				angle_pid.Set_SP(360);
				Geneva_Start = true;
     c4a:	80 93 0a 02 	sts	0x020A, r24
     c4e:	49 c0       	rjmp	.+146    	; 0xce2 <_Z17operation_of_rackv+0x284>
		if (RackEncoder.angle <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where near to the final position
		{
			Rack_home_position = false;
			stop_rack_final = true;
		}	
		else if(RackEncoder.angle >= RACK_POSITION_COUNT && !Rack_home_position) //near to the home position
     c50:	80 91 69 02 	lds	r24, 0x0269
     c54:	90 91 6a 02 	lds	r25, 0x026A
     c58:	a0 91 6b 02 	lds	r26, 0x026B
     c5c:	b0 91 6c 02 	lds	r27, 0x026C
     c60:	84 36       	cpi	r24, 0x64	; 100
     c62:	91 05       	cpc	r25, r1
     c64:	a1 05       	cpc	r26, r1
     c66:	b1 05       	cpc	r27, r1
     c68:	0c f0       	brlt	.+2      	; 0xc6c <_Z17operation_of_rackv+0x20e>
     c6a:	0e cf       	rjmp	.-484    	; 0xa88 <_Z17operation_of_rackv+0x2a>
     c6c:	12 cf       	rjmp	.-476    	; 0xa92 <_Z17operation_of_rackv+0x34>

void operation_of_rack()
{								//100
		if (RackEncoder.angle <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where near to the final position
		{
			Rack_home_position = false;
     c6e:	10 92 09 02 	sts	0x0209, r1
			stop_rack_final = true;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 06 02 	sts	0x0206, r24
     c78:	0c cf       	rjmp	.-488    	; 0xa92 <_Z17operation_of_rackv+0x34>
		}	
		else if(RackEncoder.angle >= RACK_POSITION_COUNT && !Rack_home_position) //near to the home position
		{
			Rack_home_position = true;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 09 02 	sts	0x0209, r24
			stop_rack_initial = true;
     c80:	80 93 07 02 	sts	0x0207, r24
     c84:	06 cf       	rjmp	.-500    	; 0xa92 <_Z17operation_of_rackv+0x34>
		
		/*******************************************Geneva operation*********************************************/
		
		if (Geneva_Start && GenevaEncoder.angle >= 360 && angle_pid.Get_Error() <= 3)
		{
			GenevaEncoder.angle = 0;
     c86:	10 92 5c 02 	sts	0x025C, r1
     c8a:	10 92 5d 02 	sts	0x025D, r1
     c8e:	10 92 5e 02 	sts	0x025E, r1
     c92:	10 92 5f 02 	sts	0x025F, r1
     c96:	eb e2       	ldi	r30, 0x2B	; 43
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	15 86       	std	Z+13, r1	; 0x0d
     c9c:	14 86       	std	Z+12, r1	; 0x0c
		inline float Get_I(){return ki;};
		inline float Get_D(){return kd;};
			
		inline float Get_Error(){return abs(error);};
		inline void  reset_error(){error = 0;};
		inline void  reset_iterm(){errorsum = 0;};
     c9e:	13 8a       	std	Z+19, r1	; 0x13
     ca0:	12 8a       	std	Z+18, r1	; 0x12
		inline void  reset_output(){cv = 0;};
     ca2:	14 8a       	std	Z+20, r1	; 0x14
     ca4:	15 8a       	std	Z+21, r1	; 0x15
     ca6:	16 8a       	std	Z+22, r1	; 0x16
     ca8:	17 8a       	std	Z+23, r1	; 0x17
			angle_pid.Set_SP(0);
			angle_pid.reset_iterm();
			angle_pid.reset_output();
			Geneva_Start = false;
     caa:	10 92 0a 02 	sts	0x020A, r1
     cae:	3e cf       	rjmp	.-388    	; 0xb2c <_Z17operation_of_rackv+0xce>
		
		if(Geneva_Start)
		{
			if( rack_throw_auto && GenevaEncoder.angle >= 200)
			{
				SHUTTCOCK_PASS_CLOSE();
     cb0:	47 98       	cbi	0x08, 7	; 8
				SHUTTCOCK_GRIP_CLOSE();
     cb2:	12 98       	cbi	0x02, 2	; 2
				inside_robot = true;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 01 02 	sts	0x0201, r24
     cba:	23 cf       	rjmp	.-442    	; 0xb02 <_Z17operation_of_rackv+0xa4>
			Geneva_Start = false;
		}
		
		if(Geneva_Start)
		{
			if( rack_throw_auto && GenevaEncoder.angle >= 200)
     cbc:	80 91 04 02 	lds	r24, 0x0204
     cc0:	81 11       	cpse	r24, r1
     cc2:	11 cf       	rjmp	.-478    	; 0xae6 <_Z17operation_of_rackv+0x88>
     cc4:	1e cf       	rjmp	.-452    	; 0xb02 <_Z17operation_of_rackv+0xa4>
		if (RackEncoder.angle <= RACK_POSITION_COUNT && Rack_home_position) // if reached at mid-where near to the final position
		{
			Rack_home_position = false;
			stop_rack_final = true;
		}	
		else if(RackEncoder.angle >= RACK_POSITION_COUNT && !Rack_home_position) //near to the home position
     cc6:	80 91 69 02 	lds	r24, 0x0269
     cca:	90 91 6a 02 	lds	r25, 0x026A
     cce:	a0 91 6b 02 	lds	r26, 0x026B
     cd2:	b0 91 6c 02 	lds	r27, 0x026C
     cd6:	84 36       	cpi	r24, 0x64	; 100
     cd8:	91 05       	cpc	r25, r1
     cda:	a1 05       	cpc	r26, r1
     cdc:	b1 05       	cpc	r27, r1
     cde:	6c f6       	brge	.-102    	; 0xc7a <_Z17operation_of_rackv+0x21c>
     ce0:	d8 ce       	rjmp	.-592    	; 0xa92 <_Z17operation_of_rackv+0x34>
				//Geneva start after rack placement
				angle_pid.Set_SP(360);
				Geneva_Start = true;
			}
		}
}
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	08 95       	ret

00000ce8 <_Z18init_timer_rampingv>:

//Timer for ramping interrupt in 10ms
//Global timer
void init_timer_ramping()
{
	rampupflag_start = false;
     ce8:	10 92 7e 02 	sts	0x027E, r1
	timer_count = 0;
     cec:	10 92 7f 02 	sts	0x027F, r1
	TCCR0A |= (1<<WGM01);
     cf0:	84 b5       	in	r24, 0x24	; 36
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00)|(1<<CS02);	//1024 prescaler CTC mode
     cf6:	85 b5       	in	r24, 0x25	; 37
     cf8:	85 60       	ori	r24, 0x05	; 5
     cfa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
     cfc:	ee e6       	ldi	r30, 0x6E	; 110
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	82 60       	ori	r24, 0x02	; 2
     d04:	80 83       	st	Z, r24
	TCNT0 = 0;
     d06:	16 bc       	out	0x26, r1	; 38
	OCR0A = 155;
     d08:	8b e9       	ldi	r24, 0x9B	; 155
     d0a:	87 bd       	out	0x27, r24	; 39
     d0c:	08 95       	ret

00000d0e <_Z14init_LedStripsv>:
}

/****************************************Initialise the master ***************************************/
void init_LedStrips()
{
	OUTPUT(AUTO_LED_STRIP);
     d0e:	98 9a       	sbi	0x13, 0	; 19
	OUTPUT(MANUAL_LED_STRIP);
     d10:	3e 9a       	sbi	0x07, 6	; 7
	OUTPUT(LT1_LED);
     d12:	3c 9a       	sbi	0x07, 4	; 7
	OUTPUT(DETECTION_LED);
     d14:	9a 9a       	sbi	0x13, 2	; 19
	OUTPUT(LT3_LED);
     d16:	38 9a       	sbi	0x07, 0	; 7
	OUTPUT(GOLDEN_LED);
     d18:	3a 9a       	sbi	0x07, 2	; 7
	OUTPUT(LT2_LED);
     d1a:	99 9a       	sbi	0x13, 1	; 19
	
	CLEAR(AUTO_LED_STRIP);
     d1c:	a0 98       	cbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     d1e:	46 98       	cbi	0x08, 6	; 8
	CLEAR(LT1_LED);
     d20:	44 98       	cbi	0x08, 4	; 8
	CLEAR(DETECTION_LED);
     d22:	a2 98       	cbi	0x14, 2	; 20
	CLEAR(LT3_LED);
     d24:	40 98       	cbi	0x08, 0	; 8
	CLEAR(GOLDEN_LED);
     d26:	42 98       	cbi	0x08, 2	; 8
	CLEAR(LT2_LED);
     d28:	a1 98       	cbi	0x14, 1	; 20
     d2a:	08 95       	ret

00000d2c <_Z11init_masterv>:
	


void init_master()
{	
	LtState = 0;
     d2c:	10 92 81 02 	sts	0x0281, r1
	robot_rpm = 9;		// vary from 0 to 100 contains negative number below 50
     d30:	89 e0       	ldi	r24, 0x09	; 9
     d32:	80 93 82 02 	sts	0x0282, r24
	
	auto_mode = false;
     d36:	10 92 7b 02 	sts	0x027B, r1
	
	//For line tracker pin
	INPUT(JUNCTION_PIN);
     d3a:	6c 98       	cbi	0x0d, 4	; 13
	SET(JUNCTION_PIN);
     d3c:	74 9a       	sbi	0x0e, 4	; 14
	
	OUTPUT(STOP_SLAVE);
     d3e:	ea e0       	ldi	r30, 0x0A	; 10
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	80 81       	ld	r24, Z
     d44:	84 60       	ori	r24, 0x04	; 4
     d46:	80 83       	st	Z, r24
	
	velocity_robot[0] = RESETDATA_JOYSTICK;
     d48:	e3 e8       	ldi	r30, 0x83	; 131
     d4a:	f2 e0       	ldi	r31, 0x02	; 2
     d4c:	82 e3       	ldi	r24, 0x32	; 50
     d4e:	80 83       	st	Z, r24
	velocity_robot[1] = RESETDATA_JOYSTICK;
     d50:	81 83       	std	Z+1, r24	; 0x01
	velocity_robot[2] = RESETDATA_JOYSTICK;
     d52:	82 83       	std	Z+2, r24	; 0x02
	
	slave_work_category = static_position;
     d54:	10 92 70 02 	sts	0x0270, r1
	
	rack_picktime = 0;
     d58:	10 92 75 02 	sts	0x0275, r1
     d5c:	10 92 76 02 	sts	0x0276, r1
     d60:	10 92 77 02 	sts	0x0277, r1
     d64:	10 92 78 02 	sts	0x0278, r1
	rack_throw_time = 0;
     d68:	10 92 71 02 	sts	0x0271, r1
     d6c:	10 92 72 02 	sts	0x0272, r1
     d70:	10 92 73 02 	sts	0x0273, r1
     d74:	10 92 74 02 	sts	0x0274, r1
	
	search_auto = false;
     d78:	10 92 7a 02 	sts	0x027A, r1
	rack_pickup = false;
     d7c:	10 92 03 02 	sts	0x0203, r1
	golden_rack_throw = false;
     d80:	10 92 7d 02 	sts	0x027D, r1
	open_the_grip = false;
     d84:	10 92 7c 02 	sts	0x027C, r1
	reset_auto = false;
     d88:	10 92 79 02 	sts	0x0279, r1
	
	init_timer_ramping();
     d8c:	ad df       	rcall	.-166    	; 0xce8 <_Z18init_timer_rampingv>
	init_LedStrips();
     d8e:	bf cf       	rjmp	.-130    	; 0xd0e <_Z14init_LedStripsv>
     d90:	08 95       	ret

00000d92 <_Z28enable_linetracker_interruptv>:

/*************************************************************************************LineTracker Section*******************************************************/

void enable_linetracker_interrupt()
{	
	cli();
     d92:	f8 94       	cli
	EICRB |= (1<<JUNCTION_ISC1);	//falling edge
     d94:	ea e6       	ldi	r30, 0x6A	; 106
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	82 60       	ori	r24, 0x02	; 2
     d9c:	80 83       	st	Z, r24
	EIMSK |= (1<<JUNCTION_INT);		//setting INT pin
     d9e:	ec 9a       	sbi	0x1d, 4	; 29
	EIFR |= (1<<JUNCTION_INTF);	    //clear int flag
     da0:	e4 9a       	sbi	0x1c, 4	; 28
	sei();
     da2:	78 94       	sei
     da4:	08 95       	ret

00000da6 <_Z29disable_linetracker_interruptv>:
}

void disable_linetracker_interrupt()
{
	EIMSK &= ~(1<<JUNCTION_INT);
     da6:	ec 98       	cbi	0x1d, 4	; 29
	EIFR |= (1<<JUNCTION_INTF);
     da8:	e4 9a       	sbi	0x1c, 4	; 28
     daa:	08 95       	ret

00000dac <_Z14reset_automodev>:
	init_LedStrips();
}

void reset_automode()
{
	velocity_robot[0] = RESETDATA_JOYSTICK;
     dac:	e3 e8       	ldi	r30, 0x83	; 131
     dae:	f2 e0       	ldi	r31, 0x02	; 2
     db0:	82 e3       	ldi	r24, 0x32	; 50
     db2:	80 83       	st	Z, r24
	velocity_robot[1] = RESETDATA_JOYSTICK;
     db4:	81 83       	std	Z+1, r24	; 0x01
	velocity_robot[2] = RESETDATA_JOYSTICK;
     db6:	82 83       	std	Z+2, r24	; 0x02
	
	slave_work_category = static_position;
     db8:	10 92 70 02 	sts	0x0270, r1
	
	rack_picktime = 0;
     dbc:	10 92 75 02 	sts	0x0275, r1
     dc0:	10 92 76 02 	sts	0x0276, r1
     dc4:	10 92 77 02 	sts	0x0277, r1
     dc8:	10 92 78 02 	sts	0x0278, r1
	rack_throw_time = 0;
     dcc:	10 92 71 02 	sts	0x0271, r1
     dd0:	10 92 72 02 	sts	0x0272, r1
     dd4:	10 92 73 02 	sts	0x0273, r1
     dd8:	10 92 74 02 	sts	0x0274, r1
	
	search_auto = false;
     ddc:	10 92 7a 02 	sts	0x027A, r1
	rack_pickup = false;
     de0:	10 92 03 02 	sts	0x0203, r1
	golden_rack_throw = false;
     de4:	10 92 7d 02 	sts	0x027D, r1
	open_the_grip = false;
     de8:	10 92 7c 02 	sts	0x027C, r1
	reset_auto = false;
     dec:	10 92 79 02 	sts	0x0279, r1
	
	disable_proximity();
     df0:	db da       	rcall	.-2634   	; 0x3a8 <_Z17disable_proximityv>
	disable_golden_eye();
     df2:	e7 da       	rcall	.-2610   	; 0x3c2 <_Z18disable_golden_eyev>
	disable_linetracker_interrupt();
     df4:	d8 cf       	rjmp	.-80     	; 0xda6 <_Z29disable_linetracker_interruptv>
     df6:	08 95       	ret

00000df8 <_Z18Send_data_to_Slavev>:
}

/*****************************************Function to send data to slave***************************/

void Send_data_to_Slave()
{
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
	if(auto_mode)
     dfc:	80 91 7b 02 	lds	r24, 0x027B
     e00:	88 23       	and	r24, r24
     e02:	71 f0       	breq	.+28     	; 0xe20 <_Z18Send_data_to_Slavev+0x28>
	{
		UART3Transmit(START_BYTE_AUTO);
     e04:	8e ef       	ldi	r24, 0xFE	; 254
     e06:	75 d4       	rcall	.+2282   	; 0x16f2 <_Z13UART3Transmith>
		UART3Transmit(slave_work_category);
     e08:	80 91 70 02 	lds	r24, 0x0270
     e0c:	72 d4       	rcall	.+2276   	; 0x16f2 <_Z13UART3Transmith>
		UART3Transmit(FenceState);
     e0e:	80 91 80 02 	lds	r24, 0x0280
     e12:	6f d4       	rcall	.+2270   	; 0x16f2 <_Z13UART3Transmith>
		UART3Transmit(LtState);
     e14:	80 91 81 02 	lds	r24, 0x0281
     e18:	6c d4       	rcall	.+2264   	; 0x16f2 <_Z13UART3Transmith>
		slave_work_category = static_position;
     e1a:	10 92 70 02 	sts	0x0270, r1
     e1e:	0e c0       	rjmp	.+28     	; 0xe3c <_Z18Send_data_to_Slavev+0x44>
	}
	else
	{
		UART3Transmit(START_BYTE_MANUAL);
     e20:	8d ef       	ldi	r24, 0xFD	; 253
     e22:	67 d4       	rcall	.+2254   	; 0x16f2 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[0]);
     e24:	c3 e8       	ldi	r28, 0x83	; 131
     e26:	d2 e0       	ldi	r29, 0x02	; 2
     e28:	88 81       	ld	r24, Y
     e2a:	63 d4       	rcall	.+2246   	; 0x16f2 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[1]);
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	61 d4       	rcall	.+2242   	; 0x16f2 <_Z13UART3Transmith>
		UART3Transmit(velocity_robot[2]);
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	5f d4       	rcall	.+2238   	; 0x16f2 <_Z13UART3Transmith>
		velocity_robot[0] = RESETDATA_JOYSTICK;
     e34:	82 e3       	ldi	r24, 0x32	; 50
     e36:	88 83       	st	Y, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
     e38:	89 83       	std	Y+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
     e3a:	8a 83       	std	Y+2, r24	; 0x02
	}

	
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <_Z17orientation_checkv>:

void orientation_check()
{
		//limit_switch 1
		if(READ(LTSWITCH_ORIENT_1))
     e42:	1e 9b       	sbis	0x03, 6	; 3
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <_Z17orientation_checkv+0x12>
		{
			LtState &= ~(1<<0);
     e46:	80 91 81 02 	lds	r24, 0x0281
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	80 93 81 02 	sts	0x0281, r24
			CLEAR(LT1_LED);
     e50:	44 98       	cbi	0x08, 4	; 8
     e52:	06 c0       	rjmp	.+12     	; 0xe60 <_Z17orientation_checkv+0x1e>
		}
		else
		{
			LtState |= (1<<0);
     e54:	80 91 81 02 	lds	r24, 0x0281
     e58:	81 60       	ori	r24, 0x01	; 1
     e5a:	80 93 81 02 	sts	0x0281, r24
			SET(LT1_LED);
     e5e:	44 9a       	sbi	0x08, 4	; 8
		}
		
		//limit_Switch 2
		if(READ(LTSWITCH_ORIENT_2))
     e60:	1f 9b       	sbis	0x03, 7	; 3
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <_Z17orientation_checkv+0x30>
		{
			LtState &= ~(1<<1);
     e64:	80 91 81 02 	lds	r24, 0x0281
     e68:	8d 7f       	andi	r24, 0xFD	; 253
     e6a:	80 93 81 02 	sts	0x0281, r24
			CLEAR(LT2_LED);
     e6e:	a1 98       	cbi	0x14, 1	; 20
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <_Z17orientation_checkv+0x3c>
		}
		else
		{
			LtState |= (1<<1);
     e72:	80 91 81 02 	lds	r24, 0x0281
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	80 93 81 02 	sts	0x0281, r24
			SET(LT2_LED);
     e7c:	a1 9a       	sbi	0x14, 1	; 20
		}
		
		//limit_Switch 3
		if (READ(LTSWITCH_ORIENT_3))
     e7e:	1d 9b       	sbis	0x03, 5	; 3
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <_Z17orientation_checkv+0x4e>
		{
			LtState &= ~(1<<2);
     e82:	80 91 81 02 	lds	r24, 0x0281
     e86:	8b 7f       	andi	r24, 0xFB	; 251
     e88:	80 93 81 02 	sts	0x0281, r24
			CLEAR(LT3_LED);
     e8c:	40 98       	cbi	0x08, 0	; 8
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <_Z17orientation_checkv+0x5a>
		}
		else
		{
			LtState |= (1<<2);
     e90:	80 91 81 02 	lds	r24, 0x0281
     e94:	84 60       	ori	r24, 0x04	; 4
     e96:	80 93 81 02 	sts	0x0281, r24
			SET(LT3_LED);
     e9a:	40 9a       	sbi	0x08, 0	; 8
		}
		
		//fence limit switches
		if(!READ(LTSWITCH_FENCE_1) && !READ(LTSWITCH_FENCE_2))
     e9c:	4b 99       	sbic	0x09, 3	; 9
     e9e:	08 c0       	rjmp	.+16     	; 0xeb0 <_Z17orientation_checkv+0x6e>
     ea0:	80 91 00 01 	lds	r24, 0x0100
     ea4:	85 fd       	sbrc	r24, 5
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <_Z17orientation_checkv+0x6e>
			FenceState = 2;
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	80 93 80 02 	sts	0x0280, r24
     eae:	08 95       	ret
		else 
			FenceState = 0;
     eb0:	10 92 80 02 	sts	0x0280, r1
     eb4:	08 95       	ret

00000eb6 <_Z19operate_master_autov>:
	disable_golden_eye();
	disable_linetracker_interrupt();
}

void operate_master_auto()
{
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
	reset_auto = true;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 79 02 	sts	0x0279, r24
	SET(AUTO_LED_STRIP);
     ec0:	a0 9a       	sbi	0x14, 0	; 20
	CLEAR(MANUAL_LED_STRIP);
     ec2:	46 98       	cbi	0x08, 6	; 8
	
	//toggling manual and automatic mode
	if(GAMEBUTTONA == START_BUTTON)
     ec4:	80 91 8a 02 	lds	r24, 0x028A
     ec8:	80 34       	cpi	r24, 0x40	; 64
     eca:	29 f4       	brne	.+10     	; 0xed6 <_Z19operate_master_autov+0x20>
	{
		auto_mode = false;
     ecc:	10 92 7b 02 	sts	0x027B, r1
		GAMEBUTTONA = 0;
     ed0:	10 92 8a 02 	sts	0x028A, r1
     ed4:	8c c0       	rjmp	.+280    	; 0xfee <_Z19operate_master_autov+0x138>
	}
	//Automatic-- zone navigation
	else if(GAMEBUTTONA == BUTTON_A)
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	99 f4       	brne	.+38     	; 0xf00 <_Z19operate_master_autov+0x4a>
	{
		if(Rack_home_position)
     eda:	80 91 09 02 	lds	r24, 0x0209
     ede:	88 23       	and	r24, r24
     ee0:	49 f0       	breq	.+18     	; 0xef4 <_Z19operate_master_autov+0x3e>
	public:
		PID():kp(0),ki(0),kd(0),sp(0),error(0),lastinput(0),errorsum(0){};
		inline void Set_P(float kP){kp = kP;};
		inline void Set_I(float kI){ki = kI;};
		inline void Set_D(float kD){kd = kD;};	
		inline void Set_SP(int sP){sp=sP;};
     ee2:	8d ef       	ldi	r24, 0xFD	; 253
     ee4:	9f ef       	ldi	r25, 0xFF	; 255
     ee6:	90 93 20 02 	sts	0x0220, r25
     eea:	80 93 1f 02 	sts	0x021F, r24
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	80 93 08 02 	sts	0x0208, r24
		}
		slave_work_category = Rack_load;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 70 02 	sts	0x0270, r24
		GAMEBUTTONA = 0;
     efa:	10 92 8a 02 	sts	0x028A, r1
     efe:	77 c0       	rjmp	.+238    	; 0xfee <_Z19operate_master_autov+0x138>
	}
	else if(GAMEBUTTONA == BUTTON_B)
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	99 f4       	brne	.+38     	; 0xf2a <_Z19operate_master_autov+0x74>
	{
		if(Rack_home_position)
     f04:	80 91 09 02 	lds	r24, 0x0209
     f08:	88 23       	and	r24, r24
     f0a:	49 f0       	breq	.+18     	; 0xf1e <_Z19operate_master_autov+0x68>
     f0c:	8d ef       	ldi	r24, 0xFD	; 253
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	90 93 20 02 	sts	0x0220, r25
     f14:	80 93 1f 02 	sts	0x021F, r24
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	80 93 08 02 	sts	0x0208, r24
		}
		slave_work_category = Load1;
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	80 93 70 02 	sts	0x0270, r24
		GAMEBUTTONA = 0;
     f24:	10 92 8a 02 	sts	0x028A, r1
     f28:	62 c0       	rjmp	.+196    	; 0xfee <_Z19operate_master_autov+0x138>
	}
	else if (GAMEBUTTONA == BUTTON_X)
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	99 f4       	brne	.+38     	; 0xf54 <_Z19operate_master_autov+0x9e>
	{
		if(Rack_home_position)
     f2e:	80 91 09 02 	lds	r24, 0x0209
     f32:	88 23       	and	r24, r24
     f34:	49 f0       	breq	.+18     	; 0xf48 <_Z19operate_master_autov+0x92>
     f36:	8d ef       	ldi	r24, 0xFD	; 253
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	90 93 20 02 	sts	0x0220, r25
     f3e:	80 93 1f 02 	sts	0x021F, r24
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 08 02 	sts	0x0208, r24
		}
		slave_work_category = Load2;
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	80 93 70 02 	sts	0x0270, r24
		GAMEBUTTONA = 0;
     f4e:	10 92 8a 02 	sts	0x028A, r1
     f52:	4d c0       	rjmp	.+154    	; 0xfee <_Z19operate_master_autov+0x138>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	a1 f4       	brne	.+40     	; 0xf80 <_Z19operate_master_autov+0xca>
	{
		SET(GOLDEN_LED);
     f58:	42 9a       	sbi	0x08, 2	; 8
		if(Rack_home_position)
     f5a:	80 91 09 02 	lds	r24, 0x0209
     f5e:	88 23       	and	r24, r24
     f60:	49 f0       	breq	.+18     	; 0xf74 <_Z19operate_master_autov+0xbe>
     f62:	8d ef       	ldi	r24, 0xFD	; 253
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	90 93 20 02 	sts	0x0220, r25
     f6a:	80 93 1f 02 	sts	0x021F, r24
		{
			rack_motor_pid.Set_SP(-RACK_COUNT);
			auto_move_rack = true;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 08 02 	sts	0x0208, r24
		}
		slave_work_category = Golden_Rack;
     f74:	89 e0       	ldi	r24, 0x09	; 9
     f76:	80 93 70 02 	sts	0x0270, r24
		GAMEBUTTONA = 0;
     f7a:	10 92 8a 02 	sts	0x028A, r1
     f7e:	37 c0       	rjmp	.+110    	; 0xfee <_Z19operate_master_autov+0x138>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)
     f80:	90 91 00 02 	lds	r25, 0x0200
     f84:	91 11       	cpse	r25, r1
     f86:	33 c0       	rjmp	.+102    	; 0xfee <_Z19operate_master_autov+0x138>
     f88:	90 91 04 02 	lds	r25, 0x0204
     f8c:	91 11       	cpse	r25, r1
     f8e:	2f c0       	rjmp	.+94     	; 0xfee <_Z19operate_master_autov+0x138>
     f90:	90 91 02 02 	lds	r25, 0x0202
     f94:	91 11       	cpse	r25, r1
     f96:	2b c0       	rjmp	.+86     	; 0xfee <_Z19operate_master_autov+0x138>
     f98:	80 32       	cpi	r24, 0x20	; 32
     f9a:	49 f5       	brne	.+82     	; 0xfee <_Z19operate_master_autov+0x138>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
     f9c:	80 91 01 02 	lds	r24, 0x0201
     fa0:	88 23       	and	r24, r24
     fa2:	89 f0       	breq	.+34     	; 0xfc6 <_Z19operate_master_autov+0x110>
		{
			pneumatic_geneva_start = true;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 02 02 	sts	0x0202, r24
			pneumatic_geneva_time = millis();
     faa:	0e da       	rcall	.-3044   	; 0x3c8 <_Z6millisv>
     fac:	60 93 4b 02 	sts	0x024B, r22
     fb0:	70 93 4c 02 	sts	0x024C, r23
     fb4:	80 93 4d 02 	sts	0x024D, r24
     fb8:	90 93 4e 02 	sts	0x024E, r25
			SHUTTCOCK_GRIP_TOGGLE();
     fbc:	92 b1       	in	r25, 0x02	; 2
     fbe:	84 e0       	ldi	r24, 0x04	; 4
     fc0:	89 27       	eor	r24, r25
     fc2:	82 b9       	out	0x02, r24	; 2
     fc4:	01 c0       	rjmp	.+2      	; 0xfc8 <_Z19operate_master_autov+0x112>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
     fc6:	12 98       	cbi	0x02, 2	; 2
		}
		
		pass_the_shuttcock = true;
     fc8:	11 e0       	ldi	r17, 0x01	; 1
     fca:	10 93 00 02 	sts	0x0200, r17
		passing_time = millis();
     fce:	fc d9       	rcall	.-3080   	; 0x3c8 <_Z6millisv>
     fd0:	60 93 47 02 	sts	0x0247, r22
     fd4:	70 93 48 02 	sts	0x0248, r23
     fd8:	80 93 49 02 	sts	0x0249, r24
     fdc:	90 93 4a 02 	sts	0x024A, r25
		inside_robot = (1^inside_robot);
     fe0:	80 91 01 02 	lds	r24, 0x0201
     fe4:	18 27       	eor	r17, r24
     fe6:	10 93 01 02 	sts	0x0201, r17
		GAMEBUTTONA = 0;
     fea:	10 92 8a 02 	sts	0x028A, r1
	}

	
	if (GAMEBUTTONB == LEFT_BUTTON)
     fee:	80 91 8b 02 	lds	r24, 0x028B
     ff2:	80 32       	cpi	r24, 0x20	; 32
     ff4:	31 f4       	brne	.+12     	; 0x1002 <_Z19operate_master_autov+0x14c>
	{
		slave_work_category = Search_automaticrobot;
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	80 93 70 02 	sts	0x0270, r24
		GAMEBUTTONB = 0;
     ffc:	10 92 8b 02 	sts	0x028B, r1
    1000:	1e c0       	rjmp	.+60     	; 0x103e <_Z19operate_master_autov+0x188>
	}	
	else if(GAMEBUTTONB == UP)
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	21 f4       	brne	.+8      	; 0x100e <_Z19operate_master_autov+0x158>
	{
		slave_work_category = up_rob;
    1006:	85 e0       	ldi	r24, 0x05	; 5
    1008:	80 93 70 02 	sts	0x0270, r24
    100c:	18 c0       	rjmp	.+48     	; 0x103e <_Z19operate_master_autov+0x188>
	}	
	else if(GAMEBUTTONB == DOWN)
    100e:	84 30       	cpi	r24, 0x04	; 4
    1010:	21 f4       	brne	.+8      	; 0x101a <_Z19operate_master_autov+0x164>
	{
		slave_work_category = down_rob;
    1012:	86 e0       	ldi	r24, 0x06	; 6
    1014:	80 93 70 02 	sts	0x0270, r24
    1018:	12 c0       	rjmp	.+36     	; 0x103e <_Z19operate_master_autov+0x188>
	}
	else if(GAMEBUTTONB == RIGHT)
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	21 f4       	brne	.+8      	; 0x1026 <_Z19operate_master_autov+0x170>
	{
		slave_work_category = right_rob;
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	80 93 70 02 	sts	0x0270, r24
    1024:	0c c0       	rjmp	.+24     	; 0x103e <_Z19operate_master_autov+0x188>
	}
	else if(GAMEBUTTONB == LEFT)
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	19 f4       	brne	.+6      	; 0x1030 <_Z19operate_master_autov+0x17a>
	{
		slave_work_category = left_rob;
    102a:	80 93 70 02 	sts	0x0270, r24
    102e:	07 c0       	rjmp	.+14     	; 0x103e <_Z19operate_master_autov+0x188>
	}
	else if(GAMEBUTTONB == BACK_BUTTON)
    1030:	80 34       	cpi	r24, 0x40	; 64
    1032:	29 f4       	brne	.+10     	; 0x103e <_Z19operate_master_autov+0x188>
	{
		slave_work_category = Stop_Search;
    1034:	8d e0       	ldi	r24, 0x0D	; 13
    1036:	80 93 70 02 	sts	0x0270, r24
		GAMEBUTTONB = 0;
    103a:	10 92 8b 02 	sts	0x028B, r1
	}
	
	
	//if reached rack loading zone
	if(SLAVE_DATA == Rack_zone)
    103e:	80 91 89 02 	lds	r24, 0x0289
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	a9 f4       	brne	.+42     	; 0x1070 <_Z19operate_master_autov+0x1ba>
	{
		rack_throw_auto = true;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	80 93 04 02 	sts	0x0204, r24
		SHUTTCOCK_PASS_OPEN();
    104c:	47 9a       	sbi	0x08, 7	; 8
		RACK_GRIP_CLOSE();
    104e:	10 9a       	sbi	0x02, 0	; 2
		rack_pickup = true;
    1050:	80 93 03 02 	sts	0x0203, r24
		rack_picktime = millis();
    1054:	b9 d9       	rcall	.-3214   	; 0x3c8 <_Z6millisv>
    1056:	60 93 75 02 	sts	0x0275, r22
    105a:	70 93 76 02 	sts	0x0276, r23
    105e:	80 93 77 02 	sts	0x0277, r24
    1062:	90 93 78 02 	sts	0x0278, r25
		CLEAR(DETECTION_LED);
    1066:	a2 98       	cbi	0x14, 2	; 20
		disable_proximity();
    1068:	9f d9       	rcall	.-3266   	; 0x3a8 <_Z17disable_proximityv>
		SLAVE_DATA = 0;
    106a:	10 92 89 02 	sts	0x0289, r1
    106e:	5f c0       	rjmp	.+190    	; 0x112e <_Z19operate_master_autov+0x278>
	}
	else if(SLAVE_DATA == Golden_zone)
    1070:	85 30       	cpi	r24, 0x05	; 5
    1072:	91 f4       	brne	.+36     	; 0x1098 <_Z19operate_master_autov+0x1e2>
	{
		RACK_GRIP_CLOSE();
    1074:	10 9a       	sbi	0x02, 0	; 2
		CLEAR(DETECTION_LED);
    1076:	a2 98       	cbi	0x14, 2	; 20
		disable_proximity();
    1078:	97 d9       	rcall	.-3282   	; 0x3a8 <_Z17disable_proximityv>
		rack_pickup = true;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 03 02 	sts	0x0203, r24
		rack_picktime = millis();
    1080:	a3 d9       	rcall	.-3258   	; 0x3c8 <_Z6millisv>
    1082:	60 93 75 02 	sts	0x0275, r22
    1086:	70 93 76 02 	sts	0x0276, r23
    108a:	80 93 77 02 	sts	0x0277, r24
    108e:	90 93 78 02 	sts	0x0278, r25
		SLAVE_DATA = 0;
    1092:	10 92 89 02 	sts	0x0289, r1
    1096:	4b c0       	rjmp	.+150    	; 0x112e <_Z19operate_master_autov+0x278>
	}
	else if(!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && SLAVE_DATA == Give_shutcock)
    1098:	90 91 00 02 	lds	r25, 0x0200
    109c:	91 11       	cpse	r25, r1
    109e:	34 c0       	rjmp	.+104    	; 0x1108 <_Z19operate_master_autov+0x252>
    10a0:	90 91 04 02 	lds	r25, 0x0204
    10a4:	91 11       	cpse	r25, r1
    10a6:	30 c0       	rjmp	.+96     	; 0x1108 <_Z19operate_master_autov+0x252>
    10a8:	90 91 02 02 	lds	r25, 0x0202
    10ac:	91 11       	cpse	r25, r1
    10ae:	2c c0       	rjmp	.+88     	; 0x1108 <_Z19operate_master_autov+0x252>
    10b0:	8a 30       	cpi	r24, 0x0A	; 10
    10b2:	51 f5       	brne	.+84     	; 0x1108 <_Z19operate_master_autov+0x252>
	{
		if(inside_robot)
    10b4:	80 91 01 02 	lds	r24, 0x0201
    10b8:	88 23       	and	r24, r24
    10ba:	89 f0       	breq	.+34     	; 0x10de <_Z19operate_master_autov+0x228>
		{
			pneumatic_geneva_start = true;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 93 02 02 	sts	0x0202, r24
			pneumatic_geneva_time = millis();
    10c2:	82 d9       	rcall	.-3324   	; 0x3c8 <_Z6millisv>
    10c4:	60 93 4b 02 	sts	0x024B, r22
    10c8:	70 93 4c 02 	sts	0x024C, r23
    10cc:	80 93 4d 02 	sts	0x024D, r24
    10d0:	90 93 4e 02 	sts	0x024E, r25
			SHUTTCOCK_GRIP_TOGGLE();
    10d4:	92 b1       	in	r25, 0x02	; 2
    10d6:	84 e0       	ldi	r24, 0x04	; 4
    10d8:	89 27       	eor	r24, r25
    10da:	82 b9       	out	0x02, r24	; 2
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <_Z19operate_master_autov+0x22a>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    10de:	12 98       	cbi	0x02, 2	; 2
		}
		
		pass_the_shuttcock = true;
    10e0:	11 e0       	ldi	r17, 0x01	; 1
    10e2:	10 93 00 02 	sts	0x0200, r17
		passing_time = millis();
    10e6:	70 d9       	rcall	.-3360   	; 0x3c8 <_Z6millisv>
    10e8:	60 93 47 02 	sts	0x0247, r22
    10ec:	70 93 48 02 	sts	0x0248, r23
    10f0:	80 93 49 02 	sts	0x0249, r24
    10f4:	90 93 4a 02 	sts	0x024A, r25
		inside_robot = (1^inside_robot);
    10f8:	80 91 01 02 	lds	r24, 0x0201
    10fc:	18 27       	eor	r17, r24
    10fe:	10 93 01 02 	sts	0x0201, r17
		SLAVE_DATA = 0;
    1102:	10 92 89 02 	sts	0x0289, r1
    1106:	13 c0       	rjmp	.+38     	; 0x112e <_Z19operate_master_autov+0x278>
	}
	else if(SLAVE_DATA == enable_prox)
    1108:	8b 30       	cpi	r24, 0x0B	; 11
    110a:	29 f4       	brne	.+10     	; 0x1116 <_Z19operate_master_autov+0x260>
	{
		enable_proximity();	
    110c:	43 d9       	rcall	.-3450   	; 0x394 <_Z16enable_proximityv>
		SET(DETECTION_LED);	
    110e:	a2 9a       	sbi	0x14, 2	; 20
		SLAVE_DATA = 0;
    1110:	10 92 89 02 	sts	0x0289, r1
    1114:	0c c0       	rjmp	.+24     	; 0x112e <_Z19operate_master_autov+0x278>
	}
	else if(SLAVE_DATA == enable_gldprox)
    1116:	8c 30       	cpi	r24, 0x0C	; 12
    1118:	21 f4       	brne	.+8      	; 0x1122 <_Z19operate_master_autov+0x26c>
	{
		enable_golden_eye();
    111a:	49 d9       	rcall	.-3438   	; 0x3ae <_Z17enable_golden_eyev>
		SLAVE_DATA = 0;
    111c:	10 92 89 02 	sts	0x0289, r1
    1120:	06 c0       	rjmp	.+12     	; 0x112e <_Z19operate_master_autov+0x278>
	}
	else if(SLAVE_DATA == enable_Jpulse)
    1122:	8f 30       	cpi	r24, 0x0F	; 15
    1124:	21 f4       	brne	.+8      	; 0x112e <_Z19operate_master_autov+0x278>
	{
		enable_linetracker_interrupt();
    1126:	35 de       	rcall	.-918    	; 0xd92 <_Z28enable_linetracker_interruptv>
		SET(DETECTION_LED);	
    1128:	a2 9a       	sbi	0x14, 2	; 20
		SLAVE_DATA = 0;
    112a:	10 92 89 02 	sts	0x0289, r1
	}
	
	
	if(rack_pickup && (millis()-rack_picktime) >= 500)
    112e:	80 91 03 02 	lds	r24, 0x0203
    1132:	88 23       	and	r24, r24
    1134:	79 f1       	breq	.+94     	; 0x1194 <_Z19operate_master_autov+0x2de>
    1136:	48 d9       	rcall	.-3440   	; 0x3c8 <_Z6millisv>
    1138:	00 91 75 02 	lds	r16, 0x0275
    113c:	10 91 76 02 	lds	r17, 0x0276
    1140:	20 91 77 02 	lds	r18, 0x0277
    1144:	30 91 78 02 	lds	r19, 0x0278
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	80 1b       	sub	r24, r16
    114e:	91 0b       	sbc	r25, r17
    1150:	a2 0b       	sbc	r26, r18
    1152:	b3 0b       	sbc	r27, r19
    1154:	84 3f       	cpi	r24, 0xF4	; 244
    1156:	91 40       	sbci	r25, 0x01	; 1
    1158:	a1 05       	cpc	r26, r1
    115a:	b1 05       	cpc	r27, r1
    115c:	d8 f0       	brcs	.+54     	; 0x1194 <_Z19operate_master_autov+0x2de>
	{
		RACK_LIFT_OPEN();
    115e:	14 9a       	sbi	0x02, 4	; 2
		rack_pickup = false;
    1160:	10 92 03 02 	sts	0x0203, r1
		
		if(rack_throw_auto)
    1164:	80 91 04 02 	lds	r24, 0x0204
    1168:	88 23       	and	r24, r24
    116a:	89 f0       	breq	.+34     	; 0x118e <_Z19operate_master_autov+0x2d8>
		{
			if(!Rack_home_position)
    116c:	80 91 09 02 	lds	r24, 0x0209
    1170:	81 11       	cpse	r24, r1
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <_Z19operate_master_autov+0x2d0>
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	90 93 20 02 	sts	0x0220, r25
    117c:	80 93 1f 02 	sts	0x021F, r24
			{
				rack_motor_pid.Set_SP(RACK_COUNT);
				auto_move_rack = true;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 08 02 	sts	0x0208, r24
			}
			slave_work_category = Load1;
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	80 93 70 02 	sts	0x0270, r24
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <_Z19operate_master_autov+0x2de>
		}
		else
		{
			slave_work_category = Golden_Rack;
    118e:	89 e0       	ldi	r24, 0x09	; 9
    1190:	80 93 70 02 	sts	0x0270, r24
		}
		
	}
	
	//if not rack auto move stop rack motor
	if(!auto_move_rack)
    1194:	80 91 08 02 	lds	r24, 0x0208
    1198:	81 11       	cpse	r24, r1
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <_Z19operate_master_autov+0x2ee>
    119c:	10 92 20 02 	sts	0x0220, r1
    11a0:	10 92 1f 02 	sts	0x021F, r1
		rack_motor_pid.Set_SP(0);
		
	if(golden_rack_throw)
    11a4:	80 91 7d 02 	lds	r24, 0x027D
    11a8:	88 23       	and	r24, r24
    11aa:	71 f0       	breq	.+28     	; 0x11c8 <_Z19operate_master_autov+0x312>
	{
		open_the_grip = true;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 7c 02 	sts	0x027C, r24
		rack_throw_time = millis();
    11b2:	0a d9       	rcall	.-3564   	; 0x3c8 <_Z6millisv>
    11b4:	60 93 71 02 	sts	0x0271, r22
    11b8:	70 93 72 02 	sts	0x0272, r23
    11bc:	80 93 73 02 	sts	0x0273, r24
    11c0:	90 93 74 02 	sts	0x0274, r25
		golden_rack_throw = false;
    11c4:	10 92 7d 02 	sts	0x027D, r1
	}
	
	if(open_the_grip && (millis()-rack_throw_time) >= 500)
    11c8:	80 91 7c 02 	lds	r24, 0x027C
    11cc:	88 23       	and	r24, r24
    11ce:	d9 f0       	breq	.+54     	; 0x1206 <_Z19operate_master_autov+0x350>
    11d0:	fb d8       	rcall	.-3594   	; 0x3c8 <_Z6millisv>
    11d2:	00 91 71 02 	lds	r16, 0x0271
    11d6:	10 91 72 02 	lds	r17, 0x0272
    11da:	20 91 73 02 	lds	r18, 0x0273
    11de:	30 91 74 02 	lds	r19, 0x0274
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	80 1b       	sub	r24, r16
    11e8:	91 0b       	sbc	r25, r17
    11ea:	a2 0b       	sbc	r26, r18
    11ec:	b3 0b       	sbc	r27, r19
    11ee:	84 3f       	cpi	r24, 0xF4	; 244
    11f0:	91 40       	sbci	r25, 0x01	; 1
    11f2:	a1 05       	cpc	r26, r1
    11f4:	b1 05       	cpc	r27, r1
    11f6:	38 f0       	brcs	.+14     	; 0x1206 <_Z19operate_master_autov+0x350>
	{
		RACK_GRIP_OPEN();
    11f8:	10 98       	cbi	0x02, 0	; 2
		CLEAR(GOLDEN_LED);
    11fa:	42 98       	cbi	0x08, 2	; 8
		slave_work_category = Go_after_throw;
    11fc:	8e e0       	ldi	r24, 0x0E	; 14
    11fe:	80 93 70 02 	sts	0x0270, r24
		open_the_grip = false;
    1202:	10 92 7c 02 	sts	0x027C, r1
	}
		
	operation_of_rack();
    1206:	2b dc       	rcall	.-1962   	; 0xa5e <_Z17operation_of_rackv>
	rack_limit_check();
    1208:	a0 d9       	rcall	.-3264   	; 0x54a <_Z16rack_limit_checkv>
	orientation_check();
    120a:	1b de       	rcall	.-970    	; 0xe42 <_Z17orientation_checkv>
}
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <_Z21operate_master_manualv>:


void operate_master_manual()
{
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
	/**********************************************GAMEBUTTONB_SECTION*********************************/
	SET(MANUAL_LED_STRIP);
    121a:	46 9a       	sbi	0x08, 6	; 8
	CLEAR(AUTO_LED_STRIP);
    121c:	a0 98       	cbi	0x14, 0	; 20
	
	if(reset_auto)
    121e:	80 91 79 02 	lds	r24, 0x0279
    1222:	81 11       	cpse	r24, r1
		reset_automode();	
    1224:	c3 dd       	rcall	.-1146   	; 0xdac <_Z14reset_automodev>
	
	if (GAMEBUTTONB == RIGHT)
    1226:	80 91 8b 02 	lds	r24, 0x028B
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	51 f4       	brne	.+20     	; 0x1242 <_Z21operate_master_manualv+0x30>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    122e:	e3 e8       	ldi	r30, 0x83	; 131
    1230:	f2 e0       	ldi	r31, 0x02	; 2
    1232:	92 e3       	ldi	r25, 0x32	; 50
    1234:	90 83       	st	Z, r25
		velocity_robot[1] = RESETDATA_JOYSTICK + robot_rpm;
    1236:	80 91 82 02 	lds	r24, 0x0282
    123a:	8e 5c       	subi	r24, 0xCE	; 206
    123c:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    123e:	92 83       	std	Z+2, r25	; 0x02
    1240:	25 c0       	rjmp	.+74     	; 0x128c <_Z21operate_master_manualv+0x7a>
	}
	else if (GAMEBUTTONB == LEFT)
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	59 f4       	brne	.+22     	; 0x125c <_Z21operate_master_manualv+0x4a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK;
    1246:	e3 e8       	ldi	r30, 0x83	; 131
    1248:	f2 e0       	ldi	r31, 0x02	; 2
    124a:	82 e3       	ldi	r24, 0x32	; 50
    124c:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK - robot_rpm;
    124e:	90 91 82 02 	lds	r25, 0x0282
    1252:	28 2f       	mov	r18, r24
    1254:	29 1b       	sub	r18, r25
    1256:	21 83       	std	Z+1, r18	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    1258:	82 83       	std	Z+2, r24	; 0x02
    125a:	18 c0       	rjmp	.+48     	; 0x128c <_Z21operate_master_manualv+0x7a>
	}
	else if (GAMEBUTTONB == UP)
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	51 f4       	brne	.+20     	; 0x1274 <_Z21operate_master_manualv+0x62>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK + robot_rpm;
    1260:	e3 e8       	ldi	r30, 0x83	; 131
    1262:	f2 e0       	ldi	r31, 0x02	; 2
    1264:	80 91 82 02 	lds	r24, 0x0282
    1268:	8e 5c       	subi	r24, 0xCE	; 206
    126a:	80 83       	st	Z, r24
		velocity_robot[1] = RESETDATA_JOYSTICK;
    126c:	82 e3       	ldi	r24, 0x32	; 50
    126e:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    1270:	82 83       	std	Z+2, r24	; 0x02
    1272:	0c c0       	rjmp	.+24     	; 0x128c <_Z21operate_master_manualv+0x7a>
		
	}
	else if (GAMEBUTTONB == DOWN)
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	51 f4       	brne	.+20     	; 0x128c <_Z21operate_master_manualv+0x7a>
	{
		velocity_robot[0] = RESETDATA_JOYSTICK - robot_rpm;
    1278:	e3 e8       	ldi	r30, 0x83	; 131
    127a:	f2 e0       	ldi	r31, 0x02	; 2
    127c:	82 e3       	ldi	r24, 0x32	; 50
    127e:	90 91 82 02 	lds	r25, 0x0282
    1282:	68 2f       	mov	r22, r24
    1284:	69 1b       	sub	r22, r25
    1286:	60 83       	st	Z, r22
		velocity_robot[1] = RESETDATA_JOYSTICK;
    1288:	81 83       	std	Z+1, r24	; 0x01
		velocity_robot[2] = RESETDATA_JOYSTICK;
    128a:	82 83       	std	Z+2, r24	; 0x02
	}
	
	
	/**********************************************************************GAMEBUTTONA_SECTION****************************/
	if(GAMEBUTTONA == START_BUTTON)
    128c:	80 91 8a 02 	lds	r24, 0x028A
    1290:	80 34       	cpi	r24, 0x40	; 64
    1292:	31 f4       	brne	.+12     	; 0x12a0 <_Z21operate_master_manualv+0x8e>
	{
		auto_mode = true;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	80 93 7b 02 	sts	0x027B, r24
		GAMEBUTTONA = 0;
    129a:	10 92 8a 02 	sts	0x028A, r1
    129e:	8e c0       	rjmp	.+284    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_A)
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	31 f4       	brne	.+12     	; 0x12b0 <_Z21operate_master_manualv+0x9e>
	{
		RACK_GRIP_TOGGLE();
    12a4:	92 b1       	in	r25, 0x02	; 2
    12a6:	89 27       	eor	r24, r25
    12a8:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    12aa:	10 92 8a 02 	sts	0x028A, r1
    12ae:	86 c0       	rjmp	.+268    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_B && !Rack_home_position)
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	59 f4       	brne	.+22     	; 0x12ca <_Z21operate_master_manualv+0xb8>
    12b4:	90 91 09 02 	lds	r25, 0x0209
    12b8:	91 11       	cpse	r25, r1
    12ba:	49 c0       	rjmp	.+146    	; 0x134e <_Z21operate_master_manualv+0x13c>
	{
		RACK_LIFT_TOGGLE();
    12bc:	92 b1       	in	r25, 0x02	; 2
    12be:	80 e1       	ldi	r24, 0x10	; 16
    12c0:	89 27       	eor	r24, r25
    12c2:	82 b9       	out	0x02, r24	; 2
		GAMEBUTTONA = 0;
    12c4:	10 92 8a 02 	sts	0x028A, r1
    12c8:	79 c0       	rjmp	.+242    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_X)
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	b9 f4       	brne	.+46     	; 0x12fc <_Z21operate_master_manualv+0xea>
	{
		auto_move_rack = true;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 08 02 	sts	0x0208, r24
		if(Rack_home_position)
    12d4:	80 91 09 02 	lds	r24, 0x0209
    12d8:	88 23       	and	r24, r24
    12da:	39 f0       	breq	.+14     	; 0x12ea <_Z21operate_master_manualv+0xd8>
    12dc:	8d ef       	ldi	r24, 0xFD	; 253
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	90 93 20 02 	sts	0x0220, r25
    12e4:	80 93 1f 02 	sts	0x021F, r24
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <_Z21operate_master_manualv+0xe4>
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 20 02 	sts	0x0220, r25
    12f2:	80 93 1f 02 	sts	0x021F, r24
		}
		else
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		GAMEBUTTONA = 0;
    12f6:	10 92 8a 02 	sts	0x028A, r1
    12fa:	60 c0       	rjmp	.+192    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == BUTTON_Y)
    12fc:	88 30       	cpi	r24, 0x08	; 8
    12fe:	61 f4       	brne	.+24     	; 0x1318 <_Z21operate_master_manualv+0x106>
    1300:	88 e6       	ldi	r24, 0x68	; 104
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	90 93 38 02 	sts	0x0238, r25
    1308:	80 93 37 02 	sts	0x0237, r24
	{
		angle_pid.Set_SP(360);
		Geneva_Start = true;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 0a 02 	sts	0x020A, r24
		GAMEBUTTONA = 0;
    1312:	10 92 8a 02 	sts	0x028A, r1
    1316:	52 c0       	rjmp	.+164    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	}
	else if (GAMEBUTTONA == RIGHT_STICK_CLICK && !Rack_home_position)
    1318:	80 31       	cpi	r24, 0x10	; 16
    131a:	c9 f4       	brne	.+50     	; 0x134e <_Z21operate_master_manualv+0x13c>
    131c:	90 91 09 02 	lds	r25, 0x0209
    1320:	91 11       	cpse	r25, r1
    1322:	15 c0       	rjmp	.+42     	; 0x134e <_Z21operate_master_manualv+0x13c>
	{
		rack_throw_auto = true;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	80 93 04 02 	sts	0x0204, r24
		SHUTTCOCK_PASS_OPEN();
    132a:	47 9a       	sbi	0x08, 7	; 8
		RACK_LIFT_OPEN();
    132c:	14 9a       	sbi	0x02, 4	; 2
		if(!Rack_home_position)
    132e:	80 91 09 02 	lds	r24, 0x0209
    1332:	81 11       	cpse	r24, r1
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <_Z21operate_master_manualv+0x136>
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 20 02 	sts	0x0220, r25
    133e:	80 93 1f 02 	sts	0x021F, r24
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
			auto_move_rack = true;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	80 93 08 02 	sts	0x0208, r24
		}
		GAMEBUTTONA = 0;
    1348:	10 92 8a 02 	sts	0x028A, r1
    134c:	37 c0       	rjmp	.+110    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	}
	else if (!pass_the_shuttcock && !rack_throw_auto && !pneumatic_geneva_start && GAMEBUTTONA == RIGHT_BUTTON)	
    134e:	90 91 00 02 	lds	r25, 0x0200
    1352:	91 11       	cpse	r25, r1
    1354:	33 c0       	rjmp	.+102    	; 0x13bc <_Z21operate_master_manualv+0x1aa>
    1356:	90 91 04 02 	lds	r25, 0x0204
    135a:	91 11       	cpse	r25, r1
    135c:	2f c0       	rjmp	.+94     	; 0x13bc <_Z21operate_master_manualv+0x1aa>
    135e:	90 91 02 02 	lds	r25, 0x0202
    1362:	91 11       	cpse	r25, r1
    1364:	2b c0       	rjmp	.+86     	; 0x13bc <_Z21operate_master_manualv+0x1aa>
    1366:	80 32       	cpi	r24, 0x20	; 32
    1368:	49 f5       	brne	.+82     	; 0x13bc <_Z21operate_master_manualv+0x1aa>
	{
		//until the shuttlecock passing completes and until rack auto rack throw completes and until the geneva completes it's rotation
		if(inside_robot)
    136a:	80 91 01 02 	lds	r24, 0x0201
    136e:	88 23       	and	r24, r24
    1370:	89 f0       	breq	.+34     	; 0x1394 <_Z21operate_master_manualv+0x182>
		{
			pneumatic_geneva_start = true;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	80 93 02 02 	sts	0x0202, r24
			pneumatic_geneva_time = millis();
    1378:	27 d8       	rcall	.-4018   	; 0x3c8 <_Z6millisv>
    137a:	60 93 4b 02 	sts	0x024B, r22
    137e:	70 93 4c 02 	sts	0x024C, r23
    1382:	80 93 4d 02 	sts	0x024D, r24
    1386:	90 93 4e 02 	sts	0x024E, r25
			SHUTTCOCK_GRIP_TOGGLE();
    138a:	92 b1       	in	r25, 0x02	; 2
    138c:	84 e0       	ldi	r24, 0x04	; 4
    138e:	89 27       	eor	r24, r25
    1390:	82 b9       	out	0x02, r24	; 2
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <_Z21operate_master_manualv+0x184>
		}
		else
		{
			SHUTTCOCK_GRIP_CLOSE();
    1394:	12 98       	cbi	0x02, 2	; 2
		}
		
		pass_the_shuttcock = true;
    1396:	c1 e0       	ldi	r28, 0x01	; 1
    1398:	c0 93 00 02 	sts	0x0200, r28
		passing_time = millis();
    139c:	15 d8       	rcall	.-4054   	; 0x3c8 <_Z6millisv>
    139e:	60 93 47 02 	sts	0x0247, r22
    13a2:	70 93 48 02 	sts	0x0248, r23
    13a6:	80 93 49 02 	sts	0x0249, r24
    13aa:	90 93 4a 02 	sts	0x024A, r25
		inside_robot = (1^inside_robot);
    13ae:	80 91 01 02 	lds	r24, 0x0201
    13b2:	c8 27       	eor	r28, r24
    13b4:	c0 93 01 02 	sts	0x0201, r28
		GAMEBUTTONA = 0;
    13b8:	10 92 8a 02 	sts	0x028A, r1

	
	

	/**************************************************Rack Operation******************************************************/
	if (!auto_move_rack)
    13bc:	80 91 08 02 	lds	r24, 0x0208
    13c0:	81 11       	cpse	r24, r1
    13c2:	0d c0       	rjmp	.+26     	; 0x13de <_Z21operate_master_manualv+0x1cc>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
    13c4:	80 91 8c 02 	lds	r24, 0x028C
    13c8:	85 31       	cpi	r24, 0x15	; 21
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <_Z21operate_master_manualv+0x1bc>
    13cc:	ae c0       	rjmp	.+348    	; 0x152a <_Z21operate_master_manualv+0x318>
    13ce:	1c 99       	sbic	0x03, 4	; 3
    13d0:	a5 c0       	rjmp	.+330    	; 0x151c <_Z21operate_master_manualv+0x30a>
    13d2:	ab c0       	rjmp	.+342    	; 0x152a <_Z21operate_master_manualv+0x318>
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 && READ(LTSWITCH_RACK_FINAL))
    13d4:	80 91 00 01 	lds	r24, 0x0100
    13d8:	86 fd       	sbrc	r24, 6
    13da:	ad c0       	rjmp	.+346    	; 0x1536 <_Z21operate_master_manualv+0x324>
    13dc:	b3 c0       	rjmp	.+358    	; 0x1544 <_Z21operate_master_manualv+0x332>
		else
			rack_motor_pid.Set_SP(0);
	}
	
	/*********************************************************************Move using joystick analog stick********************************************/
	if ((abs(LEFTSTICKY-50) > 5) || (abs(LEFTSTICKX-50) > 5) || abs(RIGHTSTICKX-50)>5)
    13de:	80 91 8f 02 	lds	r24, 0x028F
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9c 01       	movw	r18, r24
    13e6:	22 53       	subi	r18, 0x32	; 50
    13e8:	31 09       	sbc	r19, r1
    13ea:	12 16       	cp	r1, r18
    13ec:	13 06       	cpc	r1, r19
    13ee:	24 f4       	brge	.+8      	; 0x13f8 <_Z21operate_master_manualv+0x1e6>
    13f0:	26 30       	cpi	r18, 0x06	; 6
    13f2:	31 05       	cpc	r19, r1
    13f4:	44 f0       	brlt	.+16     	; 0x1406 <_Z21operate_master_manualv+0x1f4>
    13f6:	32 c0       	rjmp	.+100    	; 0x145c <_Z21operate_master_manualv+0x24a>
    13f8:	42 e3       	ldi	r20, 0x32	; 50
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	fa 01       	movw	r30, r20
    13fe:	e8 1b       	sub	r30, r24
    1400:	f9 0b       	sbc	r31, r25
    1402:	36 97       	sbiw	r30, 0x06	; 6
    1404:	5c f5       	brge	.+86     	; 0x145c <_Z21operate_master_manualv+0x24a>
    1406:	80 91 8e 02 	lds	r24, 0x028E
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	ac 01       	movw	r20, r24
    140e:	42 53       	subi	r20, 0x32	; 50
    1410:	51 09       	sbc	r21, r1
    1412:	14 16       	cp	r1, r20
    1414:	15 06       	cpc	r1, r21
    1416:	24 f4       	brge	.+8      	; 0x1420 <_Z21operate_master_manualv+0x20e>
    1418:	46 30       	cpi	r20, 0x06	; 6
    141a:	51 05       	cpc	r21, r1
    141c:	4c f0       	brlt	.+18     	; 0x1430 <_Z21operate_master_manualv+0x21e>
    141e:	1e c0       	rjmp	.+60     	; 0x145c <_Z21operate_master_manualv+0x24a>
    1420:	42 e3       	ldi	r20, 0x32	; 50
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	ba 01       	movw	r22, r20
    1426:	68 1b       	sub	r22, r24
    1428:	79 0b       	sbc	r23, r25
    142a:	66 30       	cpi	r22, 0x06	; 6
    142c:	71 05       	cpc	r23, r1
    142e:	b4 f4       	brge	.+44     	; 0x145c <_Z21operate_master_manualv+0x24a>
    1430:	80 91 90 02 	lds	r24, 0x0290
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	ac 01       	movw	r20, r24
    1438:	42 53       	subi	r20, 0x32	; 50
    143a:	51 09       	sbc	r21, r1
    143c:	14 16       	cp	r1, r20
    143e:	15 06       	cpc	r1, r21
    1440:	2c f4       	brge	.+10     	; 0x144c <_Z21operate_master_manualv+0x23a>
    1442:	46 30       	cpi	r20, 0x06	; 6
    1444:	51 05       	cpc	r21, r1
    1446:	0c f4       	brge	.+2      	; 0x144a <_Z21operate_master_manualv+0x238>
    1448:	63 c0       	rjmp	.+198    	; 0x1510 <_Z21operate_master_manualv+0x2fe>
    144a:	08 c0       	rjmp	.+16     	; 0x145c <_Z21operate_master_manualv+0x24a>
    144c:	42 e3       	ldi	r20, 0x32	; 50
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	fa 01       	movw	r30, r20
    1452:	e8 1b       	sub	r30, r24
    1454:	f9 0b       	sbc	r31, r25
    1456:	36 97       	sbiw	r30, 0x06	; 6
    1458:	0c f4       	brge	.+2      	; 0x145c <_Z21operate_master_manualv+0x24a>
    145a:	5a c0       	rjmp	.+180    	; 0x1510 <_Z21operate_master_manualv+0x2fe>
	{
		rampupflag_start = true;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 7e 02 	sts	0x027E, r24
		velocity_robot[0] = (LEFTSTICKY-50)*timer_count/60.0 + 50;
    1462:	40 91 7f 02 	lds	r20, 0x027F
    1466:	c3 e8       	ldi	r28, 0x83	; 131
    1468:	d2 e0       	ldi	r29, 0x02	; 2
    146a:	42 03       	mulsu	r20, r18
    146c:	b0 01       	movw	r22, r0
    146e:	43 9f       	mul	r20, r19
    1470:	70 0d       	add	r23, r0
    1472:	11 24       	eor	r1, r1
    1474:	07 2e       	mov	r0, r23
    1476:	00 0c       	add	r0, r0
    1478:	88 0b       	sbc	r24, r24
    147a:	99 0b       	sbc	r25, r25
    147c:	bd d2       	rcall	.+1402   	; 0x19f8 <__floatsisf>
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e7       	ldi	r20, 0x70	; 112
    1484:	52 e4       	ldi	r21, 0x42	; 66
    1486:	1d d2       	rcall	.+1082   	; 0x18c2 <__divsf3>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	48 e4       	ldi	r20, 0x48	; 72
    148e:	52 e4       	ldi	r21, 0x42	; 66
    1490:	b0 d1       	rcall	.+864    	; 0x17f2 <__addsf3>
    1492:	84 d2       	rcall	.+1288   	; 0x199c <__fixunssfsi>
    1494:	68 83       	st	Y, r22
		velocity_robot[1] = (LEFTSTICKX-50)*timer_count/60.0 + 50;
    1496:	40 91 7f 02 	lds	r20, 0x027F
    149a:	0a e8       	ldi	r16, 0x8A	; 138
    149c:	12 e0       	ldi	r17, 0x02	; 2
    149e:	f8 01       	movw	r30, r16
    14a0:	24 81       	ldd	r18, Z+4	; 0x04
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	22 53       	subi	r18, 0x32	; 50
    14a6:	31 09       	sbc	r19, r1
    14a8:	42 03       	mulsu	r20, r18
    14aa:	b0 01       	movw	r22, r0
    14ac:	43 9f       	mul	r20, r19
    14ae:	70 0d       	add	r23, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	07 2e       	mov	r0, r23
    14b4:	00 0c       	add	r0, r0
    14b6:	88 0b       	sbc	r24, r24
    14b8:	99 0b       	sbc	r25, r25
    14ba:	9e d2       	rcall	.+1340   	; 0x19f8 <__floatsisf>
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e7       	ldi	r20, 0x70	; 112
    14c2:	52 e4       	ldi	r21, 0x42	; 66
    14c4:	fe d1       	rcall	.+1020   	; 0x18c2 <__divsf3>
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	48 e4       	ldi	r20, 0x48	; 72
    14cc:	52 e4       	ldi	r21, 0x42	; 66
    14ce:	91 d1       	rcall	.+802    	; 0x17f2 <__addsf3>
    14d0:	65 d2       	rcall	.+1226   	; 0x199c <__fixunssfsi>
    14d2:	69 83       	std	Y+1, r22	; 0x01
		velocity_robot[2] = (RIGHTSTICKX-50)*timer_count/60.0 + 50;
    14d4:	40 91 7f 02 	lds	r20, 0x027F
    14d8:	f8 01       	movw	r30, r16
    14da:	26 81       	ldd	r18, Z+6	; 0x06
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	22 53       	subi	r18, 0x32	; 50
    14e0:	31 09       	sbc	r19, r1
    14e2:	42 03       	mulsu	r20, r18
    14e4:	b0 01       	movw	r22, r0
    14e6:	43 9f       	mul	r20, r19
    14e8:	70 0d       	add	r23, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	07 2e       	mov	r0, r23
    14ee:	00 0c       	add	r0, r0
    14f0:	88 0b       	sbc	r24, r24
    14f2:	99 0b       	sbc	r25, r25
    14f4:	81 d2       	rcall	.+1282   	; 0x19f8 <__floatsisf>
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e7       	ldi	r20, 0x70	; 112
    14fc:	52 e4       	ldi	r21, 0x42	; 66
    14fe:	e1 d1       	rcall	.+962    	; 0x18c2 <__divsf3>
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	48 e4       	ldi	r20, 0x48	; 72
    1506:	52 e4       	ldi	r21, 0x42	; 66
    1508:	74 d1       	rcall	.+744    	; 0x17f2 <__addsf3>
    150a:	48 d2       	rcall	.+1168   	; 0x199c <__fixunssfsi>
    150c:	6a 83       	std	Y+2, r22	; 0x02
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <_Z21operate_master_manualv+0x302>
	}
	else
	rampupflag_start = false;
    1510:	10 92 7e 02 	sts	0x027E, r1
	
	operation_of_rack();
    1514:	a4 da       	rcall	.-2744   	; 0xa5e <_Z17operation_of_rackv>
	rack_limit_check();
    1516:	19 d8       	rcall	.-4046   	; 0x54a <_Z16rack_limit_checkv>
	orientation_check();
    1518:	94 dc       	rcall	.-1752   	; 0xe42 <_Z17orientation_checkv>
    151a:	19 c0       	rjmp	.+50     	; 0x154e <_Z21operate_master_manualv+0x33c>
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	90 93 20 02 	sts	0x0220, r25
    1524:	80 93 1f 02 	sts	0x021F, r24
    1528:	5a cf       	rjmp	.-332    	; 0x13de <_Z21operate_master_manualv+0x1cc>
	{
		if (RIGHTTRIGGER > 20 && READ(LTSWITCH_RACK_HOME))
		{
			rack_motor_pid.Set_SP(RACK_COUNT);
		}
		else if (LEFTTRIGGER > 20 && READ(LTSWITCH_RACK_FINAL))
    152a:	80 91 8d 02 	lds	r24, 0x028D
    152e:	85 31       	cpi	r24, 0x15	; 21
    1530:	08 f0       	brcs	.+2      	; 0x1534 <_Z21operate_master_manualv+0x322>
    1532:	50 cf       	rjmp	.-352    	; 0x13d4 <_Z21operate_master_manualv+0x1c2>
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <_Z21operate_master_manualv+0x332>
    1536:	8d ef       	ldi	r24, 0xFD	; 253
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	90 93 20 02 	sts	0x0220, r25
    153e:	80 93 1f 02 	sts	0x021F, r24
    1542:	4d cf       	rjmp	.-358    	; 0x13de <_Z21operate_master_manualv+0x1cc>
    1544:	10 92 20 02 	sts	0x0220, r1
    1548:	10 92 1f 02 	sts	0x021F, r1
    154c:	48 cf       	rjmp	.-368    	; 0x13de <_Z21operate_master_manualv+0x1cc>
	
	operation_of_rack();
	rack_limit_check();
	orientation_check();

}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <__vector_21>:
//Global timer interrupt

/***********************************Ramping from the joystick analog button*************************************/

ISR(TIMER0_COMPA_vect)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	8f 93       	push	r24
	if (rampupflag_start)
    1564:	80 91 7e 02 	lds	r24, 0x027E
    1568:	88 23       	and	r24, r24
    156a:	31 f0       	breq	.+12     	; 0x1578 <__vector_21+0x20>
	timer_count++;
    156c:	80 91 7f 02 	lds	r24, 0x027F
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	80 93 7f 02 	sts	0x027F, r24
    1576:	02 c0       	rjmp	.+4      	; 0x157c <__vector_21+0x24>
	else
	timer_count = 0;
    1578:	10 92 7f 02 	sts	0x027F, r1
	
	if (timer_count > 60)
    157c:	80 91 7f 02 	lds	r24, 0x027F
    1580:	8d 33       	cpi	r24, 0x3D	; 61
    1582:	1c f0       	brlt	.+6      	; 0x158a <__vector_21+0x32>
	timer_count = 60;
    1584:	8c e3       	ldi	r24, 0x3C	; 60
    1586:	80 93 7f 02 	sts	0x027F, r24
	

}
    158a:	8f 91       	pop	r24
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	0f 90       	pop	r0
    1592:	1f 90       	pop	r1
    1594:	18 95       	reti

00001596 <__vector_6>:

/**********************************************************PROXIMITY_INTERRUPT***********************************************************************/
ISR(PROXIMITY_VECT)
{
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	0b b6       	in	r0, 0x3b	; 59
    15a2:	0f 92       	push	r0
    15a4:	8f 93       	push	r24
    15a6:	9f 93       	push	r25
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
	//pcint for slave on to stop the robot
	TOGGLE(STOP_SLAVE);
    15ac:	eb e0       	ldi	r30, 0x0B	; 11
    15ae:	f1 e0       	ldi	r31, 0x01	; 1
    15b0:	90 81       	ld	r25, Z
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	89 27       	eor	r24, r25
    15b6:	80 83       	st	Z, r24
}
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	0f 90       	pop	r0
    15c2:	0b be       	out	0x3b, r0	; 59
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <__vector_3>:

ISR(GOLDENEYE_VECT)
{
    15ce:	1f 92       	push	r1
    15d0:	0f 92       	push	r0
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	0f 92       	push	r0
    15d6:	11 24       	eor	r1, r1
    15d8:	0b b6       	in	r0, 0x3b	; 59
    15da:	0f 92       	push	r0
    15dc:	2f 93       	push	r18
    15de:	3f 93       	push	r19
    15e0:	4f 93       	push	r20
    15e2:	5f 93       	push	r21
    15e4:	6f 93       	push	r22
    15e6:	7f 93       	push	r23
    15e8:	8f 93       	push	r24
    15ea:	9f 93       	push	r25
    15ec:	af 93       	push	r26
    15ee:	bf 93       	push	r27
    15f0:	ef 93       	push	r30
    15f2:	ff 93       	push	r31
	golden_rack_throw = true;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 7d 02 	sts	0x027D, r24
	TOGGLE(STOP_SLAVE);
    15fa:	eb e0       	ldi	r30, 0x0B	; 11
    15fc:	f1 e0       	ldi	r31, 0x01	; 1
    15fe:	90 81       	ld	r25, Z
    1600:	84 e0       	ldi	r24, 0x04	; 4
    1602:	89 27       	eor	r24, r25
    1604:	80 83       	st	Z, r24
	disable_golden_eye();
    1606:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_Z18disable_golden_eyev>
}
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0b be       	out	0x3b, r0	; 59
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <__vector_5>:

/*************************************************************Line-tracker junction interrupt****************************************************************/

ISR(JUNCTION_VECT)
{
    1630:	1f 92       	push	r1
    1632:	0f 92       	push	r0
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	0f 92       	push	r0
    1638:	11 24       	eor	r1, r1
    163a:	0b b6       	in	r0, 0x3b	; 59
    163c:	0f 92       	push	r0
    163e:	2f 93       	push	r18
    1640:	3f 93       	push	r19
    1642:	4f 93       	push	r20
    1644:	5f 93       	push	r21
    1646:	6f 93       	push	r22
    1648:	7f 93       	push	r23
    164a:	8f 93       	push	r24
    164c:	9f 93       	push	r25
    164e:	af 93       	push	r26
    1650:	bf 93       	push	r27
    1652:	ef 93       	push	r30
    1654:	ff 93       	push	r31
	TOGGLE(STOP_SLAVE);
    1656:	eb e0       	ldi	r30, 0x0B	; 11
    1658:	f1 e0       	ldi	r31, 0x01	; 1
    165a:	90 81       	ld	r25, Z
    165c:	84 e0       	ldi	r24, 0x04	; 4
    165e:	89 27       	eor	r24, r25
    1660:	80 83       	st	Z, r24
	CLEAR(DETECTION_LED);
    1662:	a2 98       	cbi	0x14, 2	; 20
	disable_linetracker_interrupt();
    1664:	a0 db       	rcall	.-2240   	; 0xda6 <_Z29disable_linetracker_interruptv>
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0b be       	out	0x3b, r0	; 59
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	0f 90       	pop	r0
    1688:	1f 90       	pop	r1
    168a:	18 95       	reti

0000168c <_Z9initUART0v>:

void UART3TransmitString(const char *s)
{
	while(*s)
	UART3Transmit(*s++);
}
    168c:	10 92 c5 00 	sts	0x00C5, r1
    1690:	87 e6       	ldi	r24, 0x67	; 103
    1692:	80 93 c4 00 	sts	0x00C4, r24
    1696:	88 e9       	ldi	r24, 0x98	; 152
    1698:	80 93 c1 00 	sts	0x00C1, r24
    169c:	86 e0       	ldi	r24, 0x06	; 6
    169e:	80 93 c2 00 	sts	0x00C2, r24
    16a2:	08 95       	ret

000016a4 <_Z9initUART2v>:
    16a4:	10 92 88 02 	sts	0x0288, r1
    16a8:	ea e8       	ldi	r30, 0x8A	; 138
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	10 82       	st	Z, r1
    16ae:	11 82       	std	Z+1, r1	; 0x01
    16b0:	12 82       	std	Z+2, r1	; 0x02
    16b2:	13 82       	std	Z+3, r1	; 0x03
    16b4:	82 e3       	ldi	r24, 0x32	; 50
    16b6:	84 83       	std	Z+4, r24	; 0x04
    16b8:	85 83       	std	Z+5, r24	; 0x05
    16ba:	86 83       	std	Z+6, r24	; 0x06
    16bc:	87 83       	std	Z+7, r24	; 0x07
    16be:	10 92 d5 00 	sts	0x00D5, r1
    16c2:	89 e1       	ldi	r24, 0x19	; 25
    16c4:	80 93 d4 00 	sts	0x00D4, r24
    16c8:	88 e9       	ldi	r24, 0x98	; 152
    16ca:	80 93 d1 00 	sts	0x00D1, r24
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	80 93 d2 00 	sts	0x00D2, r24
    16d4:	08 95       	ret

000016d6 <_Z9initUART3v>:
    16d6:	10 92 89 02 	sts	0x0289, r1
    16da:	10 92 35 01 	sts	0x0135, r1
    16de:	89 e1       	ldi	r24, 0x19	; 25
    16e0:	80 93 34 01 	sts	0x0134, r24
    16e4:	88 e9       	ldi	r24, 0x98	; 152
    16e6:	80 93 31 01 	sts	0x0131, r24
    16ea:	86 e0       	ldi	r24, 0x06	; 6
    16ec:	80 93 32 01 	sts	0x0132, r24
    16f0:	08 95       	ret

000016f2 <_Z13UART3Transmith>:
    16f2:	e0 e3       	ldi	r30, 0x30	; 48
    16f4:	f1 e0       	ldi	r31, 0x01	; 1
    16f6:	90 81       	ld	r25, Z
    16f8:	95 ff       	sbrs	r25, 5
    16fa:	fd cf       	rjmp	.-6      	; 0x16f6 <_Z13UART3Transmith+0x4>
    16fc:	80 93 36 01 	sts	0x0136, r24
    1700:	08 95       	ret

00001702 <__vector_25>:

ISR(USART0_RX_vect)
{
    1702:	1f 92       	push	r1
    1704:	0f 92       	push	r0
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	0f 92       	push	r0
    170a:	11 24       	eor	r1, r1
    170c:	8f 93       	push	r24
	buffer=UDR0;
    170e:	80 91 c6 00 	lds	r24, 0x00C6
    1712:	80 93 95 02 	sts	0x0295, r24
}
    1716:	8f 91       	pop	r24
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	1f 90       	pop	r1
    1720:	18 95       	reti

00001722 <__vector_36>:

ISR(USART1_RX_vect)
{
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	8f 93       	push	r24
	buffer1=UDR1;
    172e:	80 91 ce 00 	lds	r24, 0x00CE
    1732:	80 93 94 02 	sts	0x0294, r24
	
}
    1736:	8f 91       	pop	r24
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <__vector_51>:

ISR(USART2_RX_vect)
{
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	0b b6       	in	r0, 0x3b	; 59
    174e:	0f 92       	push	r0
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
	buffer2=UDR2;
    1758:	90 91 d6 00 	lds	r25, 0x00D6
    175c:	90 93 92 02 	sts	0x0292, r25
		if(rcvflag)
    1760:	80 91 87 02 	lds	r24, 0x0287
    1764:	88 23       	and	r24, r24
    1766:	89 f0       	breq	.+34     	; 0x178a <__vector_51+0x48>
		{
			rcvdata[datacount] = buffer2;
    1768:	80 91 88 02 	lds	r24, 0x0288
    176c:	e8 2f       	mov	r30, r24
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	e6 57       	subi	r30, 0x76	; 118
    1772:	fd 4f       	sbci	r31, 0xFD	; 253
    1774:	90 83       	st	Z, r25
			datacount++;
    1776:	8f 5f       	subi	r24, 0xFF	; 255
			if(datacount>7)
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	18 f4       	brcc	.+6      	; 0x1782 <__vector_51+0x40>
{
	buffer2=UDR2;
		if(rcvflag)
		{
			rcvdata[datacount] = buffer2;
			datacount++;
    177c:	80 93 88 02 	sts	0x0288, r24
    1780:	04 c0       	rjmp	.+8      	; 0x178a <__vector_51+0x48>
			if(datacount>7)
			{
				 datacount=0;
    1782:	10 92 88 02 	sts	0x0288, r1
				rcvflag = false; 
    1786:	10 92 87 02 	sts	0x0287, r1
			}
		}
		if(buffer2==START_BYTE)
    178a:	80 91 92 02 	lds	r24, 0x0292
    178e:	8f 37       	cpi	r24, 0x7F	; 127
    1790:	19 f4       	brne	.+6      	; 0x1798 <__vector_51+0x56>
			rcvflag=true;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	80 93 87 02 	sts	0x0287, r24
		
}
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	9f 91       	pop	r25
    179e:	8f 91       	pop	r24
    17a0:	0f 90       	pop	r0
    17a2:	0b be       	out	0x3b, r0	; 59
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	0f 90       	pop	r0
    17aa:	1f 90       	pop	r1
    17ac:	18 95       	reti

000017ae <__vector_54>:


ISR(USART3_RX_vect)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
	buffer3=UDR3;
    17bc:	80 91 36 01 	lds	r24, 0x0136
    17c0:	80 93 93 02 	sts	0x0293, r24
	
	if(rcv_slave_flag)
    17c4:	90 91 86 02 	lds	r25, 0x0286
    17c8:	99 23       	and	r25, r25
    17ca:	21 f0       	breq	.+8      	; 0x17d4 <__vector_54+0x26>
	{
		rcv_value_slave = buffer3;
    17cc:	80 93 89 02 	sts	0x0289, r24
		rcv_slave_flag = false;
    17d0:	10 92 86 02 	sts	0x0286, r1
	}
	if(buffer3 == START_BYTE_MASTER)
    17d4:	80 91 93 02 	lds	r24, 0x0293
    17d8:	8c 3f       	cpi	r24, 0xFC	; 252
    17da:	19 f4       	brne	.+6      	; 0x17e2 <__vector_54+0x34>
		rcv_slave_flag = true;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 86 02 	sts	0x0286, r24
}
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <__subsf3>:
    17f0:	50 58       	subi	r21, 0x80	; 128

000017f2 <__addsf3>:
    17f2:	bb 27       	eor	r27, r27
    17f4:	aa 27       	eor	r26, r26
    17f6:	0e d0       	rcall	.+28     	; 0x1814 <__addsf3x>
    17f8:	75 c1       	rjmp	.+746    	; 0x1ae4 <__fp_round>
    17fa:	66 d1       	rcall	.+716    	; 0x1ac8 <__fp_pscA>
    17fc:	30 f0       	brcs	.+12     	; 0x180a <__addsf3+0x18>
    17fe:	6b d1       	rcall	.+726    	; 0x1ad6 <__fp_pscB>
    1800:	20 f0       	brcs	.+8      	; 0x180a <__addsf3+0x18>
    1802:	31 f4       	brne	.+12     	; 0x1810 <__addsf3+0x1e>
    1804:	9f 3f       	cpi	r25, 0xFF	; 255
    1806:	11 f4       	brne	.+4      	; 0x180c <__addsf3+0x1a>
    1808:	1e f4       	brtc	.+6      	; 0x1810 <__addsf3+0x1e>
    180a:	5b c1       	rjmp	.+694    	; 0x1ac2 <__fp_nan>
    180c:	0e f4       	brtc	.+2      	; 0x1810 <__addsf3+0x1e>
    180e:	e0 95       	com	r30
    1810:	e7 fb       	bst	r30, 7
    1812:	51 c1       	rjmp	.+674    	; 0x1ab6 <__fp_inf>

00001814 <__addsf3x>:
    1814:	e9 2f       	mov	r30, r25
    1816:	77 d1       	rcall	.+750    	; 0x1b06 <__fp_split3>
    1818:	80 f3       	brcs	.-32     	; 0x17fa <__addsf3+0x8>
    181a:	ba 17       	cp	r27, r26
    181c:	62 07       	cpc	r22, r18
    181e:	73 07       	cpc	r23, r19
    1820:	84 07       	cpc	r24, r20
    1822:	95 07       	cpc	r25, r21
    1824:	18 f0       	brcs	.+6      	; 0x182c <__addsf3x+0x18>
    1826:	71 f4       	brne	.+28     	; 0x1844 <__addsf3x+0x30>
    1828:	9e f5       	brtc	.+102    	; 0x1890 <__addsf3x+0x7c>
    182a:	8f c1       	rjmp	.+798    	; 0x1b4a <__fp_zero>
    182c:	0e f4       	brtc	.+2      	; 0x1830 <__addsf3x+0x1c>
    182e:	e0 95       	com	r30
    1830:	0b 2e       	mov	r0, r27
    1832:	ba 2f       	mov	r27, r26
    1834:	a0 2d       	mov	r26, r0
    1836:	0b 01       	movw	r0, r22
    1838:	b9 01       	movw	r22, r18
    183a:	90 01       	movw	r18, r0
    183c:	0c 01       	movw	r0, r24
    183e:	ca 01       	movw	r24, r20
    1840:	a0 01       	movw	r20, r0
    1842:	11 24       	eor	r1, r1
    1844:	ff 27       	eor	r31, r31
    1846:	59 1b       	sub	r21, r25
    1848:	99 f0       	breq	.+38     	; 0x1870 <__addsf3x+0x5c>
    184a:	59 3f       	cpi	r21, 0xF9	; 249
    184c:	50 f4       	brcc	.+20     	; 0x1862 <__addsf3x+0x4e>
    184e:	50 3e       	cpi	r21, 0xE0	; 224
    1850:	68 f1       	brcs	.+90     	; 0x18ac <__addsf3x+0x98>
    1852:	1a 16       	cp	r1, r26
    1854:	f0 40       	sbci	r31, 0x00	; 0
    1856:	a2 2f       	mov	r26, r18
    1858:	23 2f       	mov	r18, r19
    185a:	34 2f       	mov	r19, r20
    185c:	44 27       	eor	r20, r20
    185e:	58 5f       	subi	r21, 0xF8	; 248
    1860:	f3 cf       	rjmp	.-26     	; 0x1848 <__addsf3x+0x34>
    1862:	46 95       	lsr	r20
    1864:	37 95       	ror	r19
    1866:	27 95       	ror	r18
    1868:	a7 95       	ror	r26
    186a:	f0 40       	sbci	r31, 0x00	; 0
    186c:	53 95       	inc	r21
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__addsf3x+0x4e>
    1870:	7e f4       	brtc	.+30     	; 0x1890 <__addsf3x+0x7c>
    1872:	1f 16       	cp	r1, r31
    1874:	ba 0b       	sbc	r27, r26
    1876:	62 0b       	sbc	r22, r18
    1878:	73 0b       	sbc	r23, r19
    187a:	84 0b       	sbc	r24, r20
    187c:	ba f0       	brmi	.+46     	; 0x18ac <__addsf3x+0x98>
    187e:	91 50       	subi	r25, 0x01	; 1
    1880:	a1 f0       	breq	.+40     	; 0x18aa <__addsf3x+0x96>
    1882:	ff 0f       	add	r31, r31
    1884:	bb 1f       	adc	r27, r27
    1886:	66 1f       	adc	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	c2 f7       	brpl	.-16     	; 0x187e <__addsf3x+0x6a>
    188e:	0e c0       	rjmp	.+28     	; 0x18ac <__addsf3x+0x98>
    1890:	ba 0f       	add	r27, r26
    1892:	62 1f       	adc	r22, r18
    1894:	73 1f       	adc	r23, r19
    1896:	84 1f       	adc	r24, r20
    1898:	48 f4       	brcc	.+18     	; 0x18ac <__addsf3x+0x98>
    189a:	87 95       	ror	r24
    189c:	77 95       	ror	r23
    189e:	67 95       	ror	r22
    18a0:	b7 95       	ror	r27
    18a2:	f7 95       	ror	r31
    18a4:	9e 3f       	cpi	r25, 0xFE	; 254
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <__addsf3x+0x96>
    18a8:	b3 cf       	rjmp	.-154    	; 0x1810 <__addsf3+0x1e>
    18aa:	93 95       	inc	r25
    18ac:	88 0f       	add	r24, r24
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <__addsf3x+0x9e>
    18b0:	99 27       	eor	r25, r25
    18b2:	ee 0f       	add	r30, r30
    18b4:	97 95       	ror	r25
    18b6:	87 95       	ror	r24
    18b8:	08 95       	ret

000018ba <__cmpsf2>:
    18ba:	d9 d0       	rcall	.+434    	; 0x1a6e <__fp_cmp>
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <__cmpsf2+0x6>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	08 95       	ret

000018c2 <__divsf3>:
    18c2:	0c d0       	rcall	.+24     	; 0x18dc <__divsf3x>
    18c4:	0f c1       	rjmp	.+542    	; 0x1ae4 <__fp_round>
    18c6:	07 d1       	rcall	.+526    	; 0x1ad6 <__fp_pscB>
    18c8:	40 f0       	brcs	.+16     	; 0x18da <__divsf3+0x18>
    18ca:	fe d0       	rcall	.+508    	; 0x1ac8 <__fp_pscA>
    18cc:	30 f0       	brcs	.+12     	; 0x18da <__divsf3+0x18>
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <__divsf3+0x16>
    18d0:	5f 3f       	cpi	r21, 0xFF	; 255
    18d2:	19 f0       	breq	.+6      	; 0x18da <__divsf3+0x18>
    18d4:	f0 c0       	rjmp	.+480    	; 0x1ab6 <__fp_inf>
    18d6:	51 11       	cpse	r21, r1
    18d8:	39 c1       	rjmp	.+626    	; 0x1b4c <__fp_szero>
    18da:	f3 c0       	rjmp	.+486    	; 0x1ac2 <__fp_nan>

000018dc <__divsf3x>:
    18dc:	14 d1       	rcall	.+552    	; 0x1b06 <__fp_split3>
    18de:	98 f3       	brcs	.-26     	; 0x18c6 <__divsf3+0x4>

000018e0 <__divsf3_pse>:
    18e0:	99 23       	and	r25, r25
    18e2:	c9 f3       	breq	.-14     	; 0x18d6 <__divsf3+0x14>
    18e4:	55 23       	and	r21, r21
    18e6:	b1 f3       	breq	.-20     	; 0x18d4 <__divsf3+0x12>
    18e8:	95 1b       	sub	r25, r21
    18ea:	55 0b       	sbc	r21, r21
    18ec:	bb 27       	eor	r27, r27
    18ee:	aa 27       	eor	r26, r26
    18f0:	62 17       	cp	r22, r18
    18f2:	73 07       	cpc	r23, r19
    18f4:	84 07       	cpc	r24, r20
    18f6:	38 f0       	brcs	.+14     	; 0x1906 <__divsf3_pse+0x26>
    18f8:	9f 5f       	subi	r25, 0xFF	; 255
    18fa:	5f 4f       	sbci	r21, 0xFF	; 255
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	44 1f       	adc	r20, r20
    1902:	aa 1f       	adc	r26, r26
    1904:	a9 f3       	breq	.-22     	; 0x18f0 <__divsf3_pse+0x10>
    1906:	33 d0       	rcall	.+102    	; 0x196e <__divsf3_pse+0x8e>
    1908:	0e 2e       	mov	r0, r30
    190a:	3a f0       	brmi	.+14     	; 0x191a <__divsf3_pse+0x3a>
    190c:	e0 e8       	ldi	r30, 0x80	; 128
    190e:	30 d0       	rcall	.+96     	; 0x1970 <__divsf3_pse+0x90>
    1910:	91 50       	subi	r25, 0x01	; 1
    1912:	50 40       	sbci	r21, 0x00	; 0
    1914:	e6 95       	lsr	r30
    1916:	00 1c       	adc	r0, r0
    1918:	ca f7       	brpl	.-14     	; 0x190c <__divsf3_pse+0x2c>
    191a:	29 d0       	rcall	.+82     	; 0x196e <__divsf3_pse+0x8e>
    191c:	fe 2f       	mov	r31, r30
    191e:	27 d0       	rcall	.+78     	; 0x196e <__divsf3_pse+0x8e>
    1920:	66 0f       	add	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	88 1f       	adc	r24, r24
    1926:	bb 1f       	adc	r27, r27
    1928:	26 17       	cp	r18, r22
    192a:	37 07       	cpc	r19, r23
    192c:	48 07       	cpc	r20, r24
    192e:	ab 07       	cpc	r26, r27
    1930:	b0 e8       	ldi	r27, 0x80	; 128
    1932:	09 f0       	breq	.+2      	; 0x1936 <__divsf3_pse+0x56>
    1934:	bb 0b       	sbc	r27, r27
    1936:	80 2d       	mov	r24, r0
    1938:	bf 01       	movw	r22, r30
    193a:	ff 27       	eor	r31, r31
    193c:	93 58       	subi	r25, 0x83	; 131
    193e:	5f 4f       	sbci	r21, 0xFF	; 255
    1940:	2a f0       	brmi	.+10     	; 0x194c <__divsf3_pse+0x6c>
    1942:	9e 3f       	cpi	r25, 0xFE	; 254
    1944:	51 05       	cpc	r21, r1
    1946:	68 f0       	brcs	.+26     	; 0x1962 <__divsf3_pse+0x82>
    1948:	b6 c0       	rjmp	.+364    	; 0x1ab6 <__fp_inf>
    194a:	00 c1       	rjmp	.+512    	; 0x1b4c <__fp_szero>
    194c:	5f 3f       	cpi	r21, 0xFF	; 255
    194e:	ec f3       	brlt	.-6      	; 0x194a <__divsf3_pse+0x6a>
    1950:	98 3e       	cpi	r25, 0xE8	; 232
    1952:	dc f3       	brlt	.-10     	; 0x194a <__divsf3_pse+0x6a>
    1954:	86 95       	lsr	r24
    1956:	77 95       	ror	r23
    1958:	67 95       	ror	r22
    195a:	b7 95       	ror	r27
    195c:	f7 95       	ror	r31
    195e:	9f 5f       	subi	r25, 0xFF	; 255
    1960:	c9 f7       	brne	.-14     	; 0x1954 <__divsf3_pse+0x74>
    1962:	88 0f       	add	r24, r24
    1964:	91 1d       	adc	r25, r1
    1966:	96 95       	lsr	r25
    1968:	87 95       	ror	r24
    196a:	97 f9       	bld	r25, 7
    196c:	08 95       	ret
    196e:	e1 e0       	ldi	r30, 0x01	; 1
    1970:	66 0f       	add	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	bb 1f       	adc	r27, r27
    1978:	62 17       	cp	r22, r18
    197a:	73 07       	cpc	r23, r19
    197c:	84 07       	cpc	r24, r20
    197e:	ba 07       	cpc	r27, r26
    1980:	20 f0       	brcs	.+8      	; 0x198a <__divsf3_pse+0xaa>
    1982:	62 1b       	sub	r22, r18
    1984:	73 0b       	sbc	r23, r19
    1986:	84 0b       	sbc	r24, r20
    1988:	ba 0b       	sbc	r27, r26
    198a:	ee 1f       	adc	r30, r30
    198c:	88 f7       	brcc	.-30     	; 0x1970 <__divsf3_pse+0x90>
    198e:	e0 95       	com	r30
    1990:	08 95       	ret

00001992 <__fixsfsi>:
    1992:	04 d0       	rcall	.+8      	; 0x199c <__fixunssfsi>
    1994:	68 94       	set
    1996:	b1 11       	cpse	r27, r1
    1998:	d9 c0       	rjmp	.+434    	; 0x1b4c <__fp_szero>
    199a:	08 95       	ret

0000199c <__fixunssfsi>:
    199c:	bc d0       	rcall	.+376    	; 0x1b16 <__fp_splitA>
    199e:	88 f0       	brcs	.+34     	; 0x19c2 <__fixunssfsi+0x26>
    19a0:	9f 57       	subi	r25, 0x7F	; 127
    19a2:	90 f0       	brcs	.+36     	; 0x19c8 <__fixunssfsi+0x2c>
    19a4:	b9 2f       	mov	r27, r25
    19a6:	99 27       	eor	r25, r25
    19a8:	b7 51       	subi	r27, 0x17	; 23
    19aa:	a0 f0       	brcs	.+40     	; 0x19d4 <__fixunssfsi+0x38>
    19ac:	d1 f0       	breq	.+52     	; 0x19e2 <__fixunssfsi+0x46>
    19ae:	66 0f       	add	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	1a f0       	brmi	.+6      	; 0x19be <__fixunssfsi+0x22>
    19b8:	ba 95       	dec	r27
    19ba:	c9 f7       	brne	.-14     	; 0x19ae <__fixunssfsi+0x12>
    19bc:	12 c0       	rjmp	.+36     	; 0x19e2 <__fixunssfsi+0x46>
    19be:	b1 30       	cpi	r27, 0x01	; 1
    19c0:	81 f0       	breq	.+32     	; 0x19e2 <__fixunssfsi+0x46>
    19c2:	c3 d0       	rcall	.+390    	; 0x1b4a <__fp_zero>
    19c4:	b1 e0       	ldi	r27, 0x01	; 1
    19c6:	08 95       	ret
    19c8:	c0 c0       	rjmp	.+384    	; 0x1b4a <__fp_zero>
    19ca:	67 2f       	mov	r22, r23
    19cc:	78 2f       	mov	r23, r24
    19ce:	88 27       	eor	r24, r24
    19d0:	b8 5f       	subi	r27, 0xF8	; 248
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <__fixunssfsi+0x46>
    19d4:	b9 3f       	cpi	r27, 0xF9	; 249
    19d6:	cc f3       	brlt	.-14     	; 0x19ca <__fixunssfsi+0x2e>
    19d8:	86 95       	lsr	r24
    19da:	77 95       	ror	r23
    19dc:	67 95       	ror	r22
    19de:	b3 95       	inc	r27
    19e0:	d9 f7       	brne	.-10     	; 0x19d8 <__fixunssfsi+0x3c>
    19e2:	3e f4       	brtc	.+14     	; 0x19f2 <__fixunssfsi+0x56>
    19e4:	90 95       	com	r25
    19e6:	80 95       	com	r24
    19e8:	70 95       	com	r23
    19ea:	61 95       	neg	r22
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	8f 4f       	sbci	r24, 0xFF	; 255
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	08 95       	ret

000019f4 <__floatunsisf>:
    19f4:	e8 94       	clt
    19f6:	09 c0       	rjmp	.+18     	; 0x1a0a <__floatsisf+0x12>

000019f8 <__floatsisf>:
    19f8:	97 fb       	bst	r25, 7
    19fa:	3e f4       	brtc	.+14     	; 0x1a0a <__floatsisf+0x12>
    19fc:	90 95       	com	r25
    19fe:	80 95       	com	r24
    1a00:	70 95       	com	r23
    1a02:	61 95       	neg	r22
    1a04:	7f 4f       	sbci	r23, 0xFF	; 255
    1a06:	8f 4f       	sbci	r24, 0xFF	; 255
    1a08:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0a:	99 23       	and	r25, r25
    1a0c:	a9 f0       	breq	.+42     	; 0x1a38 <__floatsisf+0x40>
    1a0e:	f9 2f       	mov	r31, r25
    1a10:	96 e9       	ldi	r25, 0x96	; 150
    1a12:	bb 27       	eor	r27, r27
    1a14:	93 95       	inc	r25
    1a16:	f6 95       	lsr	r31
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b7 95       	ror	r27
    1a20:	f1 11       	cpse	r31, r1
    1a22:	f8 cf       	rjmp	.-16     	; 0x1a14 <__floatsisf+0x1c>
    1a24:	fa f4       	brpl	.+62     	; 0x1a64 <__floatsisf+0x6c>
    1a26:	bb 0f       	add	r27, r27
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <__floatsisf+0x36>
    1a2a:	60 ff       	sbrs	r22, 0
    1a2c:	1b c0       	rjmp	.+54     	; 0x1a64 <__floatsisf+0x6c>
    1a2e:	6f 5f       	subi	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	16 c0       	rjmp	.+44     	; 0x1a64 <__floatsisf+0x6c>
    1a38:	88 23       	and	r24, r24
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <__floatsisf+0x48>
    1a3c:	96 e9       	ldi	r25, 0x96	; 150
    1a3e:	11 c0       	rjmp	.+34     	; 0x1a62 <__floatsisf+0x6a>
    1a40:	77 23       	and	r23, r23
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <__floatsisf+0x54>
    1a44:	9e e8       	ldi	r25, 0x8E	; 142
    1a46:	87 2f       	mov	r24, r23
    1a48:	76 2f       	mov	r23, r22
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <__floatsisf+0x5e>
    1a4c:	66 23       	and	r22, r22
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <__floatsisf+0x74>
    1a50:	96 e8       	ldi	r25, 0x86	; 134
    1a52:	86 2f       	mov	r24, r22
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	2a f0       	brmi	.+10     	; 0x1a64 <__floatsisf+0x6c>
    1a5a:	9a 95       	dec	r25
    1a5c:	66 0f       	add	r22, r22
    1a5e:	77 1f       	adc	r23, r23
    1a60:	88 1f       	adc	r24, r24
    1a62:	da f7       	brpl	.-10     	; 0x1a5a <__floatsisf+0x62>
    1a64:	88 0f       	add	r24, r24
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <__fp_cmp>:
    1a6e:	99 0f       	add	r25, r25
    1a70:	00 08       	sbc	r0, r0
    1a72:	55 0f       	add	r21, r21
    1a74:	aa 0b       	sbc	r26, r26
    1a76:	e0 e8       	ldi	r30, 0x80	; 128
    1a78:	fe ef       	ldi	r31, 0xFE	; 254
    1a7a:	16 16       	cp	r1, r22
    1a7c:	17 06       	cpc	r1, r23
    1a7e:	e8 07       	cpc	r30, r24
    1a80:	f9 07       	cpc	r31, r25
    1a82:	c0 f0       	brcs	.+48     	; 0x1ab4 <__fp_cmp+0x46>
    1a84:	12 16       	cp	r1, r18
    1a86:	13 06       	cpc	r1, r19
    1a88:	e4 07       	cpc	r30, r20
    1a8a:	f5 07       	cpc	r31, r21
    1a8c:	98 f0       	brcs	.+38     	; 0x1ab4 <__fp_cmp+0x46>
    1a8e:	62 1b       	sub	r22, r18
    1a90:	73 0b       	sbc	r23, r19
    1a92:	84 0b       	sbc	r24, r20
    1a94:	95 0b       	sbc	r25, r21
    1a96:	39 f4       	brne	.+14     	; 0x1aa6 <__fp_cmp+0x38>
    1a98:	0a 26       	eor	r0, r26
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <__fp_cmp+0x46>
    1a9c:	23 2b       	or	r18, r19
    1a9e:	24 2b       	or	r18, r20
    1aa0:	25 2b       	or	r18, r21
    1aa2:	21 f4       	brne	.+8      	; 0x1aac <__fp_cmp+0x3e>
    1aa4:	08 95       	ret
    1aa6:	0a 26       	eor	r0, r26
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <__fp_cmp+0x3e>
    1aaa:	a1 40       	sbci	r26, 0x01	; 1
    1aac:	a6 95       	lsr	r26
    1aae:	8f ef       	ldi	r24, 0xFF	; 255
    1ab0:	81 1d       	adc	r24, r1
    1ab2:	81 1d       	adc	r24, r1
    1ab4:	08 95       	ret

00001ab6 <__fp_inf>:
    1ab6:	97 f9       	bld	r25, 7
    1ab8:	9f 67       	ori	r25, 0x7F	; 127
    1aba:	80 e8       	ldi	r24, 0x80	; 128
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	08 95       	ret

00001ac2 <__fp_nan>:
    1ac2:	9f ef       	ldi	r25, 0xFF	; 255
    1ac4:	80 ec       	ldi	r24, 0xC0	; 192
    1ac6:	08 95       	ret

00001ac8 <__fp_pscA>:
    1ac8:	00 24       	eor	r0, r0
    1aca:	0a 94       	dec	r0
    1acc:	16 16       	cp	r1, r22
    1ace:	17 06       	cpc	r1, r23
    1ad0:	18 06       	cpc	r1, r24
    1ad2:	09 06       	cpc	r0, r25
    1ad4:	08 95       	ret

00001ad6 <__fp_pscB>:
    1ad6:	00 24       	eor	r0, r0
    1ad8:	0a 94       	dec	r0
    1ada:	12 16       	cp	r1, r18
    1adc:	13 06       	cpc	r1, r19
    1ade:	14 06       	cpc	r1, r20
    1ae0:	05 06       	cpc	r0, r21
    1ae2:	08 95       	ret

00001ae4 <__fp_round>:
    1ae4:	09 2e       	mov	r0, r25
    1ae6:	03 94       	inc	r0
    1ae8:	00 0c       	add	r0, r0
    1aea:	11 f4       	brne	.+4      	; 0x1af0 <__fp_round+0xc>
    1aec:	88 23       	and	r24, r24
    1aee:	52 f0       	brmi	.+20     	; 0x1b04 <__fp_round+0x20>
    1af0:	bb 0f       	add	r27, r27
    1af2:	40 f4       	brcc	.+16     	; 0x1b04 <__fp_round+0x20>
    1af4:	bf 2b       	or	r27, r31
    1af6:	11 f4       	brne	.+4      	; 0x1afc <__fp_round+0x18>
    1af8:	60 ff       	sbrs	r22, 0
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <__fp_round+0x20>
    1afc:	6f 5f       	subi	r22, 0xFF	; 255
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	8f 4f       	sbci	r24, 0xFF	; 255
    1b02:	9f 4f       	sbci	r25, 0xFF	; 255
    1b04:	08 95       	ret

00001b06 <__fp_split3>:
    1b06:	57 fd       	sbrc	r21, 7
    1b08:	90 58       	subi	r25, 0x80	; 128
    1b0a:	44 0f       	add	r20, r20
    1b0c:	55 1f       	adc	r21, r21
    1b0e:	59 f0       	breq	.+22     	; 0x1b26 <__fp_splitA+0x10>
    1b10:	5f 3f       	cpi	r21, 0xFF	; 255
    1b12:	71 f0       	breq	.+28     	; 0x1b30 <__fp_splitA+0x1a>
    1b14:	47 95       	ror	r20

00001b16 <__fp_splitA>:
    1b16:	88 0f       	add	r24, r24
    1b18:	97 fb       	bst	r25, 7
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	61 f0       	breq	.+24     	; 0x1b36 <__fp_splitA+0x20>
    1b1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b20:	79 f0       	breq	.+30     	; 0x1b40 <__fp_splitA+0x2a>
    1b22:	87 95       	ror	r24
    1b24:	08 95       	ret
    1b26:	12 16       	cp	r1, r18
    1b28:	13 06       	cpc	r1, r19
    1b2a:	14 06       	cpc	r1, r20
    1b2c:	55 1f       	adc	r21, r21
    1b2e:	f2 cf       	rjmp	.-28     	; 0x1b14 <__fp_split3+0xe>
    1b30:	46 95       	lsr	r20
    1b32:	f1 df       	rcall	.-30     	; 0x1b16 <__fp_splitA>
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <__fp_splitA+0x30>
    1b36:	16 16       	cp	r1, r22
    1b38:	17 06       	cpc	r1, r23
    1b3a:	18 06       	cpc	r1, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	f1 cf       	rjmp	.-30     	; 0x1b22 <__fp_splitA+0xc>
    1b40:	86 95       	lsr	r24
    1b42:	71 05       	cpc	r23, r1
    1b44:	61 05       	cpc	r22, r1
    1b46:	08 94       	sec
    1b48:	08 95       	ret

00001b4a <__fp_zero>:
    1b4a:	e8 94       	clt

00001b4c <__fp_szero>:
    1b4c:	bb 27       	eor	r27, r27
    1b4e:	66 27       	eor	r22, r22
    1b50:	77 27       	eor	r23, r23
    1b52:	cb 01       	movw	r24, r22
    1b54:	97 f9       	bld	r25, 7
    1b56:	08 95       	ret

00001b58 <__mulsf3>:
    1b58:	0b d0       	rcall	.+22     	; 0x1b70 <__mulsf3x>
    1b5a:	c4 cf       	rjmp	.-120    	; 0x1ae4 <__fp_round>
    1b5c:	b5 df       	rcall	.-150    	; 0x1ac8 <__fp_pscA>
    1b5e:	28 f0       	brcs	.+10     	; 0x1b6a <__mulsf3+0x12>
    1b60:	ba df       	rcall	.-140    	; 0x1ad6 <__fp_pscB>
    1b62:	18 f0       	brcs	.+6      	; 0x1b6a <__mulsf3+0x12>
    1b64:	95 23       	and	r25, r21
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <__mulsf3+0x12>
    1b68:	a6 cf       	rjmp	.-180    	; 0x1ab6 <__fp_inf>
    1b6a:	ab cf       	rjmp	.-170    	; 0x1ac2 <__fp_nan>
    1b6c:	11 24       	eor	r1, r1
    1b6e:	ee cf       	rjmp	.-36     	; 0x1b4c <__fp_szero>

00001b70 <__mulsf3x>:
    1b70:	ca df       	rcall	.-108    	; 0x1b06 <__fp_split3>
    1b72:	a0 f3       	brcs	.-24     	; 0x1b5c <__mulsf3+0x4>

00001b74 <__mulsf3_pse>:
    1b74:	95 9f       	mul	r25, r21
    1b76:	d1 f3       	breq	.-12     	; 0x1b6c <__mulsf3+0x14>
    1b78:	95 0f       	add	r25, r21
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	55 1f       	adc	r21, r21
    1b7e:	62 9f       	mul	r22, r18
    1b80:	f0 01       	movw	r30, r0
    1b82:	72 9f       	mul	r23, r18
    1b84:	bb 27       	eor	r27, r27
    1b86:	f0 0d       	add	r31, r0
    1b88:	b1 1d       	adc	r27, r1
    1b8a:	63 9f       	mul	r22, r19
    1b8c:	aa 27       	eor	r26, r26
    1b8e:	f0 0d       	add	r31, r0
    1b90:	b1 1d       	adc	r27, r1
    1b92:	aa 1f       	adc	r26, r26
    1b94:	64 9f       	mul	r22, r20
    1b96:	66 27       	eor	r22, r22
    1b98:	b0 0d       	add	r27, r0
    1b9a:	a1 1d       	adc	r26, r1
    1b9c:	66 1f       	adc	r22, r22
    1b9e:	82 9f       	mul	r24, r18
    1ba0:	22 27       	eor	r18, r18
    1ba2:	b0 0d       	add	r27, r0
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	62 1f       	adc	r22, r18
    1ba8:	73 9f       	mul	r23, r19
    1baa:	b0 0d       	add	r27, r0
    1bac:	a1 1d       	adc	r26, r1
    1bae:	62 1f       	adc	r22, r18
    1bb0:	83 9f       	mul	r24, r19
    1bb2:	a0 0d       	add	r26, r0
    1bb4:	61 1d       	adc	r22, r1
    1bb6:	22 1f       	adc	r18, r18
    1bb8:	74 9f       	mul	r23, r20
    1bba:	33 27       	eor	r19, r19
    1bbc:	a0 0d       	add	r26, r0
    1bbe:	61 1d       	adc	r22, r1
    1bc0:	23 1f       	adc	r18, r19
    1bc2:	84 9f       	mul	r24, r20
    1bc4:	60 0d       	add	r22, r0
    1bc6:	21 1d       	adc	r18, r1
    1bc8:	82 2f       	mov	r24, r18
    1bca:	76 2f       	mov	r23, r22
    1bcc:	6a 2f       	mov	r22, r26
    1bce:	11 24       	eor	r1, r1
    1bd0:	9f 57       	subi	r25, 0x7F	; 127
    1bd2:	50 40       	sbci	r21, 0x00	; 0
    1bd4:	8a f0       	brmi	.+34     	; 0x1bf8 <__mulsf3_pse+0x84>
    1bd6:	e1 f0       	breq	.+56     	; 0x1c10 <__mulsf3_pse+0x9c>
    1bd8:	88 23       	and	r24, r24
    1bda:	4a f0       	brmi	.+18     	; 0x1bee <__mulsf3_pse+0x7a>
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	bb 1f       	adc	r27, r27
    1be2:	66 1f       	adc	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	91 50       	subi	r25, 0x01	; 1
    1bea:	50 40       	sbci	r21, 0x00	; 0
    1bec:	a9 f7       	brne	.-22     	; 0x1bd8 <__mulsf3_pse+0x64>
    1bee:	9e 3f       	cpi	r25, 0xFE	; 254
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	70 f0       	brcs	.+28     	; 0x1c10 <__mulsf3_pse+0x9c>
    1bf4:	60 cf       	rjmp	.-320    	; 0x1ab6 <__fp_inf>
    1bf6:	aa cf       	rjmp	.-172    	; 0x1b4c <__fp_szero>
    1bf8:	5f 3f       	cpi	r21, 0xFF	; 255
    1bfa:	ec f3       	brlt	.-6      	; 0x1bf6 <__mulsf3_pse+0x82>
    1bfc:	98 3e       	cpi	r25, 0xE8	; 232
    1bfe:	dc f3       	brlt	.-10     	; 0x1bf6 <__mulsf3_pse+0x82>
    1c00:	86 95       	lsr	r24
    1c02:	77 95       	ror	r23
    1c04:	67 95       	ror	r22
    1c06:	b7 95       	ror	r27
    1c08:	f7 95       	ror	r31
    1c0a:	e7 95       	ror	r30
    1c0c:	9f 5f       	subi	r25, 0xFF	; 255
    1c0e:	c1 f7       	brne	.-16     	; 0x1c00 <__mulsf3_pse+0x8c>
    1c10:	fe 2b       	or	r31, r30
    1c12:	88 0f       	add	r24, r24
    1c14:	91 1d       	adc	r25, r1
    1c16:	96 95       	lsr	r25
    1c18:	87 95       	ror	r24
    1c1a:	97 f9       	bld	r25, 7
    1c1c:	08 95       	ret

00001c1e <__tablejump2__>:
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	88 1f       	adc	r24, r24
    1c24:	8b bf       	out	0x3b, r24	; 59
    1c26:	07 90       	elpm	r0, Z+
    1c28:	f6 91       	elpm	r31, Z
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	19 94       	eijmp

00001c2e <_exit>:
    1c2e:	f8 94       	cli

00001c30 <__stop_program>:
    1c30:	ff cf       	rjmp	.-2      	; 0x1c30 <__stop_program>
